
PlantPotProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008744  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000248a4  08008930  08008930  00018930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d1d4  0802d1d4  00040208  2**0
                  CONTENTS
  4 .ARM          00000000  0802d1d4  0802d1d4  00040208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802d1d4  0802d1d4  00040208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d1d4  0802d1d4  0003d1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d1d8  0802d1d8  0003d1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0802d1dc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000208  0802d3e4  00040208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0802d3e4  000404e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00040208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc0d  00000000  00000000  00040231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a87  00000000  00000000  0005ce3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00013fe0  00000000  00000000  000608c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  000748a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004358  00000000  00000000  000757a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003bb6  00000000  00000000  00079b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd8a  00000000  00000000  0007d6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a469f  00000000  00000000  0009b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fadf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000466c  00000000  00000000  0013fb30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000208 	.word	0x20000208
 8000204:	00000000 	.word	0x00000000
 8000208:	08008914 	.word	0x08008914

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000020c 	.word	0x2000020c
 8000224:	08008914 	.word	0x08008914

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_d2lz>:
 80010fc:	b538      	push	{r3, r4, r5, lr}
 80010fe:	4605      	mov	r5, r0
 8001100:	460c      	mov	r4, r1
 8001102:	2200      	movs	r2, #0
 8001104:	2300      	movs	r3, #0
 8001106:	4628      	mov	r0, r5
 8001108:	4621      	mov	r1, r4
 800110a:	f7ff fcc3 	bl	8000a94 <__aeabi_dcmplt>
 800110e:	b928      	cbnz	r0, 800111c <__aeabi_d2lz+0x20>
 8001110:	4628      	mov	r0, r5
 8001112:	4621      	mov	r1, r4
 8001114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001118:	f000 b80a 	b.w	8001130 <__aeabi_d2ulz>
 800111c:	4628      	mov	r0, r5
 800111e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001122:	f000 f805 	bl	8001130 <__aeabi_d2ulz>
 8001126:	4240      	negs	r0, r0
 8001128:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800112c:	bd38      	pop	{r3, r4, r5, pc}
 800112e:	bf00      	nop

08001130 <__aeabi_d2ulz>:
 8001130:	b5d0      	push	{r4, r6, r7, lr}
 8001132:	2200      	movs	r2, #0
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <__aeabi_d2ulz+0x34>)
 8001136:	4606      	mov	r6, r0
 8001138:	460f      	mov	r7, r1
 800113a:	f7ff fa39 	bl	80005b0 <__aeabi_dmul>
 800113e:	f7ff fd0f 	bl	8000b60 <__aeabi_d2uiz>
 8001142:	4604      	mov	r4, r0
 8001144:	f7ff f9ba 	bl	80004bc <__aeabi_ui2d>
 8001148:	2200      	movs	r2, #0
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <__aeabi_d2ulz+0x38>)
 800114c:	f7ff fa30 	bl	80005b0 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4630      	mov	r0, r6
 8001156:	4639      	mov	r1, r7
 8001158:	f7ff f872 	bl	8000240 <__aeabi_dsub>
 800115c:	f7ff fd00 	bl	8000b60 <__aeabi_d2uiz>
 8001160:	4621      	mov	r1, r4
 8001162:	bdd0      	pop	{r4, r6, r7, pc}
 8001164:	3df00000 	.word	0x3df00000
 8001168:	41f00000 	.word	0x41f00000

0800116c <table_lamp>:
	HAL_Delay(100);
	drawImage(peashooter_004_logo);
//	drawImage(peashooter_005_logo);
}

int table_lamp() {
 800116c:	b510      	push	{r4, lr}
	int light_value;
	int pin;
	light_value = HAL_ADC_GetValue(&hadc2);
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <table_lamp+0x40>)
 8001170:	f001 fc74 	bl	8002a5c <HAL_ADC_GetValue>
 8001174:	4604      	mov	r4, r0
	lcdPrintf("Light: %d \r\n", light_value);
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <table_lamp+0x44>)
 8001178:	4621      	mov	r1, r4
 800117a:	f001 fa27 	bl	80025cc <lcdPrintf>
	pin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 800117e:	2140      	movs	r1, #64	; 0x40
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <table_lamp+0x48>)
 8001182:	f002 f895 	bl	80032b0 <HAL_GPIO_ReadPin>
 8001186:	4601      	mov	r1, r0
	lcdPrintf("Motion: %d\r\n", pin);
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <table_lamp+0x4c>)
 800118a:	f001 fa1f 	bl	80025cc <lcdPrintf>
	if (light_value > 2000) {
 800118e:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8001192:	dc01      	bgt.n	8001198 <table_lamp+0x2c>
		} else {
			return 0;
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
		}
	} else {
		return 0;
 8001194:	2000      	movs	r0, #0
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
	}
}
 8001196:	bd10      	pop	{r4, pc}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) { // motion sensor
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <table_lamp+0x48>)
 800119c:	f002 f888 	bl	80032b0 <HAL_GPIO_ReadPin>
 80011a0:	f1a0 0001 	sub.w	r0, r0, #1
 80011a4:	fab0 f080 	clz	r0, r0
 80011a8:	0940      	lsrs	r0, r0, #5
}
 80011aa:	bd10      	pop	{r4, pc}
 80011ac:	20000268 	.word	0x20000268
 80011b0:	08008930 	.word	0x08008930
 80011b4:	40010800 	.word	0x40010800
 80011b8:	08008940 	.word	0x08008940

080011bc <DHT11_Start>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
		;
}

uint8_t DHT11_Start(void) {
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t Response = 0;
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
	GPIO_InitStructPrivate.Pin = GPIO_PIN_4;
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2302      	movs	r3, #2
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 80011c0:	2400      	movs	r4, #0
	GPIO_InitStructPrivate.Pin = GPIO_PIN_4;
 80011c2:	2610      	movs	r6, #16
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2701      	movs	r7, #1
uint8_t DHT11_Start(void) {
 80011c6:	b085      	sub	sp, #20
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructPrivate); // set the pin as output
 80011c8:	4669      	mov	r1, sp
 80011ca:	482a      	ldr	r0, [pc, #168]	; (8001274 <DHT11_Start+0xb8>)
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	9303      	str	r3, [sp, #12]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	e9cd 6700 	strd	r6, r7, [sp]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 80011d2:	9402      	str	r4, [sp, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructPrivate); // set the pin as output
 80011d4:	f001 ff44 	bl	8003060 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);   // pull the pin low
 80011d8:	4622      	mov	r2, r4
 80011da:	4631      	mov	r1, r6
 80011dc:	4825      	ldr	r0, [pc, #148]	; (8001274 <DHT11_Start+0xb8>)
 80011de:	f002 f86d 	bl	80032bc <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80011e2:	4d25      	ldr	r5, [pc, #148]	; (8001278 <DHT11_Start+0xbc>)
	HAL_Delay(20);   // wait for 20ms
 80011e4:	2014      	movs	r0, #20
 80011e6:	f001 fb75 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);   // pull the pin high
 80011ea:	463a      	mov	r2, r7
 80011ec:	4631      	mov	r1, r6
 80011ee:	4821      	ldr	r0, [pc, #132]	; (8001274 <DHT11_Start+0xb8>)
 80011f0:	f002 f864 	bl	80032bc <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80011f4:	682a      	ldr	r2, [r5, #0]
 80011f6:	6254      	str	r4, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 80011f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80011fa:	2b1d      	cmp	r3, #29
 80011fc:	d9fc      	bls.n	80011f8 <DHT11_Start+0x3c>
	microDelay(30);   // wait for 30us
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80011fe:	2400      	movs	r4, #0
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001200:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructPrivate); // set the pin as input
 8001202:	4669      	mov	r1, sp
 8001204:	481b      	ldr	r0, [pc, #108]	; (8001274 <DHT11_Start+0xb8>)
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001206:	e9cd 4301 	strd	r4, r3, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructPrivate); // set the pin as input
 800120a:	f001 ff29 	bl	8003060 <HAL_GPIO_Init>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800120e:	682a      	ldr	r2, [r5, #0]
 8001210:	6254      	str	r4, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8001212:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001214:	2b27      	cmp	r3, #39	; 0x27
 8001216:	d9fc      	bls.n	8001212 <DHT11_Start+0x56>
	microDelay(40);
	if (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4))) {
 8001218:	2110      	movs	r1, #16
 800121a:	4816      	ldr	r0, [pc, #88]	; (8001274 <DHT11_Start+0xb8>)
 800121c:	f002 f848 	bl	80032b0 <HAL_GPIO_ReadPin>
 8001220:	bb30      	cbnz	r0, 8001270 <DHT11_Start+0xb4>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001222:	682a      	ldr	r2, [r5, #0]
 8001224:	6250      	str	r0, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8001226:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001228:	2b4f      	cmp	r3, #79	; 0x4f
 800122a:	d9fc      	bls.n	8001226 <DHT11_Start+0x6a>
		microDelay(80);
		if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)))
 800122c:	2110      	movs	r1, #16
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <DHT11_Start+0xb8>)
 8001230:	f002 f83e 	bl	80032b0 <HAL_GPIO_ReadPin>
	uint8_t Response = 0;
 8001234:	1e07      	subs	r7, r0, #0
 8001236:	bf18      	it	ne
 8001238:	2701      	movne	r7, #1
			Response = 1;
	}
	pMillis = HAL_GetTick();
 800123a:	f001 fb45 	bl	80028c8 <HAL_GetTick>
 800123e:	4d0f      	ldr	r5, [pc, #60]	; (800127c <DHT11_Start+0xc0>)
	cMillis = HAL_GetTick();
 8001240:	4c0f      	ldr	r4, [pc, #60]	; (8001280 <DHT11_Start+0xc4>)
	pMillis = HAL_GetTick();
 8001242:	6028      	str	r0, [r5, #0]
	cMillis = HAL_GetTick();
 8001244:	f001 fb40 	bl	80028c8 <HAL_GetTick>
	while ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)) && pMillis + 2 > cMillis) {
 8001248:	4e0a      	ldr	r6, [pc, #40]	; (8001274 <DHT11_Start+0xb8>)
	cMillis = HAL_GetTick();
 800124a:	6020      	str	r0, [r4, #0]
	while ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)) && pMillis + 2 > cMillis) {
 800124c:	e007      	b.n	800125e <DHT11_Start+0xa2>
 800124e:	682b      	ldr	r3, [r5, #0]
 8001250:	6822      	ldr	r2, [r4, #0]
 8001252:	3302      	adds	r3, #2
 8001254:	4293      	cmp	r3, r2
 8001256:	d908      	bls.n	800126a <DHT11_Start+0xae>
		cMillis = HAL_GetTick();
 8001258:	f001 fb36 	bl	80028c8 <HAL_GetTick>
 800125c:	6020      	str	r0, [r4, #0]
	while ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)) && pMillis + 2 > cMillis) {
 800125e:	2110      	movs	r1, #16
 8001260:	4630      	mov	r0, r6
 8001262:	f002 f825 	bl	80032b0 <HAL_GPIO_ReadPin>
 8001266:	2800      	cmp	r0, #0
 8001268:	d1f1      	bne.n	800124e <DHT11_Start+0x92>
	}
	return Response;
}
 800126a:	4638      	mov	r0, r7
 800126c:	b005      	add	sp, #20
 800126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t Response = 0;
 8001270:	2700      	movs	r7, #0
 8001272:	e7e2      	b.n	800123a <DHT11_Start+0x7e>
 8001274:	40011000 	.word	0x40011000
 8001278:	200002e0 	.word	0x200002e0
 800127c:	200003b0 	.word	0x200003b0
 8001280:	20000230 	.word	0x20000230

08001284 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8001284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001288:	f04f 0800 	mov.w	r8, #0
 800128c:	2707      	movs	r7, #7
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800128e:	46c1      	mov	r9, r8
 8001290:	4e24      	ldr	r6, [pc, #144]	; (8001324 <DHT11_Read+0xa0>)
 8001292:	4c25      	ldr	r4, [pc, #148]	; (8001328 <DHT11_Read+0xa4>)
 8001294:	f8df a094 	ldr.w	sl, [pc, #148]	; 800132c <DHT11_Read+0xa8>
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
		pMillis = HAL_GetTick();
		cMillis = HAL_GetTick();
		while (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)) && pMillis + 2 > cMillis) { // wait for the pin to go high
 8001298:	4d25      	ldr	r5, [pc, #148]	; (8001330 <DHT11_Read+0xac>)
		pMillis = HAL_GetTick();
 800129a:	f001 fb15 	bl	80028c8 <HAL_GetTick>
 800129e:	6030      	str	r0, [r6, #0]
		cMillis = HAL_GetTick();
 80012a0:	f001 fb12 	bl	80028c8 <HAL_GetTick>
 80012a4:	6020      	str	r0, [r4, #0]
		while (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)) && pMillis + 2 > cMillis) { // wait for the pin to go high
 80012a6:	e007      	b.n	80012b8 <DHT11_Read+0x34>
 80012a8:	6833      	ldr	r3, [r6, #0]
 80012aa:	6822      	ldr	r2, [r4, #0]
 80012ac:	3302      	adds	r3, #2
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d908      	bls.n	80012c4 <DHT11_Read+0x40>
			cMillis = HAL_GetTick();
 80012b2:	f001 fb09 	bl	80028c8 <HAL_GetTick>
 80012b6:	6020      	str	r0, [r4, #0]
		while (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)) && pMillis + 2 > cMillis) { // wait for the pin to go high
 80012b8:	2110      	movs	r1, #16
 80012ba:	4628      	mov	r0, r5
 80012bc:	f001 fff8 	bl	80032b0 <HAL_GPIO_ReadPin>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d0f1      	beq.n	80012a8 <DHT11_Read+0x24>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80012c4:	f8da 2000 	ldr.w	r2, [sl]
 80012c8:	f8c2 9024 	str.w	r9, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 80012cc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80012ce:	2b27      	cmp	r3, #39	; 0x27
 80012d0:	d9fc      	bls.n	80012cc <DHT11_Read+0x48>
		}
		microDelay(40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4))) // if the pin is low
 80012d2:	2110      	movs	r1, #16
 80012d4:	4628      	mov	r0, r5
 80012d6:	f001 ffeb 	bl	80032b0 <HAL_GPIO_ReadPin>
			b &= ~(1 << (7 - a));
 80012da:	2301      	movs	r3, #1
 80012dc:	40bb      	lsls	r3, r7
		if (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4))) // if the pin is low
 80012de:	b9d8      	cbnz	r0, 8001318 <DHT11_Read+0x94>
			b &= ~(1 << (7 - a));
 80012e0:	ea28 0803 	bic.w	r8, r8, r3
		else
			b |= (1 << (7 - a));
		pMillis = HAL_GetTick();
 80012e4:	f001 faf0 	bl	80028c8 <HAL_GetTick>
 80012e8:	6030      	str	r0, [r6, #0]
		cMillis = HAL_GetTick();
 80012ea:	f001 faed 	bl	80028c8 <HAL_GetTick>
 80012ee:	6020      	str	r0, [r4, #0]
		while ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)) && pMillis + 2 > cMillis) { // wait for the pin to go low
 80012f0:	e007      	b.n	8001302 <DHT11_Read+0x7e>
 80012f2:	6833      	ldr	r3, [r6, #0]
 80012f4:	6822      	ldr	r2, [r4, #0]
 80012f6:	3302      	adds	r3, #2
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d908      	bls.n	800130e <DHT11_Read+0x8a>
			cMillis = HAL_GetTick();
 80012fc:	f001 fae4 	bl	80028c8 <HAL_GetTick>
 8001300:	6020      	str	r0, [r4, #0]
		while ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)) && pMillis + 2 > cMillis) { // wait for the pin to go low
 8001302:	2110      	movs	r1, #16
 8001304:	4628      	mov	r0, r5
 8001306:	f001 ffd3 	bl	80032b0 <HAL_GPIO_ReadPin>
 800130a:	2800      	cmp	r0, #0
 800130c:	d1f1      	bne.n	80012f2 <DHT11_Read+0x6e>
	for (a = 0; a < 8; a++) {
 800130e:	3f01      	subs	r7, #1
 8001310:	d2c3      	bcs.n	800129a <DHT11_Read+0x16>
		}
	}
	return b;
}
 8001312:	4640      	mov	r0, r8
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			b |= (1 << (7 - a));
 8001318:	ea43 0808 	orr.w	r8, r3, r8
 800131c:	fa5f f888 	uxtb.w	r8, r8
 8001320:	e7e0      	b.n	80012e4 <DHT11_Read+0x60>
 8001322:	bf00      	nop
 8001324:	200003b0 	.word	0x200003b0
 8001328:	20000230 	.word	0x20000230
 800132c:	200002e0 	.word	0x200002e0
 8001330:	40011000 	.word	0x40011000

08001334 <displayHumidityTemperature.part.0>:
void displayHumidityTemperature() {
 8001334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		RHI = DHT11_Read(); // Relative humidity integral
 8001338:	f7ff ffa4 	bl	8001284 <DHT11_Read>
 800133c:	4f2f      	ldr	r7, [pc, #188]	; (80013fc <displayHumidityTemperature.part.0+0xc8>)
		RHD = DHT11_Read(); // Relative humidity decimal
 800133e:	4d30      	ldr	r5, [pc, #192]	; (8001400 <displayHumidityTemperature.part.0+0xcc>)
		RHI = DHT11_Read(); // Relative humidity integral
 8001340:	7038      	strb	r0, [r7, #0]
		RHD = DHT11_Read(); // Relative humidity decimal
 8001342:	f7ff ff9f 	bl	8001284 <DHT11_Read>
 8001346:	7028      	strb	r0, [r5, #0]
		TCI = DHT11_Read(); // Celsius integral
 8001348:	f7ff ff9c 	bl	8001284 <DHT11_Read>
 800134c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8001404 <displayHumidityTemperature.part.0+0xd0>
		TCD = DHT11_Read(); // Celsius decimal
 8001350:	4c2d      	ldr	r4, [pc, #180]	; (8001408 <displayHumidityTemperature.part.0+0xd4>)
		TCI = DHT11_Read(); // Celsius integral
 8001352:	f888 0000 	strb.w	r0, [r8]
		TCD = DHT11_Read(); // Celsius decimal
 8001356:	f7ff ff95 	bl	8001284 <DHT11_Read>
 800135a:	7020      	strb	r0, [r4, #0]
		SUM = DHT11_Read(); // Check sum
 800135c:	f7ff ff92 	bl	8001284 <DHT11_Read>
 8001360:	4602      	mov	r2, r0
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <displayHumidityTemperature.part.0+0xd8>)
		tCelsius = (float) TCI + (float) (TCD / 10.0);
 8001364:	7820      	ldrb	r0, [r4, #0]
		SUM = DHT11_Read(); // Check sum
 8001366:	701a      	strb	r2, [r3, #0]
		tCelsius = (float) TCI + (float) (TCD / 10.0);
 8001368:	f7ff f8b8 	bl	80004dc <__aeabi_i2d>
 800136c:	2200      	movs	r2, #0
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <displayHumidityTemperature.part.0+0xdc>)
 8001370:	f7ff fa48 	bl	8000804 <__aeabi_ddiv>
 8001374:	f7ff fc14 	bl	8000ba0 <__aeabi_d2f>
 8001378:	4604      	mov	r4, r0
 800137a:	f898 0000 	ldrb.w	r0, [r8]
 800137e:	f7ff fd15 	bl	8000dac <__aeabi_ui2f>
 8001382:	4601      	mov	r1, r0
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff fc61 	bl	8000c4c <__addsf3>
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <displayHumidityTemperature.part.0+0xe0>)
		tFahrenheit = tCelsius * 9 / 5 + 32;
 800138c:	4922      	ldr	r1, [pc, #136]	; (8001418 <displayHumidityTemperature.part.0+0xe4>)
		tCelsius = (float) TCI + (float) (TCD / 10.0);
 800138e:	6018      	str	r0, [r3, #0]
 8001390:	4604      	mov	r4, r0
		tFahrenheit = tCelsius * 9 / 5 + 32;
 8001392:	f7ff fd63 	bl	8000e5c <__aeabi_fmul>
 8001396:	4921      	ldr	r1, [pc, #132]	; (800141c <displayHumidityTemperature.part.0+0xe8>)
 8001398:	f7ff fe14 	bl	8000fc4 <__aeabi_fdiv>
 800139c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80013a0:	f7ff fc54 	bl	8000c4c <__addsf3>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001420 <displayHumidityTemperature.part.0+0xec>
		RH = (float) RHI + (float) (RHD / 10.0);
 80013aa:	7828      	ldrb	r0, [r5, #0]
		tFahrenheit = tCelsius * 9 / 5 + 32;
 80013ac:	f8c9 3000 	str.w	r3, [r9]
		RH = (float) RHI + (float) (RHD / 10.0);
 80013b0:	f7ff f894 	bl	80004dc <__aeabi_i2d>
 80013b4:	2200      	movs	r2, #0
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <displayHumidityTemperature.part.0+0xdc>)
 80013b8:	f7ff fa24 	bl	8000804 <__aeabi_ddiv>
 80013bc:	f7ff fbf0 	bl	8000ba0 <__aeabi_d2f>
 80013c0:	4605      	mov	r5, r0
 80013c2:	7838      	ldrb	r0, [r7, #0]
 80013c4:	f7ff fcf2 	bl	8000dac <__aeabi_ui2f>
 80013c8:	4601      	mov	r1, r0
 80013ca:	4628      	mov	r0, r5
 80013cc:	f7ff fc3e 	bl	8000c4c <__addsf3>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4e14      	ldr	r6, [pc, #80]	; (8001424 <displayHumidityTemperature.part.0+0xf0>)
		lcdPrintf("Temperature: %.1f \r\n", tCelsius);
 80013d4:	4620      	mov	r0, r4
		RH = (float) RHI + (float) (RHD / 10.0);
 80013d6:	6033      	str	r3, [r6, #0]
		lcdPrintf("Temperature: %.1f \r\n", tCelsius);
 80013d8:	f7ff f892 	bl	8000500 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <displayHumidityTemperature.part.0+0xf4>)
 80013e2:	f001 f8f3 	bl	80025cc <lcdPrintf>
		lcdPrintf("Humidity:    %.1f \r\n", RH);
 80013e6:	6830      	ldr	r0, [r6, #0]
 80013e8:	f7ff f88a 	bl	8000500 <__aeabi_f2d>
}
 80013ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		lcdPrintf("Humidity:    %.1f \r\n", RH);
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <displayHumidityTemperature.part.0+0xf8>)
 80013f6:	f001 b8e9 	b.w	80025cc <lcdPrintf>
 80013fa:	bf00      	nop
 80013fc:	20000229 	.word	0x20000229
 8001400:	20000228 	.word	0x20000228
 8001404:	2000022c 	.word	0x2000022c
 8001408:	2000022b 	.word	0x2000022b
 800140c:	2000022a 	.word	0x2000022a
 8001410:	40240000 	.word	0x40240000
 8001414:	200003b4 	.word	0x200003b4
 8001418:	41100000 	.word	0x41100000
 800141c:	40a00000 	.word	0x40a00000
 8001420:	200003b8 	.word	0x200003b8
 8001424:	20000224 	.word	0x20000224
 8001428:	08008950 	.word	0x08008950
 800142c:	08008968 	.word	0x08008968

08001430 <getSoilMoisture>:
	drawLines(COLOR_PEASHOOT_GREEN);
	HAL_Delay(200);
	lcdFillRGB(COLOR_PEASHOOT_GREEN);
}

void getSoilMoisture() {
 8001430:	b538      	push	{r3, r4, r5, lr}
	const int WaterValue = 2900;
	int intervals = (AirValue - WaterValue) / 3;
	int soilMoistureValue = 0;
	int moisturePercentage = 0;

	soilMoistureValue = HAL_ADC_GetValue(&hadc1);
 8001432:	482e      	ldr	r0, [pc, #184]	; (80014ec <getSoilMoisture+0xbc>)
 8001434:	f001 fb12 	bl	8002a5c <HAL_ADC_GetValue>
//	soilMoistureValue = 3000;

	// Calculate moisture percentage
	if (soilMoistureValue <= WaterValue) {
 8001438:	f640 3354 	movw	r3, #2900	; 0xb54
 800143c:	4298      	cmp	r0, r3
 800143e:	dd30      	ble.n	80014a2 <getSoilMoisture+0x72>
		moisturePercentage = 100;
	} else if (soilMoistureValue >= AirValue) {
 8001440:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001444:	4604      	mov	r4, r0
 8001446:	da2a      	bge.n	800149e <getSoilMoisture+0x6e>
		moisturePercentage = 0;
	} else {
		moisturePercentage = 100
				- ((soilMoistureValue - WaterValue) * 100)
 8001448:	2264      	movs	r2, #100	; 0x64
 800144a:	f6a0 3354 	subw	r3, r0, #2900	; 0xb54
 800144e:	fb02 f303 	mul.w	r3, r2, r3
						/ (AirValue - WaterValue);
 8001452:	4d27      	ldr	r5, [pc, #156]	; (80014f0 <getSoilMoisture+0xc0>)
 8001454:	fb85 1203 	smull	r1, r2, r5, r3
 8001458:	17dd      	asrs	r5, r3, #31
 800145a:	eba5 2562 	sub.w	r5, r5, r2, asr #9
		moisturePercentage = 100
 800145e:	3564      	adds	r5, #100	; 0x64
	}

	lcdSetCursor(0, lcdGetHeight() / 2);
 8001460:	f001 f9be 	bl	80027e0 <lcdGetHeight>
 8001464:	4601      	mov	r1, r0
 8001466:	2000      	movs	r0, #0
 8001468:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800146c:	f001 f98c 	bl	8002788 <lcdSetCursor>
	lcdPrintf("Soil Moisture: %d%%", moisturePercentage);
 8001470:	4629      	mov	r1, r5
 8001472:	4820      	ldr	r0, [pc, #128]	; (80014f4 <getSoilMoisture+0xc4>)
 8001474:	f001 f8aa 	bl	80025cc <lcdPrintf>
	HAL_Delay(200);
 8001478:	20c8      	movs	r0, #200	; 0xc8
 800147a:	f001 fa2b 	bl	80028d4 <HAL_Delay>
//		lcdPrintf("  Dry     \r\n");
//	}else if (moisturePercentage == 100){
//		lcdPrintf("  Very wet\r\n");
//	}
	if (soilMoistureValue > WaterValue
			&& soilMoistureValue < (WaterValue + intervals)) {
 800147e:	f640 43e1 	movw	r3, #3297	; 0xce1
 8001482:	429c      	cmp	r4, r3
 8001484:	dd1e      	ble.n	80014c4 <getSoilMoisture+0x94>
		lcdPrintf("  Very wet\r\n");
	} else if (soilMoistureValue > (WaterValue + intervals)
 8001486:	f640 43e2 	movw	r3, #3298	; 0xce2
 800148a:	429c      	cmp	r4, r3
 800148c:	d024      	beq.n	80014d8 <getSoilMoisture+0xa8>
			&& soilMoistureValue < (AirValue - intervals)) {
 800148e:	f640 6371 	movw	r3, #3697	; 0xe71
 8001492:	429c      	cmp	r4, r3
 8001494:	dd1b      	ble.n	80014ce <getSoilMoisture+0x9e>
		lcdPrintf("  Wet     \r\n");
	} else if (soilMoistureValue < AirValue
 8001496:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800149a:	db1d      	blt.n	80014d8 <getSoilMoisture+0xa8>
			&& soilMoistureValue > (AirValue - intervals)) {
		lcdPrintf("  Dry     \r\n");
	}
}
 800149c:	bd38      	pop	{r3, r4, r5, pc}
		moisturePercentage = 0;
 800149e:	2500      	movs	r5, #0
 80014a0:	e7de      	b.n	8001460 <getSoilMoisture+0x30>
	lcdSetCursor(0, lcdGetHeight() / 2);
 80014a2:	f001 f99d 	bl	80027e0 <lcdGetHeight>
 80014a6:	4601      	mov	r1, r0
 80014a8:	2000      	movs	r0, #0
 80014aa:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80014ae:	f001 f96b 	bl	8002788 <lcdSetCursor>
	lcdPrintf("Soil Moisture: %d%%", moisturePercentage);
 80014b2:	4810      	ldr	r0, [pc, #64]	; (80014f4 <getSoilMoisture+0xc4>)
 80014b4:	2164      	movs	r1, #100	; 0x64
 80014b6:	f001 f889 	bl	80025cc <lcdPrintf>
}
 80014ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(200);
 80014be:	20c8      	movs	r0, #200	; 0xc8
 80014c0:	f001 ba08 	b.w	80028d4 <HAL_Delay>
		lcdPrintf("  Very wet\r\n");
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <getSoilMoisture+0xc8>)
}
 80014c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lcdPrintf("  Very wet\r\n");
 80014ca:	f001 b87f 	b.w	80025cc <lcdPrintf>
		lcdPrintf("  Wet     \r\n");
 80014ce:	480b      	ldr	r0, [pc, #44]	; (80014fc <getSoilMoisture+0xcc>)
}
 80014d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lcdPrintf("  Wet     \r\n");
 80014d4:	f001 b87a 	b.w	80025cc <lcdPrintf>
			&& soilMoistureValue > (AirValue - intervals)) {
 80014d8:	f640 6372 	movw	r3, #3698	; 0xe72
 80014dc:	429c      	cmp	r4, r3
 80014de:	dddd      	ble.n	800149c <getSoilMoisture+0x6c>
}
 80014e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lcdPrintf("  Dry     \r\n");
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <getSoilMoisture+0xd0>)
 80014e6:	f001 b871 	b.w	80025cc <lcdPrintf>
 80014ea:	bf00      	nop
 80014ec:	20000238 	.word	0x20000238
 80014f0:	6d978b8f 	.word	0x6d978b8f
 80014f4:	080089cc 	.word	0x080089cc
 80014f8:	0800899c 	.word	0x0800899c
 80014fc:	080089ac 	.word	0x080089ac
 8001500:	080089bc 	.word	0x080089bc

08001504 <drawLines>:
	lcdSetCursor(x, y);
	lcdPrintf(fmt, args);
	va_end(args);
}

void drawLines(uint16_t color) {
 8001504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	4604      	mov	r4, r0
	unsigned long start, t;
	int x1, y1, x2, y2, w = lcdGetWidth(), h = lcdGetHeight();
 800150c:	f001 f962 	bl	80027d4 <lcdGetWidth>
 8001510:	4680      	mov	r8, r0
 8001512:	f001 f965 	bl	80027e0 <lcdGetHeight>
 8001516:	4607      	mov	r7, r0

	lcdFillRGB(COLOR_BLACK);
 8001518:	2000      	movs	r0, #0
 800151a:	f000 fe37 	bl	800218c <lcdFillRGB>

	x1 = y1 = 0;
	y2 = h - 1;
 800151e:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
	start = HAL_GetTick();
 8001522:	f001 f9d1 	bl	80028c8 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 8001526:	f1b8 0f00 	cmp.w	r8, #0
 800152a:	d04c      	beq.n	80015c6 <drawLines+0xc2>
 800152c:	2500      	movs	r5, #0
	y2 = h - 1;

	start = HAL_GetTick();

	for (x2 = 0; x2 < w; x2 += 6)
		lcdDrawLine(x1, y1, x2, y2, color);
 800152e:	fa0f fa89 	sxth.w	sl, r9
		lcdDrawLine(x1, y1, x2, y2, color);
 8001532:	2100      	movs	r1, #0
 8001534:	b22a      	sxth	r2, r5
 8001536:	4653      	mov	r3, sl
 8001538:	4608      	mov	r0, r1
 800153a:	9400      	str	r4, [sp, #0]
	for (x2 = 0; x2 < w; x2 += 6)
 800153c:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 800153e:	f000 fe5b 	bl	80021f8 <lcdDrawLine>
	for (x2 = 0; x2 < w; x2 += 6)
 8001542:	45a8      	cmp	r8, r5
 8001544:	dcf5      	bgt.n	8001532 <drawLines+0x2e>
	x2 = w - 1;
 8001546:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
	for (y2 = 0; y2 < h; y2 += 6)
 800154a:	2f00      	cmp	r7, #0
 800154c:	d04b      	beq.n	80015e6 <drawLines+0xe2>
 800154e:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 8001550:	b236      	sxth	r6, r6
		lcdDrawLine(x1, y1, x2, y2, color);
 8001552:	2100      	movs	r1, #0
 8001554:	b22b      	sxth	r3, r5
 8001556:	4632      	mov	r2, r6
 8001558:	4608      	mov	r0, r1
 800155a:	9400      	str	r4, [sp, #0]
	for (y2 = 0; y2 < h; y2 += 6)
 800155c:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 800155e:	f000 fe4b 	bl	80021f8 <lcdDrawLine>
	for (y2 = 0; y2 < h; y2 += 6)
 8001562:	42af      	cmp	r7, r5
 8001564:	dcf5      	bgt.n	8001552 <drawLines+0x4e>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 8001566:	f001 f9af 	bl	80028c8 <HAL_GetTick>
	HAL_Delay(1000);
 800156a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156e:	f001 f9b1 	bl	80028d4 <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 8001572:	2000      	movs	r0, #0
 8001574:	f000 fe0a 	bl	800218c <lcdFillRGB>
	start = HAL_GetTick();
 8001578:	f001 f9a6 	bl	80028c8 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 800157c:	f1b8 0f00 	cmp.w	r8, #0
 8001580:	d00d      	beq.n	800159e <drawLines+0x9a>
 8001582:	fa0f fa89 	sxth.w	sl, r9
 8001586:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 8001588:	b22a      	sxth	r2, r5
 800158a:	4653      	mov	r3, sl
 800158c:	2100      	movs	r1, #0
 800158e:	4630      	mov	r0, r6
 8001590:	9400      	str	r4, [sp, #0]
	for (x2 = 0; x2 < w; x2 += 6)
 8001592:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 8001594:	f000 fe30 	bl	80021f8 <lcdDrawLine>
	for (x2 = 0; x2 < w; x2 += 6)
 8001598:	45a8      	cmp	r8, r5
 800159a:	dcf5      	bgt.n	8001588 <drawLines+0x84>
	x2 = 0;
	for (y2 = 0; y2 < h; y2 += 6)
 800159c:	b157      	cbz	r7, 80015b4 <drawLines+0xb0>
	for (x2 = 0; x2 < w; x2 += 6)
 800159e:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 80015a0:	2200      	movs	r2, #0
 80015a2:	b22b      	sxth	r3, r5
 80015a4:	4630      	mov	r0, r6
 80015a6:	4611      	mov	r1, r2
 80015a8:	9400      	str	r4, [sp, #0]
	for (y2 = 0; y2 < h; y2 += 6)
 80015aa:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 80015ac:	f000 fe24 	bl	80021f8 <lcdDrawLine>
	for (y2 = 0; y2 < h; y2 += 6)
 80015b0:	42af      	cmp	r7, r5
 80015b2:	dcf5      	bgt.n	80015a0 <drawLines+0x9c>
	t += HAL_GetTick() - start;
 80015b4:	f001 f988 	bl	80028c8 <HAL_GetTick>

	HAL_Delay(1000);
 80015b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

//  return t += HAL_GetTick() - start;
}
 80015bc:	b002      	add	sp, #8
 80015be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_Delay(1000);
 80015c2:	f001 b987 	b.w	80028d4 <HAL_Delay>
	x2 = w - 1;
 80015c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (y2 = 0; y2 < h; y2 += 6)
 80015ca:	2f00      	cmp	r7, #0
 80015cc:	d1bf      	bne.n	800154e <drawLines+0x4a>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 80015ce:	f001 f97b 	bl	80028c8 <HAL_GetTick>
	HAL_Delay(1000);
 80015d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d6:	f001 f97d 	bl	80028d4 <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 80015da:	4638      	mov	r0, r7
 80015dc:	f000 fdd6 	bl	800218c <lcdFillRGB>
	start = HAL_GetTick();
 80015e0:	f001 f972 	bl	80028c8 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 80015e4:	e7e6      	b.n	80015b4 <drawLines+0xb0>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 80015e6:	f001 f96f 	bl	80028c8 <HAL_GetTick>
	HAL_Delay(1000);
 80015ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ee:	f001 f971 	bl	80028d4 <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 80015f2:	4638      	mov	r0, r7
		lcdDrawLine(x1, y1, x2, y2, color);
 80015f4:	b236      	sxth	r6, r6
	lcdFillRGB(COLOR_BLACK);
 80015f6:	f000 fdc9 	bl	800218c <lcdFillRGB>
	start = HAL_GetTick();
 80015fa:	f001 f965 	bl	80028c8 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 80015fe:	e7c2      	b.n	8001586 <drawLines+0x82>

08001600 <start_animation>:
void start_animation() {
 8001600:	b508      	push	{r3, lr}
	drawLines(COLOR_PEASHOOT_GREEN);
 8001602:	f24d 60eb 	movw	r0, #55019	; 0xd6eb
 8001606:	f7ff ff7d 	bl	8001504 <drawLines>
	HAL_Delay(200);
 800160a:	20c8      	movs	r0, #200	; 0xc8
 800160c:	f001 f962 	bl	80028d4 <HAL_Delay>
}
 8001610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcdFillRGB(COLOR_PEASHOOT_GREEN);
 8001614:	f24d 60eb 	movw	r0, #55019	; 0xd6eb
 8001618:	f000 bdb8 	b.w	800218c <lcdFillRGB>

0800161c <drawImage>:

void drawImage(const GUI_BITMAP logo) {
 800161c:	b510      	push	{r4, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	ac01      	add	r4, sp, #4
 8001622:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	if (lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE
 8001626:	f001 f8e1 	bl	80027ec <lcdGetOrientation>
 800162a:	2801      	cmp	r0, #1
 800162c:	d003      	beq.n	8001636 <drawImage+0x1a>
			|| lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE_MIRROR) {
 800162e:	f001 f8dd 	bl	80027ec <lcdGetOrientation>
 8001632:	2803      	cmp	r0, #3
 8001634:	d10e      	bne.n	8001654 <drawImage+0x38>
		lcdDrawImage((lcdGetWidth() - logo.xSize) / 2, 0, &logo);
 8001636:	f001 f8cd 	bl	80027d4 <lcdGetWidth>
 800163a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800163e:	4622      	mov	r2, r4
 8001640:	1ac0      	subs	r0, r0, r3
 8001642:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001646:	2100      	movs	r1, #0
 8001648:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800164c:	f000 fe84 	bl	8002358 <lcdDrawImage>
	} else {
		lcdDrawImage(0, (lcdGetHeight() - logo.ySize) / 2, &logo);
	}

	/* USER CODE END 3 */
}
 8001650:	b004      	add	sp, #16
 8001652:	bd10      	pop	{r4, pc}
		lcdDrawImage(0, (lcdGetHeight() - logo.ySize) / 2, &logo);
 8001654:	f001 f8c4 	bl	80027e0 <lcdGetHeight>
 8001658:	4601      	mov	r1, r0
 800165a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800165e:	4622      	mov	r2, r4
 8001660:	1ac9      	subs	r1, r1, r3
 8001662:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8001666:	2000      	movs	r0, #0
 8001668:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800166c:	f000 fe74 	bl	8002358 <lcdDrawImage>
}
 8001670:	b004      	add	sp, #16
 8001672:	bd10      	pop	{r4, pc}

08001674 <peashooterAnimation>:
void peashooterAnimation() {
 8001674:	b508      	push	{r3, lr}
	drawImage(peashooter_000_logo);
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <peashooterAnimation+0x50>)
 8001678:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800167c:	f7ff ffce 	bl	800161c <drawImage>
	HAL_Delay(100);
 8001680:	2064      	movs	r0, #100	; 0x64
 8001682:	f001 f927 	bl	80028d4 <HAL_Delay>
	drawImage(peashooter_001_logo);
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <peashooterAnimation+0x54>)
 8001688:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800168c:	f7ff ffc6 	bl	800161c <drawImage>
	HAL_Delay(100);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f001 f91f 	bl	80028d4 <HAL_Delay>
	drawImage(peashooter_002_logo);
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <peashooterAnimation+0x58>)
 8001698:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800169c:	f7ff ffbe 	bl	800161c <drawImage>
	HAL_Delay(100);
 80016a0:	2064      	movs	r0, #100	; 0x64
 80016a2:	f001 f917 	bl	80028d4 <HAL_Delay>
	drawImage(peashooter_003_logo);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <peashooterAnimation+0x5c>)
 80016a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016ac:	f7ff ffb6 	bl	800161c <drawImage>
	HAL_Delay(100);
 80016b0:	2064      	movs	r0, #100	; 0x64
 80016b2:	f001 f90f 	bl	80028d4 <HAL_Delay>
	drawImage(peashooter_004_logo);
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <peashooterAnimation+0x60>)
 80016b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
}
 80016bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	drawImage(peashooter_004_logo);
 80016c0:	f7ff bfac 	b.w	800161c <drawImage>
 80016c4:	08010ad4 	.word	0x08010ad4
 80016c8:	08017b60 	.word	0x08017b60
 80016cc:	0801ebec 	.word	0x0801ebec
 80016d0:	08025c78 	.word	0x08025c78
 80016d4:	0802cd04 	.word	0x0802cd04

080016d8 <SystemClock_Config>:
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d8:	2001      	movs	r0, #1
void SystemClock_Config(void) {
 80016da:	b510      	push	{r4, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016dc:	2300      	movs	r3, #0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016e4:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
void SystemClock_Config(void) {
 80016e8:	b096      	sub	sp, #88	; 0x58
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ea:	900c      	str	r0, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ec:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016ee:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f0:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016f4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80016fc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001700:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8001704:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001708:	9115      	str	r1, [sp, #84]	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800170a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800170c:	9301      	str	r3, [sp, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800170e:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001710:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001712:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001714:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001716:	f001 fdd5 	bl	80032c4 <HAL_RCC_OscConfig>
 800171a:	b108      	cbz	r0, 8001720 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800171e:	e7fe      	b.n	800171e <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001720:	4603      	mov	r3, r0
 8001722:	220f      	movs	r2, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	e9cd 4302 	strd	r4, r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001728:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172a:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800172e:	4621      	mov	r1, r4
 8001730:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001732:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001734:	9201      	str	r2, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001736:	f001 fff1 	bl	800371c <HAL_RCC_ClockConfig>
 800173a:	b108      	cbz	r0, 8001740 <SystemClock_Config+0x68>
 800173c:	b672      	cpsid	i
	while (1) {
 800173e:	e7fe      	b.n	800173e <SystemClock_Config+0x66>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001744:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001746:	9406      	str	r4, [sp, #24]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001748:	9308      	str	r3, [sp, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800174a:	f002 f8a7 	bl	800389c <HAL_RCCEx_PeriphCLKConfig>
 800174e:	b108      	cbz	r0, 8001754 <SystemClock_Config+0x7c>
 8001750:	b672      	cpsid	i
	while (1) {
 8001752:	e7fe      	b.n	8001752 <SystemClock_Config+0x7a>
}
 8001754:	b016      	add	sp, #88	; 0x58
 8001756:	bd10      	pop	{r4, pc}

08001758 <main>:
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001758:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800175a:	f04f 0910 	mov.w	r9, #16
	GPIO_InitStruct.Pin = DIN_Pin;
 800175e:	f04f 0a04 	mov.w	sl, #4
int main(void) {
 8001762:	b580      	push	{r7, lr}
 8001764:	b08e      	sub	sp, #56	; 0x38
	HAL_Init();
 8001766:	f001 f891 	bl	800288c <HAL_Init>
	SystemClock_Config();
 800176a:	f7ff ffb5 	bl	80016d8 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800176e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001772:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001776:	4ba8      	ldr	r3, [pc, #672]	; (8001a18 <main+0x2c0>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2501      	movs	r5, #1
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800177a:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800177c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001784:	619a      	str	r2, [r3, #24]
 8001786:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	f04f 0802 	mov.w	r8, #2
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800178c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001790:	9200      	str	r2, [sp, #0]
 8001792:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001794:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 8001796:	2119      	movs	r1, #25
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001798:	ea42 0209 	orr.w	r2, r2, r9
 800179c:	619a      	str	r2, [r3, #24]
 800179e:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 80017a0:	489e      	ldr	r0, [pc, #632]	; (8001a1c <main+0x2c4>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	ea02 0209 	and.w	r2, r2, r9
 80017a6:	9201      	str	r2, [sp, #4]
 80017a8:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ac:	2603      	movs	r6, #3
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	ea42 020a 	orr.w	r2, r2, sl
 80017b2:	619a      	str	r2, [r3, #24]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	ea02 020a 	and.w	r2, r2, sl
 80017ba:	9202      	str	r2, [sp, #8]
 80017bc:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	699a      	ldr	r2, [r3, #24]
 80017c0:	f042 0208 	orr.w	r2, r2, #8
 80017c4:	619a      	str	r2, [r3, #24]
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	f002 0208 	and.w	r2, r2, #8
 80017cc:	9203      	str	r2, [sp, #12]
 80017ce:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017d0:	699a      	ldr	r2, [r3, #24]
 80017d2:	f042 0220 	orr.w	r2, r2, #32
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 80017da:	4622      	mov	r2, r4
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	9304      	str	r3, [sp, #16]
 80017e2:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 80017e4:	f001 fd6a 	bl	80032bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	462a      	mov	r2, r5
 80017ec:	488c      	ldr	r0, [pc, #560]	; (8001a20 <main+0x2c8>)
 80017ee:	f001 fd65 	bl	80032bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_2, GPIO_PIN_RESET);
 80017f2:	4622      	mov	r2, r4
 80017f4:	f241 0104 	movw	r1, #4100	; 0x1004
 80017f8:	488a      	ldr	r0, [pc, #552]	; (8001a24 <main+0x2cc>)
 80017fa:	f001 fd5f 	bl	80032bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80017fe:	4622      	mov	r2, r4
 8001800:	4639      	mov	r1, r7
 8001802:	4887      	ldr	r0, [pc, #540]	; (8001a20 <main+0x2c8>)
 8001804:	f001 fd5a 	bl	80032bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_8, GPIO_PIN_SET);
 8001808:	462a      	mov	r2, r5
 800180a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800180e:	4886      	ldr	r0, [pc, #536]	; (8001a28 <main+0x2d0>)
 8001810:	f001 fd54 	bl	80032bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8001814:	462a      	mov	r2, r5
 8001816:	4641      	mov	r1, r8
 8001818:	4880      	ldr	r0, [pc, #512]	; (8001a1c <main+0x2c4>)
 800181a:	f001 fd4f 	bl	80032bc <HAL_GPIO_WritePin>
	HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 800181e:	487f      	ldr	r0, [pc, #508]	; (8001a1c <main+0x2c4>)
 8001820:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	e9cd a407 	strd	sl, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001828:	f001 fc1a 	bl	8003060 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DOUT_Pin | IRQ_Pin | DCLK_Pin | GPIO_PIN_1;
 800182c:	231b      	movs	r3, #27
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182e:	487b      	ldr	r0, [pc, #492]	; (8001a1c <main+0x2c4>)
 8001830:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin = DOUT_Pin | IRQ_Pin | DCLK_Pin | GPIO_PIN_1;
 8001834:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	e9cd 5408 	strd	r5, r4, [sp, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800183a:	f001 fc11 	bl	8003060 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800183e:	2360      	movs	r3, #96	; 0x60
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	4877      	ldr	r0, [pc, #476]	; (8001a20 <main+0x2c8>)
 8001842:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001844:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	e9cd 4408 	strd	r4, r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f001 fc09 	bl	8003060 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800184e:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	4873      	ldr	r0, [pc, #460]	; (8001a20 <main+0x2c8>)
 8001852:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001854:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001856:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	e9cd 5408 	strd	r5, r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f001 fc00 	bl	8003060 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001860:	4872      	ldr	r0, [pc, #456]	; (8001a2c <main+0x2d4>)
 8001862:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001864:	e9cd 9407 	strd	r9, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186a:	f001 fbf9 	bl	8003060 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186e:	486d      	ldr	r0, [pc, #436]	; (8001a24 <main+0x2cc>)
 8001870:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001872:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	e9cd 7507 	strd	r7, r5, [sp, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187a:	f001 fbf1 	bl	8003060 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_Pin;
 800187e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001882:	4868      	ldr	r0, [pc, #416]	; (8001a24 <main+0x2cc>)
 8001884:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = CS_Pin;
 8001886:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	e9cd 4408 	strd	r4, r4, [sp, #32]
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800188c:	f001 fbe8 	bl	8003060 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001890:	f44f 6c00 	mov.w	ip, #2048	; 0x800
 8001894:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <main+0x2d8>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	4862      	ldr	r0, [pc, #392]	; (8001a20 <main+0x2c8>)
 8001898:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800189a:	e9cd c307 	strd	ip, r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f001 fbde 	bl	8003060 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	485e      	ldr	r0, [pc, #376]	; (8001a20 <main+0x2c8>)
 80018a6:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	e9cd 4809 	strd	r4, r8, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	e9cd 7507 	strd	r7, r5, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f001 fbd6 	bl	8003060 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b4:	485b      	ldr	r0, [pc, #364]	; (8001a24 <main+0x2cc>)
 80018b6:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	e9cd 5408 	strd	r5, r4, [sp, #32]
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018c0:	f8cd a01c 	str.w	sl, [sp, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c4:	f001 fbcc 	bl	8003060 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_8;
 80018c8:	f44f 7390 	mov.w	r3, #288	; 0x120
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018cc:	f44f 2860 	mov.w	r8, #917504	; 0xe0000
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	4855      	ldr	r0, [pc, #340]	; (8001a28 <main+0x2d0>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d2:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	a907      	add	r1, sp, #28
	hadc1.Instance = ADC1;
 80018d6:	4e57      	ldr	r6, [pc, #348]	; (8001a34 <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_8;
 80018d8:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	e9cd 5408 	strd	r5, r4, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f001 fbbf 	bl	8003060 <HAL_GPIO_Init>
	hadc1.Instance = ADC1;
 80018e2:	4b55      	ldr	r3, [pc, #340]	; (8001a38 <main+0x2e0>)
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80018e4:	4630      	mov	r0, r6
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80018e6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80018ea:	9409      	str	r4, [sp, #36]	; 0x24
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ec:	60b4      	str	r4, [r6, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80018ee:	7335      	strb	r5, [r6, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018f0:	7534      	strb	r4, [r6, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f2:	6074      	str	r4, [r6, #4]
	hadc1.Init.NbrOfConversion = 1;
 80018f4:	6135      	str	r5, [r6, #16]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f6:	f8c6 801c 	str.w	r8, [r6, #28]
	hadc1.Instance = ADC1;
 80018fa:	6033      	str	r3, [r6, #0]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80018fc:	f001 fa20 	bl	8002d40 <HAL_ADC_Init>
 8001900:	b108      	cbz	r0, 8001906 <main+0x1ae>
 8001902:	b672      	cpsid	i
	while (1) {
 8001904:	e7fe      	b.n	8001904 <main+0x1ac>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001906:	4630      	mov	r0, r6
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001908:	2405      	movs	r4, #5
	sConfig.Channel = ADC_CHANNEL_12;
 800190a:	260c      	movs	r6, #12
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800190c:	a907      	add	r1, sp, #28
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800190e:	9508      	str	r5, [sp, #32]
	sConfig.Channel = ADC_CHANNEL_12;
 8001910:	9607      	str	r6, [sp, #28]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001912:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001914:	f001 f8a6 	bl	8002a64 <HAL_ADC_ConfigChannel>
 8001918:	4602      	mov	r2, r0
 800191a:	bb20      	cbnz	r0, 8001966 <main+0x20e>
	Timing.AddressHoldTime = 15;
 800191c:	210f      	movs	r1, #15
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800191e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
	Timing.AddressHoldTime = 15;
 8001922:	9108      	str	r1, [sp, #32]
	Timing.DataLatency = 17;
 8001924:	2111      	movs	r1, #17
	FSMC_NORSRAM_TimingTypeDef Timing = { 0 };
 8001926:	900a      	str	r0, [sp, #40]	; 0x28
 8001928:	900d      	str	r0, [sp, #52]	; 0x34
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800192a:	4844      	ldr	r0, [pc, #272]	; (8001a3c <main+0x2e4>)
	Timing.DataLatency = 17;
 800192c:	910c      	str	r1, [sp, #48]	; 0x30
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800192e:	6003      	str	r3, [r0, #0]
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8001930:	a907      	add	r1, sp, #28
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001932:	f503 7382 	add.w	r3, r3, #260	; 0x104
	hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001936:	e9c0 2202 	strd	r2, r2, [r0, #8]
	hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800193a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800193e:	e9c0 2208 	strd	r2, r2, [r0, #32]
	hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001942:	e9c0 720a 	strd	r7, r2, [r0, #40]	; 0x28
	hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001946:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
	Timing.AddressSetupTime = 1;
 800194a:	9507      	str	r5, [sp, #28]
	Timing.DataSetupTime = 5;
 800194c:	9409      	str	r4, [sp, #36]	; 0x24
	Timing.CLKDivision = 16;
 800194e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001952:	f8c0 9014 	str.w	r9, [r0, #20]
	hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001956:	6102      	str	r2, [r0, #16]
	hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001958:	6382      	str	r2, [r0, #56]	; 0x38
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800195a:	6043      	str	r3, [r0, #4]
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 800195c:	f002 f8a6 	bl	8003aac <HAL_SRAM_Init>
 8001960:	b118      	cbz	r0, 800196a <main+0x212>
 8001962:	b672      	cpsid	i
	while (1) {
 8001964:	e7fe      	b.n	8001964 <main+0x20c>
 8001966:	b672      	cpsid	i
 8001968:	e7fe      	b.n	8001968 <main+0x210>
	htim1.Init.Period = 65535;
 800196a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	htim1.Init.Prescaler = 71;
 800196e:	2147      	movs	r1, #71	; 0x47
	htim1.Instance = TIM1;
 8001970:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8001a40 <main+0x2e8>
	__HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001974:	4a33      	ldr	r2, [pc, #204]	; (8001a44 <main+0x2ec>)
	htim1.Init.RepetitionCounter = 0;
 8001976:	e9c9 0004 	strd	r0, r0, [r9, #16]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	f8c9 0008 	str.w	r0, [r9, #8]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197e:	f8c9 0018 	str.w	r0, [r9, #24]
	htim1.Init.Prescaler = 71;
 8001982:	f8c9 1004 	str.w	r1, [r9, #4]
	htim1.Init.Period = 65535;
 8001986:	f8c9 300c 	str.w	r3, [r9, #12]
	__HAL_AFIO_FSMCNADV_DISCONNECTED();
 800198a:	69d3      	ldr	r3, [r2, #28]
 800198c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001990:	61d3      	str	r3, [r2, #28]
	htim1.Instance = TIM1;
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <main+0x2f0>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001994:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8001998:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800199c:	e9cd 0005 	strd	r0, r0, [sp, #20]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80019a0:	4648      	mov	r0, r9
	htim1.Instance = TIM1;
 80019a2:	f8c9 3000 	str.w	r3, [r9]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80019a6:	f002 f9df 	bl	8003d68 <HAL_TIM_Base_Init>
 80019aa:	b108      	cbz	r0, 80019b0 <main+0x258>
 80019ac:	b672      	cpsid	i
	while (1) {
 80019ae:	e7fe      	b.n	80019ae <main+0x256>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80019b0:	4648      	mov	r0, r9
 80019b2:	a907      	add	r1, sp, #28
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b4:	9707      	str	r7, [sp, #28]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80019b6:	f002 f8dd 	bl	8003b74 <HAL_TIM_ConfigClockSource>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b108      	cbz	r0, 80019c2 <main+0x26a>
 80019be:	b672      	cpsid	i
	while (1) {
 80019c0:	e7fe      	b.n	80019c0 <main+0x268>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80019c2:	4648      	mov	r0, r9
 80019c4:	a905      	add	r1, sp, #20
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	e9cd 3305 	strd	r3, r3, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80019ca:	f002 f9fb 	bl	8003dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b108      	cbz	r0, 80019d6 <main+0x27e>
 80019d2:	b672      	cpsid	i
	while (1) {
 80019d4:	e7fe      	b.n	80019d4 <main+0x27c>
	huart1.Init.BaudRate = 115200;
 80019d6:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart1.Instance = USART1;
 80019da:	481c      	ldr	r0, [pc, #112]	; (8001a4c <main+0x2f4>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 80019dc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80019e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart1.Instance = USART1;
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <main+0x2f8>)
	huart1.Init.BaudRate = 115200;
 80019ea:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80019ee:	f002 fa65 	bl	8003ebc <HAL_UART_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b108      	cbz	r0, 80019fa <main+0x2a2>
 80019f6:	b672      	cpsid	i
	while (1) {
 80019f8:	e7fe      	b.n	80019f8 <main+0x2a0>
	huart3.Instance = USART3;
 80019fa:	4816      	ldr	r0, [pc, #88]	; (8001a54 <main+0x2fc>)
	huart3.Init.StopBits = UART_STOPBITS_1;
 80019fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001a04:	6103      	str	r3, [r0, #16]
	huart3.Instance = USART3;
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <main+0x300>)
	huart3.Init.BaudRate = 115200;
 8001a08:	6047      	str	r7, [r0, #4]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001a0a:	6146      	str	r6, [r0, #20]
	huart3.Instance = USART3;
 8001a0c:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001a0e:	f002 fa55 	bl	8003ebc <HAL_UART_Init>
 8001a12:	b318      	cbz	r0, 8001a5c <main+0x304>
 8001a14:	b672      	cpsid	i
	while (1) {
 8001a16:	e7fe      	b.n	8001a16 <main+0x2be>
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40011800 	.word	0x40011800
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40011400 	.word	0x40011400
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	10110000 	.word	0x10110000
 8001a34:	20000238 	.word	0x20000238
 8001a38:	40012400 	.word	0x40012400
 8001a3c:	20000298 	.word	0x20000298
 8001a40:	200002e0 	.word	0x200002e0
 8001a44:	40010000 	.word	0x40010000
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	20000328 	.word	0x20000328
 8001a50:	40013800 	.word	0x40013800
 8001a54:	2000036c 	.word	0x2000036c
 8001a58:	40004800 	.word	0x40004800
	hadc2.Instance = ADC2;
 8001a5c:	4e51      	ldr	r6, [pc, #324]	; (8001ba4 <main+0x44c>)
 8001a5e:	4b52      	ldr	r3, [pc, #328]	; (8001ba8 <main+0x450>)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001a60:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8001a64:	9009      	str	r0, [sp, #36]	; 0x24
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a66:	60b0      	str	r0, [r6, #8]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a68:	7530      	strb	r0, [r6, #20]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a6a:	6070      	str	r0, [r6, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001a6c:	4630      	mov	r0, r6
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a6e:	f8c6 801c 	str.w	r8, [r6, #28]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8001a72:	7335      	strb	r5, [r6, #12]
	hadc2.Init.NbrOfConversion = 1;
 8001a74:	6135      	str	r5, [r6, #16]
	hadc2.Instance = ADC2;
 8001a76:	6033      	str	r3, [r6, #0]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001a78:	f001 f962 	bl	8002d40 <HAL_ADC_Init>
 8001a7c:	b108      	cbz	r0, 8001a82 <main+0x32a>
 8001a7e:	b672      	cpsid	i
	while (1) {
 8001a80:	e7fe      	b.n	8001a80 <main+0x328>
	sConfig.Channel = ADC_CHANNEL_13;
 8001a82:	230d      	movs	r3, #13
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001a84:	4630      	mov	r0, r6
 8001a86:	a907      	add	r1, sp, #28
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a88:	9508      	str	r5, [sp, #32]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001a8a:	9409      	str	r4, [sp, #36]	; 0x24
	sConfig.Channel = ADC_CHANNEL_13;
 8001a8c:	9307      	str	r3, [sp, #28]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001a8e:	f000 ffe9 	bl	8002a64 <HAL_ADC_ConfigChannel>
 8001a92:	b108      	cbz	r0, 8001a98 <main+0x340>
 8001a94:	b672      	cpsid	i
	while (1) {
 8001a96:	e7fe      	b.n	8001a96 <main+0x33e>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001a98:	4844      	ldr	r0, [pc, #272]	; (8001bac <main+0x454>)
 8001a9a:	f001 f9fd 	bl	8002e98 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2);
 8001a9e:	4841      	ldr	r0, [pc, #260]	; (8001ba4 <main+0x44c>)
 8001aa0:	f001 f9fa 	bl	8002e98 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8001aa4:	4841      	ldr	r0, [pc, #260]	; (8001bac <main+0x454>)
 8001aa6:	f001 f8bb 	bl	8002c20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001aaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aae:	483f      	ldr	r0, [pc, #252]	; (8001bac <main+0x454>)
 8001ab0:	f000 ff22 	bl	80028f8 <HAL_ADC_PollForConversion>
	HAL_ADC_Start(&hadc2);
 8001ab4:	483b      	ldr	r0, [pc, #236]	; (8001ba4 <main+0x44c>)
 8001ab6:	f001 f8b3 	bl	8002c20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 8001aba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001abe:	4839      	ldr	r0, [pc, #228]	; (8001ba4 <main+0x44c>)
 8001ac0:	f000 ff1a 	bl	80028f8 <HAL_ADC_PollForConversion>
	HAL_TIM_Base_Start(&htim1);
 8001ac4:	483a      	ldr	r0, [pc, #232]	; (8001bb0 <main+0x458>)
 8001ac6:	f002 f825 	bl	8003b14 <HAL_TIM_Base_Start>
	init_dht11(&dht, &htim1, GPIOC, GPIO_PIN_4);
 8001aca:	2310      	movs	r3, #16
 8001acc:	4a39      	ldr	r2, [pc, #228]	; (8001bb4 <main+0x45c>)
 8001ace:	4938      	ldr	r1, [pc, #224]	; (8001bb0 <main+0x458>)
 8001ad0:	a807      	add	r0, sp, #28
 8001ad2:	f000 f881 	bl	8001bd8 <init_dht11>
	HAL_Delay(1500);
 8001ad6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001ada:	f000 fefb 	bl	80028d4 <HAL_Delay>
	LCD_BL_ON();
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae4:	4834      	ldr	r0, [pc, #208]	; (8001bb8 <main+0x460>)
 8001ae6:	f001 fbe9 	bl	80032bc <HAL_GPIO_WritePin>
	lcdInit();
 8001aea:	f000 fa17 	bl	8001f1c <lcdInit>
	lcdSetOrientation(1);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f000 fde4 	bl	80026bc <lcdSetOrientation>
	lcdSetTextFont(&Font16);
 8001af4:	4831      	ldr	r0, [pc, #196]	; (8001bbc <main+0x464>)
 8001af6:	f000 fdd5 	bl	80026a4 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_PEASHOOT_GREEN);
 8001afa:	f24d 61eb 	movw	r1, #55019	; 0xd6eb
 8001afe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b02:	f000 fdd5 	bl	80026b0 <lcdSetTextColor>
	start_animation();
 8001b06:	f7ff fd7b 	bl	8001600 <start_animation>
	lcdSetCursor(0, lcdGetHeight() / 2);
 8001b0a:	f000 fe69 	bl	80027e0 <lcdGetHeight>
 8001b0e:	4601      	mov	r1, r0
 8001b10:	2000      	movs	r0, #0
 8001b12:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8001b16:	4c2a      	ldr	r4, [pc, #168]	; (8001bc0 <main+0x468>)
 8001b18:	4d2a      	ldr	r5, [pc, #168]	; (8001bc4 <main+0x46c>)
	lcdPrintf("Weight: %s \r\n", "512.00 g");
 8001b1a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8001bc8 <main+0x470>
 8001b1e:	4f2b      	ldr	r7, [pc, #172]	; (8001bcc <main+0x474>)
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);  // Turn on LED
 8001b20:	4e2b      	ldr	r6, [pc, #172]	; (8001bd0 <main+0x478>)
	lcdSetCursor(0, lcdGetHeight() / 2);
 8001b22:	f000 fe31 	bl	8002788 <lcdSetCursor>
 8001b26:	e016      	b.n	8001b56 <main+0x3fe>
		} else if (count != 0 && count_second < 5) {
 8001b28:	bb33      	cbnz	r3, 8001b78 <main+0x420>
		if (count_second >= 5) {
 8001b2a:	782b      	ldrb	r3, [r5, #0]
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d826      	bhi.n	8001b7e <main+0x426>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8001b30:	2140      	movs	r1, #64	; 0x40
 8001b32:	4630      	mov	r0, r6
 8001b34:	f001 fbbc 	bl	80032b0 <HAL_GPIO_ReadPin>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	b920      	cbnz	r0, 8001b46 <main+0x3ee>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Turn off LED
 8001b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b40:	4630      	mov	r0, r6
 8001b42:	f001 fbbb 	bl	80032bc <HAL_GPIO_WritePin>
		lcdSetCursor(0, 0);
 8001b46:	2100      	movs	r1, #0
 8001b48:	4608      	mov	r0, r1
 8001b4a:	f000 fe1d 	bl	8002788 <lcdSetCursor>
		lcdPrintf("%d   \r\n", count);
 8001b4e:	7821      	ldrb	r1, [r4, #0]
 8001b50:	4820      	ldr	r0, [pc, #128]	; (8001bd4 <main+0x47c>)
 8001b52:	f000 fd3b 	bl	80025cc <lcdPrintf>
		peashooterAnimation();
 8001b56:	f7ff fd8d 	bl	8001674 <peashooterAnimation>
		getSoilMoisture();
 8001b5a:	f7ff fc69 	bl	8001430 <getSoilMoisture>
	lcdPrintf("Weight: %s \r\n", "512.00 g");
 8001b5e:	4641      	mov	r1, r8
 8001b60:	4638      	mov	r0, r7
 8001b62:	f000 fd33 	bl	80025cc <lcdPrintf>
	if (DHT11_Start()) {
 8001b66:	f7ff fb29 	bl	80011bc <DHT11_Start>
 8001b6a:	b9c0      	cbnz	r0, 8001b9e <main+0x446>
		if (table_lamp() == 1 && count == 0) {
 8001b6c:	f7ff fafe 	bl	800116c <table_lamp>
 8001b70:	2801      	cmp	r0, #1
 8001b72:	7823      	ldrb	r3, [r4, #0]
 8001b74:	d1d8      	bne.n	8001b28 <main+0x3d0>
 8001b76:	b133      	cbz	r3, 8001b86 <main+0x42e>
		} else if (count != 0 && count_second < 5) {
 8001b78:	782b      	ldrb	r3, [r5, #0]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d903      	bls.n	8001b86 <main+0x42e>
			count = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	7023      	strb	r3, [r4, #0]
			count_second = 0;
 8001b82:	702b      	strb	r3, [r5, #0]
 8001b84:	e7d4      	b.n	8001b30 <main+0x3d8>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);  // Turn on LED
 8001b86:	2201      	movs	r2, #1
 8001b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	f001 fb95 	bl	80032bc <HAL_GPIO_WritePin>
			count += 1;
 8001b92:	7823      	ldrb	r3, [r4, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	7023      	strb	r3, [r4, #0]
			count_second = count % 72000000;
 8001b9a:	702b      	strb	r3, [r5, #0]
 8001b9c:	e7c5      	b.n	8001b2a <main+0x3d2>
 8001b9e:	f7ff fbc9 	bl	8001334 <displayHumidityTemperature.part.0>
 8001ba2:	e7e3      	b.n	8001b6c <main+0x414>
 8001ba4:	20000268 	.word	0x20000268
 8001ba8:	40012800 	.word	0x40012800
 8001bac:	20000238 	.word	0x20000238
 8001bb0:	200002e0 	.word	0x200002e0
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	40011400 	.word	0x40011400
 8001bbc:	2000000c 	.word	0x2000000c
 8001bc0:	20000234 	.word	0x20000234
 8001bc4:	20000235 	.word	0x20000235
 8001bc8:	08008980 	.word	0x08008980
 8001bcc:	0800898c 	.word	0x0800898c
 8001bd0:	40010800 	.word	0x40010800
 8001bd4:	080089e0 	.word	0x080089e0

08001bd8 <init_dht11>:
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
	dht->htim = htim;
 8001bd8:	6081      	str	r1, [r0, #8]
	dht->port = port;
 8001bda:	6002      	str	r2, [r0, #0]
	dht->pin = pin;
 8001bdc:	8083      	strh	r3, [r0, #4]
}
 8001bde:	4770      	bx	lr

08001be0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_MspInit+0x3c>)
{
 8001be2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be4:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001be6:	490e      	ldr	r1, [pc, #56]	; (8001c20 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	619a      	str	r2, [r3, #24]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	f002 0201 	and.w	r2, r2, #1
 8001bf4:	9200      	str	r2, [sp, #0]
 8001bf6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bfe:	61da      	str	r2, [r3, #28]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c0a:	684b      	ldr	r3, [r1, #4]
 8001c0c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c14:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c16:	b002      	add	sp, #8
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000

08001c24 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	2300      	movs	r3, #0
{
 8001c26:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC1)
 8001c28:	4925      	ldr	r1, [pc, #148]	; (8001cc0 <HAL_ADC_MspInit+0x9c>)
 8001c2a:	6802      	ldr	r2, [r0, #0]
{
 8001c2c:	b089      	sub	sp, #36	; 0x24
  if(hadc->Instance==ADC1)
 8001c2e:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001c34:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(hadc->Instance==ADC1)
 8001c38:	d004      	beq.n	8001c44 <HAL_ADC_MspInit+0x20>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_ADC_MspInit+0xa0>)
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d021      	beq.n	8001c84 <HAL_ADC_MspInit+0x60>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c40:	b009      	add	sp, #36	; 0x24
 8001c42:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c44:	2504      	movs	r5, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c46:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c4c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c50:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	481d      	ldr	r0, [pc, #116]	; (8001cc8 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c58:	619a      	str	r2, [r3, #24]
 8001c5a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5c:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c5e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001c62:	9200      	str	r2, [sp, #0]
 8001c64:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	f042 0210 	orr.w	r2, r2, #16
 8001c6c:	619a      	str	r2, [r3, #24]
 8001c6e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c70:	e9cd 5404 	strd	r5, r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7c:	f001 f9f0 	bl	8003060 <HAL_GPIO_Init>
}
 8001c80:	b009      	add	sp, #36	; 0x24
 8001c82:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c84:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c86:	2403      	movs	r4, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c88:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8001c8c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8e:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c94:	619a      	str	r2, [r3, #24]
 8001c96:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c98:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c9a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001c9e:	9202      	str	r2, [sp, #8]
 8001ca0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	f042 0210 	orr.w	r2, r2, #16
 8001ca8:	619a      	str	r2, [r3, #24]
 8001caa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cac:	e9cd 5404 	strd	r5, r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	9303      	str	r3, [sp, #12]
 8001cb6:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb8:	f001 f9d2 	bl	8003060 <HAL_GPIO_Init>
}
 8001cbc:	b009      	add	sp, #36	; 0x24
 8001cbe:	bd30      	pop	{r4, r5, pc}
 8001cc0:	40012400 	.word	0x40012400
 8001cc4:	40012800 	.word	0x40012800
 8001cc8:	40011000 	.word	0x40011000

08001ccc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_TIM_Base_MspInit+0x28>)
 8001cce:	6802      	ldr	r2, [r0, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d000      	beq.n	8001cd6 <HAL_TIM_Base_MspInit+0xa>
 8001cd4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001cda:	699a      	ldr	r2, [r3, #24]
{
 8001cdc:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ce2:	619a      	str	r2, [r3, #24]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cee:	b002      	add	sp, #8
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40012c00 	.word	0x40012c00

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	; (8001dbc <HAL_UART_MspInit+0xc4>)
 8001cfe:	6803      	ldr	r3, [r0, #0]
{
 8001d00:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8001d02:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001d08:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(huart->Instance==USART1)
 8001d0c:	d004      	beq.n	8001d18 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001d0e:	4a2c      	ldr	r2, [pc, #176]	; (8001dc0 <HAL_UART_MspInit+0xc8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d02a      	beq.n	8001d6a <HAL_UART_MspInit+0x72>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d14:	b008      	add	sp, #32
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d18:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d1a:	f44f 7600 	mov.w	r6, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_UART_MspInit+0xcc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d24:	699a      	ldr	r2, [r3, #24]
 8001d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d2a:	619a      	str	r2, [r3, #24]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d32:	9200      	str	r2, [sp, #0]
 8001d34:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	f042 0204 	orr.w	r2, r2, #4
 8001d3c:	619a      	str	r2, [r3, #24]
 8001d3e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d40:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	481f      	ldr	r0, [pc, #124]	; (8001dc8 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	f001 f986 	bl	8003060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	481b      	ldr	r0, [pc, #108]	; (8001dc8 <HAL_UART_MspInit+0xd0>)
 8001d5a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d60:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f001 f97d 	bl	8003060 <HAL_GPIO_Init>
}
 8001d66:	b008      	add	sp, #32
 8001d68:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6a:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d6c:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2502      	movs	r5, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_UART_MspInit+0xcc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d7c:	61da      	str	r2, [r3, #28]
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001d84:	9202      	str	r2, [sp, #8]
 8001d86:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	f042 0208 	orr.w	r2, r2, #8
 8001d8e:	619a      	str	r2, [r3, #24]
 8001d90:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d92:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	480c      	ldr	r0, [pc, #48]	; (8001dcc <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f001 f95d 	bl	8003060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	4808      	ldr	r0, [pc, #32]	; (8001dcc <HAL_UART_MspInit+0xd4>)
 8001dac:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001db2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f001 f954 	bl	8003060 <HAL_GPIO_Init>
}
 8001db8:	b008      	add	sp, #32
 8001dba:	bd70      	pop	{r4, r5, r6, pc}
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40004800 	.word	0x40004800
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	40010c00 	.word	0x40010c00

08001dd0 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001dd0:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_SRAM_MspInit+0x58>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001dd6:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 8001dd8:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001dda:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 8001ddc:	bb12      	cbnz	r2, 8001e24 <HAL_SRAM_MspInit+0x54>
  FSMC_Initialized = 1;
 8001dde:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de2:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001de4:	f64f 7680 	movw	r6, #65408	; 0xff80
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001de8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001dec:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 8001df0:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001df2:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfa:	6153      	str	r3, [r2, #20]
 8001dfc:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dfe:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e08:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0e:	f001 f927 	bl	8003060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e12:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <HAL_SRAM_MspInit+0x60>)
 8001e18:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e1c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e1e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e20:	f001 f91e 	bl	8003060 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001e24:	b007      	add	sp, #28
 8001e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e28:	200003bc 	.word	0x200003bc
 8001e2c:	40011800 	.word	0x40011800
 8001e30:	40011400 	.word	0x40011400

08001e34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler>
 8001e36:	bf00      	nop

08001e38 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <HardFault_Handler>
 8001e3a:	bf00      	nop

08001e3c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <MemManage_Handler>
 8001e3e:	bf00      	nop

08001e40 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <BusFault_Handler>
 8001e42:	bf00      	nop

08001e44 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler>
 8001e46:	bf00      	nop

08001e48 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop

08001e4c <DebugMon_Handler>:
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop

08001e50 <PendSV_Handler>:
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop

08001e54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e54:	f000 bd2c 	b.w	80028b0 <HAL_IncTick>

08001e58 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001e58:	2001      	movs	r0, #1
 8001e5a:	4770      	bx	lr

08001e5c <_kill>:

int _kill(int pid, int sig)
{
 8001e5c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e5e:	f002 f8d7 	bl	8004010 <__errno>
 8001e62:	2216      	movs	r2, #22
 8001e64:	4603      	mov	r3, r0
	return -1;
}
 8001e66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	errno = EINVAL;
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	bd08      	pop	{r3, pc}
 8001e6e:	bf00      	nop

08001e70 <_exit>:

void _exit (int status)
{
 8001e70:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e72:	f002 f8cd 	bl	8004010 <__errno>
 8001e76:	2316      	movs	r3, #22
 8001e78:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001e7a:	e7fe      	b.n	8001e7a <_exit+0xa>

08001e7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e7c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	1e16      	subs	r6, r2, #0
 8001e80:	dd07      	ble.n	8001e92 <_read+0x16>
 8001e82:	460c      	mov	r4, r1
 8001e84:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001e86:	f3af 8000 	nop.w
 8001e8a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8e:	42a5      	cmp	r5, r4
 8001e90:	d1f9      	bne.n	8001e86 <_read+0xa>
	}

return len;
}
 8001e92:	4630      	mov	r0, r6
 8001e94:	bd70      	pop	{r4, r5, r6, pc}
 8001e96:	bf00      	nop

08001e98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e98:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	1e16      	subs	r6, r2, #0
 8001e9c:	dd07      	ble.n	8001eae <_write+0x16>
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001ea2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ea6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eaa:	42a5      	cmp	r5, r4
 8001eac:	d1f9      	bne.n	8001ea2 <_write+0xa>
	}
	return len;
}
 8001eae:	4630      	mov	r0, r6
 8001eb0:	bd70      	pop	{r4, r5, r6, pc}
 8001eb2:	bf00      	nop

08001eb4 <_close>:

int _close(int file)
{
	return -1;
}
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop

08001ebc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001ec0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001ec2:	604b      	str	r3, [r1, #4]
}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop

08001ec8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001ec8:	2001      	movs	r0, #1
 8001eca:	4770      	bx	lr

08001ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001ecc:	2000      	movs	r0, #0
 8001ece:	4770      	bx	lr

08001ed0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed0:	490d      	ldr	r1, [pc, #52]	; (8001f08 <_sbrk+0x38>)
{
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <_sbrk+0x3c>)
 8001ed8:	4c0d      	ldr	r4, [pc, #52]	; (8001f10 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001eda:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001ede:	b120      	cbz	r0, 8001eea <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee0:	4403      	add	r3, r0
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d807      	bhi.n	8001ef6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ee6:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001ee8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001eea:	4c0a      	ldr	r4, [pc, #40]	; (8001f14 <_sbrk+0x44>)
 8001eec:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001eee:	4403      	add	r3, r0
 8001ef0:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8001ef2:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001ef4:	d9f7      	bls.n	8001ee6 <_sbrk+0x16>
    errno = ENOMEM;
 8001ef6:	f002 f88b 	bl	8004010 <__errno>
 8001efa:	220c      	movs	r2, #12
 8001efc:	4603      	mov	r3, r0
    return (void *)-1;
 8001efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8001f02:	601a      	str	r2, [r3, #0]
}
 8001f04:	bd10      	pop	{r4, pc}
 8001f06:	bf00      	nop
 8001f08:	200003c0 	.word	0x200003c0
 8001f0c:	20010000 	.word	0x20010000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	200004e0 	.word	0x200004e0

08001f18 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop

08001f1c <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8001f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001f20:	2348      	movs	r3, #72	; 0x48
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8001f22:	2628      	movs	r6, #40	; 0x28
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001f24:	2288      	movs	r2, #136	; 0x88
}

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
	LCD_CmdWrite(command);
 8001f26:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8001f2a:	2501      	movs	r5, #1
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001f2c:	f04f 08e8 	mov.w	r8, #232	; 0xe8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001f30:	4f91      	ldr	r7, [pc, #580]	; (8002178 <lcdInit+0x25c>)
	HAL_Delay(50);
 8001f32:	2032      	movs	r0, #50	; 0x32
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001f34:	703b      	strb	r3, [r7, #0]
  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8001f36:	4b91      	ldr	r3, [pc, #580]	; (800217c <lcdInit+0x260>)
}

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
	LCD_DataWrite(data);
 8001f38:	f04f 0783 	mov.w	r7, #131	; 0x83
  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8001f3c:	701e      	strb	r6, [r3, #0]
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001f3e:	4b90      	ldr	r3, [pc, #576]	; (8002180 <lcdInit+0x264>)
	LCD_DataWrite(data);
 8001f40:	f04f 092c 	mov.w	r9, #44	; 0x2c
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001f44:	701a      	strb	r2, [r3, #0]
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001f46:	4b8f      	ldr	r3, [pc, #572]	; (8002184 <lcdInit+0x268>)
	LCD_DataWrite(data);
 8001f48:	f04f 0a11 	mov.w	sl, #17
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001f4c:	f883 8000 	strb.w	r8, [r3]
	LCD_CmdWrite(command);
 8001f50:	8025      	strh	r5, [r4, #0]
	HAL_Delay(50);
 8001f52:	f000 fcbf 	bl	80028d4 <HAL_Delay>
	LCD_CmdWrite(command);
 8001f56:	23cf      	movs	r3, #207	; 0xcf
	LCD_DataWrite(data);
 8001f58:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 8001f5a:	8026      	strh	r6, [r4, #0]
 8001f5c:	8023      	strh	r3, [r4, #0]
	LCD_DataWrite(data);
 8001f5e:	4b8a      	ldr	r3, [pc, #552]	; (8002188 <lcdInit+0x26c>)
 8001f60:	2664      	movs	r6, #100	; 0x64
 8001f62:	801a      	strh	r2, [r3, #0]
 8001f64:	801f      	strh	r7, [r3, #0]
 8001f66:	f04f 0730 	mov.w	r7, #48	; 0x30
 8001f6a:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001f6c:	f04f 07ed 	mov.w	r7, #237	; 0xed
 8001f70:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8001f72:	f04f 0703 	mov.w	r7, #3
 8001f76:	801e      	strh	r6, [r3, #0]
 8001f78:	801f      	strh	r7, [r3, #0]
 8001f7a:	f04f 0712 	mov.w	r7, #18
 8001f7e:	801f      	strh	r7, [r3, #0]
 8001f80:	f04f 0781 	mov.w	r7, #129	; 0x81
 8001f84:	801f      	strh	r7, [r3, #0]
 8001f86:	f04f 0785 	mov.w	r7, #133	; 0x85
	LCD_CmdWrite(command);
 8001f8a:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8001f8e:	801f      	strh	r7, [r3, #0]
 8001f90:	f04f 0779 	mov.w	r7, #121	; 0x79
 8001f94:	801d      	strh	r5, [r3, #0]
 8001f96:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001f98:	f04f 07cb 	mov.w	r7, #203	; 0xcb
 8001f9c:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8001f9e:	f04f 0739 	mov.w	r7, #57	; 0x39
 8001fa2:	801f      	strh	r7, [r3, #0]
 8001fa4:	f04f 0734 	mov.w	r7, #52	; 0x34
 8001fa8:	f8a3 9000 	strh.w	r9, [r3]
 8001fac:	f04f 0802 	mov.w	r8, #2
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001fb4:	f04f 07f7 	mov.w	r7, #247	; 0xf7
	LCD_DataWrite(data);
 8001fb8:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8001fbc:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8001fbe:	f04f 0720 	mov.w	r7, #32
 8001fc2:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001fc4:	f04f 07ea 	mov.w	r7, #234	; 0xea
 8001fc8:	8027      	strh	r7, [r4, #0]
 8001fca:	f04f 07c0 	mov.w	r7, #192	; 0xc0
	LCD_DataWrite(data);
 8001fce:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 8001fd0:	f04f 08c1 	mov.w	r8, #193	; 0xc1
	LCD_DataWrite(data);
 8001fd4:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 8001fd6:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8001fd8:	f04f 0726 	mov.w	r7, #38	; 0x26
 8001fdc:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001fde:	f8a4 8000 	strh.w	r8, [r4]
 8001fe2:	f04f 08c5 	mov.w	r8, #197	; 0xc5
	LCD_DataWrite(data);
 8001fe6:	f8a3 a000 	strh.w	sl, [r3]
	LCD_CmdWrite(command);
 8001fea:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8001fee:	f04f 0835 	mov.w	r8, #53	; 0x35
 8001ff2:	f8a3 8000 	strh.w	r8, [r3]
 8001ff6:	f04f 083e 	mov.w	r8, #62	; 0x3e
 8001ffa:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8001ffe:	f04f 08c7 	mov.w	r8, #199	; 0xc7
 8002002:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8002006:	f04f 08be 	mov.w	r8, #190	; 0xbe
 800200a:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 800200e:	f04f 0836 	mov.w	r8, #54	; 0x36
 8002012:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
 8002016:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 800201a:	f04f 0855 	mov.w	r8, #85	; 0x55
  lcdWriteData(lcdPortraitConfig);
 800201e:	4f56      	ldr	r7, [pc, #344]	; (8002178 <lcdInit+0x25c>)
	LCD_DataWrite(data);
 8002020:	210a      	movs	r1, #10
  lcdWriteData(lcdPortraitConfig);
 8002022:	783f      	ldrb	r7, [r7, #0]
	LCD_DataWrite(data);
 8002024:	2007      	movs	r0, #7
 8002026:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8002028:	f8a4 c000 	strh.w	ip, [r4]
	LCD_DataWrite(data);
 800202c:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8002030:	f04f 08b1 	mov.w	r8, #177	; 0xb1
 8002034:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8002038:	f04f 081b 	mov.w	r8, #27
 800203c:	801a      	strh	r2, [r3, #0]
 800203e:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8002042:	f04f 08f2 	mov.w	r8, #242	; 0xf2
 8002046:	f04f 0726 	mov.w	r7, #38	; 0x26
 800204a:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 800204e:	f04f 0808 	mov.w	r8, #8
 8002052:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8002056:	8027      	strh	r7, [r4, #0]
 8002058:	f04f 07e0 	mov.w	r7, #224	; 0xe0
	LCD_DataWrite(data);
 800205c:	801d      	strh	r5, [r3, #0]
 800205e:	f04f 081a 	mov.w	r8, #26
	LCD_CmdWrite(command);
 8002062:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8002064:	f04f 071f 	mov.w	r7, #31
 8002068:	801f      	strh	r7, [r3, #0]
 800206a:	f8a3 8000 	strh.w	r8, [r3]
 800206e:	f04f 0818 	mov.w	r8, #24
 8002072:	f8a3 8000 	strh.w	r8, [r3]
 8002076:	f04f 080f 	mov.w	r8, #15
 800207a:	8019      	strh	r1, [r3, #0]
 800207c:	f8a3 8000 	strh.w	r8, [r3]
 8002080:	f04f 0806 	mov.w	r8, #6
 8002084:	f8a3 8000 	strh.w	r8, [r3]
 8002088:	f04f 0845 	mov.w	r8, #69	; 0x45
 800208c:	f8a3 8000 	strh.w	r8, [r3]
 8002090:	f04f 0887 	mov.w	r8, #135	; 0x87
 8002094:	f8a3 8000 	strh.w	r8, [r3]
 8002098:	f04f 0832 	mov.w	r8, #50	; 0x32
 800209c:	f8a3 8000 	strh.w	r8, [r3]
 80020a0:	f04f 0802 	mov.w	r8, #2
 80020a4:	8019      	strh	r1, [r3, #0]
 80020a6:	f04f 0e05 	mov.w	lr, #5
 80020aa:	8018      	strh	r0, [r3, #0]
 80020ac:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 80020b0:	f04f 08e1 	mov.w	r8, #225	; 0xe1
	LCD_DataWrite(data);
 80020b4:	8018      	strh	r0, [r3, #0]
 80020b6:	f8a3 e000 	strh.w	lr, [r3]
 80020ba:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80020bc:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 80020c0:	f04f 0825 	mov.w	r8, #37	; 0x25
 80020c4:	801a      	strh	r2, [r3, #0]
 80020c6:	f04f 0b27 	mov.w	fp, #39	; 0x27
 80020ca:	f8a3 8000 	strh.w	r8, [r3]
 80020ce:	f04f 0810 	mov.w	r8, #16
 80020d2:	f8a3 b000 	strh.w	fp, [r3]
 80020d6:	f8a3 e000 	strh.w	lr, [r3]
 80020da:	f8a3 8000 	strh.w	r8, [r3]
 80020de:	f04f 0809 	mov.w	r8, #9
 80020e2:	f8a3 8000 	strh.w	r8, [r3]
 80020e6:	f04f 0878 	mov.w	r8, #120	; 0x78
 80020ea:	f8a3 c000 	strh.w	ip, [r3]
 80020ee:	f8a3 8000 	strh.w	r8, [r3]
 80020f2:	f04f 084d 	mov.w	r8, #77	; 0x4d
 80020f6:	f8a3 8000 	strh.w	r8, [r3]
 80020fa:	f8a3 e000 	strh.w	lr, [r3]
 80020fe:	f04f 0818 	mov.w	r8, #24
 8002102:	f04f 0e0d 	mov.w	lr, #13
 8002106:	f8a3 8000 	strh.w	r8, [r3]
 800210a:	f8a3 e000 	strh.w	lr, [r3]
 800210e:	f04f 0e38 	mov.w	lr, #56	; 0x38
 8002112:	f8a3 e000 	strh.w	lr, [r3]
 8002116:	f8a3 c000 	strh.w	ip, [r3]
 800211a:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 800211c:	f04f 072a 	mov.w	r7, #42	; 0x2a
 8002120:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8002122:	f04f 07ef 	mov.w	r7, #239	; 0xef
 8002126:	801a      	strh	r2, [r3, #0]
 8002128:	801a      	strh	r2, [r3, #0]
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 800212e:	f04f 072b 	mov.w	r7, #43	; 0x2b
 8002132:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8002134:	801a      	strh	r2, [r3, #0]
 8002136:	801a      	strh	r2, [r3, #0]
 8002138:	801d      	strh	r5, [r3, #0]
 800213a:	f04f 053f 	mov.w	r5, #63	; 0x3f
 800213e:	801d      	strh	r5, [r3, #0]
	LCD_CmdWrite(command);
 8002140:	f04f 05b7 	mov.w	r5, #183	; 0xb7
 8002144:	8025      	strh	r5, [r4, #0]
	LCD_DataWrite(data);
 8002146:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 8002148:	f04f 00b6 	mov.w	r0, #182	; 0xb6
 800214c:	8020      	strh	r0, [r4, #0]
	LCD_DataWrite(data);
 800214e:	8019      	strh	r1, [r3, #0]
 8002150:	f04f 0182 	mov.w	r1, #130	; 0x82
  HAL_Delay(100);
 8002154:	4630      	mov	r0, r6
	LCD_DataWrite(data);
 8002156:	8019      	strh	r1, [r3, #0]
 8002158:	f8a3 b000 	strh.w	fp, [r3]
 800215c:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 800215e:	f8a4 a000 	strh.w	sl, [r4]
  HAL_Delay(100);
 8002162:	f000 fbb7 	bl	80028d4 <HAL_Delay>
	LCD_CmdWrite(command);
 8002166:	2329      	movs	r3, #41	; 0x29
  HAL_Delay(100);
 8002168:	4630      	mov	r0, r6
	LCD_CmdWrite(command);
 800216a:	8023      	strh	r3, [r4, #0]
  HAL_Delay(100);
 800216c:	f000 fbb2 	bl	80028d4 <HAL_Delay>
	LCD_CmdWrite(command);
 8002170:	f8a4 9000 	strh.w	r9, [r4]
}
 8002174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002178:	200004ca 	.word	0x200004ca
 800217c:	200004c8 	.word	0x200004c8
 8002180:	200004cb 	.word	0x200004cb
 8002184:	200004c9 	.word	0x200004c9
 8002188:	60020000 	.word	0x60020000

0800218c <lcdFillRGB>:
{
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}
	LCD_CmdWrite(command);
 800218e:	232a      	movs	r3, #42	; 0x2a
 8002190:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
	LCD_DataWrite(data);
 8002194:	f04f 0c00 	mov.w	ip, #0
	LCD_CmdWrite(command);
 8002198:	262b      	movs	r6, #43	; 0x2b
 800219a:	252c      	movs	r5, #44	; 0x2c
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 800219c:	4c14      	ldr	r4, [pc, #80]	; (80021f0 <lcdFillRGB+0x64>)
	LCD_DataWrite(data);
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <lcdFillRGB+0x68>)
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80021a0:	8821      	ldrh	r1, [r4, #0]
	LCD_CmdWrite(command);
 80021a2:	f8ae 3000 	strh.w	r3, [lr]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80021a6:	8863      	ldrh	r3, [r4, #2]
 80021a8:	3901      	subs	r1, #1
 80021aa:	3b01      	subs	r3, #1
  lcdWriteData((x1 >> 8) & 0xFF);
 80021ac:	f3c1 2707 	ubfx	r7, r1, #8, #8
  lcdWriteData(x1 & 0xFF);
 80021b0:	b2c9      	uxtb	r1, r1
	LCD_DataWrite(data);
 80021b2:	f8a2 c000 	strh.w	ip, [r2]
 80021b6:	f8a2 c000 	strh.w	ip, [r2]
 80021ba:	8017      	strh	r7, [r2, #0]
 80021bc:	8011      	strh	r1, [r2, #0]
  lcdWriteData((y1 >> 8) & 0xFF);
 80021be:	f3c3 2107 	ubfx	r1, r3, #8, #8
  lcdWriteData(y1 & 0xFF);
 80021c2:	b2db      	uxtb	r3, r3
	LCD_CmdWrite(command);
 80021c4:	f8ae 6000 	strh.w	r6, [lr]
	LCD_DataWrite(data);
 80021c8:	f8a2 c000 	strh.w	ip, [r2]
 80021cc:	f8a2 c000 	strh.w	ip, [r2]
 80021d0:	8011      	strh	r1, [r2, #0]
 80021d2:	8013      	strh	r3, [r2, #0]
	LCD_CmdWrite(command);
 80021d4:	f8ae 5000 	strh.w	r5, [lr]
  int dimensions = lcdProperties.width * lcdProperties.height;
 80021d8:	8821      	ldrh	r1, [r4, #0]
 80021da:	8863      	ldrh	r3, [r4, #2]
 80021dc:	fb03 f101 	mul.w	r1, r3, r1
  while(dimensions--)
 80021e0:	b121      	cbz	r1, 80021ec <lcdFillRGB+0x60>
 80021e2:	1e4b      	subs	r3, r1, #1
 80021e4:	3b01      	subs	r3, #1
 80021e6:	1c59      	adds	r1, r3, #1
	LCD_DataWrite(data);
 80021e8:	8010      	strh	r0, [r2, #0]
  while(dimensions--)
 80021ea:	d1fb      	bne.n	80021e4 <lcdFillRGB+0x58>
}
 80021ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000024 	.word	0x20000024
 80021f4:	60020000 	.word	0x60020000

080021f8 <lcdDrawLine>:
{
 80021f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 80021fc:	1a17      	subs	r7, r2, r0
 80021fe:	1a5e      	subs	r6, r3, r1
 8002200:	2f00      	cmp	r7, #0
{
 8002202:	b083      	sub	sp, #12
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8002204:	bfb8      	it	lt
 8002206:	427f      	neglt	r7, r7
 8002208:	2e00      	cmp	r6, #0
{
 800220a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 800220e:	bfb8      	it	lt
 8002210:	4276      	neglt	r6, r6
	if (steep)
 8002212:	42be      	cmp	r6, r7
{
 8002214:	9401      	str	r4, [sp, #4]
	if (steep)
 8002216:	f340 8094 	ble.w	8002342 <lcdDrawLine+0x14a>
 800221a:	4605      	mov	r5, r0
 800221c:	4694      	mov	ip, r2
 800221e:	4696      	mov	lr, r2
 8002220:	4604      	mov	r4, r0
		swap(x2, y2);
 8002222:	461a      	mov	r2, r3
		swap(x1, y1);
 8002224:	4608      	mov	r0, r1
		swap(x2, y2);
 8002226:	4663      	mov	r3, ip
		swap(x1, y1);
 8002228:	4629      	mov	r1, r5
	if (x1 > x2)
 800222a:	4290      	cmp	r0, r2
 800222c:	dd08      	ble.n	8002240 <lcdDrawLine+0x48>
 800222e:	46a0      	mov	r8, r4
 8002230:	468c      	mov	ip, r1
 8002232:	4605      	mov	r5, r0
 8002234:	4674      	mov	r4, lr
		swap(y1, y2);
 8002236:	4619      	mov	r1, r3
	if (x1 > x2)
 8002238:	4610      	mov	r0, r2
 800223a:	46c6      	mov	lr, r8
		swap(y1, y2);
 800223c:	4663      	mov	r3, ip
	if (x1 > x2)
 800223e:	462a      	mov	r2, r5
	dy = abs(y2 - y1);
 8002240:	ebae 0e04 	sub.w	lr, lr, r4
	dx = x2 - x1;
 8002244:	eba2 0900 	sub.w	r9, r2, r0
	dy = abs(y2 - y1);
 8002248:	f1be 0f00 	cmp.w	lr, #0
	int16_t err = dx / 2;
 800224c:	fa0f f489 	sxth.w	r4, r9
 8002250:	f3c9 3cc0 	ubfx	ip, r9, #15, #1
	dy = abs(y2 - y1);
 8002254:	bfb8      	it	lt
 8002256:	f1ce 0e00 	rsblt	lr, lr, #0
	int16_t err = dx / 2;
 800225a:	44a4      	add	ip, r4
	if (y1 < y2)
 800225c:	428b      	cmp	r3, r1
	dx = x2 - x1;
 800225e:	fa1f f989 	uxth.w	r9, r9
	int16_t err = dx / 2;
 8002262:	ea4f 0c6c 	mov.w	ip, ip, asr #1
	if (y1 < y2)
 8002266:	dd67      	ble.n	8002338 <lcdDrawLine+0x140>
		ystep = 1;
 8002268:	f04f 0b01 	mov.w	fp, #1
	LCD_CmdWrite(command);
 800226c:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
	LCD_DataWrite(data);
 8002270:	46ca      	mov	sl, r9
 8002272:	4d37      	ldr	r5, [pc, #220]	; (8002350 <lcdDrawLine+0x158>)
 8002274:	4c37      	ldr	r4, [pc, #220]	; (8002354 <lcdDrawLine+0x15c>)
		err -= dy;
 8002276:	fa1f fe8e 	uxth.w	lr, lr
	LCD_DataWrite(data);
 800227a:	9200      	str	r2, [sp, #0]
 800227c:	e038      	b.n	80022f0 <lcdDrawLine+0xf8>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 800227e:	4548      	cmp	r0, r9
 8002280:	d923      	bls.n	80022ca <lcdDrawLine+0xd2>
 8002282:	8868      	ldrh	r0, [r5, #2]
 8002284:	4298      	cmp	r0, r3
 8002286:	d920      	bls.n	80022ca <lcdDrawLine+0xd2>
	LCD_CmdWrite(command);
 8002288:	f04f 022a 	mov.w	r2, #42	; 0x2a
 800228c:	f8a8 2000 	strh.w	r2, [r8]
 8002290:	f04f 022b 	mov.w	r2, #43	; 0x2b
  lcdWriteData((x0 >> 8) & 0xFF);
 8002294:	ea4f 2019 	mov.w	r0, r9, lsr #8
  lcdWriteData(x0 & 0xFF);
 8002298:	fa5f f989 	uxtb.w	r9, r9
	LCD_DataWrite(data);
 800229c:	8020      	strh	r0, [r4, #0]
 800229e:	f8a4 9000 	strh.w	r9, [r4]
 80022a2:	8020      	strh	r0, [r4, #0]
 80022a4:	f8a4 9000 	strh.w	r9, [r4]
  lcdWriteData((y0 >> 8) & 0xFF);
 80022a8:	ea4f 2913 	mov.w	r9, r3, lsr #8
	LCD_CmdWrite(command);
 80022ac:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData(y0 & 0xFF);
 80022b0:	b2d8      	uxtb	r0, r3
	LCD_DataWrite(data);
 80022b2:	f8a4 9000 	strh.w	r9, [r4]
	LCD_CmdWrite(command);
 80022b6:	f04f 022c 	mov.w	r2, #44	; 0x2c
	LCD_DataWrite(data);
 80022ba:	8020      	strh	r0, [r4, #0]
 80022bc:	f8a4 9000 	strh.w	r9, [r4]
 80022c0:	8020      	strh	r0, [r4, #0]
	LCD_CmdWrite(command);
 80022c2:	f8a8 2000 	strh.w	r2, [r8]
	LCD_DataWrite(data);
 80022c6:	9a01      	ldr	r2, [sp, #4]
 80022c8:	8022      	strh	r2, [r4, #0]
		err -= dy;
 80022ca:	ebac 0c0e 	sub.w	ip, ip, lr
 80022ce:	3301      	adds	r3, #1
 80022d0:	b218      	sxth	r0, r3
 80022d2:	fa1f f38c 	uxth.w	r3, ip
 80022d6:	fa0f fc8c 	sxth.w	ip, ip
		if (err < 0)
 80022da:	f1bc 0f00 	cmp.w	ip, #0
 80022de:	da04      	bge.n	80022ea <lcdDrawLine+0xf2>
			err += dx;
 80022e0:	4453      	add	r3, sl
			y1 += ystep;
 80022e2:	4459      	add	r1, fp
			err += dx;
 80022e4:	fa0f fc83 	sxth.w	ip, r3
			y1 += ystep;
 80022e8:	b209      	sxth	r1, r1
	for (; x1 <= x2; x1++)
 80022ea:	9b00      	ldr	r3, [sp, #0]
 80022ec:	4298      	cmp	r0, r3
 80022ee:	dc25      	bgt.n	800233c <lcdDrawLine+0x144>
		if (steep)
 80022f0:	42be      	cmp	r6, r7
 80022f2:	b283      	uxth	r3, r0
			lcdDrawPixel(y1, x1, color);
 80022f4:	fa1f f981 	uxth.w	r9, r1
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80022f8:	8828      	ldrh	r0, [r5, #0]
		if (steep)
 80022fa:	dcc0      	bgt.n	800227e <lcdDrawLine+0x86>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80022fc:	4298      	cmp	r0, r3
			lcdDrawPixel(x1, y1, color);
 80022fe:	b288      	uxth	r0, r1
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8002300:	d9e3      	bls.n	80022ca <lcdDrawLine+0xd2>
 8002302:	f8b5 9002 	ldrh.w	r9, [r5, #2]
 8002306:	4581      	cmp	r9, r0
 8002308:	d9df      	bls.n	80022ca <lcdDrawLine+0xd2>
	LCD_CmdWrite(command);
 800230a:	f04f 022a 	mov.w	r2, #42	; 0x2a
  lcdWriteData(x0 & 0xFF);
 800230e:	fa5f f983 	uxtb.w	r9, r3
	LCD_CmdWrite(command);
 8002312:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData((x0 >> 8) & 0xFF);
 8002316:	0a1a      	lsrs	r2, r3, #8
	LCD_DataWrite(data);
 8002318:	8022      	strh	r2, [r4, #0]
 800231a:	f8a4 9000 	strh.w	r9, [r4]
 800231e:	8022      	strh	r2, [r4, #0]
	LCD_CmdWrite(command);
 8002320:	f04f 022b 	mov.w	r2, #43	; 0x2b
	LCD_DataWrite(data);
 8002324:	f8a4 9000 	strh.w	r9, [r4]
  lcdWriteData((y0 >> 8) & 0xFF);
 8002328:	ea4f 2910 	mov.w	r9, r0, lsr #8
	LCD_CmdWrite(command);
 800232c:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData(y0 & 0xFF);
 8002330:	b2c0      	uxtb	r0, r0
	LCD_DataWrite(data);
 8002332:	f8a4 9000 	strh.w	r9, [r4]
 8002336:	e7be      	b.n	80022b6 <lcdDrawLine+0xbe>
	for (; x1 <= x2; x1++)
 8002338:	4290      	cmp	r0, r2
 800233a:	dd05      	ble.n	8002348 <lcdDrawLine+0x150>
}
 800233c:	b003      	add	sp, #12
 800233e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002342:	460c      	mov	r4, r1
 8002344:	469e      	mov	lr, r3
 8002346:	e770      	b.n	800222a <lcdDrawLine+0x32>
		ystep = -1;
 8002348:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800234c:	e78e      	b.n	800226c <lcdDrawLine+0x74>
 800234e:	bf00      	nop
 8002350:	20000024 	.word	0x20000024
 8002354:	60020000 	.word	0x60020000

08002358 <lcdDrawImage>:
{
 8002358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 800235c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800242c <lcdDrawImage+0xd4>
{
 8002360:	b085      	sub	sp, #20
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8002362:	f8b8 e000 	ldrh.w	lr, [r8]
 8002366:	4586      	cmp	lr, r0
 8002368:	d95c      	bls.n	8002424 <lcdDrawImage+0xcc>
 800236a:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 800236e:	428d      	cmp	r5, r1
 8002370:	d958      	bls.n	8002424 <lcdDrawImage+0xcc>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8002372:	8813      	ldrh	r3, [r2, #0]
 8002374:	4403      	add	r3, r0
 8002376:	4573      	cmp	r3, lr
 8002378:	dc54      	bgt.n	8002424 <lcdDrawImage+0xcc>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 800237a:	8853      	ldrh	r3, [r2, #2]
 800237c:	18cc      	adds	r4, r1, r3
 800237e:	42ac      	cmp	r4, r5
 8002380:	dc50      	bgt.n	8002424 <lcdDrawImage+0xcc>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8002382:	2b00      	cmp	r3, #0
 8002384:	d04e      	beq.n	8002424 <lcdDrawImage+0xcc>
 8002386:	2700      	movs	r7, #0
	LCD_CmdWrite(command);
 8002388:	f04f 49c0 	mov.w	r9, #1610612736	; 0x60000000
 800238c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8002390:	7993      	ldrb	r3, [r2, #6]
	LCD_DataWrite(data);
 8002392:	4c27      	ldr	r4, [pc, #156]	; (8002430 <lcdDrawImage+0xd8>)
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8002394:	08db      	lsrs	r3, r3, #3
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	6893      	ldr	r3, [r2, #8]
 800239a:	9300      	str	r3, [sp, #0]
  lcdWriteData((x0 >> 8) & 0xFF);
 800239c:	0a03      	lsrs	r3, r0, #8
 800239e:	9302      	str	r3, [sp, #8]
  lcdWriteData(x0 & 0xFF);
 80023a0:	b2c3      	uxtb	r3, r0
 80023a2:	9303      	str	r3, [sp, #12]
	LCD_DataWrite(data);
 80023a4:	9b02      	ldr	r3, [sp, #8]
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 80023a6:	8890      	ldrh	r0, [r2, #4]
	LCD_CmdWrite(command);
 80023a8:	f8a9 b000 	strh.w	fp, [r9]
	LCD_DataWrite(data);
 80023ac:	8023      	strh	r3, [r4, #0]
 80023ae:	9b03      	ldr	r3, [sp, #12]
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 80023b0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	LCD_DataWrite(data);
 80023b4:	8023      	strh	r3, [r4, #0]
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 80023b6:	9b01      	ldr	r3, [sp, #4]
  lcdWriteData((x1 >> 8) & 0xFF);
 80023b8:	f3ce 2a07 	ubfx	sl, lr, #8, #8
  lcdWriteData(x1 & 0xFF);
 80023bc:	fa5f fe8e 	uxtb.w	lr, lr
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 80023c0:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 80023c4:	fbb0 f5f3 	udiv	r5, r0, r3
 80023c8:	9b00      	ldr	r3, [sp, #0]
	LCD_DataWrite(data);
 80023ca:	f8a4 a000 	strh.w	sl, [r4]
 80023ce:	f8a4 e000 	strh.w	lr, [r4]
	LCD_CmdWrite(command);
 80023d2:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
 80023d6:	19ce      	adds	r6, r1, r7
 80023d8:	f8a9 e000 	strh.w	lr, [r9]
  lcdWriteData((y0 >> 8) & 0xFF);
 80023dc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
  lcdWriteData(y0 & 0xFF);
 80023e0:	b2f6      	uxtb	r6, r6
	LCD_DataWrite(data);
 80023e2:	f8a4 e000 	strh.w	lr, [r4]
 80023e6:	8026      	strh	r6, [r4, #0]
  lcdWriteData((y1 >> 8) & 0xFF);
 80023e8:	f3cc 2607 	ubfx	r6, ip, #8, #8
	LCD_DataWrite(data);
 80023ec:	8026      	strh	r6, [r4, #0]
	LCD_CmdWrite(command);
 80023ee:	f04f 062c 	mov.w	r6, #44	; 0x2c
 80023f2:	fb07 3000 	mla	r0, r7, r0, r3
  uint32_t i = 0;
 80023f6:	2300      	movs	r3, #0
  lcdWriteData(y1 & 0xFF);
 80023f8:	fa5f fc8c 	uxtb.w	ip, ip
	LCD_DataWrite(data);
 80023fc:	f8a4 c000 	strh.w	ip, [r4]
	LCD_CmdWrite(command);
 8002400:	3802      	subs	r0, #2
 8002402:	f8a9 6000 	strh.w	r6, [r9]
    lcdWriteData(data[i++]);
 8002406:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800240a:	3301      	adds	r3, #1
  while (i < dataLength);
 800240c:	429d      	cmp	r5, r3
	LCD_DataWrite(data);
 800240e:	8026      	strh	r6, [r4, #0]
  while (i < dataLength);
 8002410:	d8f9      	bhi.n	8002406 <lcdDrawImage+0xae>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8002412:	8853      	ldrh	r3, [r2, #2]
 8002414:	3701      	adds	r7, #1
 8002416:	42bb      	cmp	r3, r7
 8002418:	dd04      	ble.n	8002424 <lcdDrawImage+0xcc>
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 800241a:	f8b8 e000 	ldrh.w	lr, [r8]
 800241e:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 8002422:	e7bf      	b.n	80023a4 <lcdDrawImage+0x4c>
}
 8002424:	b005      	add	sp, #20
 8002426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800242a:	bf00      	nop
 800242c:	20000024 	.word	0x20000024
 8002430:	60020000 	.word	0x60020000

08002434 <lcdDrawChar>:
{
 8002434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((x >= lcdProperties.width) || 			// Clip right
 8002438:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80025c0 <lcdDrawChar+0x18c>
{
 800243c:	b08b      	sub	sp, #44	; 0x2c
	if ((x >= lcdProperties.width) || 			// Clip right
 800243e:	f8b8 4000 	ldrh.w	r4, [r8]
{
 8002442:	e9cd 0107 	strd	r0, r1, [sp, #28]
	if ((x >= lcdProperties.width) || 			// Clip right
 8002446:	42a0      	cmp	r0, r4
{
 8002448:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 800244c:	9209      	str	r2, [sp, #36]	; 0x24
	if ((x >= lcdProperties.width) || 			// Clip right
 800244e:	f280 80b3 	bge.w	80025b8 <lcdDrawChar+0x184>
 8002452:	4699      	mov	r9, r3
			(y >= lcdProperties.height) || 		// Clip bottom
 8002454:	f8b8 3002 	ldrh.w	r3, [r8, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8002458:	4299      	cmp	r1, r3
 800245a:	f280 80ad 	bge.w	80025b8 <lcdDrawChar+0x184>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800245e:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <lcdDrawChar+0x190>)
 8002460:	689c      	ldr	r4, [r3, #8]
 8002462:	88a3      	ldrh	r3, [r4, #4]
 8002464:	9403      	str	r4, [sp, #12]
			(y >= lcdProperties.height) || 		// Clip bottom
 8002466:	42c3      	cmn	r3, r0
 8002468:	f100 80a6 	bmi.w	80025b8 <lcdDrawChar+0x184>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 800246c:	88e3      	ldrh	r3, [r4, #6]
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800246e:	42cb      	cmn	r3, r1
 8002470:	f100 80a2 	bmi.w	80025b8 <lcdDrawChar+0x184>
	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8002474:	f3c3 02c7 	ubfx	r2, r3, #3, #8
 8002478:	9201      	str	r2, [sp, #4]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 809c 	beq.w	80025b8 <lcdDrawChar+0x184>
 8002480:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 8002482:	f04f 4bc0 	mov.w	fp, #1610612736	; 0x60000000
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8002486:	4696      	mov	lr, r2
	LCD_DataWrite(data);
 8002488:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80025c8 <lcdDrawChar+0x194>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800248c:	9202      	str	r2, [sp, #8]
		for(uint8_t k = 0; k < fontCoeff; k++)
 800248e:	9a01      	ldr	r2, [sp, #4]
 8002490:	2a00      	cmp	r2, #0
 8002492:	f000 8088 	beq.w	80025a6 <lcdDrawChar+0x172>
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8002496:	2000      	movs	r0, #0
					lcdDrawPixel(x + j + xP, y + i, bg);
 8002498:	9a08      	ldr	r2, [sp, #32]
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 800249a:	9903      	ldr	r1, [sp, #12]
					lcdDrawPixel(x + j + xP, y + i, bg);
 800249c:	4472      	add	r2, lr
 800249e:	b295      	uxth	r5, r2
  lcdWriteData((y0 >> 8) & 0xFF);
 80024a0:	f3c2 2e07 	ubfx	lr, r2, #8, #8
  lcdWriteData(y0 & 0xFF);
 80024a4:	fa5f fc82 	uxtb.w	ip, r2
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 80024a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024aa:	6809      	ldr	r1, [r1, #0]
 80024ac:	3a20      	subs	r2, #32
 80024ae:	9205      	str	r2, [sp, #20]
 80024b0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80024b4:	9104      	str	r1, [sp, #16]
 80024b6:	9206      	str	r2, [sp, #24]
 80024b8:	9a02      	ldr	r2, [sp, #8]
 80024ba:	9905      	ldr	r1, [sp, #20]
 80024bc:	9c06      	ldr	r4, [sp, #24]
 80024be:	fb01 2303 	mla	r3, r1, r3, r2
 80024c2:	9a04      	ldr	r2, [sp, #16]
 80024c4:	9901      	ldr	r1, [sp, #4]
 80024c6:	fb01 2303 	mla	r3, r1, r3, r2
 80024ca:	5c1a      	ldrb	r2, [r3, r0]
			for(uint8_t j = 0; j < 8; j++)
 80024cc:	00c3      	lsls	r3, r0, #3
 80024ce:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80024d2:	f104 0108 	add.w	r1, r4, #8
 80024d6:	4419      	add	r1, r3
 80024d8:	4423      	add	r3, r4
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b289      	uxth	r1, r1
 80024de:	e02f      	b.n	8002540 <lcdDrawChar+0x10c>
				else if (bg != color)
 80024e0:	454f      	cmp	r7, r9
 80024e2:	d027      	beq.n	8002534 <lcdDrawChar+0x100>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80024e4:	f8b8 4000 	ldrh.w	r4, [r8]
 80024e8:	429c      	cmp	r4, r3
 80024ea:	d923      	bls.n	8002534 <lcdDrawChar+0x100>
 80024ec:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80024f0:	42ac      	cmp	r4, r5
 80024f2:	d91f      	bls.n	8002534 <lcdDrawChar+0x100>
	LCD_CmdWrite(command);
 80024f4:	f04f 062a 	mov.w	r6, #42	; 0x2a
  lcdWriteData((x0 >> 8) & 0xFF);
 80024f8:	0a1c      	lsrs	r4, r3, #8
	LCD_CmdWrite(command);
 80024fa:	f8ab 6000 	strh.w	r6, [fp]
  lcdWriteData(x0 & 0xFF);
 80024fe:	b2de      	uxtb	r6, r3
	LCD_DataWrite(data);
 8002500:	f8aa 4000 	strh.w	r4, [sl]
 8002504:	f8aa 6000 	strh.w	r6, [sl]
 8002508:	f8aa 4000 	strh.w	r4, [sl]
	LCD_CmdWrite(command);
 800250c:	f04f 042b 	mov.w	r4, #43	; 0x2b
	LCD_DataWrite(data);
 8002510:	f8aa 6000 	strh.w	r6, [sl]
	LCD_CmdWrite(command);
 8002514:	f8ab 4000 	strh.w	r4, [fp]
 8002518:	f04f 042c 	mov.w	r4, #44	; 0x2c
	LCD_DataWrite(data);
 800251c:	f8aa e000 	strh.w	lr, [sl]
 8002520:	f8aa c000 	strh.w	ip, [sl]
 8002524:	f8aa e000 	strh.w	lr, [sl]
 8002528:	f8aa c000 	strh.w	ip, [sl]
	LCD_CmdWrite(command);
 800252c:	f8ab 4000 	strh.w	r4, [fp]
	LCD_DataWrite(data);
 8002530:	f8aa 7000 	strh.w	r7, [sl]
			for(uint8_t j = 0; j < 8; j++)
 8002534:	3301      	adds	r3, #1
 8002536:	b29b      	uxth	r3, r3
				line <<= 1;
 8002538:	0052      	lsls	r2, r2, #1
			for(uint8_t j = 0; j < 8; j++)
 800253a:	4299      	cmp	r1, r3
				line <<= 1;
 800253c:	b2d2      	uxtb	r2, r2
			for(uint8_t j = 0; j < 8; j++)
 800253e:	d02b      	beq.n	8002598 <lcdDrawChar+0x164>
				if((line & 0x80) == 0x80)
 8002540:	0614      	lsls	r4, r2, #24
 8002542:	d5cd      	bpl.n	80024e0 <lcdDrawChar+0xac>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8002544:	f8b8 4000 	ldrh.w	r4, [r8]
 8002548:	429c      	cmp	r4, r3
 800254a:	d9f3      	bls.n	8002534 <lcdDrawChar+0x100>
 800254c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8002550:	42ac      	cmp	r4, r5
  lcdWriteData((x0 >> 8) & 0xFF);
 8002552:	ea4f 2413 	mov.w	r4, r3, lsr #8
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8002556:	d9ed      	bls.n	8002534 <lcdDrawChar+0x100>
	LCD_CmdWrite(command);
 8002558:	f04f 062a 	mov.w	r6, #42	; 0x2a
 800255c:	f8ab 6000 	strh.w	r6, [fp]
  lcdWriteData(x0 & 0xFF);
 8002560:	b2de      	uxtb	r6, r3
	LCD_DataWrite(data);
 8002562:	f8aa 4000 	strh.w	r4, [sl]
 8002566:	f8aa 6000 	strh.w	r6, [sl]
 800256a:	f8aa 4000 	strh.w	r4, [sl]
	LCD_CmdWrite(command);
 800256e:	f04f 042b 	mov.w	r4, #43	; 0x2b
	LCD_DataWrite(data);
 8002572:	f8aa 6000 	strh.w	r6, [sl]
	LCD_CmdWrite(command);
 8002576:	f8ab 4000 	strh.w	r4, [fp]
 800257a:	f04f 042c 	mov.w	r4, #44	; 0x2c
	LCD_DataWrite(data);
 800257e:	f8aa e000 	strh.w	lr, [sl]
 8002582:	f8aa c000 	strh.w	ip, [sl]
 8002586:	f8aa e000 	strh.w	lr, [sl]
 800258a:	f8aa c000 	strh.w	ip, [sl]
	LCD_CmdWrite(command);
 800258e:	f8ab 4000 	strh.w	r4, [fp]
	LCD_DataWrite(data);
 8002592:	f8aa 9000 	strh.w	r9, [sl]
}
 8002596:	e7cd      	b.n	8002534 <lcdDrawChar+0x100>
		for(uint8_t k = 0; k < fontCoeff; k++)
 8002598:	9a01      	ldr	r2, [sp, #4]
 800259a:	3001      	adds	r0, #1
 800259c:	b2c3      	uxtb	r3, r0
 800259e:	4293      	cmp	r3, r2
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 80025a0:	9b03      	ldr	r3, [sp, #12]
 80025a2:	88db      	ldrh	r3, [r3, #6]
		for(uint8_t k = 0; k < fontCoeff; k++)
 80025a4:	d388      	bcc.n	80024b8 <lcdDrawChar+0x84>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 80025a6:	9a02      	ldr	r2, [sp, #8]
 80025a8:	3201      	adds	r2, #1
 80025aa:	fa5f fe82 	uxtb.w	lr, r2
 80025ae:	459e      	cmp	lr, r3
 80025b0:	f8cd e008 	str.w	lr, [sp, #8]
 80025b4:	f4ff af6b 	bcc.w	800248e <lcdDrawChar+0x5a>
}
 80025b8:	b00b      	add	sp, #44	; 0x2c
 80025ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025be:	bf00      	nop
 80025c0:	20000024 	.word	0x20000024
 80025c4:	20000014 	.word	0x20000014
 80025c8:	60020000 	.word	0x60020000

080025cc <lcdPrintf>:
{
 80025cc:	b40f      	push	{r0, r1, r2, r3}
 80025ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d2:	b085      	sub	sp, #20
 80025d4:	aa0e      	add	r2, sp, #56	; 0x38
	vsprintf(buf, fmt, lst);
 80025d6:	4e2f      	ldr	r6, [pc, #188]	; (8002694 <lcdPrintf+0xc8>)
{
 80025d8:	f852 1b04 	ldr.w	r1, [r2], #4
	vsprintf(buf, fmt, lst);
 80025dc:	4630      	mov	r0, r6
	va_start(lst, fmt);
 80025de:	9203      	str	r2, [sp, #12]
	vsprintf(buf, fmt, lst);
 80025e0:	f003 fa80 	bl	8005ae4 <vsiprintf>
	while (*p)
 80025e4:	7832      	ldrb	r2, [r6, #0]
 80025e6:	b362      	cbz	r2, 8002642 <lcdPrintf+0x76>
		if (cursorXY.y >= lcdProperties.height)
 80025e8:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002698 <lcdPrintf+0xcc>
				cursorXY.x = 0;
 80025ec:	f04f 0900 	mov.w	r9, #0
 80025f0:	4d2a      	ldr	r5, [pc, #168]	; (800269c <lcdPrintf+0xd0>)
		if (cursorXY.y >= lcdProperties.height)
 80025f2:	f8ba 8002 	ldrh.w	r8, [sl, #2]
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 80025f6:	4f2a      	ldr	r7, [pc, #168]	; (80026a0 <lcdPrintf+0xd4>)
 80025f8:	e011      	b.n	800261e <lcdPrintf+0x52>
		else if (*p == '\r')
 80025fa:	2a0d      	cmp	r2, #13
 80025fc:	d026      	beq.n	800264c <lcdPrintf+0x80>
		else if (*p == '\t')
 80025fe:	2a09      	cmp	r2, #9
 8002600:	d126      	bne.n	8002650 <lcdPrintf+0x84>
			cursorXY.x += lcdFont.pFont->Width * 4;
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	882b      	ldrh	r3, [r5, #0]
 8002606:	8892      	ldrh	r2, [r2, #4]
		if (cursorXY.y >= lcdProperties.height)
 8002608:	886c      	ldrh	r4, [r5, #2]
			cursorXY.x += lcdFont.pFont->Width * 4;
 800260a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800260e:	802b      	strh	r3, [r5, #0]
	while (*p)
 8002610:	f816 2f01 	ldrb.w	r2, [r6, #1]!
		if (cursorXY.y >= lcdProperties.height)
 8002614:	45a0      	cmp	r8, r4
			cursorXY.y = 0;
 8002616:	bf98      	it	ls
 8002618:	f8a5 9002 	strhls.w	r9, [r5, #2]
	while (*p)
 800261c:	b18a      	cbz	r2, 8002642 <lcdPrintf+0x76>
		if (*p == '\n')
 800261e:	2a0a      	cmp	r2, #10
 8002620:	d1eb      	bne.n	80025fa <lcdPrintf+0x2e>
			cursorXY.y += lcdFont.pFont->Height;
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	886b      	ldrh	r3, [r5, #2]
 8002626:	88d4      	ldrh	r4, [r2, #6]
	while (*p)
 8002628:	f816 2f01 	ldrb.w	r2, [r6, #1]!
			cursorXY.y += lcdFont.pFont->Height;
 800262c:	441c      	add	r4, r3
 800262e:	b2a4      	uxth	r4, r4
		if (cursorXY.y >= lcdProperties.height)
 8002630:	45a0      	cmp	r8, r4
			cursorXY.y += lcdFont.pFont->Height;
 8002632:	806c      	strh	r4, [r5, #2]
			cursorXY.x = 0;
 8002634:	f8a5 9000 	strh.w	r9, [r5]
			cursorXY.y = 0;
 8002638:	bf98      	it	ls
 800263a:	f8a5 9002 	strhls.w	r9, [r5, #2]
	while (*p)
 800263e:	2a00      	cmp	r2, #0
 8002640:	d1ed      	bne.n	800261e <lcdPrintf+0x52>
}
 8002642:	b005      	add	sp, #20
 8002644:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002648:	b004      	add	sp, #16
 800264a:	4770      	bx	lr
		if (cursorXY.y >= lcdProperties.height)
 800264c:	886c      	ldrh	r4, [r5, #2]
 800264e:	e7df      	b.n	8002610 <lcdPrintf+0x44>
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8002650:	88bb      	ldrh	r3, [r7, #4]
 8002652:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8002656:	f9b5 0000 	ldrsh.w	r0, [r5]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	883b      	ldrh	r3, [r7, #0]
 800265e:	f8b5 b000 	ldrh.w	fp, [r5]
 8002662:	886c      	ldrh	r4, [r5, #2]
 8002664:	f7ff fee6 	bl	8002434 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8002668:	68b9      	ldr	r1, [r7, #8]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 800266a:	7b38      	ldrb	r0, [r7, #12]
			cursorXY.x += lcdFont.pFont->Width;
 800266c:	888a      	ldrh	r2, [r1, #4]
 800266e:	eb0b 0302 	add.w	r3, fp, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	802b      	strh	r3, [r5, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8002676:	2800      	cmp	r0, #0
 8002678:	d0ca      	beq.n	8002610 <lcdPrintf+0x44>
 800267a:	f8ba 0000 	ldrh.w	r0, [sl]
 800267e:	1a82      	subs	r2, r0, r2
 8002680:	4293      	cmp	r3, r2
 8002682:	ddc5      	ble.n	8002610 <lcdPrintf+0x44>
				cursorXY.y += lcdFont.pFont->Height;
 8002684:	88cb      	ldrh	r3, [r1, #6]
				cursorXY.x = 0;
 8002686:	f8a5 9000 	strh.w	r9, [r5]
				cursorXY.y += lcdFont.pFont->Height;
 800268a:	441c      	add	r4, r3
 800268c:	b2a4      	uxth	r4, r4
 800268e:	806c      	strh	r4, [r5, #2]
				cursorXY.x = 0;
 8002690:	e7be      	b.n	8002610 <lcdPrintf+0x44>
 8002692:	bf00      	nop
 8002694:	200003c4 	.word	0x200003c4
 8002698:	20000024 	.word	0x20000024
 800269c:	200004c4 	.word	0x200004c4
 80026a0:	20000014 	.word	0x20000014

080026a4 <lcdSetTextFont>:
	lcdFont.pFont = font;
 80026a4:	4b01      	ldr	r3, [pc, #4]	; (80026ac <lcdSetTextFont+0x8>)
 80026a6:	6098      	str	r0, [r3, #8]
}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000014 	.word	0x20000014

080026b0 <lcdSetTextColor>:
	lcdFont.TextColor = c;
 80026b0:	4b01      	ldr	r3, [pc, #4]	; (80026b8 <lcdSetTextColor+0x8>)
	lcdFont.BackColor = b;
 80026b2:	e9c3 0100 	strd	r0, r1, [r3]
}
 80026b6:	4770      	bx	lr
 80026b8:	20000014 	.word	0x20000014

080026bc <lcdSetOrientation>:
	LCD_CmdWrite(command);
 80026bc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80026c0:	2136      	movs	r1, #54	; 0x36
	lcdProperties.orientation = value;
 80026c2:	4b29      	ldr	r3, [pc, #164]	; (8002768 <lcdSetOrientation+0xac>)
{
 80026c4:	b570      	push	{r4, r5, r6, lr}
	LCD_CmdWrite(command);
 80026c6:	8011      	strh	r1, [r2, #0]
	lcdProperties.orientation = value;
 80026c8:	7118      	strb	r0, [r3, #4]
	switch (lcdProperties.orientation)
 80026ca:	2803      	cmp	r0, #3
 80026cc:	d83e      	bhi.n	800274c <lcdSetOrientation+0x90>
 80026ce:	e8df f000 	tbb	[pc, r0]
 80026d2:	2f3b      	.short	0x2f3b
 80026d4:	0223      	.short	0x0223
			break;
 80026d6:	f04f 0eef 	mov.w	lr, #239	; 0xef
 80026da:	2500      	movs	r5, #0
 80026dc:	243f      	movs	r4, #63	; 0x3f
 80026de:	2601      	movs	r6, #1
			lcdWriteData(lcdLandscapeMirrorConfig);
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <lcdSetOrientation+0xb0>)
 80026e2:	7811      	ldrb	r1, [r2, #0]
	LCD_DataWrite(data);
 80026e4:	4a22      	ldr	r2, [pc, #136]	; (8002770 <lcdSetOrientation+0xb4>)
 80026e6:	8011      	strh	r1, [r2, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80026e8:	4a22      	ldr	r2, [pc, #136]	; (8002774 <lcdSetOrientation+0xb8>)
 80026ea:	601a      	str	r2, [r3, #0]
	LCD_CmdWrite(command);
 80026ec:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80026f0:	232a      	movs	r3, #42	; 0x2a
	LCD_DataWrite(data);
 80026f2:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 80026f4:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 80026f8:	202c      	movs	r0, #44	; 0x2c
 80026fa:	800b      	strh	r3, [r1, #0]
	LCD_DataWrite(data);
 80026fc:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <lcdSetOrientation+0xb4>)
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	801e      	strh	r6, [r3, #0]
 8002704:	801c      	strh	r4, [r3, #0]
	LCD_CmdWrite(command);
 8002706:	f8a1 c000 	strh.w	ip, [r1]
	LCD_DataWrite(data);
 800270a:	801a      	strh	r2, [r3, #0]
 800270c:	801a      	strh	r2, [r3, #0]
 800270e:	801d      	strh	r5, [r3, #0]
 8002710:	f8a3 e000 	strh.w	lr, [r3]
	LCD_CmdWrite(command);
 8002714:	8008      	strh	r0, [r1, #0]
}
 8002716:	bd70      	pop	{r4, r5, r6, pc}
			lcdWriteData(lcdPortraitMirrorConfig);
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <lcdSetOrientation+0xbc>)
 800271a:	7810      	ldrb	r0, [r2, #0]
	LCD_DataWrite(data);
 800271c:	4914      	ldr	r1, [pc, #80]	; (8002770 <lcdSetOrientation+0xb4>)
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 800271e:	4a17      	ldr	r2, [pc, #92]	; (800277c <lcdSetOrientation+0xc0>)
	LCD_DataWrite(data);
 8002720:	8008      	strh	r0, [r1, #0]
			break;
 8002722:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8002726:	2501      	movs	r5, #1
 8002728:	24ef      	movs	r4, #239	; 0xef
 800272a:	2600      	movs	r6, #0
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 800272c:	601a      	str	r2, [r3, #0]
			break;
 800272e:	e7dd      	b.n	80026ec <lcdSetOrientation+0x30>
			lcdWriteData(lcdLandscapeConfig);
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <lcdSetOrientation+0xc4>)
	LCD_DataWrite(data);
 8002732:	490f      	ldr	r1, [pc, #60]	; (8002770 <lcdSetOrientation+0xb4>)
			lcdWriteData(lcdLandscapeConfig);
 8002734:	7810      	ldrb	r0, [r2, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <lcdSetOrientation+0xb8>)
	LCD_DataWrite(data);
 8002738:	8008      	strh	r0, [r1, #0]
			break;
 800273a:	f04f 0eef 	mov.w	lr, #239	; 0xef
 800273e:	2500      	movs	r5, #0
 8002740:	243f      	movs	r4, #63	; 0x3f
 8002742:	2601      	movs	r6, #1
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8002744:	601a      	str	r2, [r3, #0]
			break;
 8002746:	e7d1      	b.n	80026ec <lcdSetOrientation+0x30>
			lcdWriteData(lcdPortraitConfig);
 8002748:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <lcdSetOrientation+0xc8>)
 800274a:	e7e6      	b.n	800271a <lcdSetOrientation+0x5e>
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 800274c:	881c      	ldrh	r4, [r3, #0]
 800274e:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8002752:	3c01      	subs	r4, #1
 8002754:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
  lcdWriteData((x1 >> 8) & 0xFF);
 8002758:	f3c4 2607 	ubfx	r6, r4, #8, #8
  lcdWriteData((y1 >> 8) & 0xFF);
 800275c:	f3ce 2507 	ubfx	r5, lr, #8, #8
  lcdWriteData(x1 & 0xFF);
 8002760:	b2e4      	uxtb	r4, r4
  lcdWriteData(y1 & 0xFF);
 8002762:	fa5f fe8e 	uxtb.w	lr, lr
 8002766:	e7c1      	b.n	80026ec <lcdSetOrientation+0x30>
 8002768:	20000024 	.word	0x20000024
 800276c:	200004c9 	.word	0x200004c9
 8002770:	60020000 	.word	0x60020000
 8002774:	00f00140 	.word	0x00f00140
 8002778:	200004cb 	.word	0x200004cb
 800277c:	014000f0 	.word	0x014000f0
 8002780:	200004c8 	.word	0x200004c8
 8002784:	200004ca 	.word	0x200004ca

08002788 <lcdSetCursor>:
	LCD_CmdWrite(command);
 8002788:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800278c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
{
 8002790:	b530      	push	{r4, r5, lr}
	LCD_CmdWrite(command);
 8002792:	252b      	movs	r5, #43	; 0x2b
 8002794:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
	cursorXY.x = x;
 8002798:	4c0c      	ldr	r4, [pc, #48]	; (80027cc <lcdSetCursor+0x44>)
	LCD_DataWrite(data);
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <lcdSetCursor+0x48>)
	cursorXY.x = x;
 800279c:	8020      	strh	r0, [r4, #0]
	cursorXY.y = y;
 800279e:	8061      	strh	r1, [r4, #2]
	LCD_CmdWrite(command);
 80027a0:	f8a2 c000 	strh.w	ip, [r2]
  lcdWriteData((x0 >> 8) & 0xFF);
 80027a4:	ea4f 2c10 	mov.w	ip, r0, lsr #8
  lcdWriteData(x0 & 0xFF);
 80027a8:	b2c0      	uxtb	r0, r0
	LCD_DataWrite(data);
 80027aa:	f8a3 c000 	strh.w	ip, [r3]
 80027ae:	8018      	strh	r0, [r3, #0]
 80027b0:	f8a3 c000 	strh.w	ip, [r3]
 80027b4:	8018      	strh	r0, [r3, #0]
  lcdWriteData((y0 >> 8) & 0xFF);
 80027b6:	0a08      	lsrs	r0, r1, #8
  lcdWriteData(y0 & 0xFF);
 80027b8:	b2c9      	uxtb	r1, r1
	LCD_CmdWrite(command);
 80027ba:	8015      	strh	r5, [r2, #0]
	LCD_DataWrite(data);
 80027bc:	8018      	strh	r0, [r3, #0]
 80027be:	8019      	strh	r1, [r3, #0]
 80027c0:	8018      	strh	r0, [r3, #0]
 80027c2:	8019      	strh	r1, [r3, #0]
	LCD_CmdWrite(command);
 80027c4:	f8a2 e000 	strh.w	lr, [r2]
}
 80027c8:	bd30      	pop	{r4, r5, pc}
 80027ca:	bf00      	nop
 80027cc:	200004c4 	.word	0x200004c4
 80027d0:	60020000 	.word	0x60020000

080027d4 <lcdGetWidth>:
  return lcdProperties.width;
 80027d4:	4b01      	ldr	r3, [pc, #4]	; (80027dc <lcdGetWidth+0x8>)
}
 80027d6:	8818      	ldrh	r0, [r3, #0]
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000024 	.word	0x20000024

080027e0 <lcdGetHeight>:
  return lcdProperties.height;
 80027e0:	4b01      	ldr	r3, [pc, #4]	; (80027e8 <lcdGetHeight+0x8>)
}
 80027e2:	8858      	ldrh	r0, [r3, #2]
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000024 	.word	0x20000024

080027ec <lcdGetOrientation>:
  return lcdProperties.orientation;
 80027ec:	4b01      	ldr	r3, [pc, #4]	; (80027f4 <lcdGetOrientation+0x8>)
}
 80027ee:	7918      	ldrb	r0, [r3, #4]
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000024 	.word	0x20000024

080027f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027fa:	490d      	ldr	r1, [pc, #52]	; (8002830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002800:	e002      	b.n	8002808 <LoopCopyDataInit>

08002802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002806:	3304      	adds	r3, #4

08002808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800280c:	d3f9      	bcc.n	8002802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002810:	4c0a      	ldr	r4, [pc, #40]	; (800283c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002814:	e001      	b.n	800281a <LoopFillZerobss>

08002816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002818:	3204      	adds	r2, #4

0800281a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800281c:	d3fb      	bcc.n	8002816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800281e:	f7ff fb7b 	bl	8001f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002822:	f001 fbfb 	bl	800401c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002826:	f7fe ff97 	bl	8001758 <main>
  bx lr
 800282a:	4770      	bx	lr
  ldr r0, =_sdata
 800282c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002830:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002834:	0802d1dc 	.word	0x0802d1dc
  ldr r2, =_sbss
 8002838:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800283c:	200004e0 	.word	0x200004e0

08002840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002840:	e7fe      	b.n	8002840 <ADC1_2_IRQHandler>
	...

08002844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002844:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_InitTick+0x3c>)
{
 800284c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800284e:	7811      	ldrb	r1, [r2, #0]
 8002850:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <HAL_InitTick+0x40>)
 8002852:	fbb3 f3f1 	udiv	r3, r3, r1
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	fbb2 f0f3 	udiv	r0, r2, r3
 800285c:	f000 fbe8 	bl	8003030 <HAL_SYSTICK_Config>
 8002860:	b908      	cbnz	r0, 8002866 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	2d0f      	cmp	r5, #15
 8002864:	d901      	bls.n	800286a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002866:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002868:	bd38      	pop	{r3, r4, r5, pc}
 800286a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800286c:	4602      	mov	r2, r0
 800286e:	4629      	mov	r1, r5
 8002870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002874:	f000 fb9e 	bl	8002fb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_InitTick+0x44>)
 800287a:	4620      	mov	r0, r4
 800287c:	601d      	str	r5, [r3, #0]
}
 800287e:	bd38      	pop	{r3, r4, r5, pc}
 8002880:	2000002c 	.word	0x2000002c
 8002884:	20000000 	.word	0x20000000
 8002888:	20000030 	.word	0x20000030

0800288c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800288c:	4a07      	ldr	r2, [pc, #28]	; (80028ac <HAL_Init+0x20>)
{
 800288e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002890:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002892:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002894:	f043 0310 	orr.w	r3, r3, #16
 8002898:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289a:	f000 fb79 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800289e:	200f      	movs	r0, #15
 80028a0:	f7ff ffd0 	bl	8002844 <HAL_InitTick>
  HAL_MspInit();
 80028a4:	f7ff f99c 	bl	8001be0 <HAL_MspInit>
}
 80028a8:	2000      	movs	r0, #0
 80028aa:	bd08      	pop	{r3, pc}
 80028ac:	40022000 	.word	0x40022000

080028b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80028b0:	4a03      	ldr	r2, [pc, #12]	; (80028c0 <HAL_IncTick+0x10>)
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <HAL_IncTick+0x14>)
 80028b4:	6811      	ldr	r1, [r2, #0]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	440b      	add	r3, r1
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	200004cc 	.word	0x200004cc
 80028c4:	2000002c 	.word	0x2000002c

080028c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80028c8:	4b01      	ldr	r3, [pc, #4]	; (80028d0 <HAL_GetTick+0x8>)
 80028ca:	6818      	ldr	r0, [r3, #0]
}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	200004cc 	.word	0x200004cc

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff fff6 	bl	80028c8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028dc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80028de:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80028e0:	d002      	beq.n	80028e8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <HAL_Delay+0x20>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e8:	f7ff ffee 	bl	80028c8 <HAL_GetTick>
 80028ec:	1b40      	subs	r0, r0, r5
 80028ee:	42a0      	cmp	r0, r4
 80028f0:	d3fa      	bcc.n	80028e8 <HAL_Delay+0x14>
  {
  }
}
 80028f2:	bd38      	pop	{r3, r4, r5, pc}
 80028f4:	2000002c 	.word	0x2000002c

080028f8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fa:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80028fc:	2500      	movs	r5, #0
{
 80028fe:	b083      	sub	sp, #12
 8002900:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002902:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002904:	f7ff ffe0 	bl	80028c8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002908:	6833      	ldr	r3, [r6, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	05d7      	lsls	r7, r2, #23
 800290e:	d472      	bmi.n	80029f6 <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4607      	mov	r7, r0
 8002914:	05d5      	lsls	r5, r2, #23
 8002916:	d403      	bmi.n	8002920 <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800291a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800291e:	d01e      	beq.n	800295e <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_ADC_PollForConversion+0x154>)
 8002922:	2002      	movs	r0, #2
 8002924:	681d      	ldr	r5, [r3, #0]
 8002926:	f001 f83b 	bl	80039a0 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800292a:	6833      	ldr	r3, [r6, #0]
 800292c:	4a48      	ldr	r2, [pc, #288]	; (8002a50 <HAL_ADC_PollForConversion+0x158>)
 800292e:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002930:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002934:	4211      	tst	r1, r2
 8002936:	d125      	bne.n	8002984 <HAL_ADC_PollForConversion+0x8c>
 8002938:	68d9      	ldr	r1, [r3, #12]
 800293a:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 800293e:	4211      	tst	r1, r2
 8002940:	d120      	bne.n	8002984 <HAL_ADC_PollForConversion+0x8c>
 8002942:	6919      	ldr	r1, [r3, #16]
 8002944:	4a43      	ldr	r2, [pc, #268]	; (8002a54 <HAL_ADC_PollForConversion+0x15c>)
 8002946:	4211      	tst	r1, r2
 8002948:	d17e      	bne.n	8002a48 <HAL_ADC_PollForConversion+0x150>
 800294a:	68d9      	ldr	r1, [r3, #12]
 800294c:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8002950:	4211      	tst	r1, r2
 8002952:	bf14      	ite	ne
 8002954:	2029      	movne	r0, #41	; 0x29
 8002956:	2014      	moveq	r0, #20
 8002958:	e01e      	b.n	8002998 <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 800295a:	1c60      	adds	r0, r4, #1
 800295c:	d154      	bne.n	8002a08 <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	0791      	lsls	r1, r2, #30
 8002962:	d5fa      	bpl.n	800295a <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002964:	f06f 0212 	mvn.w	r2, #18
 8002968:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800296a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800296c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002970:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002978:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800297c:	d055      	beq.n	8002a2a <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800297e:	2000      	movs	r0, #0
}
 8002980:	b003      	add	sp, #12
 8002982:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002984:	6919      	ldr	r1, [r3, #16]
 8002986:	4a33      	ldr	r2, [pc, #204]	; (8002a54 <HAL_ADC_PollForConversion+0x15c>)
 8002988:	4211      	tst	r1, r2
 800298a:	d12a      	bne.n	80029e2 <HAL_ADC_PollForConversion+0xea>
 800298c:	68d9      	ldr	r1, [r3, #12]
 800298e:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8002992:	4211      	tst	r1, r2
 8002994:	d125      	bne.n	80029e2 <HAL_ADC_PollForConversion+0xea>
 8002996:	2054      	movs	r0, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002998:	fb00 f505 	mul.w	r5, r0, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800299c:	9a01      	ldr	r2, [sp, #4]
 800299e:	4295      	cmp	r5, r2
 80029a0:	d809      	bhi.n	80029b6 <HAL_ADC_PollForConversion+0xbe>
 80029a2:	e7df      	b.n	8002964 <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80029a4:	9b01      	ldr	r3, [sp, #4]
 80029a6:	42ab      	cmp	r3, r5
 80029a8:	d311      	bcc.n	80029ce <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 80029aa:	9b01      	ldr	r3, [sp, #4]
 80029ac:	3301      	adds	r3, #1
 80029ae:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80029b0:	9b01      	ldr	r3, [sp, #4]
 80029b2:	42ab      	cmp	r3, r5
 80029b4:	d237      	bcs.n	8002a26 <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 80029b6:	1c62      	adds	r2, r4, #1
 80029b8:	d0f7      	beq.n	80029aa <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80029ba:	2c00      	cmp	r4, #0
 80029bc:	d0f2      	beq.n	80029a4 <HAL_ADC_PollForConversion+0xac>
 80029be:	f7ff ff83 	bl	80028c8 <HAL_GetTick>
 80029c2:	1bc0      	subs	r0, r0, r7
 80029c4:	42a0      	cmp	r0, r4
 80029c6:	d9f0      	bls.n	80029aa <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80029c8:	9b01      	ldr	r3, [sp, #4]
 80029ca:	42ab      	cmp	r3, r5
 80029cc:	d2ed      	bcs.n	80029aa <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 80029ce:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 80029d0:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029d2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80029d4:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	62b3      	str	r3, [r6, #40]	; 0x28
}
 80029de:	b003      	add	sp, #12
 80029e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029e2:	6919      	ldr	r1, [r3, #16]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <HAL_ADC_PollForConversion+0x160>)
 80029e6:	4211      	tst	r1, r2
 80029e8:	d114      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x11c>
 80029ea:	68d9      	ldr	r1, [r3, #12]
 80029ec:	4211      	tst	r1, r2
 80029ee:	bf14      	ite	ne
 80029f0:	20fc      	movne	r0, #252	; 0xfc
 80029f2:	2054      	moveq	r0, #84	; 0x54
 80029f4:	e7d0      	b.n	8002998 <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 80029f6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80029fa:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fe:	f043 0320 	orr.w	r3, r3, #32
 8002a02:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8002a04:	b003      	add	sp, #12
 8002a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a08:	b934      	cbnz	r4, 8002a18 <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	f012 0202 	ands.w	r2, r2, #2
 8002a10:	d1a5      	bne.n	800295e <HAL_ADC_PollForConversion+0x66>
 8002a12:	e7dd      	b.n	80029d0 <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a14:	20fc      	movs	r0, #252	; 0xfc
 8002a16:	e7bf      	b.n	8002998 <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a18:	f7ff ff56 	bl	80028c8 <HAL_GetTick>
 8002a1c:	1bc3      	subs	r3, r0, r7
 8002a1e:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a20:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a22:	d99c      	bls.n	800295e <HAL_ADC_PollForConversion+0x66>
 8002a24:	e7f1      	b.n	8002a0a <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a26:	6833      	ldr	r3, [r6, #0]
 8002a28:	e79c      	b.n	8002964 <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a2a:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d1a6      	bne.n	800297e <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a30:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a36:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a38:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002a3a:	04db      	lsls	r3, r3, #19
 8002a3c:	d49f      	bmi.n	800297e <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a3e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a46:	e79b      	b.n	8002980 <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a48:	2029      	movs	r0, #41	; 0x29
 8002a4a:	e7a5      	b.n	8002998 <HAL_ADC_PollForConversion+0xa0>
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	24924924 	.word	0x24924924
 8002a54:	12492492 	.word	0x12492492
 8002a58:	00249249 	.word	0x00249249

08002a5c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a5c:	6803      	ldr	r3, [r0, #0]
 8002a5e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop

08002a64 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002a64:	2300      	movs	r3, #0
{ 
 8002a66:	b530      	push	{r4, r5, lr}
 8002a68:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002a6a:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d074      	beq.n	8002b5e <HAL_ADC_ConfigChannel+0xfa>
 8002a74:	2301      	movs	r3, #1
 8002a76:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a7a:	684b      	ldr	r3, [r1, #4]
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a80:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8002a82:	d932      	bls.n	8002aea <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a84:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8002a8a:	d84e      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a8c:	f04f 0c1f 	mov.w	ip, #31
 8002a90:	6808      	ldr	r0, [r1, #0]
 8002a92:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002a94:	3b23      	subs	r3, #35	; 0x23
 8002a96:	fa00 fe03 	lsl.w	lr, r0, r3
 8002a9a:	fa0c f303 	lsl.w	r3, ip, r3
 8002a9e:	ea25 0303 	bic.w	r3, r5, r3
 8002aa2:	ea43 030e 	orr.w	r3, r3, lr
 8002aa6:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002aa8:	2809      	cmp	r0, #9
 8002aaa:	d930      	bls.n	8002b0e <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002aac:	f04f 0c07 	mov.w	ip, #7
 8002ab0:	688d      	ldr	r5, [r1, #8]
 8002ab2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002ab6:	68e3      	ldr	r3, [r4, #12]
 8002ab8:	391e      	subs	r1, #30
 8002aba:	408d      	lsls	r5, r1
 8002abc:	fa0c f101 	lsl.w	r1, ip, r1
 8002ac0:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ac4:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ac8:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aca:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002acc:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ace:	d844      	bhi.n	8002b5a <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_ADC_ConfigChannel+0x128>)
 8002ad2:	429c      	cmp	r4, r3
 8002ad4:	d038      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 8002ad6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002ada:	f043 0320 	orr.w	r3, r3, #32
 8002ade:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002ae6:	b003      	add	sp, #12
 8002ae8:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002aea:	f04f 0c1f 	mov.w	ip, #31
 8002aee:	6808      	ldr	r0, [r1, #0]
 8002af0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002af4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002af6:	3b05      	subs	r3, #5
 8002af8:	fa00 fe03 	lsl.w	lr, r0, r3
 8002afc:	fa0c f303 	lsl.w	r3, ip, r3
 8002b00:	ea25 0303 	bic.w	r3, r5, r3
 8002b04:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b08:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b0a:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b0c:	d8ce      	bhi.n	8002aac <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b0e:	2507      	movs	r5, #7
 8002b10:	6889      	ldr	r1, [r1, #8]
 8002b12:	6923      	ldr	r3, [r4, #16]
 8002b14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b18:	4081      	lsls	r1, r0
 8002b1a:	fa05 f000 	lsl.w	r0, r5, r0
 8002b1e:	ea23 0300 	bic.w	r3, r3, r0
 8002b22:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b24:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b26:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b28:	e7da      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b2a:	f04f 0c1f 	mov.w	ip, #31
 8002b2e:	6808      	ldr	r0, [r1, #0]
 8002b30:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002b32:	3b41      	subs	r3, #65	; 0x41
 8002b34:	fa00 fe03 	lsl.w	lr, r0, r3
 8002b38:	fa0c f303 	lsl.w	r3, ip, r3
 8002b3c:	ea25 0303 	bic.w	r3, r5, r3
 8002b40:	ea43 030e 	orr.w	r3, r3, lr
 8002b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b46:	e7af      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b48:	68a3      	ldr	r3, [r4, #8]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	d405      	bmi.n	8002b5a <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b4e:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b50:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b56:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b58:	d004      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	e7c0      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8002b5e:	2002      	movs	r0, #2
}
 8002b60:	b003      	add	sp, #12
 8002b62:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_ADC_ConfigChannel+0x12c>)
 8002b66:	490b      	ldr	r1, [pc, #44]	; (8002b94 <HAL_ADC_ConfigChannel+0x130>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fba1 1303 	umull	r1, r3, r1, r3
 8002b6e:	0c9b      	lsrs	r3, r3, #18
 8002b70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002b78:	9b01      	ldr	r3, [sp, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ed      	beq.n	8002b5a <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8002b7e:	9b01      	ldr	r3, [sp, #4]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002b84:	9b01      	ldr	r3, [sp, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f9      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x11a>
 8002b8a:	e7e6      	b.n	8002b5a <HAL_ADC_ConfigChannel+0xf6>
 8002b8c:	40012400 	.word	0x40012400
 8002b90:	20000000 	.word	0x20000000
 8002b94:	431bde83 	.word	0x431bde83

08002b98 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002b98:	2300      	movs	r3, #0
{
 8002b9a:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b9c:	6802      	ldr	r2, [r0, #0]
{
 8002b9e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002ba0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ba2:	6893      	ldr	r3, [r2, #8]
 8002ba4:	07d9      	lsls	r1, r3, #31
 8002ba6:	d427      	bmi.n	8002bf8 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <ADC_Enable+0x80>)
 8002baa:	4604      	mov	r4, r0
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	481b      	ldr	r0, [pc, #108]	; (8002c1c <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8002bb0:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb2:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8002bb6:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bba:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8002bbc:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bbe:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002bc0:	9b01      	ldr	r3, [sp, #4]
 8002bc2:	b12b      	cbz	r3, 8002bd0 <ADC_Enable+0x38>
    {
      wait_loop_index--;
 8002bc4:	9b01      	ldr	r3, [sp, #4]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002bca:	9b01      	ldr	r3, [sp, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f9      	bne.n	8002bc4 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bd0:	f7ff fe7a 	bl	80028c8 <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bd4:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002bd6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	07da      	lsls	r2, r3, #31
 8002bdc:	d40c      	bmi.n	8002bf8 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bde:	f7ff fe73 	bl	80028c8 <HAL_GetTick>
 8002be2:	1b43      	subs	r3, r0, r5
 8002be4:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002be6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002be8:	d903      	bls.n	8002bf2 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	f012 0201 	ands.w	r2, r2, #1
 8002bf0:	d005      	beq.n	8002bfe <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	07db      	lsls	r3, r3, #31
 8002bf6:	d5f2      	bpl.n	8002bde <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bf8:	2000      	movs	r0, #0
}
 8002bfa:	b003      	add	sp, #12
 8002bfc:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8002bfe:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002c02:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c0e:	4303      	orrs	r3, r0
 8002c10:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002c12:	b003      	add	sp, #12
 8002c14:	bd30      	pop	{r4, r5, pc}
 8002c16:	bf00      	nop
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	431bde83 	.word	0x431bde83

08002c20 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002c20:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d038      	beq.n	8002c9a <HAL_ADC_Start+0x7a>
 8002c28:	2301      	movs	r3, #1
{
 8002c2a:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002c2c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002c30:	4604      	mov	r4, r0
 8002c32:	f7ff ffb1 	bl	8002b98 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002c36:	bb60      	cbnz	r0, 8002c92 <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8002c38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c3a:	6822      	ldr	r2, [r4, #0]
 8002c3c:	4929      	ldr	r1, [pc, #164]	; (8002ce4 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c4a:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 8002c4c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c4e:	d026      	beq.n	8002c9e <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c56:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c58:	6853      	ldr	r3, [r2, #4]
 8002c5a:	0559      	lsls	r1, r3, #21
 8002c5c:	d42b      	bmi.n	8002cb6 <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002c60:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c62:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c66:	bf18      	it	ne
 8002c68:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8002c6a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c6e:	bf18      	it	ne
 8002c70:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002c74:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c76:	f06f 0302 	mvn.w	r3, #2
 8002c7a:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c7c:	6893      	ldr	r3, [r2, #8]
 8002c7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c86:	d01d      	beq.n	8002cc4 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c88:	6893      	ldr	r3, [r2, #8]
 8002c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c8e:	6093      	str	r3, [r2, #8]
}
 8002c90:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8002c92:	2300      	movs	r3, #0
 8002c94:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002c98:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002c9a:	2002      	movs	r0, #2
}
 8002c9c:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_ADC_Start+0xc8>)
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8002ca6:	d0d3      	beq.n	8002c50 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ca8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002caa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002cae:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	055b      	lsls	r3, r3, #21
 8002cb4:	d5d3      	bpl.n	8002c5e <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002cc2:	e7cc      	b.n	8002c5e <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <HAL_ADC_Start+0xc4>)
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d004      	beq.n	8002cd4 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002cca:	6893      	ldr	r3, [r2, #8]
 8002ccc:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8002cd0:	6093      	str	r3, [r2, #8]
}
 8002cd2:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002cd4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002cd8:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cda:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002cde:	d1d3      	bne.n	8002c88 <HAL_ADC_Start+0x68>
 8002ce0:	e7f3      	b.n	8002cca <HAL_ADC_Start+0xaa>
 8002ce2:	bf00      	nop
 8002ce4:	40012800 	.word	0x40012800
 8002ce8:	40012400 	.word	0x40012400

08002cec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cee:	6803      	ldr	r3, [r0, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	07d4      	lsls	r4, r2, #31
 8002cf4:	d401      	bmi.n	8002cfa <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cf6:	2000      	movs	r0, #0
}
 8002cf8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002d04:	f7ff fde0 	bl	80028c8 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d08:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002d0a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	07d9      	lsls	r1, r3, #31
 8002d10:	d5f1      	bpl.n	8002cf6 <ADC_ConversionStop_Disable+0xa>
 8002d12:	e002      	b.n	8002d1a <ADC_ConversionStop_Disable+0x2e>
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	07db      	lsls	r3, r3, #31
 8002d18:	d5ed      	bpl.n	8002cf6 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d1a:	f7ff fdd5 	bl	80028c8 <HAL_GetTick>
 8002d1e:	1b43      	subs	r3, r0, r5
 8002d20:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d22:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d24:	d9f6      	bls.n	8002d14 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	07d2      	lsls	r2, r2, #31
 8002d2a:	d5f3      	bpl.n	8002d14 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8002d2c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d30:	f043 0310 	orr.w	r3, r3, #16
 8002d34:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d38:	4303      	orrs	r3, r0
 8002d3a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}
 8002d3e:	bf00      	nop

08002d40 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d075      	beq.n	8002e30 <HAL_ADC_Init+0xf0>
{
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d48:	4604      	mov	r4, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d052      	beq.n	8002df4 <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f7ff ffcc 	bl	8002cec <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d56:	f013 0310 	ands.w	r3, r3, #16
 8002d5a:	d145      	bne.n	8002de8 <HAL_ADC_Init+0xa8>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d143      	bne.n	8002de8 <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 8002d60:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d62:	4d4a      	ldr	r5, [pc, #296]	; (8002e8c <HAL_ADC_Init+0x14c>)
 8002d64:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002d66:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002d6a:	f021 0102 	bic.w	r1, r1, #2
 8002d6e:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d72:	42aa      	cmp	r2, r5
    ADC_STATE_CLR_SET(hadc->State,
 8002d74:	62a1      	str	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d76:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d78:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d7a:	d053      	beq.n	8002e24 <HAL_ADC_Init+0xe4>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d7c:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d7e:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8002d82:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d84:	68a5      	ldr	r5, [r4, #8]
 8002d86:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002d8a:	d039      	beq.n	8002e00 <HAL_ADC_Init+0xc0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d8c:	f894 e014 	ldrb.w	lr, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d90:	2d01      	cmp	r5, #1
 8002d92:	bf0c      	ite	eq
 8002d94:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8002d98:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d9c:	f1be 0f01 	cmp.w	lr, #1
 8002da0:	d052      	beq.n	8002e48 <HAL_ADC_Init+0x108>
      MODIFY_REG(hadc->Instance->CR1,
 8002da2:	6856      	ldr	r6, [r2, #4]
 8002da4:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8002da8:	ea46 060c 	orr.w	r6, r6, ip
 8002dac:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002dae:	6897      	ldr	r7, [r2, #8]
 8002db0:	4e37      	ldr	r6, [pc, #220]	; (8002e90 <HAL_ADC_Init+0x150>)
 8002db2:	403e      	ands	r6, r7
 8002db4:	430e      	orrs	r6, r1
 8002db6:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002db8:	2d01      	cmp	r5, #1
 8002dba:	d02f      	beq.n	8002e1c <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 8002dbc:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8002dbe:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 8002dc2:	ea4c 0303 	orr.w	r3, ip, r3
 8002dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dc8:	6892      	ldr	r2, [r2, #8]
 8002dca:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <HAL_ADC_Init+0x154>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	4299      	cmp	r1, r3
 8002dd0:	d030      	beq.n	8002e34 <HAL_ADC_Init+0xf4>
      tmp_hal_status = HAL_ERROR;
 8002dd2:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002dd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dd6:	f023 0312 	bic.w	r3, r3, #18
 8002dda:	f043 0310 	orr.w	r3, r3, #16
 8002dde:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002de2:	4303      	orrs	r3, r0
 8002de4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002dea:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dec:	f043 0310 	orr.w	r3, r3, #16
 8002df0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8002df4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002df6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002dfa:	f7fe ff13 	bl	8001c24 <HAL_ADC_MspInit>
 8002dfe:	e7a6      	b.n	8002d4e <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e00:	7d27      	ldrb	r7, [r4, #20]
 8002e02:	2f01      	cmp	r7, #1
 8002e04:	d01f      	beq.n	8002e46 <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CR1,
 8002e06:	6853      	ldr	r3, [r2, #4]
 8002e08:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e10:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002e12:	6895      	ldr	r5, [r2, #8]
 8002e14:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_ADC_Init+0x150>)
 8002e16:	402b      	ands	r3, r5
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e1c:	6923      	ldr	r3, [r4, #16]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	051b      	lsls	r3, r3, #20
 8002e22:	e7cb      	b.n	8002dbc <HAL_ADC_Init+0x7c>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e24:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
 8002e28:	bf08      	it	eq
 8002e2a:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
 8002e2e:	e7a5      	b.n	8002d7c <HAL_ADC_Init+0x3c>
    return HAL_ERROR;
 8002e30:	2001      	movs	r0, #1
}
 8002e32:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8002e34:	2300      	movs	r3, #0
 8002e36:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002e38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e46:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e48:	b1c6      	cbz	r6, 8002e7c <HAL_ADC_Init+0x13c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e4c:	f046 0620 	orr.w	r6, r6, #32
 8002e50:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e54:	f046 0601 	orr.w	r6, r6, #1
 8002e58:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8002e5a:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e5c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002e60:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8002e64:	ea46 060c 	orr.w	r6, r6, ip
 8002e68:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002e6a:	6897      	ldr	r7, [r2, #8]
 8002e6c:	4e08      	ldr	r6, [pc, #32]	; (8002e90 <HAL_ADC_Init+0x150>)
 8002e6e:	ea06 0607 	and.w	r6, r6, r7
 8002e72:	ea46 0601 	orr.w	r6, r6, r1
 8002e76:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e78:	d19e      	bne.n	8002db8 <HAL_ADC_Init+0x78>
 8002e7a:	e7cf      	b.n	8002e1c <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e7c:	69a6      	ldr	r6, [r4, #24]
 8002e7e:	3e01      	subs	r6, #1
 8002e80:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 8002e84:	f446 6c00 	orr.w	ip, r6, #2048	; 0x800
 8002e88:	e7e7      	b.n	8002e5a <HAL_ADC_Init+0x11a>
 8002e8a:	bf00      	nop
 8002e8c:	40013c00 	.word	0x40013c00
 8002e90:	ffe1f7fd 	.word	0xffe1f7fd
 8002e94:	ff1f0efe 	.word	0xff1f0efe

08002e98 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002e98:	2300      	movs	r3, #0
{
 8002e9a:	b570      	push	{r4, r5, r6, lr}
 8002e9c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002e9e:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d05f      	beq.n	8002f68 <HAL_ADCEx_Calibration_Start+0xd0>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002eae:	4604      	mov	r4, r0
 8002eb0:	f7ff ff1c 	bl	8002cec <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002eb4:	4605      	mov	r5, r0
 8002eb6:	b128      	cbz	r0, 8002ec4 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb8:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 8002eba:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8002ebc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002ec4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ec6:	4a31      	ldr	r2, [pc, #196]	; (8002f8c <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002ec8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ecc:	f023 0302 	bic.w	r3, r3, #2
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ed6:	2002      	movs	r0, #2
 8002ed8:	6816      	ldr	r6, [r2, #0]
 8002eda:	f000 fd61 	bl	80039a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ede:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002ee2:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8002ee4:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8002ee6:	9b01      	ldr	r3, [sp, #4]
 8002ee8:	b12b      	cbz	r3, 8002ef6 <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8002eea:	9b01      	ldr	r3, [sp, #4]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002ef0:	9b01      	ldr	r3, [sp, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f9      	bne.n	8002eea <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff fe4e 	bl	8002b98 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002efc:	6822      	ldr	r2, [r4, #0]
 8002efe:	6893      	ldr	r3, [r2, #8]
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002f06:	f7ff fcdf 	bl	80028c8 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f0a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002f0c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	0711      	lsls	r1, r2, #28
 8002f12:	d50b      	bpl.n	8002f2c <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f14:	f7ff fcd8 	bl	80028c8 <HAL_GetTick>
 8002f18:	1b83      	subs	r3, r0, r6
 8002f1a:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f1c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f1e:	d902      	bls.n	8002f26 <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	0712      	lsls	r2, r2, #28
 8002f24:	d424      	bmi.n	8002f70 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	0710      	lsls	r0, r2, #28
 8002f2a:	d4f3      	bmi.n	8002f14 <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	f042 0204 	orr.w	r2, r2, #4
 8002f32:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002f34:	f7ff fcc8 	bl	80028c8 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f38:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002f3a:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	0759      	lsls	r1, r3, #29
 8002f40:	d50b      	bpl.n	8002f5a <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f42:	f7ff fcc1 	bl	80028c8 <HAL_GetTick>
 8002f46:	1b83      	subs	r3, r0, r6
 8002f48:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f4a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002f4c:	d902      	bls.n	8002f54 <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	0752      	lsls	r2, r2, #29
 8002f52:	d40d      	bmi.n	8002f70 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	075b      	lsls	r3, r3, #29
 8002f58:	d4f3      	bmi.n	8002f42 <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f5c:	f023 0303 	bic.w	r3, r3, #3
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f66:	e7a7      	b.n	8002eb8 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8002f68:	2502      	movs	r5, #2
}
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 8002f70:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8002f72:	2200      	movs	r2, #0
}
 8002f74:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 8002f76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002f78:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	f023 0312 	bic.w	r3, r3, #18
 8002f80:	f043 0310 	orr.w	r3, r3, #16
 8002f84:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002f86:	b002      	add	sp, #8
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000

08002f90 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f90:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f94:	4906      	ldr	r1, [pc, #24]	; (8002fb0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f96:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002fac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fb6:	b500      	push	{lr}
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbe:	f1c3 0e07 	rsb	lr, r3, #7
 8002fc2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fca:	bf28      	it	cs
 8002fcc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd0:	f1bc 0f06 	cmp.w	ip, #6
 8002fd4:	d91b      	bls.n	800300e <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fda:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fdc:	fa0c fc03 	lsl.w	ip, ip, r3
 8002fe0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002fe8:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002fec:	ea21 010c 	bic.w	r1, r1, ip
 8002ff0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002ff2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	db0c      	blt.n	8003014 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffa:	0109      	lsls	r1, r1, #4
 8002ffc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003000:	b2c9      	uxtb	r1, r1
 8003002:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003006:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800300a:	f85d fb04 	ldr.w	pc, [sp], #4
 800300e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003010:	4613      	mov	r3, r2
 8003012:	e7e7      	b.n	8002fe4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_NVIC_SetPriority+0x78>)
 8003016:	f000 000f 	and.w	r0, r0, #15
 800301a:	0109      	lsls	r1, r1, #4
 800301c:	b2c9      	uxtb	r1, r1
 800301e:	4403      	add	r3, r0
 8003020:	7619      	strb	r1, [r3, #24]
 8003022:	f85d fb04 	ldr.w	pc, [sp], #4
 8003026:	bf00      	nop
 8003028:	e000ed00 	.word	0xe000ed00
 800302c:	e000ecfc 	.word	0xe000ecfc

08003030 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003030:	3801      	subs	r0, #1
 8003032:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003036:	d20f      	bcs.n	8003058 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003038:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003040:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003042:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003044:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	4c05      	ldr	r4, [pc, #20]	; (800305c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003048:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800304e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003050:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003052:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003054:	6119      	str	r1, [r3, #16]
 8003056:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003058:	2001      	movs	r0, #1
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003064:	680e      	ldr	r6, [r1, #0]
{
 8003066:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003068:	2e00      	cmp	r6, #0
 800306a:	f000 80be 	beq.w	80031ea <HAL_GPIO_Init+0x18a>
 800306e:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003070:	4f85      	ldr	r7, [pc, #532]	; (8003288 <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 8003072:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8003074:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003076:	4d85      	ldr	r5, [pc, #532]	; (800328c <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 8003078:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8003290 <HAL_GPIO_Init+0x230>
 800307c:	e006      	b.n	800308c <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800307e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003080:	fa36 f403 	lsrs.w	r4, r6, r3
 8003084:	f102 0204 	add.w	r2, r2, #4
 8003088:	f000 80af 	beq.w	80031ea <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 800308c:	2401      	movs	r4, #1
 800308e:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8003090:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003094:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8003098:	d1f1      	bne.n	800307e <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800309a:	684e      	ldr	r6, [r1, #4]
 800309c:	2e12      	cmp	r6, #18
 800309e:	f200 80a7 	bhi.w	80031f0 <HAL_GPIO_Init+0x190>
 80030a2:	2e12      	cmp	r6, #18
 80030a4:	d81a      	bhi.n	80030dc <HAL_GPIO_Init+0x7c>
 80030a6:	e8df f006 	tbb	[pc, r6]
 80030aa:	c2b0      	.short	0xc2b0
 80030ac:	1919d7be 	.word	0x1919d7be
 80030b0:	19191919 	.word	0x19191919
 80030b4:	19191919 	.word	0x19191919
 80030b8:	ba191919 	.word	0xba191919
 80030bc:	c5          	.byte	0xc5
 80030bd:	00          	.byte	0x00
 80030be:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8003294 <HAL_GPIO_Init+0x234>
 80030c2:	4576      	cmp	r6, lr
 80030c4:	f000 80a1 	beq.w	800320a <HAL_GPIO_Init+0x1aa>
 80030c8:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 80030cc:	4576      	cmp	r6, lr
 80030ce:	f000 809c 	beq.w	800320a <HAL_GPIO_Init+0x1aa>
 80030d2:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80030d6:	4576      	cmp	r6, lr
 80030d8:	f000 8097 	beq.w	800320a <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030dc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80030e0:	bf9c      	itt	ls
 80030e2:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030e4:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030e6:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030ea:	bf84      	itt	hi
 80030ec:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030f0:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030f4:	f8de 4000 	ldr.w	r4, [lr]
 80030f8:	fa0a f90b 	lsl.w	r9, sl, fp
 80030fc:	fa06 fb0b 	lsl.w	fp, r6, fp
 8003100:	ea24 040b 	bic.w	r4, r4, fp
 8003104:	ea44 0409 	orr.w	r4, r4, r9
 8003108:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800310c:	684c      	ldr	r4, [r1, #4]
 800310e:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003112:	f000 8082 	beq.w	800321a <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003116:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800311a:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800311e:	f04e 0e01 	orr.w	lr, lr, #1
 8003122:	f8c7 e018 	str.w	lr, [r7, #24]
 8003126:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800312a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 800312e:	f00e 0e01 	and.w	lr, lr, #1
 8003132:	f8cd e004 	str.w	lr, [sp, #4]
 8003136:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800313a:	f023 0e03 	bic.w	lr, r3, #3
 800313e:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8003142:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003146:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800314a:	fa06 f609 	lsl.w	r6, r6, r9
 800314e:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003152:	f8df b144 	ldr.w	fp, [pc, #324]	; 8003298 <HAL_GPIO_Init+0x238>
 8003156:	4558      	cmp	r0, fp
 8003158:	d01b      	beq.n	8003192 <HAL_GPIO_Init+0x132>
 800315a:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 800315e:	4558      	cmp	r0, fp
 8003160:	d073      	beq.n	800324a <HAL_GPIO_Init+0x1ea>
 8003162:	f8df b138 	ldr.w	fp, [pc, #312]	; 800329c <HAL_GPIO_Init+0x23c>
 8003166:	4558      	cmp	r0, fp
 8003168:	d068      	beq.n	800323c <HAL_GPIO_Init+0x1dc>
 800316a:	f8df b134 	ldr.w	fp, [pc, #308]	; 80032a0 <HAL_GPIO_Init+0x240>
 800316e:	4558      	cmp	r0, fp
 8003170:	d07c      	beq.n	800326c <HAL_GPIO_Init+0x20c>
 8003172:	f8df b130 	ldr.w	fp, [pc, #304]	; 80032a4 <HAL_GPIO_Init+0x244>
 8003176:	4558      	cmp	r0, fp
 8003178:	d07f      	beq.n	800327a <HAL_GPIO_Init+0x21a>
 800317a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80032a8 <HAL_GPIO_Init+0x248>
 800317e:	4558      	cmp	r0, fp
 8003180:	bf0c      	ite	eq
 8003182:	f04f 0b05 	moveq.w	fp, #5
 8003186:	f04f 0b06 	movne.w	fp, #6
 800318a:	fa0b f909 	lsl.w	r9, fp, r9
 800318e:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003192:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003196:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003198:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800319c:	bf14      	ite	ne
 800319e:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031a2:	ea26 060c 	biceq.w	r6, r6, ip
 80031a6:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80031a8:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031aa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80031ae:	bf14      	ite	ne
 80031b0:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031b4:	ea26 060c 	biceq.w	r6, r6, ip
 80031b8:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80031ba:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031bc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80031c0:	bf14      	ite	ne
 80031c2:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031c6:	ea26 060c 	biceq.w	r6, r6, ip
 80031ca:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031cc:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80031d0:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d2:	d01f      	beq.n	8003214 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 80031d4:	ea44 040c 	orr.w	r4, r4, ip
 80031d8:	60ec      	str	r4, [r5, #12]
 80031da:	680e      	ldr	r6, [r1, #0]
	position++;
 80031dc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031de:	fa36 f403 	lsrs.w	r4, r6, r3
 80031e2:	f102 0204 	add.w	r2, r2, #4
 80031e6:	f47f af51 	bne.w	800308c <HAL_GPIO_Init+0x2c>
  }
}
 80031ea:	b003      	add	sp, #12
 80031ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80031f0:	4546      	cmp	r6, r8
 80031f2:	d00a      	beq.n	800320a <HAL_GPIO_Init+0x1aa>
 80031f4:	f67f af63 	bls.w	80030be <HAL_GPIO_Init+0x5e>
 80031f8:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 80032ac <HAL_GPIO_Init+0x24c>
 80031fc:	4576      	cmp	r6, lr
 80031fe:	d004      	beq.n	800320a <HAL_GPIO_Init+0x1aa>
 8003200:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003204:	4576      	cmp	r6, lr
 8003206:	f47f af69 	bne.w	80030dc <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800320a:	688e      	ldr	r6, [r1, #8]
 800320c:	bb3e      	cbnz	r6, 800325e <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800320e:	f04f 0a04 	mov.w	sl, #4
 8003212:	e763      	b.n	80030dc <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003214:	ea24 040c 	bic.w	r4, r4, ip
 8003218:	60ec      	str	r4, [r5, #12]
 800321a:	680e      	ldr	r6, [r1, #0]
 800321c:	e72f      	b.n	800307e <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800321e:	68cc      	ldr	r4, [r1, #12]
 8003220:	f104 0a04 	add.w	sl, r4, #4
          break;
 8003224:	e75a      	b.n	80030dc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003226:	68cc      	ldr	r4, [r1, #12]
 8003228:	f104 0a08 	add.w	sl, r4, #8
          break;
 800322c:	e756      	b.n	80030dc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800322e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8003232:	e753      	b.n	80030dc <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003234:	68cc      	ldr	r4, [r1, #12]
 8003236:	f104 0a0c 	add.w	sl, r4, #12
          break;
 800323a:	e74f      	b.n	80030dc <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800323c:	f04f 0b02 	mov.w	fp, #2
 8003240:	fa0b f909 	lsl.w	r9, fp, r9
 8003244:	ea46 0609 	orr.w	r6, r6, r9
 8003248:	e7a3      	b.n	8003192 <HAL_GPIO_Init+0x132>
 800324a:	f04f 0b01 	mov.w	fp, #1
 800324e:	fa0b f909 	lsl.w	r9, fp, r9
 8003252:	ea46 0609 	orr.w	r6, r6, r9
 8003256:	e79c      	b.n	8003192 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8003258:	f04f 0a00 	mov.w	sl, #0
 800325c:	e73e      	b.n	80030dc <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800325e:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003260:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8003264:	bf0c      	ite	eq
 8003266:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8003268:	6144      	strne	r4, [r0, #20]
 800326a:	e737      	b.n	80030dc <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800326c:	f04f 0b03 	mov.w	fp, #3
 8003270:	fa0b f909 	lsl.w	r9, fp, r9
 8003274:	ea46 0609 	orr.w	r6, r6, r9
 8003278:	e78b      	b.n	8003192 <HAL_GPIO_Init+0x132>
 800327a:	f04f 0b04 	mov.w	fp, #4
 800327e:	fa0b f909 	lsl.w	r9, fp, r9
 8003282:	ea46 0609 	orr.w	r6, r6, r9
 8003286:	e784      	b.n	8003192 <HAL_GPIO_Init+0x132>
 8003288:	40021000 	.word	0x40021000
 800328c:	40010400 	.word	0x40010400
 8003290:	10220000 	.word	0x10220000
 8003294:	10120000 	.word	0x10120000
 8003298:	40010800 	.word	0x40010800
 800329c:	40011000 	.word	0x40011000
 80032a0:	40011400 	.word	0x40011400
 80032a4:	40011800 	.word	0x40011800
 80032a8:	40011c00 	.word	0x40011c00
 80032ac:	10310000 	.word	0x10310000

080032b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032b0:	6883      	ldr	r3, [r0, #8]
 80032b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80032b4:	bf14      	ite	ne
 80032b6:	2001      	movne	r0, #1
 80032b8:	2000      	moveq	r0, #0
 80032ba:	4770      	bx	lr

080032bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032bc:	b902      	cbnz	r2, 80032c0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032be:	0409      	lsls	r1, r1, #16
 80032c0:	6101      	str	r1, [r0, #16]
  }
}
 80032c2:	4770      	bx	lr

080032c4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c4:	2800      	cmp	r0, #0
 80032c6:	f000 81b6 	beq.w	8003636 <HAL_RCC_OscConfig+0x372>
{
 80032ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	6803      	ldr	r3, [r0, #0]
 80032d0:	4604      	mov	r4, r0
 80032d2:	07dd      	lsls	r5, r3, #31
{
 80032d4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	d535      	bpl.n	8003344 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d8:	499a      	ldr	r1, [pc, #616]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80032da:	684a      	ldr	r2, [r1, #4]
 80032dc:	f002 020c 	and.w	r2, r2, #12
 80032e0:	2a04      	cmp	r2, #4
 80032e2:	f000 80ef 	beq.w	80034c4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032e6:	684a      	ldr	r2, [r1, #4]
 80032e8:	f002 020c 	and.w	r2, r2, #12
 80032ec:	2a08      	cmp	r2, #8
 80032ee:	f000 80e5 	beq.w	80034bc <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f2:	6863      	ldr	r3, [r4, #4]
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f8:	d010      	beq.n	800331c <HAL_RCC_OscConfig+0x58>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 810c 	beq.w	8003518 <HAL_RCC_OscConfig+0x254>
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003304:	f000 8182 	beq.w	800360c <HAL_RCC_OscConfig+0x348>
 8003308:	4b8e      	ldr	r3, [pc, #568]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e004      	b.n	8003326 <HAL_RCC_OscConfig+0x62>
 800331c:	4a89      	ldr	r2, [pc, #548]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800331e:	6813      	ldr	r3, [r2, #0]
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7ff facf 	bl	80028c8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4e86      	ldr	r6, [pc, #536]	; (8003544 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 800332c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	e005      	b.n	800333c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7ff faca 	bl	80028c8 <HAL_GetTick>
 8003334:	1b40      	subs	r0, r0, r5
 8003336:	2864      	cmp	r0, #100	; 0x64
 8003338:	f200 80ea 	bhi.w	8003510 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333c:	6833      	ldr	r3, [r6, #0]
 800333e:	039a      	lsls	r2, r3, #14
 8003340:	d5f6      	bpl.n	8003330 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	079f      	lsls	r7, r3, #30
 8003346:	d528      	bpl.n	800339a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003348:	4a7e      	ldr	r2, [pc, #504]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800334a:	6851      	ldr	r1, [r2, #4]
 800334c:	f011 0f0c 	tst.w	r1, #12
 8003350:	f000 808d 	beq.w	800346e <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003354:	6851      	ldr	r1, [r2, #4]
 8003356:	f001 010c 	and.w	r1, r1, #12
 800335a:	2908      	cmp	r1, #8
 800335c:	f000 8083 	beq.w	8003466 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003360:	6923      	ldr	r3, [r4, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8118 	beq.w	8003598 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003368:	2201      	movs	r2, #1
 800336a:	4b77      	ldr	r3, [pc, #476]	; (8003548 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	4e75      	ldr	r6, [pc, #468]	; (8003544 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 800336e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003370:	f7ff faaa 	bl	80028c8 <HAL_GetTick>
 8003374:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	e005      	b.n	8003384 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003378:	f7ff faa6 	bl	80028c8 <HAL_GetTick>
 800337c:	1b40      	subs	r0, r0, r5
 800337e:	2802      	cmp	r0, #2
 8003380:	f200 80c6 	bhi.w	8003510 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003384:	6833      	ldr	r3, [r6, #0]
 8003386:	0798      	lsls	r0, r3, #30
 8003388:	d5f6      	bpl.n	8003378 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338a:	6833      	ldr	r3, [r6, #0]
 800338c:	6962      	ldr	r2, [r4, #20]
 800338e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003392:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003396:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	071a      	lsls	r2, r3, #28
 800339c:	d41f      	bmi.n	80033de <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339e:	075d      	lsls	r5, r3, #29
 80033a0:	d542      	bpl.n	8003428 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b68      	ldr	r3, [pc, #416]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	00d0      	lsls	r0, r2, #3
 80033a8:	d57d      	bpl.n	80034a6 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ac:	4e67      	ldr	r6, [pc, #412]	; (800354c <HAL_RCC_OscConfig+0x288>)
 80033ae:	6833      	ldr	r3, [r6, #0]
 80033b0:	05d9      	lsls	r1, r3, #23
 80033b2:	f140 809d 	bpl.w	80034f0 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b6:	68e3      	ldr	r3, [r4, #12]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	f000 80fe 	beq.w	80035ba <HAL_RCC_OscConfig+0x2f6>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80ca 	beq.w	8003558 <HAL_RCC_OscConfig+0x294>
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	4b5f      	ldr	r3, [pc, #380]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033c8:	6a1a      	ldr	r2, [r3, #32]
 80033ca:	f000 812c 	beq.w	8003626 <HAL_RCC_OscConfig+0x362>
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	621a      	str	r2, [r3, #32]
 80033d4:	6a1a      	ldr	r2, [r3, #32]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	621a      	str	r2, [r3, #32]
 80033dc:	e0f2      	b.n	80035c4 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033de:	69a3      	ldr	r3, [r4, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d04f      	beq.n	8003484 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 80033e4:	2201      	movs	r2, #1
 80033e6:	4b58      	ldr	r3, [pc, #352]	; (8003548 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e8:	4e56      	ldr	r6, [pc, #344]	; (8003544 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 80033ea:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80033ee:	f7ff fa6b 	bl	80028c8 <HAL_GetTick>
 80033f2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f4:	e005      	b.n	8003402 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f6:	f7ff fa67 	bl	80028c8 <HAL_GetTick>
 80033fa:	1b40      	subs	r0, r0, r5
 80033fc:	2802      	cmp	r0, #2
 80033fe:	f200 8087 	bhi.w	8003510 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003404:	079b      	lsls	r3, r3, #30
 8003406:	d5f6      	bpl.n	80033f6 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003408:	4b51      	ldr	r3, [pc, #324]	; (8003550 <HAL_RCC_OscConfig+0x28c>)
 800340a:	4a52      	ldr	r2, [pc, #328]	; (8003554 <HAL_RCC_OscConfig+0x290>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0a5b      	lsrs	r3, r3, #9
 8003414:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003416:	bf00      	nop
  }
  while (Delay --);
 8003418:	9b01      	ldr	r3, [sp, #4]
 800341a:	1e5a      	subs	r2, r3, #1
 800341c:	9201      	str	r2, [sp, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f9      	bne.n	8003416 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	075d      	lsls	r5, r3, #29
 8003426:	d4bc      	bmi.n	80033a2 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003428:	69e0      	ldr	r0, [r4, #28]
 800342a:	b1c0      	cbz	r0, 800345e <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342c:	4d45      	ldr	r5, [pc, #276]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800342e:	686b      	ldr	r3, [r5, #4]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	f000 80d8 	beq.w	80035ea <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800343a:	2200      	movs	r2, #0
 800343c:	4b42      	ldr	r3, [pc, #264]	; (8003548 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003440:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003442:	f000 80fa 	beq.w	800363a <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8003446:	f7ff fa3f 	bl	80028c8 <HAL_GetTick>
 800344a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344c:	e004      	b.n	8003458 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344e:	f7ff fa3b 	bl	80028c8 <HAL_GetTick>
 8003452:	1b00      	subs	r0, r0, r4
 8003454:	2802      	cmp	r0, #2
 8003456:	d85b      	bhi.n	8003510 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	019b      	lsls	r3, r3, #6
 800345c:	d4f7      	bmi.n	800344e <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 800345e:	2000      	movs	r0, #0
}
 8003460:	b002      	add	sp, #8
 8003462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003466:	6852      	ldr	r2, [r2, #4]
 8003468:	03d6      	lsls	r6, r2, #15
 800346a:	f53f af79 	bmi.w	8003360 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	4a35      	ldr	r2, [pc, #212]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	0795      	lsls	r5, r2, #30
 8003474:	d530      	bpl.n	80034d8 <HAL_RCC_OscConfig+0x214>
 8003476:	6922      	ldr	r2, [r4, #16]
 8003478:	2a01      	cmp	r2, #1
 800347a:	d02d      	beq.n	80034d8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
}
 800347e:	b002      	add	sp, #8
 8003480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003484:	4a30      	ldr	r2, [pc, #192]	; (8003548 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003486:	4e2f      	ldr	r6, [pc, #188]	; (8003544 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8003488:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800348c:	f7ff fa1c 	bl	80028c8 <HAL_GetTick>
 8003490:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003492:	e004      	b.n	800349e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003494:	f7ff fa18 	bl	80028c8 <HAL_GetTick>
 8003498:	1b40      	subs	r0, r0, r5
 800349a:	2802      	cmp	r0, #2
 800349c:	d838      	bhi.n	8003510 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80034a0:	079f      	lsls	r7, r3, #30
 80034a2:	d4f7      	bmi.n	8003494 <HAL_RCC_OscConfig+0x1d0>
 80034a4:	e7bd      	b.n	8003422 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80034a8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034ae:	61da      	str	r2, [r3, #28]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80034ba:	e777      	b.n	80033ac <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034bc:	684a      	ldr	r2, [r1, #4]
 80034be:	03d0      	lsls	r0, r2, #15
 80034c0:	f57f af17 	bpl.w	80032f2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	0391      	lsls	r1, r2, #14
 80034ca:	f57f af3b 	bpl.w	8003344 <HAL_RCC_OscConfig+0x80>
 80034ce:	6862      	ldr	r2, [r4, #4]
 80034d0:	2a00      	cmp	r2, #0
 80034d2:	f47f af37 	bne.w	8003344 <HAL_RCC_OscConfig+0x80>
 80034d6:	e7d1      	b.n	800347c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d8:	491a      	ldr	r1, [pc, #104]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80034da:	6960      	ldr	r0, [r4, #20]
 80034dc:	680a      	ldr	r2, [r1, #0]
 80034de:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80034e2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80034e6:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e8:	071a      	lsls	r2, r3, #28
 80034ea:	f57f af58 	bpl.w	800339e <HAL_RCC_OscConfig+0xda>
 80034ee:	e776      	b.n	80033de <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f0:	6833      	ldr	r3, [r6, #0]
 80034f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80034f8:	f7ff f9e6 	bl	80028c8 <HAL_GetTick>
 80034fc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	6833      	ldr	r3, [r6, #0]
 8003500:	05da      	lsls	r2, r3, #23
 8003502:	f53f af58 	bmi.w	80033b6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003506:	f7ff f9df 	bl	80028c8 <HAL_GetTick>
 800350a:	1bc0      	subs	r0, r0, r7
 800350c:	2864      	cmp	r0, #100	; 0x64
 800350e:	d9f6      	bls.n	80034fe <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8003510:	2003      	movs	r0, #3
}
 8003512:	b002      	add	sp, #8
 8003514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003518:	4d0a      	ldr	r5, [pc, #40]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003520:	602b      	str	r3, [r5, #0]
 8003522:	682b      	ldr	r3, [r5, #0]
 8003524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003528:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800352a:	f7ff f9cd 	bl	80028c8 <HAL_GetTick>
 800352e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003530:	e004      	b.n	800353c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003532:	f7ff f9c9 	bl	80028c8 <HAL_GetTick>
 8003536:	1b80      	subs	r0, r0, r6
 8003538:	2864      	cmp	r0, #100	; 0x64
 800353a:	d8e9      	bhi.n	8003510 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	039b      	lsls	r3, r3, #14
 8003540:	d4f7      	bmi.n	8003532 <HAL_RCC_OscConfig+0x26e>
 8003542:	e6fe      	b.n	8003342 <HAL_RCC_OscConfig+0x7e>
 8003544:	40021000 	.word	0x40021000
 8003548:	42420000 	.word	0x42420000
 800354c:	40007000 	.word	0x40007000
 8003550:	20000000 	.word	0x20000000
 8003554:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003558:	4e50      	ldr	r6, [pc, #320]	; (800369c <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355e:	6a33      	ldr	r3, [r6, #32]
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6233      	str	r3, [r6, #32]
 8003566:	6a33      	ldr	r3, [r6, #32]
 8003568:	f023 0304 	bic.w	r3, r3, #4
 800356c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800356e:	f7ff f9ab 	bl	80028c8 <HAL_GetTick>
 8003572:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003574:	e004      	b.n	8003580 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7ff f9a7 	bl	80028c8 <HAL_GetTick>
 800357a:	1bc0      	subs	r0, r0, r7
 800357c:	4540      	cmp	r0, r8
 800357e:	d8c7      	bhi.n	8003510 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	6a33      	ldr	r3, [r6, #32]
 8003582:	0798      	lsls	r0, r3, #30
 8003584:	d4f7      	bmi.n	8003576 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8003586:	2d00      	cmp	r5, #0
 8003588:	f43f af4e 	beq.w	8003428 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4a43      	ldr	r2, [pc, #268]	; (800369c <HAL_RCC_OscConfig+0x3d8>)
 800358e:	69d3      	ldr	r3, [r2, #28]
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003594:	61d3      	str	r3, [r2, #28]
 8003596:	e747      	b.n	8003428 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003598:	4a41      	ldr	r2, [pc, #260]	; (80036a0 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359a:	4e40      	ldr	r6, [pc, #256]	; (800369c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 800359c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800359e:	f7ff f993 	bl	80028c8 <HAL_GetTick>
 80035a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a4:	e004      	b.n	80035b0 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a6:	f7ff f98f 	bl	80028c8 <HAL_GetTick>
 80035aa:	1b40      	subs	r0, r0, r5
 80035ac:	2802      	cmp	r0, #2
 80035ae:	d8af      	bhi.n	8003510 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b0:	6833      	ldr	r3, [r6, #0]
 80035b2:	0799      	lsls	r1, r3, #30
 80035b4:	d4f7      	bmi.n	80035a6 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	e6ef      	b.n	800339a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ba:	4a38      	ldr	r2, [pc, #224]	; (800369c <HAL_RCC_OscConfig+0x3d8>)
 80035bc:	6a13      	ldr	r3, [r2, #32]
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80035c4:	f7ff f980 	bl	80028c8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80035cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	4f33      	ldr	r7, [pc, #204]	; (800369c <HAL_RCC_OscConfig+0x3d8>)
 80035d0:	e004      	b.n	80035dc <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7ff f979 	bl	80028c8 <HAL_GetTick>
 80035d6:	1b80      	subs	r0, r0, r6
 80035d8:	4540      	cmp	r0, r8
 80035da:	d899      	bhi.n	8003510 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	079b      	lsls	r3, r3, #30
 80035e0:	d5f7      	bpl.n	80035d2 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 80035e2:	2d00      	cmp	r5, #0
 80035e4:	f43f af20 	beq.w	8003428 <HAL_RCC_OscConfig+0x164>
 80035e8:	e7d0      	b.n	800358c <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ea:	2801      	cmp	r0, #1
 80035ec:	f43f af38 	beq.w	8003460 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 80035f0:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	6a22      	ldr	r2, [r4, #32]
 80035f4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80035f8:	4291      	cmp	r1, r2
 80035fa:	f47f af3f 	bne.w	800347c <HAL_RCC_OscConfig+0x1b8>
 80035fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003600:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003604:	1a18      	subs	r0, r3, r0
 8003606:	bf18      	it	ne
 8003608:	2001      	movne	r0, #1
 800360a:	e729      	b.n	8003460 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003610:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e67f      	b.n	8003326 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003626:	f042 0204 	orr.w	r2, r2, #4
 800362a:	621a      	str	r2, [r3, #32]
 800362c:	6a1a      	ldr	r2, [r3, #32]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	621a      	str	r2, [r3, #32]
 8003634:	e7c6      	b.n	80035c4 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8003636:	2001      	movs	r0, #1
}
 8003638:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800363a:	f7ff f945 	bl	80028c8 <HAL_GetTick>
 800363e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003640:	e005      	b.n	800364e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003642:	f7ff f941 	bl	80028c8 <HAL_GetTick>
 8003646:	1b80      	subs	r0, r0, r6
 8003648:	2802      	cmp	r0, #2
 800364a:	f63f af61 	bhi.w	8003510 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364e:	682b      	ldr	r3, [r5, #0]
 8003650:	0199      	lsls	r1, r3, #6
 8003652:	d4f6      	bmi.n	8003642 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003654:	6a23      	ldr	r3, [r4, #32]
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365a:	d105      	bne.n	8003668 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800365c:	686a      	ldr	r2, [r5, #4]
 800365e:	68a1      	ldr	r1, [r4, #8]
 8003660:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003664:	430a      	orrs	r2, r1
 8003666:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003668:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800366a:	4d0c      	ldr	r5, [pc, #48]	; (800369c <HAL_RCC_OscConfig+0x3d8>)
 800366c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800366e:	686a      	ldr	r2, [r5, #4]
 8003670:	430b      	orrs	r3, r1
 8003672:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8003676:	490a      	ldr	r1, [pc, #40]	; (80036a0 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003678:	4313      	orrs	r3, r2
 800367a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800367c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800367e:	f7ff f923 	bl	80028c8 <HAL_GetTick>
 8003682:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003684:	e005      	b.n	8003692 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003686:	f7ff f91f 	bl	80028c8 <HAL_GetTick>
 800368a:	1b00      	subs	r0, r0, r4
 800368c:	2802      	cmp	r0, #2
 800368e:	f63f af3f 	bhi.w	8003510 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003692:	682b      	ldr	r3, [r5, #0]
 8003694:	019a      	lsls	r2, r3, #6
 8003696:	d5f6      	bpl.n	8003686 <HAL_RCC_OscConfig+0x3c2>
 8003698:	e6e1      	b.n	800345e <HAL_RCC_OscConfig+0x19a>
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	42420000 	.word	0x42420000

080036a4 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036a4:	f240 2c01 	movw	ip, #513	; 0x201
{
 80036a8:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036aa:	4b18      	ldr	r3, [pc, #96]	; (800370c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80036ac:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036ae:	f10d 0e18 	add.w	lr, sp, #24
 80036b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b4:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80036b8:	4a15      	ldr	r2, [pc, #84]	; (8003710 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036ba:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 80036be:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80036c0:	f003 010c 	and.w	r1, r3, #12
 80036c4:	2908      	cmp	r1, #8
 80036c6:	d003      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 80036c8:	4812      	ldr	r0, [pc, #72]	; (8003714 <HAL_RCC_GetSysClockFreq+0x70>)
}
 80036ca:	b007      	add	sp, #28
 80036cc:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036d0:	f3c3 4183 	ubfx	r1, r3, #18, #4
 80036d4:	3118      	adds	r1, #24
 80036d6:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036d8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036da:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036de:	d50e      	bpl.n	80036fe <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036e0:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036e4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036e8:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036ec:	3318      	adds	r3, #24
 80036ee:	446b      	add	r3, sp
 80036f0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036f4:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80036f8:	b007      	add	sp, #28
 80036fa:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCC_GetSysClockFreq+0x74>)
 8003700:	fb03 f000 	mul.w	r0, r3, r0
}
 8003704:	b007      	add	sp, #28
 8003706:	f85d fb04 	ldr.w	pc, [sp], #4
 800370a:	bf00      	nop
 800370c:	0802cd10 	.word	0x0802cd10
 8003710:	40021000 	.word	0x40021000
 8003714:	007a1200 	.word	0x007a1200
 8003718:	003d0900 	.word	0x003d0900

0800371c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800371c:	2800      	cmp	r0, #0
 800371e:	f000 808c 	beq.w	800383a <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003722:	4a49      	ldr	r2, [pc, #292]	; (8003848 <HAL_RCC_ClockConfig+0x12c>)
{
 8003724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	4604      	mov	r4, r0
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	428b      	cmp	r3, r1
 8003732:	460d      	mov	r5, r1
 8003734:	d20c      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	f023 0307 	bic.w	r3, r3, #7
 800373c:	430b      	orrs	r3, r1
 800373e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003740:	6813      	ldr	r3, [r2, #0]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	428b      	cmp	r3, r1
 8003748:	d002      	beq.n	8003750 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800374a:	2001      	movs	r0, #1
}
 800374c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	0798      	lsls	r0, r3, #30
 8003754:	d514      	bpl.n	8003780 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003756:	0759      	lsls	r1, r3, #29
 8003758:	d504      	bpl.n	8003764 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800375a:	493c      	ldr	r1, [pc, #240]	; (800384c <HAL_RCC_ClockConfig+0x130>)
 800375c:	684a      	ldr	r2, [r1, #4]
 800375e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003762:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	071a      	lsls	r2, r3, #28
 8003766:	d504      	bpl.n	8003772 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003768:	4938      	ldr	r1, [pc, #224]	; (800384c <HAL_RCC_ClockConfig+0x130>)
 800376a:	684a      	ldr	r2, [r1, #4]
 800376c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003770:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003772:	4936      	ldr	r1, [pc, #216]	; (800384c <HAL_RCC_ClockConfig+0x130>)
 8003774:	68a0      	ldr	r0, [r4, #8]
 8003776:	684a      	ldr	r2, [r1, #4]
 8003778:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800377c:	4302      	orrs	r2, r0
 800377e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003780:	07df      	lsls	r7, r3, #31
 8003782:	d520      	bpl.n	80037c6 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003784:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003788:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378c:	d057      	beq.n	800383e <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800378e:	2a02      	cmp	r2, #2
 8003790:	d050      	beq.n	8003834 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003792:	0799      	lsls	r1, r3, #30
 8003794:	d5d9      	bpl.n	800374a <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003796:	4e2d      	ldr	r6, [pc, #180]	; (800384c <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379c:	6873      	ldr	r3, [r6, #4]
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	4313      	orrs	r3, r2
 80037a4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80037a6:	f7ff f88f 	bl	80028c8 <HAL_GetTick>
 80037aa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ac:	e004      	b.n	80037b8 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ae:	f7ff f88b 	bl	80028c8 <HAL_GetTick>
 80037b2:	1bc0      	subs	r0, r0, r7
 80037b4:	4540      	cmp	r0, r8
 80037b6:	d845      	bhi.n	8003844 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b8:	6873      	ldr	r3, [r6, #4]
 80037ba:	6862      	ldr	r2, [r4, #4]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80037c4:	d1f3      	bne.n	80037ae <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c6:	4a20      	ldr	r2, [pc, #128]	; (8003848 <HAL_RCC_ClockConfig+0x12c>)
 80037c8:	6813      	ldr	r3, [r2, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	42ab      	cmp	r3, r5
 80037d0:	d909      	bls.n	80037e6 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	f023 0307 	bic.w	r3, r3, #7
 80037d8:	432b      	orrs	r3, r5
 80037da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037dc:	6813      	ldr	r3, [r2, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	42ab      	cmp	r3, r5
 80037e4:	d1b1      	bne.n	800374a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	075a      	lsls	r2, r3, #29
 80037ea:	d506      	bpl.n	80037fa <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4917      	ldr	r1, [pc, #92]	; (800384c <HAL_RCC_ClockConfig+0x130>)
 80037ee:	68e0      	ldr	r0, [r4, #12]
 80037f0:	684a      	ldr	r2, [r1, #4]
 80037f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037f6:	4302      	orrs	r2, r0
 80037f8:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fa:	071b      	lsls	r3, r3, #28
 80037fc:	d507      	bpl.n	800380e <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037fe:	4a13      	ldr	r2, [pc, #76]	; (800384c <HAL_RCC_ClockConfig+0x130>)
 8003800:	6921      	ldr	r1, [r4, #16]
 8003802:	6853      	ldr	r3, [r2, #4]
 8003804:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003808:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800380c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380e:	f7ff ff49 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003812:	4603      	mov	r3, r0
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <HAL_RCC_ClockConfig+0x130>)
 8003816:	490e      	ldr	r1, [pc, #56]	; (8003850 <HAL_RCC_ClockConfig+0x134>)
 8003818:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800381a:	480e      	ldr	r0, [pc, #56]	; (8003854 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800381c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003820:	5c89      	ldrb	r1, [r1, r2]
 8003822:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <HAL_RCC_ClockConfig+0x13c>)
 8003824:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8003826:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003828:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800382a:	f7ff f80b 	bl	8002844 <HAL_InitTick>
  return HAL_OK;
 800382e:	2000      	movs	r0, #0
}
 8003830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003834:	0198      	lsls	r0, r3, #6
 8003836:	d4ae      	bmi.n	8003796 <HAL_RCC_ClockConfig+0x7a>
 8003838:	e787      	b.n	800374a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800383a:	2001      	movs	r0, #1
}
 800383c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	039e      	lsls	r6, r3, #14
 8003840:	d4a9      	bmi.n	8003796 <HAL_RCC_ClockConfig+0x7a>
 8003842:	e782      	b.n	800374a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003844:	2003      	movs	r0, #3
 8003846:	e781      	b.n	800374c <HAL_RCC_ClockConfig+0x30>
 8003848:	40022000 	.word	0x40022000
 800384c:	40021000 	.word	0x40021000
 8003850:	080089e8 	.word	0x080089e8
 8003854:	20000030 	.word	0x20000030
 8003858:	20000000 	.word	0x20000000

0800385c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800385c:	4b04      	ldr	r3, [pc, #16]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800385e:	4a05      	ldr	r2, [pc, #20]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4905      	ldr	r1, [pc, #20]	; (8003878 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003864:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	6810      	ldr	r0, [r2, #0]
}
 800386c:	40d8      	lsrs	r0, r3
 800386e:	4770      	bx	lr
 8003870:	40021000 	.word	0x40021000
 8003874:	20000000 	.word	0x20000000
 8003878:	080089f8 	.word	0x080089f8

0800387c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800387e:	4a05      	ldr	r2, [pc, #20]	; (8003894 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4905      	ldr	r1, [pc, #20]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003884:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003888:	5ccb      	ldrb	r3, [r1, r3]
 800388a:	6810      	ldr	r0, [r2, #0]
}
 800388c:	40d8      	lsrs	r0, r3
 800388e:	4770      	bx	lr
 8003890:	40021000 	.word	0x40021000
 8003894:	20000000 	.word	0x20000000
 8003898:	080089f8 	.word	0x080089f8

0800389c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038a2:	6800      	ldr	r0, [r0, #0]
{
 80038a4:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038a6:	07c1      	lsls	r1, r0, #31
 80038a8:	d52c      	bpl.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038aa:	4b3a      	ldr	r3, [pc, #232]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	00d2      	lsls	r2, r2, #3
 80038b0:	d53f      	bpl.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4d39      	ldr	r5, [pc, #228]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 80038b4:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	682b      	ldr	r3, [r5, #0]
 80038b8:	05df      	lsls	r7, r3, #23
 80038ba:	d548      	bpl.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038bc:	4d35      	ldr	r5, [pc, #212]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80038be:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038c0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80038c4:	d011      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80038c6:	6861      	ldr	r1, [r4, #4]
 80038c8:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d00d      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038d0:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038d2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038d4:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80038d6:	4a31      	ldr	r2, [pc, #196]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80038dc:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038e0:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038e4:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038e6:	07d9      	lsls	r1, r3, #31
 80038e8:	d444      	bmi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ea:	6861      	ldr	r1, [r4, #4]
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80038ee:	6a13      	ldr	r3, [r2, #32]
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f8:	b11e      	cbz	r6, 8003902 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fa:	69d3      	ldr	r3, [r2, #28]
 80038fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003900:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003902:	6820      	ldr	r0, [r4, #0]
 8003904:	0783      	lsls	r3, r0, #30
 8003906:	d506      	bpl.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003908:	4922      	ldr	r1, [pc, #136]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800390a:	68a3      	ldr	r3, [r4, #8]
 800390c:	684a      	ldr	r2, [r1, #4]
 800390e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003912:	431a      	orrs	r2, r3
 8003914:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003916:	f010 0010 	ands.w	r0, r0, #16
 800391a:	d007      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800391c:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800391e:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003920:	6961      	ldr	r1, [r4, #20]
 8003922:	6853      	ldr	r3, [r2, #4]
 8003924:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003928:	430b      	orrs	r3, r1
 800392a:	6053      	str	r3, [r2, #4]
}
 800392c:	b002      	add	sp, #8
 800392e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	4d18      	ldr	r5, [pc, #96]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800393a:	61da      	str	r2, [r3, #28]
 800393c:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 800393e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	05df      	lsls	r7, r3, #23
 800394c:	d4b6      	bmi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394e:	682b      	ldr	r3, [r5, #0]
 8003950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003954:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003956:	f7fe ffb7 	bl	80028c8 <HAL_GetTick>
 800395a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	05d8      	lsls	r0, r3, #23
 8003960:	d4ac      	bmi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003962:	f7fe ffb1 	bl	80028c8 <HAL_GetTick>
 8003966:	1bc3      	subs	r3, r0, r7
 8003968:	2b64      	cmp	r3, #100	; 0x64
 800396a:	d9f7      	bls.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 800396c:	2003      	movs	r0, #3
}
 800396e:	b002      	add	sp, #8
 8003970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8003974:	f7fe ffa8 	bl	80028c8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800397c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397e:	e004      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fe ffa2 	bl	80028c8 <HAL_GetTick>
 8003984:	1bc0      	subs	r0, r0, r7
 8003986:	4540      	cmp	r0, r8
 8003988:	d8f0      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398a:	6a2b      	ldr	r3, [r5, #32]
 800398c:	079a      	lsls	r2, r3, #30
 800398e:	d5f7      	bpl.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003990:	e7ab      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000
 8003998:	40007000 	.word	0x40007000
 800399c:	42420000 	.word	0x42420000

080039a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039a0:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039a2:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
{
 80039a4:	b087      	sub	sp, #28
 80039a6:	4684      	mov	ip, r0
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039aa:	f10d 0e18 	add.w	lr, sp, #24
 80039ae:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039b2:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80039b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039ba:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 80039be:	280f      	cmp	r0, #15
 80039c0:	d819      	bhi.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80039c2:	e8df f000 	tbb	[pc, r0]
 80039c6:	2108      	.short	0x2108
 80039c8:	18181c18 	.word	0x18181c18
 80039cc:	18181c18 	.word	0x18181c18
 80039d0:	18181818 	.word	0x18181818
 80039d4:	2e18      	.short	0x2e18
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80039d6:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 80039da:	4930      	ldr	r1, [pc, #192]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80039dc:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80039de:	401a      	ands	r2, r3
 80039e0:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80039e4:	d055      	beq.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ee:	d048      	beq.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80039f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f4:	d03d      	beq.n	8003a72 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  uint32_t temp_reg = 0U, frequency = 0U;
 80039f6:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 80039f8:	b007      	add	sp, #28
 80039fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80039fe:	b007      	add	sp, #28
 8003a00:	f85d eb04 	ldr.w	lr, [sp], #4
      frequency = HAL_RCC_GetSysClockFreq();
 8003a04:	f7ff be4e 	b.w	80036a4 <HAL_RCC_GetSysClockFreq>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a08:	f7ff ff38 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8003a0c:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003a14:	3301      	adds	r3, #1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003a1c:	b007      	add	sp, #28
 8003a1e:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 8003a22:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8003a24:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003a2c:	d0e4      	beq.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a2e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8003a32:	3118      	adds	r1, #24
 8003a34:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a36:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a38:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a3c:	d40c      	bmi.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a3e:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8003a40:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a44:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	025b      	lsls	r3, r3, #9
 8003a4a:	d4d5      	bmi.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          frequency = (pllclk * 2) / 3;
 8003a4c:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8003a4e:	0040      	lsls	r0, r0, #1
 8003a50:	fba3 3000 	umull	r3, r0, r3, r0
 8003a54:	0840      	lsrs	r0, r0, #1
 8003a56:	e7cf      	b.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a58:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a5c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003a60:	3318      	adds	r3, #24
 8003a62:	446b      	add	r3, sp
 8003a64:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	fb03 f000 	mul.w	r0, r3, r0
 8003a70:	e7e8      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = HSE_VALUE / 128U;
 8003a72:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a76:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8003a78:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003a7c:	bf18      	it	ne
 8003a7e:	4618      	movne	r0, r3
 8003a80:	e7ba      	b.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSI_VALUE;
 8003a82:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a86:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8003a88:	f010 0002 	ands.w	r0, r0, #2
 8003a8c:	bf18      	it	ne
 8003a8e:	4618      	movne	r0, r3
 8003a90:	e7b2      	b.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSE_VALUE;
 8003a92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a96:	e7af      	b.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8003a98:	0802cd10 	.word	0x0802cd10
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	003d0900 	.word	0x003d0900
 8003aa4:	aaaaaaab 	.word	0xaaaaaaab
 8003aa8:	007a1200 	.word	0x007a1200

08003aac <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003aac:	b368      	cbz	r0, 8003b0a <HAL_SRAM_Init+0x5e>
 8003aae:	6983      	ldr	r3, [r0, #24]
{
 8003ab0:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	d029      	beq.n	8003b0e <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003aba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003abe:	4615      	mov	r5, r2
 8003ac0:	460e      	mov	r6, r1
 8003ac2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ac6:	b1db      	cbz	r3, 8003b00 <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003ac8:	4621      	mov	r1, r4
 8003aca:	f851 0b08 	ldr.w	r0, [r1], #8
 8003ace:	f000 fa25 	bl	8003f1c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	68a2      	ldr	r2, [r4, #8]
 8003ad6:	6820      	ldr	r0, [r4, #0]
 8003ad8:	f000 fa56 	bl	8003f88 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003adc:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8003ae0:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003ae2:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003ae4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ae6:	f000 fa71 	bl	8003fcc <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 8003aee:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003af0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003af4:	432b      	orrs	r3, r5
 8003af6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8003afa:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8003b00:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 8003b04:	f7fe f964 	bl	8001dd0 <HAL_SRAM_MspInit>
 8003b08:	e7de      	b.n	8003ac8 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 8003b0a:	2001      	movs	r0, #1
}
 8003b0c:	4770      	bx	lr
    return HAL_ERROR;
 8003b0e:	2001      	movs	r0, #1
}
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
 8003b12:	bf00      	nop

08003b14 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d124      	bne.n	8003b66 <HAL_TIM_Base_Start+0x52>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1e:	6803      	ldr	r3, [r0, #0]
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003b22:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d012      	beq.n	8003b50 <HAL_TIM_Base_Start+0x3c>
 8003b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_Base_Start+0x3c>
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b36:	d00b      	beq.n	8003b50 <HAL_TIM_Base_Start+0x3c>
 8003b38:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <HAL_TIM_Base_Start+0x3c>
 8003b40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <HAL_TIM_Base_Start+0x3c>
 8003b48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_Base_Start+0x46>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b56:	2a06      	cmp	r2, #6
 8003b58:	d007      	beq.n	8003b6a <HAL_TIM_Base_Start+0x56>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5a:	681a      	ldr	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b5c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	4770      	bx	lr
    return HAL_ERROR;
 8003b66:	2001      	movs	r0, #1
 8003b68:	4770      	bx	lr
  return HAL_OK;
 8003b6a:	2000      	movs	r0, #0
}
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40012c00 	.word	0x40012c00

08003b74 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b74:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003b78:	2a01      	cmp	r2, #1
 8003b7a:	d075      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0xf4>
{
 8003b7c:	b430      	push	{r4, r5}
 8003b7e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003b80:	2401      	movs	r4, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8003b82:	2202      	movs	r2, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b84:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8003b86:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003b8e:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8003b90:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b92:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8003b96:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8003b9a:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003b9c:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003b9e:	d065      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0xf8>
 8003ba0:	d831      	bhi.n	8003c06 <HAL_TIM_ConfigClockSource+0x92>
 8003ba2:	2a40      	cmp	r2, #64	; 0x40
 8003ba4:	d048      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0xc4>
 8003ba6:	d921      	bls.n	8003bec <HAL_TIM_ConfigClockSource+0x78>
 8003ba8:	2a50      	cmp	r2, #80	; 0x50
 8003baa:	d116      	bne.n	8003bda <HAL_TIM_ConfigClockSource+0x66>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bac:	684c      	ldr	r4, [r1, #4]
 8003bae:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb0:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bb2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003bb6:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb8:	6a04      	ldr	r4, [r0, #32]
 8003bba:	f024 0401 	bic.w	r4, r4, #1
 8003bbe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc0:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bc6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bca:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003bcc:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bce:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bd8:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8003bda:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003be2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  return HAL_OK;
 8003be6:	4610      	mov	r0, r2
}
 8003be8:	bc30      	pop	{r4, r5}
 8003bea:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003bec:	2a20      	cmp	r2, #32
 8003bee:	d002      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x82>
 8003bf0:	d91e      	bls.n	8003c30 <HAL_TIM_ConfigClockSource+0xbc>
 8003bf2:	2a30      	cmp	r2, #48	; 0x30
 8003bf4:	d1f1      	bne.n	8003bda <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8003bf6:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bf8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8003c02:	6082      	str	r2, [r0, #8]
}
 8003c04:	e7e9      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003c06:	2a70      	cmp	r2, #112	; 0x70
 8003c08:	d049      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x12a>
 8003c0a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003c0e:	d1e4      	bne.n	8003bda <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c10:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003c14:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c16:	432a      	orrs	r2, r5
 8003c18:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c1a:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003c22:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c24:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c26:	6882      	ldr	r2, [r0, #8]
 8003c28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c2c:	6082      	str	r2, [r0, #8]
      break;
 8003c2e:	e7d4      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003c30:	f032 0110 	bics.w	r1, r2, #16
 8003c34:	d1d1      	bne.n	8003bda <HAL_TIM_ConfigClockSource+0x66>
 8003c36:	e7de      	b.n	8003bf6 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c38:	684c      	ldr	r4, [r1, #4]
 8003c3a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003c3c:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c3e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003c42:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c44:	6a04      	ldr	r4, [r0, #32]
 8003c46:	f024 0401 	bic.w	r4, r4, #1
 8003c4a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c4e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c52:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003c56:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003c58:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003c5a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c60:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003c64:	6082      	str	r2, [r0, #8]
}
 8003c66:	e7b8      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8003c68:	2002      	movs	r0, #2
}
 8003c6a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c6c:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6e:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c70:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c74:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c76:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c78:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c7a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c7e:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8003c82:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003c84:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c8a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8003c8e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003c90:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c96:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003c9a:	6082      	str	r2, [r0, #8]
}
 8003c9c:	e79d      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c9e:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003ca2:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca4:	432a      	orrs	r2, r5
 8003ca6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca8:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cac:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003cb0:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003cb2:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003cb4:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cb6:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003cba:	6082      	str	r2, [r0, #8]
      break;
 8003cbc:	e78d      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x66>
 8003cbe:	bf00      	nop

08003cc0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	4a28      	ldr	r2, [pc, #160]	; (8003d64 <TIM_Base_SetConfig+0xa4>)
{
 8003cc2:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc4:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8003cc6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc8:	d01f      	beq.n	8003d0a <TIM_Base_SetConfig+0x4a>
 8003cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cce:	4290      	cmp	r0, r2
 8003cd0:	d01b      	beq.n	8003d0a <TIM_Base_SetConfig+0x4a>
 8003cd2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003cd6:	d02f      	beq.n	8003d38 <TIM_Base_SetConfig+0x78>
 8003cd8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003cdc:	4290      	cmp	r0, r2
 8003cde:	d02b      	beq.n	8003d38 <TIM_Base_SetConfig+0x78>
 8003ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ce4:	4290      	cmp	r0, r2
 8003ce6:	d027      	beq.n	8003d38 <TIM_Base_SetConfig+0x78>
 8003ce8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cec:	4290      	cmp	r0, r2
 8003cee:	d023      	beq.n	8003d38 <TIM_Base_SetConfig+0x78>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf0:	694d      	ldr	r5, [r1, #20]
 8003cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf6:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf8:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003cfa:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003cfc:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003cfe:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d00:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d02:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003d04:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8003d06:	6143      	str	r3, [r0, #20]
}
 8003d08:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003d0a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d10:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d12:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d18:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1a:	694a      	ldr	r2, [r1, #20]
 8003d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d20:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d22:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d24:	688b      	ldr	r3, [r1, #8]
}
 8003d26:	bc30      	pop	{r4, r5}
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d28:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d2a:	680b      	ldr	r3, [r1, #0]
 8003d2c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003d2e:	690b      	ldr	r3, [r1, #16]
 8003d30:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003d32:	2301      	movs	r3, #1
 8003d34:	6143      	str	r3, [r0, #20]
}
 8003d36:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003d38:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d3e:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d40:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d46:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d48:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d4e:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d50:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003d52:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003d54:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003d56:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d58:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d5a:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003d5c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8003d5e:	6143      	str	r3, [r0, #20]
}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40012c00 	.word	0x40012c00

08003d68 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003d68:	b350      	cbz	r0, 8003dc0 <HAL_TIM_Base_Init+0x58>
{
 8003d6a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d70:	4604      	mov	r4, r0
 8003d72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d76:	b1f3      	cbz	r3, 8003db6 <HAL_TIM_Base_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d7a:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d80:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d84:	f7ff ff9c 	bl	8003cc0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003d92:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003d96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003d9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003dae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003db2:	2000      	movs	r0, #0
}
 8003db4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003db6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003dba:	f7fd ff87 	bl	8001ccc <HAL_TIM_Base_MspInit>
 8003dbe:	e7db      	b.n	8003d78 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003dc0:	2001      	movs	r0, #1
}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003dc8:	2a01      	cmp	r2, #1
 8003dca:	d02f      	beq.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003dcc:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dce:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd0:	681a      	ldr	r2, [r3, #0]
{
 8003dd2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003dd8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dda:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ddc:	4d14      	ldr	r5, [pc, #80]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dde:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003de2:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de4:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8003de6:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8003de8:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dea:	d011      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dec:	4811      	ldr	r0, [pc, #68]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8003dee:	4282      	cmp	r2, r0
 8003df0:	d00e      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003df2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003df6:	d00b      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003df8:	f5a0 3098 	sub.w	r0, r0, #77824	; 0x13000
 8003dfc:	4282      	cmp	r2, r0
 8003dfe:	d007      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e00:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003e04:	4282      	cmp	r2, r0
 8003e06:	d003      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e08:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003e0c:	4282      	cmp	r2, r0
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e10:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e12:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e16:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e18:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003e1a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003e22:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e26:	4610      	mov	r0, r2
}
 8003e28:	bc30      	pop	{r4, r5}
 8003e2a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003e2c:	2002      	movs	r0, #2
}
 8003e2e:	4770      	bx	lr
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40013400 	.word	0x40013400

08003e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e3c:	6803      	ldr	r3, [r0, #0]
 8003e3e:	68c1      	ldr	r1, [r0, #12]
 8003e40:	691a      	ldr	r2, [r3, #16]
  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);


  if(huart->Instance == USART1)
 8003e42:	4d1c      	ldr	r5, [pc, #112]	; (8003eb4 <UART_SetConfig+0x7c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e44:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e4c:	6882      	ldr	r2, [r0, #8]
 8003e4e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003e50:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e52:	4302      	orrs	r2, r0
 8003e54:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003e56:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003e5a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e5e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003e60:	430a      	orrs	r2, r1
 8003e62:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	69a1      	ldr	r1, [r4, #24]
 8003e68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e6c:	430a      	orrs	r2, r1
  if(huart->Instance == USART1)
 8003e6e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e70:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8003e72:	d01b      	beq.n	8003eac <UART_SetConfig+0x74>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e74:	f7ff fcf2 	bl	800385c <HAL_RCC_GetPCLK1Freq>
 8003e78:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e7a:	6862      	ldr	r2, [r4, #4]
 8003e7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e80:	0092      	lsls	r2, r2, #2
 8003e82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e8a:	2564      	movs	r5, #100	; 0x64
 8003e8c:	490a      	ldr	r1, [pc, #40]	; (8003eb8 <UART_SetConfig+0x80>)
 8003e8e:	6820      	ldr	r0, [r4, #0]
 8003e90:	fba1 4203 	umull	r4, r2, r1, r3
 8003e94:	0952      	lsrs	r2, r2, #5
 8003e96:	fb05 3312 	mls	r3, r5, r2, r3
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	3332      	adds	r3, #50	; 0x32
 8003e9e:	fba1 1303 	umull	r1, r3, r1, r3
 8003ea2:	0112      	lsls	r2, r2, #4
 8003ea4:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8003ea8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003eac:	f7ff fce6 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	e7e2      	b.n	8003e7a <UART_SetConfig+0x42>
 8003eb4:	40013800 	.word	0x40013800
 8003eb8:	51eb851f 	.word	0x51eb851f

08003ebc <HAL_UART_Init>:
  if (huart == NULL)
 8003ebc:	b360      	cbz	r0, 8003f18 <HAL_UART_Init+0x5c>
{
 8003ebe:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003eca:	b303      	cbz	r3, 8003f0e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003ecc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003ece:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003ed0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003ed4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003ed6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003edc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003ede:	f7ff ffab 	bl	8003e38 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003ee4:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee6:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8003ee8:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f00:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f02:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f04:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f08:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8003f0e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003f12:	f7fd fef1 	bl	8001cf8 <HAL_UART_MspInit>
 8003f16:	e7d9      	b.n	8003ecc <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8003f18:	2001      	movs	r0, #1
}
 8003f1a:	4770      	bx	lr

08003f1c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003f1c:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 8003f1e:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003f20:	688b      	ldr	r3, [r1, #8]
{
 8003f22:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	bf0c      	ite	eq
 8003f28:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8003f2c:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003f2e:	684e      	ldr	r6, [r1, #4]
 8003f30:	680c      	ldr	r4, [r1, #0]
 8003f32:	4333      	orrs	r3, r6
 8003f34:	68ce      	ldr	r6, [r1, #12]
 8003f36:	4d13      	ldr	r5, [pc, #76]	; (8003f84 <FSMC_NORSRAM_Init+0x68>)
 8003f38:	4333      	orrs	r3, r6
 8003f3a:	690e      	ldr	r6, [r1, #16]
 8003f3c:	4333      	orrs	r3, r6
 8003f3e:	694e      	ldr	r6, [r1, #20]
 8003f40:	4333      	orrs	r3, r6
 8003f42:	69ce      	ldr	r6, [r1, #28]
 8003f44:	4333      	orrs	r3, r6
 8003f46:	6a0e      	ldr	r6, [r1, #32]
 8003f48:	4333      	orrs	r3, r6
 8003f4a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8003f4c:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003f4e:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8003f52:	f026 0601 	bic.w	r6, r6, #1
 8003f56:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003f5a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8003f5c:	4333      	orrs	r3, r6
 8003f5e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8003f60:	4333      	orrs	r3, r6
 8003f62:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8003f64:	4333      	orrs	r3, r6
 8003f66:	698e      	ldr	r6, [r1, #24]
 8003f68:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003f6a:	4333      	orrs	r3, r6
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8003f72:	400d      	ands	r5, r1
 8003f74:	432b      	orrs	r3, r5
 8003f76:	ea43 030c 	orr.w	r3, r3, ip
 8003f7a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8003f7e:	bc70      	pop	{r4, r5, r6}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	fff00080 	.word	0xfff00080

08003f88 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003f88:	4603      	mov	r3, r0
 8003f8a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003f8e:	6853      	ldr	r3, [r2, #4]
{
 8003f90:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003f92:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 8003f96:	698c      	ldr	r4, [r1, #24]
 8003f98:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8003f9a:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003f9c:	4323      	orrs	r3, r4
 8003f9e:	684c      	ldr	r4, [r1, #4]
 8003fa0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003fa4:	688c      	ldr	r4, [r1, #8]
 8003fa6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003faa:	68cc      	ldr	r4, [r1, #12]
 8003fac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003fb0:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 8003fb4:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 8003fb8:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 8003fbc:	3902      	subs	r1, #2
 8003fbe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003fc2:	ea43 030c 	orr.w	r3, r3, ip
 8003fc6:	6053      	str	r3, [r2, #4]
}
 8003fc8:	bd10      	pop	{r4, pc}
 8003fca:	bf00      	nop

08003fcc <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd0:	d005      	beq.n	8003fde <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003fd2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8003fd6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003fda:	2000      	movs	r0, #0
 8003fdc:	4770      	bx	lr
{
 8003fde:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003fe0:	680b      	ldr	r3, [r1, #0]
 8003fe2:	698d      	ldr	r5, [r1, #24]
 8003fe4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8003fe8:	432b      	orrs	r3, r5
 8003fea:	684d      	ldr	r5, [r1, #4]
 8003fec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003ff0:	688d      	ldr	r5, [r1, #8]
 8003ff2:	68c9      	ldr	r1, [r1, #12]
 8003ff4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003ff8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8003ffe:	4021      	ands	r1, r4
 8004000:	430b      	orrs	r3, r1
 8004002:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8004006:	bc30      	pop	{r4, r5}
 8004008:	2000      	movs	r0, #0
 800400a:	4770      	bx	lr
 800400c:	cff00000 	.word	0xcff00000

08004010 <__errno>:
 8004010:	4b01      	ldr	r3, [pc, #4]	; (8004018 <__errno+0x8>)
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000034 	.word	0x20000034

0800401c <__libc_init_array>:
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	2600      	movs	r6, #0
 8004020:	4d0c      	ldr	r5, [pc, #48]	; (8004054 <__libc_init_array+0x38>)
 8004022:	4c0d      	ldr	r4, [pc, #52]	; (8004058 <__libc_init_array+0x3c>)
 8004024:	1b64      	subs	r4, r4, r5
 8004026:	10a4      	asrs	r4, r4, #2
 8004028:	42a6      	cmp	r6, r4
 800402a:	d109      	bne.n	8004040 <__libc_init_array+0x24>
 800402c:	f004 fc72 	bl	8008914 <_init>
 8004030:	2600      	movs	r6, #0
 8004032:	4d0a      	ldr	r5, [pc, #40]	; (800405c <__libc_init_array+0x40>)
 8004034:	4c0a      	ldr	r4, [pc, #40]	; (8004060 <__libc_init_array+0x44>)
 8004036:	1b64      	subs	r4, r4, r5
 8004038:	10a4      	asrs	r4, r4, #2
 800403a:	42a6      	cmp	r6, r4
 800403c:	d105      	bne.n	800404a <__libc_init_array+0x2e>
 800403e:	bd70      	pop	{r4, r5, r6, pc}
 8004040:	f855 3b04 	ldr.w	r3, [r5], #4
 8004044:	4798      	blx	r3
 8004046:	3601      	adds	r6, #1
 8004048:	e7ee      	b.n	8004028 <__libc_init_array+0xc>
 800404a:	f855 3b04 	ldr.w	r3, [r5], #4
 800404e:	4798      	blx	r3
 8004050:	3601      	adds	r6, #1
 8004052:	e7f2      	b.n	800403a <__libc_init_array+0x1e>
 8004054:	0802d1d4 	.word	0x0802d1d4
 8004058:	0802d1d4 	.word	0x0802d1d4
 800405c:	0802d1d4 	.word	0x0802d1d4
 8004060:	0802d1d8 	.word	0x0802d1d8

08004064 <memset>:
 8004064:	4603      	mov	r3, r0
 8004066:	4402      	add	r2, r0
 8004068:	4293      	cmp	r3, r2
 800406a:	d100      	bne.n	800406e <memset+0xa>
 800406c:	4770      	bx	lr
 800406e:	f803 1b01 	strb.w	r1, [r3], #1
 8004072:	e7f9      	b.n	8004068 <memset+0x4>

08004074 <__cvt>:
 8004074:	2b00      	cmp	r3, #0
 8004076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800407a:	461f      	mov	r7, r3
 800407c:	bfbb      	ittet	lt
 800407e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004082:	461f      	movlt	r7, r3
 8004084:	2300      	movge	r3, #0
 8004086:	232d      	movlt	r3, #45	; 0x2d
 8004088:	b088      	sub	sp, #32
 800408a:	4614      	mov	r4, r2
 800408c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800408e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004090:	7013      	strb	r3, [r2, #0]
 8004092:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004094:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004098:	f023 0820 	bic.w	r8, r3, #32
 800409c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040a0:	d005      	beq.n	80040ae <__cvt+0x3a>
 80040a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040a6:	d100      	bne.n	80040aa <__cvt+0x36>
 80040a8:	3501      	adds	r5, #1
 80040aa:	2302      	movs	r3, #2
 80040ac:	e000      	b.n	80040b0 <__cvt+0x3c>
 80040ae:	2303      	movs	r3, #3
 80040b0:	aa07      	add	r2, sp, #28
 80040b2:	9204      	str	r2, [sp, #16]
 80040b4:	aa06      	add	r2, sp, #24
 80040b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040ba:	e9cd 3500 	strd	r3, r5, [sp]
 80040be:	4622      	mov	r2, r4
 80040c0:	463b      	mov	r3, r7
 80040c2:	f001 fe65 	bl	8005d90 <_dtoa_r>
 80040c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040ca:	4606      	mov	r6, r0
 80040cc:	d102      	bne.n	80040d4 <__cvt+0x60>
 80040ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040d0:	07db      	lsls	r3, r3, #31
 80040d2:	d522      	bpl.n	800411a <__cvt+0xa6>
 80040d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040d8:	eb06 0905 	add.w	r9, r6, r5
 80040dc:	d110      	bne.n	8004100 <__cvt+0x8c>
 80040de:	7833      	ldrb	r3, [r6, #0]
 80040e0:	2b30      	cmp	r3, #48	; 0x30
 80040e2:	d10a      	bne.n	80040fa <__cvt+0x86>
 80040e4:	2200      	movs	r2, #0
 80040e6:	2300      	movs	r3, #0
 80040e8:	4620      	mov	r0, r4
 80040ea:	4639      	mov	r1, r7
 80040ec:	f7fc fcc8 	bl	8000a80 <__aeabi_dcmpeq>
 80040f0:	b918      	cbnz	r0, 80040fa <__cvt+0x86>
 80040f2:	f1c5 0501 	rsb	r5, r5, #1
 80040f6:	f8ca 5000 	str.w	r5, [sl]
 80040fa:	f8da 3000 	ldr.w	r3, [sl]
 80040fe:	4499      	add	r9, r3
 8004100:	2200      	movs	r2, #0
 8004102:	2300      	movs	r3, #0
 8004104:	4620      	mov	r0, r4
 8004106:	4639      	mov	r1, r7
 8004108:	f7fc fcba 	bl	8000a80 <__aeabi_dcmpeq>
 800410c:	b108      	cbz	r0, 8004112 <__cvt+0x9e>
 800410e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004112:	2230      	movs	r2, #48	; 0x30
 8004114:	9b07      	ldr	r3, [sp, #28]
 8004116:	454b      	cmp	r3, r9
 8004118:	d307      	bcc.n	800412a <__cvt+0xb6>
 800411a:	4630      	mov	r0, r6
 800411c:	9b07      	ldr	r3, [sp, #28]
 800411e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004120:	1b9b      	subs	r3, r3, r6
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	b008      	add	sp, #32
 8004126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412a:	1c59      	adds	r1, r3, #1
 800412c:	9107      	str	r1, [sp, #28]
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e7f0      	b.n	8004114 <__cvt+0xa0>

08004132 <__exponent>:
 8004132:	4603      	mov	r3, r0
 8004134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004136:	2900      	cmp	r1, #0
 8004138:	f803 2b02 	strb.w	r2, [r3], #2
 800413c:	bfb6      	itet	lt
 800413e:	222d      	movlt	r2, #45	; 0x2d
 8004140:	222b      	movge	r2, #43	; 0x2b
 8004142:	4249      	neglt	r1, r1
 8004144:	2909      	cmp	r1, #9
 8004146:	7042      	strb	r2, [r0, #1]
 8004148:	dd2b      	ble.n	80041a2 <__exponent+0x70>
 800414a:	f10d 0407 	add.w	r4, sp, #7
 800414e:	46a4      	mov	ip, r4
 8004150:	270a      	movs	r7, #10
 8004152:	fb91 f6f7 	sdiv	r6, r1, r7
 8004156:	460a      	mov	r2, r1
 8004158:	46a6      	mov	lr, r4
 800415a:	fb07 1516 	mls	r5, r7, r6, r1
 800415e:	2a63      	cmp	r2, #99	; 0x63
 8004160:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004164:	4631      	mov	r1, r6
 8004166:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800416a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800416e:	dcf0      	bgt.n	8004152 <__exponent+0x20>
 8004170:	3130      	adds	r1, #48	; 0x30
 8004172:	f1ae 0502 	sub.w	r5, lr, #2
 8004176:	f804 1c01 	strb.w	r1, [r4, #-1]
 800417a:	4629      	mov	r1, r5
 800417c:	1c44      	adds	r4, r0, #1
 800417e:	4561      	cmp	r1, ip
 8004180:	d30a      	bcc.n	8004198 <__exponent+0x66>
 8004182:	f10d 0209 	add.w	r2, sp, #9
 8004186:	eba2 020e 	sub.w	r2, r2, lr
 800418a:	4565      	cmp	r5, ip
 800418c:	bf88      	it	hi
 800418e:	2200      	movhi	r2, #0
 8004190:	4413      	add	r3, r2
 8004192:	1a18      	subs	r0, r3, r0
 8004194:	b003      	add	sp, #12
 8004196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004198:	f811 2b01 	ldrb.w	r2, [r1], #1
 800419c:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041a0:	e7ed      	b.n	800417e <__exponent+0x4c>
 80041a2:	2330      	movs	r3, #48	; 0x30
 80041a4:	3130      	adds	r1, #48	; 0x30
 80041a6:	7083      	strb	r3, [r0, #2]
 80041a8:	70c1      	strb	r1, [r0, #3]
 80041aa:	1d03      	adds	r3, r0, #4
 80041ac:	e7f1      	b.n	8004192 <__exponent+0x60>
	...

080041b0 <_printf_float>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	b091      	sub	sp, #68	; 0x44
 80041b6:	460c      	mov	r4, r1
 80041b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80041bc:	4616      	mov	r6, r2
 80041be:	461f      	mov	r7, r3
 80041c0:	4605      	mov	r5, r0
 80041c2:	f003 f8ed 	bl	80073a0 <_localeconv_r>
 80041c6:	6803      	ldr	r3, [r0, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	9309      	str	r3, [sp, #36]	; 0x24
 80041cc:	f7fc f82c 	bl	8000228 <strlen>
 80041d0:	2300      	movs	r3, #0
 80041d2:	930e      	str	r3, [sp, #56]	; 0x38
 80041d4:	f8d8 3000 	ldr.w	r3, [r8]
 80041d8:	900a      	str	r0, [sp, #40]	; 0x28
 80041da:	3307      	adds	r3, #7
 80041dc:	f023 0307 	bic.w	r3, r3, #7
 80041e0:	f103 0208 	add.w	r2, r3, #8
 80041e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80041e8:	f8d4 b000 	ldr.w	fp, [r4]
 80041ec:	f8c8 2000 	str.w	r2, [r8]
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041f8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80041fc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004200:	930b      	str	r3, [sp, #44]	; 0x2c
 8004202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004206:	4640      	mov	r0, r8
 8004208:	4b9c      	ldr	r3, [pc, #624]	; (800447c <_printf_float+0x2cc>)
 800420a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800420c:	f7fc fc6a 	bl	8000ae4 <__aeabi_dcmpun>
 8004210:	bb70      	cbnz	r0, 8004270 <_printf_float+0xc0>
 8004212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004216:	4640      	mov	r0, r8
 8004218:	4b98      	ldr	r3, [pc, #608]	; (800447c <_printf_float+0x2cc>)
 800421a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800421c:	f7fc fc44 	bl	8000aa8 <__aeabi_dcmple>
 8004220:	bb30      	cbnz	r0, 8004270 <_printf_float+0xc0>
 8004222:	2200      	movs	r2, #0
 8004224:	2300      	movs	r3, #0
 8004226:	4640      	mov	r0, r8
 8004228:	4651      	mov	r1, sl
 800422a:	f7fc fc33 	bl	8000a94 <__aeabi_dcmplt>
 800422e:	b110      	cbz	r0, 8004236 <_printf_float+0x86>
 8004230:	232d      	movs	r3, #45	; 0x2d
 8004232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004236:	4b92      	ldr	r3, [pc, #584]	; (8004480 <_printf_float+0x2d0>)
 8004238:	4892      	ldr	r0, [pc, #584]	; (8004484 <_printf_float+0x2d4>)
 800423a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800423e:	bf94      	ite	ls
 8004240:	4698      	movls	r8, r3
 8004242:	4680      	movhi	r8, r0
 8004244:	2303      	movs	r3, #3
 8004246:	f04f 0a00 	mov.w	sl, #0
 800424a:	6123      	str	r3, [r4, #16]
 800424c:	f02b 0304 	bic.w	r3, fp, #4
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	4633      	mov	r3, r6
 8004254:	4621      	mov	r1, r4
 8004256:	4628      	mov	r0, r5
 8004258:	9700      	str	r7, [sp, #0]
 800425a:	aa0f      	add	r2, sp, #60	; 0x3c
 800425c:	f000 f9d4 	bl	8004608 <_printf_common>
 8004260:	3001      	adds	r0, #1
 8004262:	f040 8090 	bne.w	8004386 <_printf_float+0x1d6>
 8004266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800426a:	b011      	add	sp, #68	; 0x44
 800426c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004270:	4642      	mov	r2, r8
 8004272:	4653      	mov	r3, sl
 8004274:	4640      	mov	r0, r8
 8004276:	4651      	mov	r1, sl
 8004278:	f7fc fc34 	bl	8000ae4 <__aeabi_dcmpun>
 800427c:	b148      	cbz	r0, 8004292 <_printf_float+0xe2>
 800427e:	f1ba 0f00 	cmp.w	sl, #0
 8004282:	bfb8      	it	lt
 8004284:	232d      	movlt	r3, #45	; 0x2d
 8004286:	4880      	ldr	r0, [pc, #512]	; (8004488 <_printf_float+0x2d8>)
 8004288:	bfb8      	it	lt
 800428a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800428e:	4b7f      	ldr	r3, [pc, #508]	; (800448c <_printf_float+0x2dc>)
 8004290:	e7d3      	b.n	800423a <_printf_float+0x8a>
 8004292:	6863      	ldr	r3, [r4, #4]
 8004294:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	d142      	bne.n	8004322 <_printf_float+0x172>
 800429c:	2306      	movs	r3, #6
 800429e:	6063      	str	r3, [r4, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	9206      	str	r2, [sp, #24]
 80042a4:	aa0e      	add	r2, sp, #56	; 0x38
 80042a6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80042aa:	aa0d      	add	r2, sp, #52	; 0x34
 80042ac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80042b0:	9203      	str	r2, [sp, #12]
 80042b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80042b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	6863      	ldr	r3, [r4, #4]
 80042be:	4642      	mov	r2, r8
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	4628      	mov	r0, r5
 80042c4:	4653      	mov	r3, sl
 80042c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80042c8:	f7ff fed4 	bl	8004074 <__cvt>
 80042cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042ce:	4680      	mov	r8, r0
 80042d0:	2947      	cmp	r1, #71	; 0x47
 80042d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042d4:	d108      	bne.n	80042e8 <_printf_float+0x138>
 80042d6:	1cc8      	adds	r0, r1, #3
 80042d8:	db02      	blt.n	80042e0 <_printf_float+0x130>
 80042da:	6863      	ldr	r3, [r4, #4]
 80042dc:	4299      	cmp	r1, r3
 80042de:	dd40      	ble.n	8004362 <_printf_float+0x1b2>
 80042e0:	f1a9 0902 	sub.w	r9, r9, #2
 80042e4:	fa5f f989 	uxtb.w	r9, r9
 80042e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80042ec:	d81f      	bhi.n	800432e <_printf_float+0x17e>
 80042ee:	464a      	mov	r2, r9
 80042f0:	3901      	subs	r1, #1
 80042f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042f6:	910d      	str	r1, [sp, #52]	; 0x34
 80042f8:	f7ff ff1b 	bl	8004132 <__exponent>
 80042fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042fe:	4682      	mov	sl, r0
 8004300:	1813      	adds	r3, r2, r0
 8004302:	2a01      	cmp	r2, #1
 8004304:	6123      	str	r3, [r4, #16]
 8004306:	dc02      	bgt.n	800430e <_printf_float+0x15e>
 8004308:	6822      	ldr	r2, [r4, #0]
 800430a:	07d2      	lsls	r2, r2, #31
 800430c:	d501      	bpl.n	8004312 <_printf_float+0x162>
 800430e:	3301      	adds	r3, #1
 8004310:	6123      	str	r3, [r4, #16]
 8004312:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004316:	2b00      	cmp	r3, #0
 8004318:	d09b      	beq.n	8004252 <_printf_float+0xa2>
 800431a:	232d      	movs	r3, #45	; 0x2d
 800431c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004320:	e797      	b.n	8004252 <_printf_float+0xa2>
 8004322:	2947      	cmp	r1, #71	; 0x47
 8004324:	d1bc      	bne.n	80042a0 <_printf_float+0xf0>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1ba      	bne.n	80042a0 <_printf_float+0xf0>
 800432a:	2301      	movs	r3, #1
 800432c:	e7b7      	b.n	800429e <_printf_float+0xee>
 800432e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004332:	d118      	bne.n	8004366 <_printf_float+0x1b6>
 8004334:	2900      	cmp	r1, #0
 8004336:	6863      	ldr	r3, [r4, #4]
 8004338:	dd0b      	ble.n	8004352 <_printf_float+0x1a2>
 800433a:	6121      	str	r1, [r4, #16]
 800433c:	b913      	cbnz	r3, 8004344 <_printf_float+0x194>
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	07d0      	lsls	r0, r2, #31
 8004342:	d502      	bpl.n	800434a <_printf_float+0x19a>
 8004344:	3301      	adds	r3, #1
 8004346:	440b      	add	r3, r1
 8004348:	6123      	str	r3, [r4, #16]
 800434a:	f04f 0a00 	mov.w	sl, #0
 800434e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004350:	e7df      	b.n	8004312 <_printf_float+0x162>
 8004352:	b913      	cbnz	r3, 800435a <_printf_float+0x1aa>
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	07d2      	lsls	r2, r2, #31
 8004358:	d501      	bpl.n	800435e <_printf_float+0x1ae>
 800435a:	3302      	adds	r3, #2
 800435c:	e7f4      	b.n	8004348 <_printf_float+0x198>
 800435e:	2301      	movs	r3, #1
 8004360:	e7f2      	b.n	8004348 <_printf_float+0x198>
 8004362:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004368:	4299      	cmp	r1, r3
 800436a:	db05      	blt.n	8004378 <_printf_float+0x1c8>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	6121      	str	r1, [r4, #16]
 8004370:	07d8      	lsls	r0, r3, #31
 8004372:	d5ea      	bpl.n	800434a <_printf_float+0x19a>
 8004374:	1c4b      	adds	r3, r1, #1
 8004376:	e7e7      	b.n	8004348 <_printf_float+0x198>
 8004378:	2900      	cmp	r1, #0
 800437a:	bfcc      	ite	gt
 800437c:	2201      	movgt	r2, #1
 800437e:	f1c1 0202 	rsble	r2, r1, #2
 8004382:	4413      	add	r3, r2
 8004384:	e7e0      	b.n	8004348 <_printf_float+0x198>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	055a      	lsls	r2, r3, #21
 800438a:	d407      	bmi.n	800439c <_printf_float+0x1ec>
 800438c:	6923      	ldr	r3, [r4, #16]
 800438e:	4642      	mov	r2, r8
 8004390:	4631      	mov	r1, r6
 8004392:	4628      	mov	r0, r5
 8004394:	47b8      	blx	r7
 8004396:	3001      	adds	r0, #1
 8004398:	d12b      	bne.n	80043f2 <_printf_float+0x242>
 800439a:	e764      	b.n	8004266 <_printf_float+0xb6>
 800439c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80043a0:	f240 80dd 	bls.w	800455e <_printf_float+0x3ae>
 80043a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043a8:	2200      	movs	r2, #0
 80043aa:	2300      	movs	r3, #0
 80043ac:	f7fc fb68 	bl	8000a80 <__aeabi_dcmpeq>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d033      	beq.n	800441c <_printf_float+0x26c>
 80043b4:	2301      	movs	r3, #1
 80043b6:	4631      	mov	r1, r6
 80043b8:	4628      	mov	r0, r5
 80043ba:	4a35      	ldr	r2, [pc, #212]	; (8004490 <_printf_float+0x2e0>)
 80043bc:	47b8      	blx	r7
 80043be:	3001      	adds	r0, #1
 80043c0:	f43f af51 	beq.w	8004266 <_printf_float+0xb6>
 80043c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043c8:	429a      	cmp	r2, r3
 80043ca:	db02      	blt.n	80043d2 <_printf_float+0x222>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	07d8      	lsls	r0, r3, #31
 80043d0:	d50f      	bpl.n	80043f2 <_printf_float+0x242>
 80043d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043d6:	4631      	mov	r1, r6
 80043d8:	4628      	mov	r0, r5
 80043da:	47b8      	blx	r7
 80043dc:	3001      	adds	r0, #1
 80043de:	f43f af42 	beq.w	8004266 <_printf_float+0xb6>
 80043e2:	f04f 0800 	mov.w	r8, #0
 80043e6:	f104 091a 	add.w	r9, r4, #26
 80043ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043ec:	3b01      	subs	r3, #1
 80043ee:	4543      	cmp	r3, r8
 80043f0:	dc09      	bgt.n	8004406 <_printf_float+0x256>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	079b      	lsls	r3, r3, #30
 80043f6:	f100 8102 	bmi.w	80045fe <_printf_float+0x44e>
 80043fa:	68e0      	ldr	r0, [r4, #12]
 80043fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043fe:	4298      	cmp	r0, r3
 8004400:	bfb8      	it	lt
 8004402:	4618      	movlt	r0, r3
 8004404:	e731      	b.n	800426a <_printf_float+0xba>
 8004406:	2301      	movs	r3, #1
 8004408:	464a      	mov	r2, r9
 800440a:	4631      	mov	r1, r6
 800440c:	4628      	mov	r0, r5
 800440e:	47b8      	blx	r7
 8004410:	3001      	adds	r0, #1
 8004412:	f43f af28 	beq.w	8004266 <_printf_float+0xb6>
 8004416:	f108 0801 	add.w	r8, r8, #1
 800441a:	e7e6      	b.n	80043ea <_printf_float+0x23a>
 800441c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800441e:	2b00      	cmp	r3, #0
 8004420:	dc38      	bgt.n	8004494 <_printf_float+0x2e4>
 8004422:	2301      	movs	r3, #1
 8004424:	4631      	mov	r1, r6
 8004426:	4628      	mov	r0, r5
 8004428:	4a19      	ldr	r2, [pc, #100]	; (8004490 <_printf_float+0x2e0>)
 800442a:	47b8      	blx	r7
 800442c:	3001      	adds	r0, #1
 800442e:	f43f af1a 	beq.w	8004266 <_printf_float+0xb6>
 8004432:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004436:	4313      	orrs	r3, r2
 8004438:	d102      	bne.n	8004440 <_printf_float+0x290>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	07d9      	lsls	r1, r3, #31
 800443e:	d5d8      	bpl.n	80043f2 <_printf_float+0x242>
 8004440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004444:	4631      	mov	r1, r6
 8004446:	4628      	mov	r0, r5
 8004448:	47b8      	blx	r7
 800444a:	3001      	adds	r0, #1
 800444c:	f43f af0b 	beq.w	8004266 <_printf_float+0xb6>
 8004450:	f04f 0900 	mov.w	r9, #0
 8004454:	f104 0a1a 	add.w	sl, r4, #26
 8004458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800445a:	425b      	negs	r3, r3
 800445c:	454b      	cmp	r3, r9
 800445e:	dc01      	bgt.n	8004464 <_printf_float+0x2b4>
 8004460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004462:	e794      	b.n	800438e <_printf_float+0x1de>
 8004464:	2301      	movs	r3, #1
 8004466:	4652      	mov	r2, sl
 8004468:	4631      	mov	r1, r6
 800446a:	4628      	mov	r0, r5
 800446c:	47b8      	blx	r7
 800446e:	3001      	adds	r0, #1
 8004470:	f43f aef9 	beq.w	8004266 <_printf_float+0xb6>
 8004474:	f109 0901 	add.w	r9, r9, #1
 8004478:	e7ee      	b.n	8004458 <_printf_float+0x2a8>
 800447a:	bf00      	nop
 800447c:	7fefffff 	.word	0x7fefffff
 8004480:	0802cd28 	.word	0x0802cd28
 8004484:	0802cd2c 	.word	0x0802cd2c
 8004488:	0802cd34 	.word	0x0802cd34
 800448c:	0802cd30 	.word	0x0802cd30
 8004490:	0802cd38 	.word	0x0802cd38
 8004494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004498:	429a      	cmp	r2, r3
 800449a:	bfa8      	it	ge
 800449c:	461a      	movge	r2, r3
 800449e:	2a00      	cmp	r2, #0
 80044a0:	4691      	mov	r9, r2
 80044a2:	dc37      	bgt.n	8004514 <_printf_float+0x364>
 80044a4:	f04f 0b00 	mov.w	fp, #0
 80044a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044ac:	f104 021a 	add.w	r2, r4, #26
 80044b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80044b4:	ebaa 0309 	sub.w	r3, sl, r9
 80044b8:	455b      	cmp	r3, fp
 80044ba:	dc33      	bgt.n	8004524 <_printf_float+0x374>
 80044bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044c0:	429a      	cmp	r2, r3
 80044c2:	db3b      	blt.n	800453c <_printf_float+0x38c>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	07da      	lsls	r2, r3, #31
 80044c8:	d438      	bmi.n	800453c <_printf_float+0x38c>
 80044ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044ce:	eba3 020a 	sub.w	r2, r3, sl
 80044d2:	eba3 0901 	sub.w	r9, r3, r1
 80044d6:	4591      	cmp	r9, r2
 80044d8:	bfa8      	it	ge
 80044da:	4691      	movge	r9, r2
 80044dc:	f1b9 0f00 	cmp.w	r9, #0
 80044e0:	dc34      	bgt.n	800454c <_printf_float+0x39c>
 80044e2:	f04f 0800 	mov.w	r8, #0
 80044e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044ea:	f104 0a1a 	add.w	sl, r4, #26
 80044ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	eba3 0309 	sub.w	r3, r3, r9
 80044f8:	4543      	cmp	r3, r8
 80044fa:	f77f af7a 	ble.w	80043f2 <_printf_float+0x242>
 80044fe:	2301      	movs	r3, #1
 8004500:	4652      	mov	r2, sl
 8004502:	4631      	mov	r1, r6
 8004504:	4628      	mov	r0, r5
 8004506:	47b8      	blx	r7
 8004508:	3001      	adds	r0, #1
 800450a:	f43f aeac 	beq.w	8004266 <_printf_float+0xb6>
 800450e:	f108 0801 	add.w	r8, r8, #1
 8004512:	e7ec      	b.n	80044ee <_printf_float+0x33e>
 8004514:	4613      	mov	r3, r2
 8004516:	4631      	mov	r1, r6
 8004518:	4642      	mov	r2, r8
 800451a:	4628      	mov	r0, r5
 800451c:	47b8      	blx	r7
 800451e:	3001      	adds	r0, #1
 8004520:	d1c0      	bne.n	80044a4 <_printf_float+0x2f4>
 8004522:	e6a0      	b.n	8004266 <_printf_float+0xb6>
 8004524:	2301      	movs	r3, #1
 8004526:	4631      	mov	r1, r6
 8004528:	4628      	mov	r0, r5
 800452a:	920b      	str	r2, [sp, #44]	; 0x2c
 800452c:	47b8      	blx	r7
 800452e:	3001      	adds	r0, #1
 8004530:	f43f ae99 	beq.w	8004266 <_printf_float+0xb6>
 8004534:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004536:	f10b 0b01 	add.w	fp, fp, #1
 800453a:	e7b9      	b.n	80044b0 <_printf_float+0x300>
 800453c:	4631      	mov	r1, r6
 800453e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004542:	4628      	mov	r0, r5
 8004544:	47b8      	blx	r7
 8004546:	3001      	adds	r0, #1
 8004548:	d1bf      	bne.n	80044ca <_printf_float+0x31a>
 800454a:	e68c      	b.n	8004266 <_printf_float+0xb6>
 800454c:	464b      	mov	r3, r9
 800454e:	4631      	mov	r1, r6
 8004550:	4628      	mov	r0, r5
 8004552:	eb08 020a 	add.w	r2, r8, sl
 8004556:	47b8      	blx	r7
 8004558:	3001      	adds	r0, #1
 800455a:	d1c2      	bne.n	80044e2 <_printf_float+0x332>
 800455c:	e683      	b.n	8004266 <_printf_float+0xb6>
 800455e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004560:	2a01      	cmp	r2, #1
 8004562:	dc01      	bgt.n	8004568 <_printf_float+0x3b8>
 8004564:	07db      	lsls	r3, r3, #31
 8004566:	d537      	bpl.n	80045d8 <_printf_float+0x428>
 8004568:	2301      	movs	r3, #1
 800456a:	4642      	mov	r2, r8
 800456c:	4631      	mov	r1, r6
 800456e:	4628      	mov	r0, r5
 8004570:	47b8      	blx	r7
 8004572:	3001      	adds	r0, #1
 8004574:	f43f ae77 	beq.w	8004266 <_printf_float+0xb6>
 8004578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800457c:	4631      	mov	r1, r6
 800457e:	4628      	mov	r0, r5
 8004580:	47b8      	blx	r7
 8004582:	3001      	adds	r0, #1
 8004584:	f43f ae6f 	beq.w	8004266 <_printf_float+0xb6>
 8004588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800458c:	2200      	movs	r2, #0
 800458e:	2300      	movs	r3, #0
 8004590:	f7fc fa76 	bl	8000a80 <__aeabi_dcmpeq>
 8004594:	b9d8      	cbnz	r0, 80045ce <_printf_float+0x41e>
 8004596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004598:	f108 0201 	add.w	r2, r8, #1
 800459c:	3b01      	subs	r3, #1
 800459e:	4631      	mov	r1, r6
 80045a0:	4628      	mov	r0, r5
 80045a2:	47b8      	blx	r7
 80045a4:	3001      	adds	r0, #1
 80045a6:	d10e      	bne.n	80045c6 <_printf_float+0x416>
 80045a8:	e65d      	b.n	8004266 <_printf_float+0xb6>
 80045aa:	2301      	movs	r3, #1
 80045ac:	464a      	mov	r2, r9
 80045ae:	4631      	mov	r1, r6
 80045b0:	4628      	mov	r0, r5
 80045b2:	47b8      	blx	r7
 80045b4:	3001      	adds	r0, #1
 80045b6:	f43f ae56 	beq.w	8004266 <_printf_float+0xb6>
 80045ba:	f108 0801 	add.w	r8, r8, #1
 80045be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045c0:	3b01      	subs	r3, #1
 80045c2:	4543      	cmp	r3, r8
 80045c4:	dcf1      	bgt.n	80045aa <_printf_float+0x3fa>
 80045c6:	4653      	mov	r3, sl
 80045c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045cc:	e6e0      	b.n	8004390 <_printf_float+0x1e0>
 80045ce:	f04f 0800 	mov.w	r8, #0
 80045d2:	f104 091a 	add.w	r9, r4, #26
 80045d6:	e7f2      	b.n	80045be <_printf_float+0x40e>
 80045d8:	2301      	movs	r3, #1
 80045da:	4642      	mov	r2, r8
 80045dc:	e7df      	b.n	800459e <_printf_float+0x3ee>
 80045de:	2301      	movs	r3, #1
 80045e0:	464a      	mov	r2, r9
 80045e2:	4631      	mov	r1, r6
 80045e4:	4628      	mov	r0, r5
 80045e6:	47b8      	blx	r7
 80045e8:	3001      	adds	r0, #1
 80045ea:	f43f ae3c 	beq.w	8004266 <_printf_float+0xb6>
 80045ee:	f108 0801 	add.w	r8, r8, #1
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80045f6:	1a5b      	subs	r3, r3, r1
 80045f8:	4543      	cmp	r3, r8
 80045fa:	dcf0      	bgt.n	80045de <_printf_float+0x42e>
 80045fc:	e6fd      	b.n	80043fa <_printf_float+0x24a>
 80045fe:	f04f 0800 	mov.w	r8, #0
 8004602:	f104 0919 	add.w	r9, r4, #25
 8004606:	e7f4      	b.n	80045f2 <_printf_float+0x442>

08004608 <_printf_common>:
 8004608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	4616      	mov	r6, r2
 800460e:	4699      	mov	r9, r3
 8004610:	688a      	ldr	r2, [r1, #8]
 8004612:	690b      	ldr	r3, [r1, #16]
 8004614:	4607      	mov	r7, r0
 8004616:	4293      	cmp	r3, r2
 8004618:	bfb8      	it	lt
 800461a:	4613      	movlt	r3, r2
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004622:	460c      	mov	r4, r1
 8004624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004628:	b10a      	cbz	r2, 800462e <_printf_common+0x26>
 800462a:	3301      	adds	r3, #1
 800462c:	6033      	str	r3, [r6, #0]
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	0699      	lsls	r1, r3, #26
 8004632:	bf42      	ittt	mi
 8004634:	6833      	ldrmi	r3, [r6, #0]
 8004636:	3302      	addmi	r3, #2
 8004638:	6033      	strmi	r3, [r6, #0]
 800463a:	6825      	ldr	r5, [r4, #0]
 800463c:	f015 0506 	ands.w	r5, r5, #6
 8004640:	d106      	bne.n	8004650 <_printf_common+0x48>
 8004642:	f104 0a19 	add.w	sl, r4, #25
 8004646:	68e3      	ldr	r3, [r4, #12]
 8004648:	6832      	ldr	r2, [r6, #0]
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	42ab      	cmp	r3, r5
 800464e:	dc28      	bgt.n	80046a2 <_printf_common+0x9a>
 8004650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004654:	1e13      	subs	r3, r2, #0
 8004656:	6822      	ldr	r2, [r4, #0]
 8004658:	bf18      	it	ne
 800465a:	2301      	movne	r3, #1
 800465c:	0692      	lsls	r2, r2, #26
 800465e:	d42d      	bmi.n	80046bc <_printf_common+0xb4>
 8004660:	4649      	mov	r1, r9
 8004662:	4638      	mov	r0, r7
 8004664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004668:	47c0      	blx	r8
 800466a:	3001      	adds	r0, #1
 800466c:	d020      	beq.n	80046b0 <_printf_common+0xa8>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	68e5      	ldr	r5, [r4, #12]
 8004672:	f003 0306 	and.w	r3, r3, #6
 8004676:	2b04      	cmp	r3, #4
 8004678:	bf18      	it	ne
 800467a:	2500      	movne	r5, #0
 800467c:	6832      	ldr	r2, [r6, #0]
 800467e:	f04f 0600 	mov.w	r6, #0
 8004682:	68a3      	ldr	r3, [r4, #8]
 8004684:	bf08      	it	eq
 8004686:	1aad      	subeq	r5, r5, r2
 8004688:	6922      	ldr	r2, [r4, #16]
 800468a:	bf08      	it	eq
 800468c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004690:	4293      	cmp	r3, r2
 8004692:	bfc4      	itt	gt
 8004694:	1a9b      	subgt	r3, r3, r2
 8004696:	18ed      	addgt	r5, r5, r3
 8004698:	341a      	adds	r4, #26
 800469a:	42b5      	cmp	r5, r6
 800469c:	d11a      	bne.n	80046d4 <_printf_common+0xcc>
 800469e:	2000      	movs	r0, #0
 80046a0:	e008      	b.n	80046b4 <_printf_common+0xac>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4652      	mov	r2, sl
 80046a6:	4649      	mov	r1, r9
 80046a8:	4638      	mov	r0, r7
 80046aa:	47c0      	blx	r8
 80046ac:	3001      	adds	r0, #1
 80046ae:	d103      	bne.n	80046b8 <_printf_common+0xb0>
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b8:	3501      	adds	r5, #1
 80046ba:	e7c4      	b.n	8004646 <_printf_common+0x3e>
 80046bc:	2030      	movs	r0, #48	; 0x30
 80046be:	18e1      	adds	r1, r4, r3
 80046c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046ca:	4422      	add	r2, r4
 80046cc:	3302      	adds	r3, #2
 80046ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046d2:	e7c5      	b.n	8004660 <_printf_common+0x58>
 80046d4:	2301      	movs	r3, #1
 80046d6:	4622      	mov	r2, r4
 80046d8:	4649      	mov	r1, r9
 80046da:	4638      	mov	r0, r7
 80046dc:	47c0      	blx	r8
 80046de:	3001      	adds	r0, #1
 80046e0:	d0e6      	beq.n	80046b0 <_printf_common+0xa8>
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7d9      	b.n	800469a <_printf_common+0x92>
	...

080046e8 <_printf_i>:
 80046e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	7e0f      	ldrb	r7, [r1, #24]
 80046ee:	4691      	mov	r9, r2
 80046f0:	2f78      	cmp	r7, #120	; 0x78
 80046f2:	4680      	mov	r8, r0
 80046f4:	460c      	mov	r4, r1
 80046f6:	469a      	mov	sl, r3
 80046f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046fe:	d807      	bhi.n	8004710 <_printf_i+0x28>
 8004700:	2f62      	cmp	r7, #98	; 0x62
 8004702:	d80a      	bhi.n	800471a <_printf_i+0x32>
 8004704:	2f00      	cmp	r7, #0
 8004706:	f000 80d9 	beq.w	80048bc <_printf_i+0x1d4>
 800470a:	2f58      	cmp	r7, #88	; 0x58
 800470c:	f000 80a4 	beq.w	8004858 <_printf_i+0x170>
 8004710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004718:	e03a      	b.n	8004790 <_printf_i+0xa8>
 800471a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800471e:	2b15      	cmp	r3, #21
 8004720:	d8f6      	bhi.n	8004710 <_printf_i+0x28>
 8004722:	a101      	add	r1, pc, #4	; (adr r1, 8004728 <_printf_i+0x40>)
 8004724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004728:	08004781 	.word	0x08004781
 800472c:	08004795 	.word	0x08004795
 8004730:	08004711 	.word	0x08004711
 8004734:	08004711 	.word	0x08004711
 8004738:	08004711 	.word	0x08004711
 800473c:	08004711 	.word	0x08004711
 8004740:	08004795 	.word	0x08004795
 8004744:	08004711 	.word	0x08004711
 8004748:	08004711 	.word	0x08004711
 800474c:	08004711 	.word	0x08004711
 8004750:	08004711 	.word	0x08004711
 8004754:	080048a3 	.word	0x080048a3
 8004758:	080047c5 	.word	0x080047c5
 800475c:	08004885 	.word	0x08004885
 8004760:	08004711 	.word	0x08004711
 8004764:	08004711 	.word	0x08004711
 8004768:	080048c5 	.word	0x080048c5
 800476c:	08004711 	.word	0x08004711
 8004770:	080047c5 	.word	0x080047c5
 8004774:	08004711 	.word	0x08004711
 8004778:	08004711 	.word	0x08004711
 800477c:	0800488d 	.word	0x0800488d
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	602a      	str	r2, [r5, #0]
 8004788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800478c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004790:	2301      	movs	r3, #1
 8004792:	e0a4      	b.n	80048de <_printf_i+0x1f6>
 8004794:	6820      	ldr	r0, [r4, #0]
 8004796:	6829      	ldr	r1, [r5, #0]
 8004798:	0606      	lsls	r6, r0, #24
 800479a:	f101 0304 	add.w	r3, r1, #4
 800479e:	d50a      	bpl.n	80047b6 <_printf_i+0xce>
 80047a0:	680e      	ldr	r6, [r1, #0]
 80047a2:	602b      	str	r3, [r5, #0]
 80047a4:	2e00      	cmp	r6, #0
 80047a6:	da03      	bge.n	80047b0 <_printf_i+0xc8>
 80047a8:	232d      	movs	r3, #45	; 0x2d
 80047aa:	4276      	negs	r6, r6
 80047ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b0:	230a      	movs	r3, #10
 80047b2:	485e      	ldr	r0, [pc, #376]	; (800492c <_printf_i+0x244>)
 80047b4:	e019      	b.n	80047ea <_printf_i+0x102>
 80047b6:	680e      	ldr	r6, [r1, #0]
 80047b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047bc:	602b      	str	r3, [r5, #0]
 80047be:	bf18      	it	ne
 80047c0:	b236      	sxthne	r6, r6
 80047c2:	e7ef      	b.n	80047a4 <_printf_i+0xbc>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	6820      	ldr	r0, [r4, #0]
 80047c8:	1d19      	adds	r1, r3, #4
 80047ca:	6029      	str	r1, [r5, #0]
 80047cc:	0601      	lsls	r1, r0, #24
 80047ce:	d501      	bpl.n	80047d4 <_printf_i+0xec>
 80047d0:	681e      	ldr	r6, [r3, #0]
 80047d2:	e002      	b.n	80047da <_printf_i+0xf2>
 80047d4:	0646      	lsls	r6, r0, #25
 80047d6:	d5fb      	bpl.n	80047d0 <_printf_i+0xe8>
 80047d8:	881e      	ldrh	r6, [r3, #0]
 80047da:	2f6f      	cmp	r7, #111	; 0x6f
 80047dc:	bf0c      	ite	eq
 80047de:	2308      	moveq	r3, #8
 80047e0:	230a      	movne	r3, #10
 80047e2:	4852      	ldr	r0, [pc, #328]	; (800492c <_printf_i+0x244>)
 80047e4:	2100      	movs	r1, #0
 80047e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ea:	6865      	ldr	r5, [r4, #4]
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	bfa8      	it	ge
 80047f0:	6821      	ldrge	r1, [r4, #0]
 80047f2:	60a5      	str	r5, [r4, #8]
 80047f4:	bfa4      	itt	ge
 80047f6:	f021 0104 	bicge.w	r1, r1, #4
 80047fa:	6021      	strge	r1, [r4, #0]
 80047fc:	b90e      	cbnz	r6, 8004802 <_printf_i+0x11a>
 80047fe:	2d00      	cmp	r5, #0
 8004800:	d04d      	beq.n	800489e <_printf_i+0x1b6>
 8004802:	4615      	mov	r5, r2
 8004804:	fbb6 f1f3 	udiv	r1, r6, r3
 8004808:	fb03 6711 	mls	r7, r3, r1, r6
 800480c:	5dc7      	ldrb	r7, [r0, r7]
 800480e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004812:	4637      	mov	r7, r6
 8004814:	42bb      	cmp	r3, r7
 8004816:	460e      	mov	r6, r1
 8004818:	d9f4      	bls.n	8004804 <_printf_i+0x11c>
 800481a:	2b08      	cmp	r3, #8
 800481c:	d10b      	bne.n	8004836 <_printf_i+0x14e>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	07de      	lsls	r6, r3, #31
 8004822:	d508      	bpl.n	8004836 <_printf_i+0x14e>
 8004824:	6923      	ldr	r3, [r4, #16]
 8004826:	6861      	ldr	r1, [r4, #4]
 8004828:	4299      	cmp	r1, r3
 800482a:	bfde      	ittt	le
 800482c:	2330      	movle	r3, #48	; 0x30
 800482e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004832:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004836:	1b52      	subs	r2, r2, r5
 8004838:	6122      	str	r2, [r4, #16]
 800483a:	464b      	mov	r3, r9
 800483c:	4621      	mov	r1, r4
 800483e:	4640      	mov	r0, r8
 8004840:	f8cd a000 	str.w	sl, [sp]
 8004844:	aa03      	add	r2, sp, #12
 8004846:	f7ff fedf 	bl	8004608 <_printf_common>
 800484a:	3001      	adds	r0, #1
 800484c:	d14c      	bne.n	80048e8 <_printf_i+0x200>
 800484e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004852:	b004      	add	sp, #16
 8004854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004858:	4834      	ldr	r0, [pc, #208]	; (800492c <_printf_i+0x244>)
 800485a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800485e:	6829      	ldr	r1, [r5, #0]
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	f851 6b04 	ldr.w	r6, [r1], #4
 8004866:	6029      	str	r1, [r5, #0]
 8004868:	061d      	lsls	r5, r3, #24
 800486a:	d514      	bpl.n	8004896 <_printf_i+0x1ae>
 800486c:	07df      	lsls	r7, r3, #31
 800486e:	bf44      	itt	mi
 8004870:	f043 0320 	orrmi.w	r3, r3, #32
 8004874:	6023      	strmi	r3, [r4, #0]
 8004876:	b91e      	cbnz	r6, 8004880 <_printf_i+0x198>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	f023 0320 	bic.w	r3, r3, #32
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	2310      	movs	r3, #16
 8004882:	e7af      	b.n	80047e4 <_printf_i+0xfc>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	f043 0320 	orr.w	r3, r3, #32
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	2378      	movs	r3, #120	; 0x78
 800488e:	4828      	ldr	r0, [pc, #160]	; (8004930 <_printf_i+0x248>)
 8004890:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004894:	e7e3      	b.n	800485e <_printf_i+0x176>
 8004896:	0659      	lsls	r1, r3, #25
 8004898:	bf48      	it	mi
 800489a:	b2b6      	uxthmi	r6, r6
 800489c:	e7e6      	b.n	800486c <_printf_i+0x184>
 800489e:	4615      	mov	r5, r2
 80048a0:	e7bb      	b.n	800481a <_printf_i+0x132>
 80048a2:	682b      	ldr	r3, [r5, #0]
 80048a4:	6826      	ldr	r6, [r4, #0]
 80048a6:	1d18      	adds	r0, r3, #4
 80048a8:	6961      	ldr	r1, [r4, #20]
 80048aa:	6028      	str	r0, [r5, #0]
 80048ac:	0635      	lsls	r5, r6, #24
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	d501      	bpl.n	80048b6 <_printf_i+0x1ce>
 80048b2:	6019      	str	r1, [r3, #0]
 80048b4:	e002      	b.n	80048bc <_printf_i+0x1d4>
 80048b6:	0670      	lsls	r0, r6, #25
 80048b8:	d5fb      	bpl.n	80048b2 <_printf_i+0x1ca>
 80048ba:	8019      	strh	r1, [r3, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	4615      	mov	r5, r2
 80048c0:	6123      	str	r3, [r4, #16]
 80048c2:	e7ba      	b.n	800483a <_printf_i+0x152>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	2100      	movs	r1, #0
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	602a      	str	r2, [r5, #0]
 80048cc:	681d      	ldr	r5, [r3, #0]
 80048ce:	6862      	ldr	r2, [r4, #4]
 80048d0:	4628      	mov	r0, r5
 80048d2:	f002 fdeb 	bl	80074ac <memchr>
 80048d6:	b108      	cbz	r0, 80048dc <_printf_i+0x1f4>
 80048d8:	1b40      	subs	r0, r0, r5
 80048da:	6060      	str	r0, [r4, #4]
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	6123      	str	r3, [r4, #16]
 80048e0:	2300      	movs	r3, #0
 80048e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e6:	e7a8      	b.n	800483a <_printf_i+0x152>
 80048e8:	462a      	mov	r2, r5
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	47d0      	blx	sl
 80048f2:	3001      	adds	r0, #1
 80048f4:	d0ab      	beq.n	800484e <_printf_i+0x166>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	079b      	lsls	r3, r3, #30
 80048fa:	d413      	bmi.n	8004924 <_printf_i+0x23c>
 80048fc:	68e0      	ldr	r0, [r4, #12]
 80048fe:	9b03      	ldr	r3, [sp, #12]
 8004900:	4298      	cmp	r0, r3
 8004902:	bfb8      	it	lt
 8004904:	4618      	movlt	r0, r3
 8004906:	e7a4      	b.n	8004852 <_printf_i+0x16a>
 8004908:	2301      	movs	r3, #1
 800490a:	4632      	mov	r2, r6
 800490c:	4649      	mov	r1, r9
 800490e:	4640      	mov	r0, r8
 8004910:	47d0      	blx	sl
 8004912:	3001      	adds	r0, #1
 8004914:	d09b      	beq.n	800484e <_printf_i+0x166>
 8004916:	3501      	adds	r5, #1
 8004918:	68e3      	ldr	r3, [r4, #12]
 800491a:	9903      	ldr	r1, [sp, #12]
 800491c:	1a5b      	subs	r3, r3, r1
 800491e:	42ab      	cmp	r3, r5
 8004920:	dcf2      	bgt.n	8004908 <_printf_i+0x220>
 8004922:	e7eb      	b.n	80048fc <_printf_i+0x214>
 8004924:	2500      	movs	r5, #0
 8004926:	f104 0619 	add.w	r6, r4, #25
 800492a:	e7f5      	b.n	8004918 <_printf_i+0x230>
 800492c:	0802cd3a 	.word	0x0802cd3a
 8004930:	0802cd4b 	.word	0x0802cd4b

08004934 <_scanf_float>:
 8004934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004938:	b087      	sub	sp, #28
 800493a:	9303      	str	r3, [sp, #12]
 800493c:	688b      	ldr	r3, [r1, #8]
 800493e:	4617      	mov	r7, r2
 8004940:	1e5a      	subs	r2, r3, #1
 8004942:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004946:	bf85      	ittet	hi
 8004948:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800494c:	195b      	addhi	r3, r3, r5
 800494e:	2300      	movls	r3, #0
 8004950:	9302      	strhi	r3, [sp, #8]
 8004952:	bf88      	it	hi
 8004954:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004958:	468b      	mov	fp, r1
 800495a:	f04f 0500 	mov.w	r5, #0
 800495e:	bf8c      	ite	hi
 8004960:	608b      	strhi	r3, [r1, #8]
 8004962:	9302      	strls	r3, [sp, #8]
 8004964:	680b      	ldr	r3, [r1, #0]
 8004966:	4680      	mov	r8, r0
 8004968:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800496c:	f84b 3b1c 	str.w	r3, [fp], #28
 8004970:	460c      	mov	r4, r1
 8004972:	465e      	mov	r6, fp
 8004974:	46aa      	mov	sl, r5
 8004976:	46a9      	mov	r9, r5
 8004978:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800497c:	9501      	str	r5, [sp, #4]
 800497e:	68a2      	ldr	r2, [r4, #8]
 8004980:	b152      	cbz	r2, 8004998 <_scanf_float+0x64>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b4e      	cmp	r3, #78	; 0x4e
 8004988:	d864      	bhi.n	8004a54 <_scanf_float+0x120>
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d83c      	bhi.n	8004a08 <_scanf_float+0xd4>
 800498e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004992:	b2c8      	uxtb	r0, r1
 8004994:	280e      	cmp	r0, #14
 8004996:	d93a      	bls.n	8004a0e <_scanf_float+0xda>
 8004998:	f1b9 0f00 	cmp.w	r9, #0
 800499c:	d003      	beq.n	80049a6 <_scanf_float+0x72>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80049aa:	f1ba 0f01 	cmp.w	sl, #1
 80049ae:	f200 8113 	bhi.w	8004bd8 <_scanf_float+0x2a4>
 80049b2:	455e      	cmp	r6, fp
 80049b4:	f200 8105 	bhi.w	8004bc2 <_scanf_float+0x28e>
 80049b8:	2501      	movs	r5, #1
 80049ba:	4628      	mov	r0, r5
 80049bc:	b007      	add	sp, #28
 80049be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049c6:	2a0d      	cmp	r2, #13
 80049c8:	d8e6      	bhi.n	8004998 <_scanf_float+0x64>
 80049ca:	a101      	add	r1, pc, #4	; (adr r1, 80049d0 <_scanf_float+0x9c>)
 80049cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80049d0:	08004b0f 	.word	0x08004b0f
 80049d4:	08004999 	.word	0x08004999
 80049d8:	08004999 	.word	0x08004999
 80049dc:	08004999 	.word	0x08004999
 80049e0:	08004b6f 	.word	0x08004b6f
 80049e4:	08004b47 	.word	0x08004b47
 80049e8:	08004999 	.word	0x08004999
 80049ec:	08004999 	.word	0x08004999
 80049f0:	08004b1d 	.word	0x08004b1d
 80049f4:	08004999 	.word	0x08004999
 80049f8:	08004999 	.word	0x08004999
 80049fc:	08004999 	.word	0x08004999
 8004a00:	08004999 	.word	0x08004999
 8004a04:	08004ad5 	.word	0x08004ad5
 8004a08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004a0c:	e7db      	b.n	80049c6 <_scanf_float+0x92>
 8004a0e:	290e      	cmp	r1, #14
 8004a10:	d8c2      	bhi.n	8004998 <_scanf_float+0x64>
 8004a12:	a001      	add	r0, pc, #4	; (adr r0, 8004a18 <_scanf_float+0xe4>)
 8004a14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a18:	08004ac7 	.word	0x08004ac7
 8004a1c:	08004999 	.word	0x08004999
 8004a20:	08004ac7 	.word	0x08004ac7
 8004a24:	08004b5b 	.word	0x08004b5b
 8004a28:	08004999 	.word	0x08004999
 8004a2c:	08004a75 	.word	0x08004a75
 8004a30:	08004ab1 	.word	0x08004ab1
 8004a34:	08004ab1 	.word	0x08004ab1
 8004a38:	08004ab1 	.word	0x08004ab1
 8004a3c:	08004ab1 	.word	0x08004ab1
 8004a40:	08004ab1 	.word	0x08004ab1
 8004a44:	08004ab1 	.word	0x08004ab1
 8004a48:	08004ab1 	.word	0x08004ab1
 8004a4c:	08004ab1 	.word	0x08004ab1
 8004a50:	08004ab1 	.word	0x08004ab1
 8004a54:	2b6e      	cmp	r3, #110	; 0x6e
 8004a56:	d809      	bhi.n	8004a6c <_scanf_float+0x138>
 8004a58:	2b60      	cmp	r3, #96	; 0x60
 8004a5a:	d8b2      	bhi.n	80049c2 <_scanf_float+0x8e>
 8004a5c:	2b54      	cmp	r3, #84	; 0x54
 8004a5e:	d077      	beq.n	8004b50 <_scanf_float+0x21c>
 8004a60:	2b59      	cmp	r3, #89	; 0x59
 8004a62:	d199      	bne.n	8004998 <_scanf_float+0x64>
 8004a64:	2d07      	cmp	r5, #7
 8004a66:	d197      	bne.n	8004998 <_scanf_float+0x64>
 8004a68:	2508      	movs	r5, #8
 8004a6a:	e029      	b.n	8004ac0 <_scanf_float+0x18c>
 8004a6c:	2b74      	cmp	r3, #116	; 0x74
 8004a6e:	d06f      	beq.n	8004b50 <_scanf_float+0x21c>
 8004a70:	2b79      	cmp	r3, #121	; 0x79
 8004a72:	e7f6      	b.n	8004a62 <_scanf_float+0x12e>
 8004a74:	6821      	ldr	r1, [r4, #0]
 8004a76:	05c8      	lsls	r0, r1, #23
 8004a78:	d51a      	bpl.n	8004ab0 <_scanf_float+0x17c>
 8004a7a:	9b02      	ldr	r3, [sp, #8]
 8004a7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004a80:	6021      	str	r1, [r4, #0]
 8004a82:	f109 0901 	add.w	r9, r9, #1
 8004a86:	b11b      	cbz	r3, 8004a90 <_scanf_float+0x15c>
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	3201      	adds	r2, #1
 8004a8c:	9302      	str	r3, [sp, #8]
 8004a8e:	60a2      	str	r2, [r4, #8]
 8004a90:	68a3      	ldr	r3, [r4, #8]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	60a3      	str	r3, [r4, #8]
 8004a96:	6923      	ldr	r3, [r4, #16]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	6123      	str	r3, [r4, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	f340 8084 	ble.w	8004bb0 <_scanf_float+0x27c>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	e766      	b.n	800497e <_scanf_float+0x4a>
 8004ab0:	eb1a 0f05 	cmn.w	sl, r5
 8004ab4:	f47f af70 	bne.w	8004998 <_scanf_float+0x64>
 8004ab8:	6822      	ldr	r2, [r4, #0]
 8004aba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004abe:	6022      	str	r2, [r4, #0]
 8004ac0:	f806 3b01 	strb.w	r3, [r6], #1
 8004ac4:	e7e4      	b.n	8004a90 <_scanf_float+0x15c>
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	0610      	lsls	r0, r2, #24
 8004aca:	f57f af65 	bpl.w	8004998 <_scanf_float+0x64>
 8004ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad2:	e7f4      	b.n	8004abe <_scanf_float+0x18a>
 8004ad4:	f1ba 0f00 	cmp.w	sl, #0
 8004ad8:	d10e      	bne.n	8004af8 <_scanf_float+0x1c4>
 8004ada:	f1b9 0f00 	cmp.w	r9, #0
 8004ade:	d10e      	bne.n	8004afe <_scanf_float+0x1ca>
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004ae6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004aea:	d108      	bne.n	8004afe <_scanf_float+0x1ca>
 8004aec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004af0:	f04f 0a01 	mov.w	sl, #1
 8004af4:	6022      	str	r2, [r4, #0]
 8004af6:	e7e3      	b.n	8004ac0 <_scanf_float+0x18c>
 8004af8:	f1ba 0f02 	cmp.w	sl, #2
 8004afc:	d055      	beq.n	8004baa <_scanf_float+0x276>
 8004afe:	2d01      	cmp	r5, #1
 8004b00:	d002      	beq.n	8004b08 <_scanf_float+0x1d4>
 8004b02:	2d04      	cmp	r5, #4
 8004b04:	f47f af48 	bne.w	8004998 <_scanf_float+0x64>
 8004b08:	3501      	adds	r5, #1
 8004b0a:	b2ed      	uxtb	r5, r5
 8004b0c:	e7d8      	b.n	8004ac0 <_scanf_float+0x18c>
 8004b0e:	f1ba 0f01 	cmp.w	sl, #1
 8004b12:	f47f af41 	bne.w	8004998 <_scanf_float+0x64>
 8004b16:	f04f 0a02 	mov.w	sl, #2
 8004b1a:	e7d1      	b.n	8004ac0 <_scanf_float+0x18c>
 8004b1c:	b97d      	cbnz	r5, 8004b3e <_scanf_float+0x20a>
 8004b1e:	f1b9 0f00 	cmp.w	r9, #0
 8004b22:	f47f af3c 	bne.w	800499e <_scanf_float+0x6a>
 8004b26:	6822      	ldr	r2, [r4, #0]
 8004b28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004b2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004b30:	f47f af39 	bne.w	80049a6 <_scanf_float+0x72>
 8004b34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b38:	2501      	movs	r5, #1
 8004b3a:	6022      	str	r2, [r4, #0]
 8004b3c:	e7c0      	b.n	8004ac0 <_scanf_float+0x18c>
 8004b3e:	2d03      	cmp	r5, #3
 8004b40:	d0e2      	beq.n	8004b08 <_scanf_float+0x1d4>
 8004b42:	2d05      	cmp	r5, #5
 8004b44:	e7de      	b.n	8004b04 <_scanf_float+0x1d0>
 8004b46:	2d02      	cmp	r5, #2
 8004b48:	f47f af26 	bne.w	8004998 <_scanf_float+0x64>
 8004b4c:	2503      	movs	r5, #3
 8004b4e:	e7b7      	b.n	8004ac0 <_scanf_float+0x18c>
 8004b50:	2d06      	cmp	r5, #6
 8004b52:	f47f af21 	bne.w	8004998 <_scanf_float+0x64>
 8004b56:	2507      	movs	r5, #7
 8004b58:	e7b2      	b.n	8004ac0 <_scanf_float+0x18c>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	0591      	lsls	r1, r2, #22
 8004b5e:	f57f af1b 	bpl.w	8004998 <_scanf_float+0x64>
 8004b62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004b66:	6022      	str	r2, [r4, #0]
 8004b68:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b6c:	e7a8      	b.n	8004ac0 <_scanf_float+0x18c>
 8004b6e:	6822      	ldr	r2, [r4, #0]
 8004b70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004b74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b78:	d006      	beq.n	8004b88 <_scanf_float+0x254>
 8004b7a:	0550      	lsls	r0, r2, #21
 8004b7c:	f57f af0c 	bpl.w	8004998 <_scanf_float+0x64>
 8004b80:	f1b9 0f00 	cmp.w	r9, #0
 8004b84:	f43f af0f 	beq.w	80049a6 <_scanf_float+0x72>
 8004b88:	0591      	lsls	r1, r2, #22
 8004b8a:	bf58      	it	pl
 8004b8c:	9901      	ldrpl	r1, [sp, #4]
 8004b8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004b92:	bf58      	it	pl
 8004b94:	eba9 0101 	subpl.w	r1, r9, r1
 8004b98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004b9c:	f04f 0900 	mov.w	r9, #0
 8004ba0:	bf58      	it	pl
 8004ba2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004ba6:	6022      	str	r2, [r4, #0]
 8004ba8:	e78a      	b.n	8004ac0 <_scanf_float+0x18c>
 8004baa:	f04f 0a03 	mov.w	sl, #3
 8004bae:	e787      	b.n	8004ac0 <_scanf_float+0x18c>
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004bb8:	4798      	blx	r3
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	f43f aedf 	beq.w	800497e <_scanf_float+0x4a>
 8004bc0:	e6ea      	b.n	8004998 <_scanf_float+0x64>
 8004bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bc6:	463a      	mov	r2, r7
 8004bc8:	4640      	mov	r0, r8
 8004bca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bce:	4798      	blx	r3
 8004bd0:	6923      	ldr	r3, [r4, #16]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	6123      	str	r3, [r4, #16]
 8004bd6:	e6ec      	b.n	80049b2 <_scanf_float+0x7e>
 8004bd8:	1e6b      	subs	r3, r5, #1
 8004bda:	2b06      	cmp	r3, #6
 8004bdc:	d825      	bhi.n	8004c2a <_scanf_float+0x2f6>
 8004bde:	2d02      	cmp	r5, #2
 8004be0:	d836      	bhi.n	8004c50 <_scanf_float+0x31c>
 8004be2:	455e      	cmp	r6, fp
 8004be4:	f67f aee8 	bls.w	80049b8 <_scanf_float+0x84>
 8004be8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bec:	463a      	mov	r2, r7
 8004bee:	4640      	mov	r0, r8
 8004bf0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bf4:	4798      	blx	r3
 8004bf6:	6923      	ldr	r3, [r4, #16]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	6123      	str	r3, [r4, #16]
 8004bfc:	e7f1      	b.n	8004be2 <_scanf_float+0x2ae>
 8004bfe:	9802      	ldr	r0, [sp, #8]
 8004c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004c08:	463a      	mov	r2, r7
 8004c0a:	9002      	str	r0, [sp, #8]
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	4798      	blx	r3
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	6123      	str	r3, [r4, #16]
 8004c16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c1a:	fa5f fa8a 	uxtb.w	sl, sl
 8004c1e:	f1ba 0f02 	cmp.w	sl, #2
 8004c22:	d1ec      	bne.n	8004bfe <_scanf_float+0x2ca>
 8004c24:	3d03      	subs	r5, #3
 8004c26:	b2ed      	uxtb	r5, r5
 8004c28:	1b76      	subs	r6, r6, r5
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	05da      	lsls	r2, r3, #23
 8004c2e:	d52f      	bpl.n	8004c90 <_scanf_float+0x35c>
 8004c30:	055b      	lsls	r3, r3, #21
 8004c32:	d510      	bpl.n	8004c56 <_scanf_float+0x322>
 8004c34:	455e      	cmp	r6, fp
 8004c36:	f67f aebf 	bls.w	80049b8 <_scanf_float+0x84>
 8004c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c3e:	463a      	mov	r2, r7
 8004c40:	4640      	mov	r0, r8
 8004c42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c46:	4798      	blx	r3
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	e7f1      	b.n	8004c34 <_scanf_float+0x300>
 8004c50:	46aa      	mov	sl, r5
 8004c52:	9602      	str	r6, [sp, #8]
 8004c54:	e7df      	b.n	8004c16 <_scanf_float+0x2e2>
 8004c56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	2965      	cmp	r1, #101	; 0x65
 8004c5e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004c62:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004c66:	6123      	str	r3, [r4, #16]
 8004c68:	d00c      	beq.n	8004c84 <_scanf_float+0x350>
 8004c6a:	2945      	cmp	r1, #69	; 0x45
 8004c6c:	d00a      	beq.n	8004c84 <_scanf_float+0x350>
 8004c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c72:	463a      	mov	r2, r7
 8004c74:	4640      	mov	r0, r8
 8004c76:	4798      	blx	r3
 8004c78:	6923      	ldr	r3, [r4, #16]
 8004c7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	1eb5      	subs	r5, r6, #2
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	463a      	mov	r2, r7
 8004c86:	4640      	mov	r0, r8
 8004c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c8c:	4798      	blx	r3
 8004c8e:	462e      	mov	r6, r5
 8004c90:	6825      	ldr	r5, [r4, #0]
 8004c92:	f015 0510 	ands.w	r5, r5, #16
 8004c96:	d155      	bne.n	8004d44 <_scanf_float+0x410>
 8004c98:	7035      	strb	r5, [r6, #0]
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca4:	d11b      	bne.n	8004cde <_scanf_float+0x3aa>
 8004ca6:	9b01      	ldr	r3, [sp, #4]
 8004ca8:	454b      	cmp	r3, r9
 8004caa:	eba3 0209 	sub.w	r2, r3, r9
 8004cae:	d123      	bne.n	8004cf8 <_scanf_float+0x3c4>
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4659      	mov	r1, fp
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	f000 fe7b 	bl	80059b0 <_strtod_r>
 8004cba:	6822      	ldr	r2, [r4, #0]
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	f012 0f02 	tst.w	r2, #2
 8004cc2:	4606      	mov	r6, r0
 8004cc4:	460f      	mov	r7, r1
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	d021      	beq.n	8004d0e <_scanf_float+0x3da>
 8004cca:	1d1a      	adds	r2, r3, #4
 8004ccc:	9903      	ldr	r1, [sp, #12]
 8004cce:	600a      	str	r2, [r1, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	e9c3 6700 	strd	r6, r7, [r3]
 8004cd6:	68e3      	ldr	r3, [r4, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	60e3      	str	r3, [r4, #12]
 8004cdc:	e66d      	b.n	80049ba <_scanf_float+0x86>
 8004cde:	9b04      	ldr	r3, [sp, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0e5      	beq.n	8004cb0 <_scanf_float+0x37c>
 8004ce4:	9905      	ldr	r1, [sp, #20]
 8004ce6:	230a      	movs	r3, #10
 8004ce8:	462a      	mov	r2, r5
 8004cea:	4640      	mov	r0, r8
 8004cec:	3101      	adds	r1, #1
 8004cee:	f000 fee1 	bl	8005ab4 <_strtol_r>
 8004cf2:	9b04      	ldr	r3, [sp, #16]
 8004cf4:	9e05      	ldr	r6, [sp, #20]
 8004cf6:	1ac2      	subs	r2, r0, r3
 8004cf8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004cfc:	429e      	cmp	r6, r3
 8004cfe:	bf28      	it	cs
 8004d00:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004d04:	4630      	mov	r0, r6
 8004d06:	4910      	ldr	r1, [pc, #64]	; (8004d48 <_scanf_float+0x414>)
 8004d08:	f000 f826 	bl	8004d58 <siprintf>
 8004d0c:	e7d0      	b.n	8004cb0 <_scanf_float+0x37c>
 8004d0e:	f012 0f04 	tst.w	r2, #4
 8004d12:	f103 0204 	add.w	r2, r3, #4
 8004d16:	d1d9      	bne.n	8004ccc <_scanf_float+0x398>
 8004d18:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004d1c:	f8cc 2000 	str.w	r2, [ip]
 8004d20:	f8d3 8000 	ldr.w	r8, [r3]
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	f7fb fedc 	bl	8000ae4 <__aeabi_dcmpun>
 8004d2c:	b128      	cbz	r0, 8004d3a <_scanf_float+0x406>
 8004d2e:	4807      	ldr	r0, [pc, #28]	; (8004d4c <_scanf_float+0x418>)
 8004d30:	f000 f80e 	bl	8004d50 <nanf>
 8004d34:	f8c8 0000 	str.w	r0, [r8]
 8004d38:	e7cd      	b.n	8004cd6 <_scanf_float+0x3a2>
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	4639      	mov	r1, r7
 8004d3e:	f7fb ff2f 	bl	8000ba0 <__aeabi_d2f>
 8004d42:	e7f7      	b.n	8004d34 <_scanf_float+0x400>
 8004d44:	2500      	movs	r5, #0
 8004d46:	e638      	b.n	80049ba <_scanf_float+0x86>
 8004d48:	0802cd5c 	.word	0x0802cd5c
 8004d4c:	0802d1d0 	.word	0x0802d1d0

08004d50 <nanf>:
 8004d50:	4800      	ldr	r0, [pc, #0]	; (8004d54 <nanf+0x4>)
 8004d52:	4770      	bx	lr
 8004d54:	7fc00000 	.word	0x7fc00000

08004d58 <siprintf>:
 8004d58:	b40e      	push	{r1, r2, r3}
 8004d5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d5e:	b500      	push	{lr}
 8004d60:	b09c      	sub	sp, #112	; 0x70
 8004d62:	ab1d      	add	r3, sp, #116	; 0x74
 8004d64:	9002      	str	r0, [sp, #8]
 8004d66:	9006      	str	r0, [sp, #24]
 8004d68:	9107      	str	r1, [sp, #28]
 8004d6a:	9104      	str	r1, [sp, #16]
 8004d6c:	4808      	ldr	r0, [pc, #32]	; (8004d90 <siprintf+0x38>)
 8004d6e:	4909      	ldr	r1, [pc, #36]	; (8004d94 <siprintf+0x3c>)
 8004d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d74:	9105      	str	r1, [sp, #20]
 8004d76:	6800      	ldr	r0, [r0, #0]
 8004d78:	a902      	add	r1, sp, #8
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	f003 f9b6 	bl	80080ec <_svfiprintf_r>
 8004d80:	2200      	movs	r2, #0
 8004d82:	9b02      	ldr	r3, [sp, #8]
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	b01c      	add	sp, #112	; 0x70
 8004d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d8c:	b003      	add	sp, #12
 8004d8e:	4770      	bx	lr
 8004d90:	20000034 	.word	0x20000034
 8004d94:	ffff0208 	.word	0xffff0208

08004d98 <sulp>:
 8004d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9c:	460f      	mov	r7, r1
 8004d9e:	4690      	mov	r8, r2
 8004da0:	f002 ff10 	bl	8007bc4 <__ulp>
 8004da4:	4604      	mov	r4, r0
 8004da6:	460d      	mov	r5, r1
 8004da8:	f1b8 0f00 	cmp.w	r8, #0
 8004dac:	d011      	beq.n	8004dd2 <sulp+0x3a>
 8004dae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004db2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	dd0b      	ble.n	8004dd2 <sulp+0x3a>
 8004dba:	2400      	movs	r4, #0
 8004dbc:	051b      	lsls	r3, r3, #20
 8004dbe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004dc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	462b      	mov	r3, r5
 8004dca:	f7fb fbf1 	bl	80005b0 <__aeabi_dmul>
 8004dce:	4604      	mov	r4, r0
 8004dd0:	460d      	mov	r5, r1
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dda:	0000      	movs	r0, r0
 8004ddc:	0000      	movs	r0, r0
	...

08004de0 <_strtod_l>:
 8004de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de4:	469b      	mov	fp, r3
 8004de6:	2300      	movs	r3, #0
 8004de8:	b09f      	sub	sp, #124	; 0x7c
 8004dea:	931a      	str	r3, [sp, #104]	; 0x68
 8004dec:	4b9e      	ldr	r3, [pc, #632]	; (8005068 <_strtod_l+0x288>)
 8004dee:	4682      	mov	sl, r0
 8004df0:	681f      	ldr	r7, [r3, #0]
 8004df2:	460e      	mov	r6, r1
 8004df4:	4638      	mov	r0, r7
 8004df6:	9215      	str	r2, [sp, #84]	; 0x54
 8004df8:	f7fb fa16 	bl	8000228 <strlen>
 8004dfc:	f04f 0800 	mov.w	r8, #0
 8004e00:	4604      	mov	r4, r0
 8004e02:	f04f 0900 	mov.w	r9, #0
 8004e06:	9619      	str	r6, [sp, #100]	; 0x64
 8004e08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	2a2b      	cmp	r2, #43	; 0x2b
 8004e0e:	d04c      	beq.n	8004eaa <_strtod_l+0xca>
 8004e10:	d83a      	bhi.n	8004e88 <_strtod_l+0xa8>
 8004e12:	2a0d      	cmp	r2, #13
 8004e14:	d833      	bhi.n	8004e7e <_strtod_l+0x9e>
 8004e16:	2a08      	cmp	r2, #8
 8004e18:	d833      	bhi.n	8004e82 <_strtod_l+0xa2>
 8004e1a:	2a00      	cmp	r2, #0
 8004e1c:	d03d      	beq.n	8004e9a <_strtod_l+0xba>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	930a      	str	r3, [sp, #40]	; 0x28
 8004e22:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004e24:	782b      	ldrb	r3, [r5, #0]
 8004e26:	2b30      	cmp	r3, #48	; 0x30
 8004e28:	f040 80aa 	bne.w	8004f80 <_strtod_l+0x1a0>
 8004e2c:	786b      	ldrb	r3, [r5, #1]
 8004e2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004e32:	2b58      	cmp	r3, #88	; 0x58
 8004e34:	d166      	bne.n	8004f04 <_strtod_l+0x124>
 8004e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e38:	4650      	mov	r0, sl
 8004e3a:	9301      	str	r3, [sp, #4]
 8004e3c:	ab1a      	add	r3, sp, #104	; 0x68
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	4a8a      	ldr	r2, [pc, #552]	; (800506c <_strtod_l+0x28c>)
 8004e42:	f8cd b008 	str.w	fp, [sp, #8]
 8004e46:	ab1b      	add	r3, sp, #108	; 0x6c
 8004e48:	a919      	add	r1, sp, #100	; 0x64
 8004e4a:	f001 ffab 	bl	8006da4 <__gethex>
 8004e4e:	f010 0607 	ands.w	r6, r0, #7
 8004e52:	4604      	mov	r4, r0
 8004e54:	d005      	beq.n	8004e62 <_strtod_l+0x82>
 8004e56:	2e06      	cmp	r6, #6
 8004e58:	d129      	bne.n	8004eae <_strtod_l+0xce>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	3501      	adds	r5, #1
 8004e5e:	9519      	str	r5, [sp, #100]	; 0x64
 8004e60:	930a      	str	r3, [sp, #40]	; 0x28
 8004e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 858a 	bne.w	800597e <_strtod_l+0xb9e>
 8004e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e6c:	b1d3      	cbz	r3, 8004ea4 <_strtod_l+0xc4>
 8004e6e:	4642      	mov	r2, r8
 8004e70:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	b01f      	add	sp, #124	; 0x7c
 8004e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e7e:	2a20      	cmp	r2, #32
 8004e80:	d1cd      	bne.n	8004e1e <_strtod_l+0x3e>
 8004e82:	3301      	adds	r3, #1
 8004e84:	9319      	str	r3, [sp, #100]	; 0x64
 8004e86:	e7bf      	b.n	8004e08 <_strtod_l+0x28>
 8004e88:	2a2d      	cmp	r2, #45	; 0x2d
 8004e8a:	d1c8      	bne.n	8004e1e <_strtod_l+0x3e>
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	920a      	str	r2, [sp, #40]	; 0x28
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	9219      	str	r2, [sp, #100]	; 0x64
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1c3      	bne.n	8004e22 <_strtod_l+0x42>
 8004e9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e9c:	9619      	str	r6, [sp, #100]	; 0x64
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f040 856b 	bne.w	800597a <_strtod_l+0xb9a>
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	e7e4      	b.n	8004e74 <_strtod_l+0x94>
 8004eaa:	2200      	movs	r2, #0
 8004eac:	e7ef      	b.n	8004e8e <_strtod_l+0xae>
 8004eae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004eb0:	b13a      	cbz	r2, 8004ec2 <_strtod_l+0xe2>
 8004eb2:	2135      	movs	r1, #53	; 0x35
 8004eb4:	a81c      	add	r0, sp, #112	; 0x70
 8004eb6:	f002 ff89 	bl	8007dcc <__copybits>
 8004eba:	4650      	mov	r0, sl
 8004ebc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ebe:	f002 fb51 	bl	8007564 <_Bfree>
 8004ec2:	3e01      	subs	r6, #1
 8004ec4:	2e04      	cmp	r6, #4
 8004ec6:	d806      	bhi.n	8004ed6 <_strtod_l+0xf6>
 8004ec8:	e8df f006 	tbb	[pc, r6]
 8004ecc:	1714030a 	.word	0x1714030a
 8004ed0:	0a          	.byte	0x0a
 8004ed1:	00          	.byte	0x00
 8004ed2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004ed6:	0721      	lsls	r1, r4, #28
 8004ed8:	d5c3      	bpl.n	8004e62 <_strtod_l+0x82>
 8004eda:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004ede:	e7c0      	b.n	8004e62 <_strtod_l+0x82>
 8004ee0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004ee2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004ee6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004eea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004eee:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004ef2:	e7f0      	b.n	8004ed6 <_strtod_l+0xf6>
 8004ef4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005070 <_strtod_l+0x290>
 8004ef8:	e7ed      	b.n	8004ed6 <_strtod_l+0xf6>
 8004efa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004efe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004f02:	e7e8      	b.n	8004ed6 <_strtod_l+0xf6>
 8004f04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	9219      	str	r2, [sp, #100]	; 0x64
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	2b30      	cmp	r3, #48	; 0x30
 8004f0e:	d0f9      	beq.n	8004f04 <_strtod_l+0x124>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0a6      	beq.n	8004e62 <_strtod_l+0x82>
 8004f14:	2301      	movs	r3, #1
 8004f16:	9307      	str	r3, [sp, #28]
 8004f18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f1a:	220a      	movs	r2, #10
 8004f1c:	9308      	str	r3, [sp, #32]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	469b      	mov	fp, r3
 8004f22:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004f26:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004f28:	7805      	ldrb	r5, [r0, #0]
 8004f2a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004f2e:	b2d9      	uxtb	r1, r3
 8004f30:	2909      	cmp	r1, #9
 8004f32:	d927      	bls.n	8004f84 <_strtod_l+0x1a4>
 8004f34:	4622      	mov	r2, r4
 8004f36:	4639      	mov	r1, r7
 8004f38:	f003 fb89 	bl	800864e <strncmp>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d033      	beq.n	8004fa8 <_strtod_l+0x1c8>
 8004f40:	2000      	movs	r0, #0
 8004f42:	462a      	mov	r2, r5
 8004f44:	465c      	mov	r4, fp
 8004f46:	4603      	mov	r3, r0
 8004f48:	9004      	str	r0, [sp, #16]
 8004f4a:	2a65      	cmp	r2, #101	; 0x65
 8004f4c:	d001      	beq.n	8004f52 <_strtod_l+0x172>
 8004f4e:	2a45      	cmp	r2, #69	; 0x45
 8004f50:	d114      	bne.n	8004f7c <_strtod_l+0x19c>
 8004f52:	b91c      	cbnz	r4, 8004f5c <_strtod_l+0x17c>
 8004f54:	9a07      	ldr	r2, [sp, #28]
 8004f56:	4302      	orrs	r2, r0
 8004f58:	d09f      	beq.n	8004e9a <_strtod_l+0xba>
 8004f5a:	2400      	movs	r4, #0
 8004f5c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004f5e:	1c72      	adds	r2, r6, #1
 8004f60:	9219      	str	r2, [sp, #100]	; 0x64
 8004f62:	7872      	ldrb	r2, [r6, #1]
 8004f64:	2a2b      	cmp	r2, #43	; 0x2b
 8004f66:	d079      	beq.n	800505c <_strtod_l+0x27c>
 8004f68:	2a2d      	cmp	r2, #45	; 0x2d
 8004f6a:	f000 8083 	beq.w	8005074 <_strtod_l+0x294>
 8004f6e:	2700      	movs	r7, #0
 8004f70:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004f74:	2909      	cmp	r1, #9
 8004f76:	f240 8083 	bls.w	8005080 <_strtod_l+0x2a0>
 8004f7a:	9619      	str	r6, [sp, #100]	; 0x64
 8004f7c:	2500      	movs	r5, #0
 8004f7e:	e09f      	b.n	80050c0 <_strtod_l+0x2e0>
 8004f80:	2300      	movs	r3, #0
 8004f82:	e7c8      	b.n	8004f16 <_strtod_l+0x136>
 8004f84:	f1bb 0f08 	cmp.w	fp, #8
 8004f88:	bfd5      	itete	le
 8004f8a:	9906      	ldrle	r1, [sp, #24]
 8004f8c:	9905      	ldrgt	r1, [sp, #20]
 8004f8e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f92:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004f96:	f100 0001 	add.w	r0, r0, #1
 8004f9a:	bfd4      	ite	le
 8004f9c:	9306      	strle	r3, [sp, #24]
 8004f9e:	9305      	strgt	r3, [sp, #20]
 8004fa0:	f10b 0b01 	add.w	fp, fp, #1
 8004fa4:	9019      	str	r0, [sp, #100]	; 0x64
 8004fa6:	e7be      	b.n	8004f26 <_strtod_l+0x146>
 8004fa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004faa:	191a      	adds	r2, r3, r4
 8004fac:	9219      	str	r2, [sp, #100]	; 0x64
 8004fae:	5d1a      	ldrb	r2, [r3, r4]
 8004fb0:	f1bb 0f00 	cmp.w	fp, #0
 8004fb4:	d036      	beq.n	8005024 <_strtod_l+0x244>
 8004fb6:	465c      	mov	r4, fp
 8004fb8:	9004      	str	r0, [sp, #16]
 8004fba:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004fbe:	2b09      	cmp	r3, #9
 8004fc0:	d912      	bls.n	8004fe8 <_strtod_l+0x208>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e7c1      	b.n	8004f4a <_strtod_l+0x16a>
 8004fc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fc8:	3001      	adds	r0, #1
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	9219      	str	r2, [sp, #100]	; 0x64
 8004fce:	785a      	ldrb	r2, [r3, #1]
 8004fd0:	2a30      	cmp	r2, #48	; 0x30
 8004fd2:	d0f8      	beq.n	8004fc6 <_strtod_l+0x1e6>
 8004fd4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	f200 84d5 	bhi.w	8005988 <_strtod_l+0xba8>
 8004fde:	9004      	str	r0, [sp, #16]
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fe6:	9308      	str	r3, [sp, #32]
 8004fe8:	3a30      	subs	r2, #48	; 0x30
 8004fea:	f100 0301 	add.w	r3, r0, #1
 8004fee:	d013      	beq.n	8005018 <_strtod_l+0x238>
 8004ff0:	9904      	ldr	r1, [sp, #16]
 8004ff2:	1905      	adds	r5, r0, r4
 8004ff4:	4419      	add	r1, r3
 8004ff6:	9104      	str	r1, [sp, #16]
 8004ff8:	4623      	mov	r3, r4
 8004ffa:	210a      	movs	r1, #10
 8004ffc:	42ab      	cmp	r3, r5
 8004ffe:	d113      	bne.n	8005028 <_strtod_l+0x248>
 8005000:	1823      	adds	r3, r4, r0
 8005002:	2b08      	cmp	r3, #8
 8005004:	f104 0401 	add.w	r4, r4, #1
 8005008:	4404      	add	r4, r0
 800500a:	dc1b      	bgt.n	8005044 <_strtod_l+0x264>
 800500c:	230a      	movs	r3, #10
 800500e:	9906      	ldr	r1, [sp, #24]
 8005010:	fb03 2301 	mla	r3, r3, r1, r2
 8005014:	9306      	str	r3, [sp, #24]
 8005016:	2300      	movs	r3, #0
 8005018:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800501a:	4618      	mov	r0, r3
 800501c:	1c51      	adds	r1, r2, #1
 800501e:	9119      	str	r1, [sp, #100]	; 0x64
 8005020:	7852      	ldrb	r2, [r2, #1]
 8005022:	e7ca      	b.n	8004fba <_strtod_l+0x1da>
 8005024:	4658      	mov	r0, fp
 8005026:	e7d3      	b.n	8004fd0 <_strtod_l+0x1f0>
 8005028:	2b08      	cmp	r3, #8
 800502a:	dc04      	bgt.n	8005036 <_strtod_l+0x256>
 800502c:	9f06      	ldr	r7, [sp, #24]
 800502e:	434f      	muls	r7, r1
 8005030:	9706      	str	r7, [sp, #24]
 8005032:	3301      	adds	r3, #1
 8005034:	e7e2      	b.n	8004ffc <_strtod_l+0x21c>
 8005036:	1c5f      	adds	r7, r3, #1
 8005038:	2f10      	cmp	r7, #16
 800503a:	bfde      	ittt	le
 800503c:	9f05      	ldrle	r7, [sp, #20]
 800503e:	434f      	mulle	r7, r1
 8005040:	9705      	strle	r7, [sp, #20]
 8005042:	e7f6      	b.n	8005032 <_strtod_l+0x252>
 8005044:	2c10      	cmp	r4, #16
 8005046:	bfdf      	itttt	le
 8005048:	230a      	movle	r3, #10
 800504a:	9905      	ldrle	r1, [sp, #20]
 800504c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005050:	9305      	strle	r3, [sp, #20]
 8005052:	e7e0      	b.n	8005016 <_strtod_l+0x236>
 8005054:	2300      	movs	r3, #0
 8005056:	9304      	str	r3, [sp, #16]
 8005058:	2301      	movs	r3, #1
 800505a:	e77b      	b.n	8004f54 <_strtod_l+0x174>
 800505c:	2700      	movs	r7, #0
 800505e:	1cb2      	adds	r2, r6, #2
 8005060:	9219      	str	r2, [sp, #100]	; 0x64
 8005062:	78b2      	ldrb	r2, [r6, #2]
 8005064:	e784      	b.n	8004f70 <_strtod_l+0x190>
 8005066:	bf00      	nop
 8005068:	0802d014 	.word	0x0802d014
 800506c:	0802cd64 	.word	0x0802cd64
 8005070:	7ff00000 	.word	0x7ff00000
 8005074:	2701      	movs	r7, #1
 8005076:	e7f2      	b.n	800505e <_strtod_l+0x27e>
 8005078:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800507a:	1c51      	adds	r1, r2, #1
 800507c:	9119      	str	r1, [sp, #100]	; 0x64
 800507e:	7852      	ldrb	r2, [r2, #1]
 8005080:	2a30      	cmp	r2, #48	; 0x30
 8005082:	d0f9      	beq.n	8005078 <_strtod_l+0x298>
 8005084:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005088:	2908      	cmp	r1, #8
 800508a:	f63f af77 	bhi.w	8004f7c <_strtod_l+0x19c>
 800508e:	f04f 0e0a 	mov.w	lr, #10
 8005092:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005096:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005098:	9209      	str	r2, [sp, #36]	; 0x24
 800509a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800509c:	1c51      	adds	r1, r2, #1
 800509e:	9119      	str	r1, [sp, #100]	; 0x64
 80050a0:	7852      	ldrb	r2, [r2, #1]
 80050a2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80050a6:	2d09      	cmp	r5, #9
 80050a8:	d935      	bls.n	8005116 <_strtod_l+0x336>
 80050aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80050ac:	1b49      	subs	r1, r1, r5
 80050ae:	2908      	cmp	r1, #8
 80050b0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80050b4:	dc02      	bgt.n	80050bc <_strtod_l+0x2dc>
 80050b6:	4565      	cmp	r5, ip
 80050b8:	bfa8      	it	ge
 80050ba:	4665      	movge	r5, ip
 80050bc:	b107      	cbz	r7, 80050c0 <_strtod_l+0x2e0>
 80050be:	426d      	negs	r5, r5
 80050c0:	2c00      	cmp	r4, #0
 80050c2:	d14c      	bne.n	800515e <_strtod_l+0x37e>
 80050c4:	9907      	ldr	r1, [sp, #28]
 80050c6:	4301      	orrs	r1, r0
 80050c8:	f47f aecb 	bne.w	8004e62 <_strtod_l+0x82>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f47f aee4 	bne.w	8004e9a <_strtod_l+0xba>
 80050d2:	2a69      	cmp	r2, #105	; 0x69
 80050d4:	d026      	beq.n	8005124 <_strtod_l+0x344>
 80050d6:	dc23      	bgt.n	8005120 <_strtod_l+0x340>
 80050d8:	2a49      	cmp	r2, #73	; 0x49
 80050da:	d023      	beq.n	8005124 <_strtod_l+0x344>
 80050dc:	2a4e      	cmp	r2, #78	; 0x4e
 80050de:	f47f aedc 	bne.w	8004e9a <_strtod_l+0xba>
 80050e2:	499d      	ldr	r1, [pc, #628]	; (8005358 <_strtod_l+0x578>)
 80050e4:	a819      	add	r0, sp, #100	; 0x64
 80050e6:	f002 f8ab 	bl	8007240 <__match>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	f43f aed5 	beq.w	8004e9a <_strtod_l+0xba>
 80050f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b28      	cmp	r3, #40	; 0x28
 80050f6:	d12c      	bne.n	8005152 <_strtod_l+0x372>
 80050f8:	4998      	ldr	r1, [pc, #608]	; (800535c <_strtod_l+0x57c>)
 80050fa:	aa1c      	add	r2, sp, #112	; 0x70
 80050fc:	a819      	add	r0, sp, #100	; 0x64
 80050fe:	f002 f8b3 	bl	8007268 <__hexnan>
 8005102:	2805      	cmp	r0, #5
 8005104:	d125      	bne.n	8005152 <_strtod_l+0x372>
 8005106:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005108:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800510c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005110:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005114:	e6a5      	b.n	8004e62 <_strtod_l+0x82>
 8005116:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800511a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800511e:	e7bc      	b.n	800509a <_strtod_l+0x2ba>
 8005120:	2a6e      	cmp	r2, #110	; 0x6e
 8005122:	e7dc      	b.n	80050de <_strtod_l+0x2fe>
 8005124:	498e      	ldr	r1, [pc, #568]	; (8005360 <_strtod_l+0x580>)
 8005126:	a819      	add	r0, sp, #100	; 0x64
 8005128:	f002 f88a 	bl	8007240 <__match>
 800512c:	2800      	cmp	r0, #0
 800512e:	f43f aeb4 	beq.w	8004e9a <_strtod_l+0xba>
 8005132:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005134:	498b      	ldr	r1, [pc, #556]	; (8005364 <_strtod_l+0x584>)
 8005136:	3b01      	subs	r3, #1
 8005138:	a819      	add	r0, sp, #100	; 0x64
 800513a:	9319      	str	r3, [sp, #100]	; 0x64
 800513c:	f002 f880 	bl	8007240 <__match>
 8005140:	b910      	cbnz	r0, 8005148 <_strtod_l+0x368>
 8005142:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005144:	3301      	adds	r3, #1
 8005146:	9319      	str	r3, [sp, #100]	; 0x64
 8005148:	f04f 0800 	mov.w	r8, #0
 800514c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005368 <_strtod_l+0x588>
 8005150:	e687      	b.n	8004e62 <_strtod_l+0x82>
 8005152:	4886      	ldr	r0, [pc, #536]	; (800536c <_strtod_l+0x58c>)
 8005154:	f003 fa22 	bl	800859c <nan>
 8005158:	4680      	mov	r8, r0
 800515a:	4689      	mov	r9, r1
 800515c:	e681      	b.n	8004e62 <_strtod_l+0x82>
 800515e:	9b04      	ldr	r3, [sp, #16]
 8005160:	f1bb 0f00 	cmp.w	fp, #0
 8005164:	bf08      	it	eq
 8005166:	46a3      	moveq	fp, r4
 8005168:	1aeb      	subs	r3, r5, r3
 800516a:	2c10      	cmp	r4, #16
 800516c:	9806      	ldr	r0, [sp, #24]
 800516e:	4626      	mov	r6, r4
 8005170:	9307      	str	r3, [sp, #28]
 8005172:	bfa8      	it	ge
 8005174:	2610      	movge	r6, #16
 8005176:	f7fb f9a1 	bl	80004bc <__aeabi_ui2d>
 800517a:	2c09      	cmp	r4, #9
 800517c:	4680      	mov	r8, r0
 800517e:	4689      	mov	r9, r1
 8005180:	dd13      	ble.n	80051aa <_strtod_l+0x3ca>
 8005182:	4b7b      	ldr	r3, [pc, #492]	; (8005370 <_strtod_l+0x590>)
 8005184:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005188:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800518c:	f7fb fa10 	bl	80005b0 <__aeabi_dmul>
 8005190:	4680      	mov	r8, r0
 8005192:	9805      	ldr	r0, [sp, #20]
 8005194:	4689      	mov	r9, r1
 8005196:	f7fb f991 	bl	80004bc <__aeabi_ui2d>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4640      	mov	r0, r8
 80051a0:	4649      	mov	r1, r9
 80051a2:	f7fb f84f 	bl	8000244 <__adddf3>
 80051a6:	4680      	mov	r8, r0
 80051a8:	4689      	mov	r9, r1
 80051aa:	2c0f      	cmp	r4, #15
 80051ac:	dc36      	bgt.n	800521c <_strtod_l+0x43c>
 80051ae:	9b07      	ldr	r3, [sp, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f43f ae56 	beq.w	8004e62 <_strtod_l+0x82>
 80051b6:	dd22      	ble.n	80051fe <_strtod_l+0x41e>
 80051b8:	2b16      	cmp	r3, #22
 80051ba:	dc09      	bgt.n	80051d0 <_strtod_l+0x3f0>
 80051bc:	496c      	ldr	r1, [pc, #432]	; (8005370 <_strtod_l+0x590>)
 80051be:	4642      	mov	r2, r8
 80051c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80051c4:	464b      	mov	r3, r9
 80051c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051ca:	f7fb f9f1 	bl	80005b0 <__aeabi_dmul>
 80051ce:	e7c3      	b.n	8005158 <_strtod_l+0x378>
 80051d0:	9a07      	ldr	r2, [sp, #28]
 80051d2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80051d6:	4293      	cmp	r3, r2
 80051d8:	db20      	blt.n	800521c <_strtod_l+0x43c>
 80051da:	4d65      	ldr	r5, [pc, #404]	; (8005370 <_strtod_l+0x590>)
 80051dc:	f1c4 040f 	rsb	r4, r4, #15
 80051e0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80051e4:	4642      	mov	r2, r8
 80051e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051ea:	464b      	mov	r3, r9
 80051ec:	f7fb f9e0 	bl	80005b0 <__aeabi_dmul>
 80051f0:	9b07      	ldr	r3, [sp, #28]
 80051f2:	1b1c      	subs	r4, r3, r4
 80051f4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80051f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051fc:	e7e5      	b.n	80051ca <_strtod_l+0x3ea>
 80051fe:	9b07      	ldr	r3, [sp, #28]
 8005200:	3316      	adds	r3, #22
 8005202:	db0b      	blt.n	800521c <_strtod_l+0x43c>
 8005204:	9b04      	ldr	r3, [sp, #16]
 8005206:	4640      	mov	r0, r8
 8005208:	1b5d      	subs	r5, r3, r5
 800520a:	4b59      	ldr	r3, [pc, #356]	; (8005370 <_strtod_l+0x590>)
 800520c:	4649      	mov	r1, r9
 800520e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005212:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005216:	f7fb faf5 	bl	8000804 <__aeabi_ddiv>
 800521a:	e79d      	b.n	8005158 <_strtod_l+0x378>
 800521c:	9b07      	ldr	r3, [sp, #28]
 800521e:	1ba6      	subs	r6, r4, r6
 8005220:	441e      	add	r6, r3
 8005222:	2e00      	cmp	r6, #0
 8005224:	dd74      	ble.n	8005310 <_strtod_l+0x530>
 8005226:	f016 030f 	ands.w	r3, r6, #15
 800522a:	d00a      	beq.n	8005242 <_strtod_l+0x462>
 800522c:	4950      	ldr	r1, [pc, #320]	; (8005370 <_strtod_l+0x590>)
 800522e:	4642      	mov	r2, r8
 8005230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005238:	464b      	mov	r3, r9
 800523a:	f7fb f9b9 	bl	80005b0 <__aeabi_dmul>
 800523e:	4680      	mov	r8, r0
 8005240:	4689      	mov	r9, r1
 8005242:	f036 060f 	bics.w	r6, r6, #15
 8005246:	d052      	beq.n	80052ee <_strtod_l+0x50e>
 8005248:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800524c:	dd27      	ble.n	800529e <_strtod_l+0x4be>
 800524e:	f04f 0b00 	mov.w	fp, #0
 8005252:	f8cd b010 	str.w	fp, [sp, #16]
 8005256:	f8cd b020 	str.w	fp, [sp, #32]
 800525a:	f8cd b018 	str.w	fp, [sp, #24]
 800525e:	2322      	movs	r3, #34	; 0x22
 8005260:	f04f 0800 	mov.w	r8, #0
 8005264:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005368 <_strtod_l+0x588>
 8005268:	f8ca 3000 	str.w	r3, [sl]
 800526c:	9b08      	ldr	r3, [sp, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f43f adf7 	beq.w	8004e62 <_strtod_l+0x82>
 8005274:	4650      	mov	r0, sl
 8005276:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005278:	f002 f974 	bl	8007564 <_Bfree>
 800527c:	4650      	mov	r0, sl
 800527e:	9906      	ldr	r1, [sp, #24]
 8005280:	f002 f970 	bl	8007564 <_Bfree>
 8005284:	4650      	mov	r0, sl
 8005286:	9904      	ldr	r1, [sp, #16]
 8005288:	f002 f96c 	bl	8007564 <_Bfree>
 800528c:	4650      	mov	r0, sl
 800528e:	9908      	ldr	r1, [sp, #32]
 8005290:	f002 f968 	bl	8007564 <_Bfree>
 8005294:	4659      	mov	r1, fp
 8005296:	4650      	mov	r0, sl
 8005298:	f002 f964 	bl	8007564 <_Bfree>
 800529c:	e5e1      	b.n	8004e62 <_strtod_l+0x82>
 800529e:	4b35      	ldr	r3, [pc, #212]	; (8005374 <_strtod_l+0x594>)
 80052a0:	4640      	mov	r0, r8
 80052a2:	9305      	str	r3, [sp, #20]
 80052a4:	2300      	movs	r3, #0
 80052a6:	4649      	mov	r1, r9
 80052a8:	461f      	mov	r7, r3
 80052aa:	1136      	asrs	r6, r6, #4
 80052ac:	2e01      	cmp	r6, #1
 80052ae:	dc21      	bgt.n	80052f4 <_strtod_l+0x514>
 80052b0:	b10b      	cbz	r3, 80052b6 <_strtod_l+0x4d6>
 80052b2:	4680      	mov	r8, r0
 80052b4:	4689      	mov	r9, r1
 80052b6:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <_strtod_l+0x594>)
 80052b8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80052bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80052c0:	4642      	mov	r2, r8
 80052c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052c6:	464b      	mov	r3, r9
 80052c8:	f7fb f972 	bl	80005b0 <__aeabi_dmul>
 80052cc:	4b26      	ldr	r3, [pc, #152]	; (8005368 <_strtod_l+0x588>)
 80052ce:	460a      	mov	r2, r1
 80052d0:	400b      	ands	r3, r1
 80052d2:	4929      	ldr	r1, [pc, #164]	; (8005378 <_strtod_l+0x598>)
 80052d4:	4680      	mov	r8, r0
 80052d6:	428b      	cmp	r3, r1
 80052d8:	d8b9      	bhi.n	800524e <_strtod_l+0x46e>
 80052da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80052de:	428b      	cmp	r3, r1
 80052e0:	bf86      	itte	hi
 80052e2:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80052e6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800537c <_strtod_l+0x59c>
 80052ea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80052ee:	2300      	movs	r3, #0
 80052f0:	9305      	str	r3, [sp, #20]
 80052f2:	e07f      	b.n	80053f4 <_strtod_l+0x614>
 80052f4:	07f2      	lsls	r2, r6, #31
 80052f6:	d505      	bpl.n	8005304 <_strtod_l+0x524>
 80052f8:	9b05      	ldr	r3, [sp, #20]
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb f957 	bl	80005b0 <__aeabi_dmul>
 8005302:	2301      	movs	r3, #1
 8005304:	9a05      	ldr	r2, [sp, #20]
 8005306:	3701      	adds	r7, #1
 8005308:	3208      	adds	r2, #8
 800530a:	1076      	asrs	r6, r6, #1
 800530c:	9205      	str	r2, [sp, #20]
 800530e:	e7cd      	b.n	80052ac <_strtod_l+0x4cc>
 8005310:	d0ed      	beq.n	80052ee <_strtod_l+0x50e>
 8005312:	4276      	negs	r6, r6
 8005314:	f016 020f 	ands.w	r2, r6, #15
 8005318:	d00a      	beq.n	8005330 <_strtod_l+0x550>
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <_strtod_l+0x590>)
 800531c:	4640      	mov	r0, r8
 800531e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005322:	4649      	mov	r1, r9
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f7fb fa6c 	bl	8000804 <__aeabi_ddiv>
 800532c:	4680      	mov	r8, r0
 800532e:	4689      	mov	r9, r1
 8005330:	1136      	asrs	r6, r6, #4
 8005332:	d0dc      	beq.n	80052ee <_strtod_l+0x50e>
 8005334:	2e1f      	cmp	r6, #31
 8005336:	dd23      	ble.n	8005380 <_strtod_l+0x5a0>
 8005338:	f04f 0b00 	mov.w	fp, #0
 800533c:	f8cd b010 	str.w	fp, [sp, #16]
 8005340:	f8cd b020 	str.w	fp, [sp, #32]
 8005344:	f8cd b018 	str.w	fp, [sp, #24]
 8005348:	2322      	movs	r3, #34	; 0x22
 800534a:	f04f 0800 	mov.w	r8, #0
 800534e:	f04f 0900 	mov.w	r9, #0
 8005352:	f8ca 3000 	str.w	r3, [sl]
 8005356:	e789      	b.n	800526c <_strtod_l+0x48c>
 8005358:	0802cd35 	.word	0x0802cd35
 800535c:	0802cd78 	.word	0x0802cd78
 8005360:	0802cd2d 	.word	0x0802cd2d
 8005364:	0802cebc 	.word	0x0802cebc
 8005368:	7ff00000 	.word	0x7ff00000
 800536c:	0802d1d0 	.word	0x0802d1d0
 8005370:	0802d0b0 	.word	0x0802d0b0
 8005374:	0802d088 	.word	0x0802d088
 8005378:	7ca00000 	.word	0x7ca00000
 800537c:	7fefffff 	.word	0x7fefffff
 8005380:	f016 0310 	ands.w	r3, r6, #16
 8005384:	bf18      	it	ne
 8005386:	236a      	movne	r3, #106	; 0x6a
 8005388:	4640      	mov	r0, r8
 800538a:	9305      	str	r3, [sp, #20]
 800538c:	4649      	mov	r1, r9
 800538e:	2300      	movs	r3, #0
 8005390:	4fb0      	ldr	r7, [pc, #704]	; (8005654 <_strtod_l+0x874>)
 8005392:	07f2      	lsls	r2, r6, #31
 8005394:	d504      	bpl.n	80053a0 <_strtod_l+0x5c0>
 8005396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800539a:	f7fb f909 	bl	80005b0 <__aeabi_dmul>
 800539e:	2301      	movs	r3, #1
 80053a0:	1076      	asrs	r6, r6, #1
 80053a2:	f107 0708 	add.w	r7, r7, #8
 80053a6:	d1f4      	bne.n	8005392 <_strtod_l+0x5b2>
 80053a8:	b10b      	cbz	r3, 80053ae <_strtod_l+0x5ce>
 80053aa:	4680      	mov	r8, r0
 80053ac:	4689      	mov	r9, r1
 80053ae:	9b05      	ldr	r3, [sp, #20]
 80053b0:	b1c3      	cbz	r3, 80053e4 <_strtod_l+0x604>
 80053b2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80053b6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	4649      	mov	r1, r9
 80053be:	dd11      	ble.n	80053e4 <_strtod_l+0x604>
 80053c0:	2b1f      	cmp	r3, #31
 80053c2:	f340 8127 	ble.w	8005614 <_strtod_l+0x834>
 80053c6:	2b34      	cmp	r3, #52	; 0x34
 80053c8:	bfd8      	it	le
 80053ca:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80053ce:	f04f 0800 	mov.w	r8, #0
 80053d2:	bfcf      	iteee	gt
 80053d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80053d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80053dc:	fa03 f202 	lslle.w	r2, r3, r2
 80053e0:	ea02 0901 	andle.w	r9, r2, r1
 80053e4:	2200      	movs	r2, #0
 80053e6:	2300      	movs	r3, #0
 80053e8:	4640      	mov	r0, r8
 80053ea:	4649      	mov	r1, r9
 80053ec:	f7fb fb48 	bl	8000a80 <__aeabi_dcmpeq>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d1a1      	bne.n	8005338 <_strtod_l+0x558>
 80053f4:	9b06      	ldr	r3, [sp, #24]
 80053f6:	465a      	mov	r2, fp
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	4650      	mov	r0, sl
 80053fc:	4623      	mov	r3, r4
 80053fe:	9908      	ldr	r1, [sp, #32]
 8005400:	f002 f918 	bl	8007634 <__s2b>
 8005404:	9008      	str	r0, [sp, #32]
 8005406:	2800      	cmp	r0, #0
 8005408:	f43f af21 	beq.w	800524e <_strtod_l+0x46e>
 800540c:	9b04      	ldr	r3, [sp, #16]
 800540e:	f04f 0b00 	mov.w	fp, #0
 8005412:	1b5d      	subs	r5, r3, r5
 8005414:	9b07      	ldr	r3, [sp, #28]
 8005416:	f8cd b010 	str.w	fp, [sp, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	bfb4      	ite	lt
 800541e:	462b      	movlt	r3, r5
 8005420:	2300      	movge	r3, #0
 8005422:	930e      	str	r3, [sp, #56]	; 0x38
 8005424:	9b07      	ldr	r3, [sp, #28]
 8005426:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800542a:	9314      	str	r3, [sp, #80]	; 0x50
 800542c:	9b08      	ldr	r3, [sp, #32]
 800542e:	4650      	mov	r0, sl
 8005430:	6859      	ldr	r1, [r3, #4]
 8005432:	f002 f857 	bl	80074e4 <_Balloc>
 8005436:	9006      	str	r0, [sp, #24]
 8005438:	2800      	cmp	r0, #0
 800543a:	f43f af10 	beq.w	800525e <_strtod_l+0x47e>
 800543e:	9b08      	ldr	r3, [sp, #32]
 8005440:	300c      	adds	r0, #12
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	f103 010c 	add.w	r1, r3, #12
 8005448:	3202      	adds	r2, #2
 800544a:	0092      	lsls	r2, r2, #2
 800544c:	f002 f83c 	bl	80074c8 <memcpy>
 8005450:	ab1c      	add	r3, sp, #112	; 0x70
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	ab1b      	add	r3, sp, #108	; 0x6c
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	4650      	mov	r0, sl
 800545e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005462:	f002 fc29 	bl	8007cb8 <__d2b>
 8005466:	901a      	str	r0, [sp, #104]	; 0x68
 8005468:	2800      	cmp	r0, #0
 800546a:	f43f aef8 	beq.w	800525e <_strtod_l+0x47e>
 800546e:	2101      	movs	r1, #1
 8005470:	4650      	mov	r0, sl
 8005472:	f002 f977 	bl	8007764 <__i2b>
 8005476:	4603      	mov	r3, r0
 8005478:	9004      	str	r0, [sp, #16]
 800547a:	2800      	cmp	r0, #0
 800547c:	f43f aeef 	beq.w	800525e <_strtod_l+0x47e>
 8005480:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005482:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005484:	2d00      	cmp	r5, #0
 8005486:	bfab      	itete	ge
 8005488:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800548a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800548c:	18ee      	addge	r6, r5, r3
 800548e:	1b5c      	sublt	r4, r3, r5
 8005490:	9b05      	ldr	r3, [sp, #20]
 8005492:	bfa8      	it	ge
 8005494:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005496:	eba5 0503 	sub.w	r5, r5, r3
 800549a:	4415      	add	r5, r2
 800549c:	4b6e      	ldr	r3, [pc, #440]	; (8005658 <_strtod_l+0x878>)
 800549e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80054a2:	bfb8      	it	lt
 80054a4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80054a6:	429d      	cmp	r5, r3
 80054a8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80054ac:	f280 80c4 	bge.w	8005638 <_strtod_l+0x858>
 80054b0:	1b5b      	subs	r3, r3, r5
 80054b2:	2b1f      	cmp	r3, #31
 80054b4:	f04f 0701 	mov.w	r7, #1
 80054b8:	eba2 0203 	sub.w	r2, r2, r3
 80054bc:	f300 80b1 	bgt.w	8005622 <_strtod_l+0x842>
 80054c0:	2500      	movs	r5, #0
 80054c2:	fa07 f303 	lsl.w	r3, r7, r3
 80054c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80054c8:	18b7      	adds	r7, r6, r2
 80054ca:	9b05      	ldr	r3, [sp, #20]
 80054cc:	42be      	cmp	r6, r7
 80054ce:	4414      	add	r4, r2
 80054d0:	441c      	add	r4, r3
 80054d2:	4633      	mov	r3, r6
 80054d4:	bfa8      	it	ge
 80054d6:	463b      	movge	r3, r7
 80054d8:	42a3      	cmp	r3, r4
 80054da:	bfa8      	it	ge
 80054dc:	4623      	movge	r3, r4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bfc2      	ittt	gt
 80054e2:	1aff      	subgt	r7, r7, r3
 80054e4:	1ae4      	subgt	r4, r4, r3
 80054e6:	1af6      	subgt	r6, r6, r3
 80054e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	dd17      	ble.n	800551e <_strtod_l+0x73e>
 80054ee:	461a      	mov	r2, r3
 80054f0:	4650      	mov	r0, sl
 80054f2:	9904      	ldr	r1, [sp, #16]
 80054f4:	f002 f9f4 	bl	80078e0 <__pow5mult>
 80054f8:	9004      	str	r0, [sp, #16]
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f43f aeaf 	beq.w	800525e <_strtod_l+0x47e>
 8005500:	4601      	mov	r1, r0
 8005502:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005504:	4650      	mov	r0, sl
 8005506:	f002 f943 	bl	8007790 <__multiply>
 800550a:	9009      	str	r0, [sp, #36]	; 0x24
 800550c:	2800      	cmp	r0, #0
 800550e:	f43f aea6 	beq.w	800525e <_strtod_l+0x47e>
 8005512:	4650      	mov	r0, sl
 8005514:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005516:	f002 f825 	bl	8007564 <_Bfree>
 800551a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800551c:	931a      	str	r3, [sp, #104]	; 0x68
 800551e:	2f00      	cmp	r7, #0
 8005520:	f300 808e 	bgt.w	8005640 <_strtod_l+0x860>
 8005524:	9b07      	ldr	r3, [sp, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	dd08      	ble.n	800553c <_strtod_l+0x75c>
 800552a:	4650      	mov	r0, sl
 800552c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800552e:	9906      	ldr	r1, [sp, #24]
 8005530:	f002 f9d6 	bl	80078e0 <__pow5mult>
 8005534:	9006      	str	r0, [sp, #24]
 8005536:	2800      	cmp	r0, #0
 8005538:	f43f ae91 	beq.w	800525e <_strtod_l+0x47e>
 800553c:	2c00      	cmp	r4, #0
 800553e:	dd08      	ble.n	8005552 <_strtod_l+0x772>
 8005540:	4622      	mov	r2, r4
 8005542:	4650      	mov	r0, sl
 8005544:	9906      	ldr	r1, [sp, #24]
 8005546:	f002 fa25 	bl	8007994 <__lshift>
 800554a:	9006      	str	r0, [sp, #24]
 800554c:	2800      	cmp	r0, #0
 800554e:	f43f ae86 	beq.w	800525e <_strtod_l+0x47e>
 8005552:	2e00      	cmp	r6, #0
 8005554:	dd08      	ble.n	8005568 <_strtod_l+0x788>
 8005556:	4632      	mov	r2, r6
 8005558:	4650      	mov	r0, sl
 800555a:	9904      	ldr	r1, [sp, #16]
 800555c:	f002 fa1a 	bl	8007994 <__lshift>
 8005560:	9004      	str	r0, [sp, #16]
 8005562:	2800      	cmp	r0, #0
 8005564:	f43f ae7b 	beq.w	800525e <_strtod_l+0x47e>
 8005568:	4650      	mov	r0, sl
 800556a:	9a06      	ldr	r2, [sp, #24]
 800556c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800556e:	f002 fa9d 	bl	8007aac <__mdiff>
 8005572:	4683      	mov	fp, r0
 8005574:	2800      	cmp	r0, #0
 8005576:	f43f ae72 	beq.w	800525e <_strtod_l+0x47e>
 800557a:	2400      	movs	r4, #0
 800557c:	68c3      	ldr	r3, [r0, #12]
 800557e:	9904      	ldr	r1, [sp, #16]
 8005580:	60c4      	str	r4, [r0, #12]
 8005582:	930b      	str	r3, [sp, #44]	; 0x2c
 8005584:	f002 fa76 	bl	8007a74 <__mcmp>
 8005588:	42a0      	cmp	r0, r4
 800558a:	da6b      	bge.n	8005664 <_strtod_l+0x884>
 800558c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800558e:	ea53 0308 	orrs.w	r3, r3, r8
 8005592:	f040 8091 	bne.w	80056b8 <_strtod_l+0x8d8>
 8005596:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800559a:	2b00      	cmp	r3, #0
 800559c:	f040 808c 	bne.w	80056b8 <_strtod_l+0x8d8>
 80055a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055a4:	0d1b      	lsrs	r3, r3, #20
 80055a6:	051b      	lsls	r3, r3, #20
 80055a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80055ac:	f240 8084 	bls.w	80056b8 <_strtod_l+0x8d8>
 80055b0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80055b4:	b91b      	cbnz	r3, 80055be <_strtod_l+0x7de>
 80055b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	dd7c      	ble.n	80056b8 <_strtod_l+0x8d8>
 80055be:	4659      	mov	r1, fp
 80055c0:	2201      	movs	r2, #1
 80055c2:	4650      	mov	r0, sl
 80055c4:	f002 f9e6 	bl	8007994 <__lshift>
 80055c8:	9904      	ldr	r1, [sp, #16]
 80055ca:	4683      	mov	fp, r0
 80055cc:	f002 fa52 	bl	8007a74 <__mcmp>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	dd71      	ble.n	80056b8 <_strtod_l+0x8d8>
 80055d4:	9905      	ldr	r1, [sp, #20]
 80055d6:	464b      	mov	r3, r9
 80055d8:	4a20      	ldr	r2, [pc, #128]	; (800565c <_strtod_l+0x87c>)
 80055da:	2900      	cmp	r1, #0
 80055dc:	f000 808c 	beq.w	80056f8 <_strtod_l+0x918>
 80055e0:	ea02 0109 	and.w	r1, r2, r9
 80055e4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80055e8:	f300 8086 	bgt.w	80056f8 <_strtod_l+0x918>
 80055ec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80055f0:	f77f aeaa 	ble.w	8005348 <_strtod_l+0x568>
 80055f4:	4640      	mov	r0, r8
 80055f6:	4649      	mov	r1, r9
 80055f8:	4b19      	ldr	r3, [pc, #100]	; (8005660 <_strtod_l+0x880>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	f7fa ffd8 	bl	80005b0 <__aeabi_dmul>
 8005600:	460b      	mov	r3, r1
 8005602:	4303      	orrs	r3, r0
 8005604:	bf08      	it	eq
 8005606:	2322      	moveq	r3, #34	; 0x22
 8005608:	4680      	mov	r8, r0
 800560a:	4689      	mov	r9, r1
 800560c:	bf08      	it	eq
 800560e:	f8ca 3000 	streq.w	r3, [sl]
 8005612:	e62f      	b.n	8005274 <_strtod_l+0x494>
 8005614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	ea03 0808 	and.w	r8, r3, r8
 8005620:	e6e0      	b.n	80053e4 <_strtod_l+0x604>
 8005622:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005626:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800562a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800562e:	35e2      	adds	r5, #226	; 0xe2
 8005630:	fa07 f505 	lsl.w	r5, r7, r5
 8005634:	970f      	str	r7, [sp, #60]	; 0x3c
 8005636:	e747      	b.n	80054c8 <_strtod_l+0x6e8>
 8005638:	2301      	movs	r3, #1
 800563a:	2500      	movs	r5, #0
 800563c:	930f      	str	r3, [sp, #60]	; 0x3c
 800563e:	e743      	b.n	80054c8 <_strtod_l+0x6e8>
 8005640:	463a      	mov	r2, r7
 8005642:	4650      	mov	r0, sl
 8005644:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005646:	f002 f9a5 	bl	8007994 <__lshift>
 800564a:	901a      	str	r0, [sp, #104]	; 0x68
 800564c:	2800      	cmp	r0, #0
 800564e:	f47f af69 	bne.w	8005524 <_strtod_l+0x744>
 8005652:	e604      	b.n	800525e <_strtod_l+0x47e>
 8005654:	0802cd90 	.word	0x0802cd90
 8005658:	fffffc02 	.word	0xfffffc02
 800565c:	7ff00000 	.word	0x7ff00000
 8005660:	39500000 	.word	0x39500000
 8005664:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005668:	d165      	bne.n	8005736 <_strtod_l+0x956>
 800566a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800566c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005670:	b35a      	cbz	r2, 80056ca <_strtod_l+0x8ea>
 8005672:	4a99      	ldr	r2, [pc, #612]	; (80058d8 <_strtod_l+0xaf8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d12b      	bne.n	80056d0 <_strtod_l+0x8f0>
 8005678:	9b05      	ldr	r3, [sp, #20]
 800567a:	4641      	mov	r1, r8
 800567c:	b303      	cbz	r3, 80056c0 <_strtod_l+0x8e0>
 800567e:	464a      	mov	r2, r9
 8005680:	4b96      	ldr	r3, [pc, #600]	; (80058dc <_strtod_l+0xafc>)
 8005682:	4013      	ands	r3, r2
 8005684:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800568c:	d81b      	bhi.n	80056c6 <_strtod_l+0x8e6>
 800568e:	0d1b      	lsrs	r3, r3, #20
 8005690:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	4299      	cmp	r1, r3
 800569a:	d119      	bne.n	80056d0 <_strtod_l+0x8f0>
 800569c:	4b90      	ldr	r3, [pc, #576]	; (80058e0 <_strtod_l+0xb00>)
 800569e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d102      	bne.n	80056aa <_strtod_l+0x8ca>
 80056a4:	3101      	adds	r1, #1
 80056a6:	f43f adda 	beq.w	800525e <_strtod_l+0x47e>
 80056aa:	f04f 0800 	mov.w	r8, #0
 80056ae:	4b8b      	ldr	r3, [pc, #556]	; (80058dc <_strtod_l+0xafc>)
 80056b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056b2:	401a      	ands	r2, r3
 80056b4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80056b8:	9b05      	ldr	r3, [sp, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d19a      	bne.n	80055f4 <_strtod_l+0x814>
 80056be:	e5d9      	b.n	8005274 <_strtod_l+0x494>
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056c4:	e7e8      	b.n	8005698 <_strtod_l+0x8b8>
 80056c6:	4613      	mov	r3, r2
 80056c8:	e7e6      	b.n	8005698 <_strtod_l+0x8b8>
 80056ca:	ea53 0308 	orrs.w	r3, r3, r8
 80056ce:	d081      	beq.n	80055d4 <_strtod_l+0x7f4>
 80056d0:	b1e5      	cbz	r5, 800570c <_strtod_l+0x92c>
 80056d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d4:	421d      	tst	r5, r3
 80056d6:	d0ef      	beq.n	80056b8 <_strtod_l+0x8d8>
 80056d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056da:	4640      	mov	r0, r8
 80056dc:	4649      	mov	r1, r9
 80056de:	9a05      	ldr	r2, [sp, #20]
 80056e0:	b1c3      	cbz	r3, 8005714 <_strtod_l+0x934>
 80056e2:	f7ff fb59 	bl	8004d98 <sulp>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056ee:	f7fa fda9 	bl	8000244 <__adddf3>
 80056f2:	4680      	mov	r8, r0
 80056f4:	4689      	mov	r9, r1
 80056f6:	e7df      	b.n	80056b8 <_strtod_l+0x8d8>
 80056f8:	4013      	ands	r3, r2
 80056fa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80056fe:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005702:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005706:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800570a:	e7d5      	b.n	80056b8 <_strtod_l+0x8d8>
 800570c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800570e:	ea13 0f08 	tst.w	r3, r8
 8005712:	e7e0      	b.n	80056d6 <_strtod_l+0x8f6>
 8005714:	f7ff fb40 	bl	8004d98 <sulp>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005720:	f7fa fd8e 	bl	8000240 <__aeabi_dsub>
 8005724:	2200      	movs	r2, #0
 8005726:	2300      	movs	r3, #0
 8005728:	4680      	mov	r8, r0
 800572a:	4689      	mov	r9, r1
 800572c:	f7fb f9a8 	bl	8000a80 <__aeabi_dcmpeq>
 8005730:	2800      	cmp	r0, #0
 8005732:	d0c1      	beq.n	80056b8 <_strtod_l+0x8d8>
 8005734:	e608      	b.n	8005348 <_strtod_l+0x568>
 8005736:	4658      	mov	r0, fp
 8005738:	9904      	ldr	r1, [sp, #16]
 800573a:	f002 fb19 	bl	8007d70 <__ratio>
 800573e:	2200      	movs	r2, #0
 8005740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005744:	4606      	mov	r6, r0
 8005746:	460f      	mov	r7, r1
 8005748:	f7fb f9ae 	bl	8000aa8 <__aeabi_dcmple>
 800574c:	2800      	cmp	r0, #0
 800574e:	d070      	beq.n	8005832 <_strtod_l+0xa52>
 8005750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d042      	beq.n	80057dc <_strtod_l+0x9fc>
 8005756:	2600      	movs	r6, #0
 8005758:	4f62      	ldr	r7, [pc, #392]	; (80058e4 <_strtod_l+0xb04>)
 800575a:	4d62      	ldr	r5, [pc, #392]	; (80058e4 <_strtod_l+0xb04>)
 800575c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800575e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005762:	0d1b      	lsrs	r3, r3, #20
 8005764:	051b      	lsls	r3, r3, #20
 8005766:	930f      	str	r3, [sp, #60]	; 0x3c
 8005768:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800576a:	4b5f      	ldr	r3, [pc, #380]	; (80058e8 <_strtod_l+0xb08>)
 800576c:	429a      	cmp	r2, r3
 800576e:	f040 80c3 	bne.w	80058f8 <_strtod_l+0xb18>
 8005772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005774:	4640      	mov	r0, r8
 8005776:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800577a:	4649      	mov	r1, r9
 800577c:	f002 fa22 	bl	8007bc4 <__ulp>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4630      	mov	r0, r6
 8005786:	4639      	mov	r1, r7
 8005788:	f7fa ff12 	bl	80005b0 <__aeabi_dmul>
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	f7fa fd58 	bl	8000244 <__adddf3>
 8005794:	460b      	mov	r3, r1
 8005796:	4951      	ldr	r1, [pc, #324]	; (80058dc <_strtod_l+0xafc>)
 8005798:	4a54      	ldr	r2, [pc, #336]	; (80058ec <_strtod_l+0xb0c>)
 800579a:	4019      	ands	r1, r3
 800579c:	4291      	cmp	r1, r2
 800579e:	4680      	mov	r8, r0
 80057a0:	d95d      	bls.n	800585e <_strtod_l+0xa7e>
 80057a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057a4:	4b4e      	ldr	r3, [pc, #312]	; (80058e0 <_strtod_l+0xb00>)
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d103      	bne.n	80057b2 <_strtod_l+0x9d2>
 80057aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057ac:	3301      	adds	r3, #1
 80057ae:	f43f ad56 	beq.w	800525e <_strtod_l+0x47e>
 80057b2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80057b6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80058e0 <_strtod_l+0xb00>
 80057ba:	4650      	mov	r0, sl
 80057bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80057be:	f001 fed1 	bl	8007564 <_Bfree>
 80057c2:	4650      	mov	r0, sl
 80057c4:	9906      	ldr	r1, [sp, #24]
 80057c6:	f001 fecd 	bl	8007564 <_Bfree>
 80057ca:	4650      	mov	r0, sl
 80057cc:	9904      	ldr	r1, [sp, #16]
 80057ce:	f001 fec9 	bl	8007564 <_Bfree>
 80057d2:	4659      	mov	r1, fp
 80057d4:	4650      	mov	r0, sl
 80057d6:	f001 fec5 	bl	8007564 <_Bfree>
 80057da:	e627      	b.n	800542c <_strtod_l+0x64c>
 80057dc:	f1b8 0f00 	cmp.w	r8, #0
 80057e0:	d119      	bne.n	8005816 <_strtod_l+0xa36>
 80057e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057e8:	b9e3      	cbnz	r3, 8005824 <_strtod_l+0xa44>
 80057ea:	2200      	movs	r2, #0
 80057ec:	4630      	mov	r0, r6
 80057ee:	4639      	mov	r1, r7
 80057f0:	4b3c      	ldr	r3, [pc, #240]	; (80058e4 <_strtod_l+0xb04>)
 80057f2:	f7fb f94f 	bl	8000a94 <__aeabi_dcmplt>
 80057f6:	b9c8      	cbnz	r0, 800582c <_strtod_l+0xa4c>
 80057f8:	2200      	movs	r2, #0
 80057fa:	4630      	mov	r0, r6
 80057fc:	4639      	mov	r1, r7
 80057fe:	4b3c      	ldr	r3, [pc, #240]	; (80058f0 <_strtod_l+0xb10>)
 8005800:	f7fa fed6 	bl	80005b0 <__aeabi_dmul>
 8005804:	4604      	mov	r4, r0
 8005806:	460d      	mov	r5, r1
 8005808:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800580c:	9416      	str	r4, [sp, #88]	; 0x58
 800580e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005810:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005814:	e7a2      	b.n	800575c <_strtod_l+0x97c>
 8005816:	f1b8 0f01 	cmp.w	r8, #1
 800581a:	d103      	bne.n	8005824 <_strtod_l+0xa44>
 800581c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	f43f ad92 	beq.w	8005348 <_strtod_l+0x568>
 8005824:	2600      	movs	r6, #0
 8005826:	2400      	movs	r4, #0
 8005828:	4f32      	ldr	r7, [pc, #200]	; (80058f4 <_strtod_l+0xb14>)
 800582a:	e796      	b.n	800575a <_strtod_l+0x97a>
 800582c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800582e:	4d30      	ldr	r5, [pc, #192]	; (80058f0 <_strtod_l+0xb10>)
 8005830:	e7ea      	b.n	8005808 <_strtod_l+0xa28>
 8005832:	4b2f      	ldr	r3, [pc, #188]	; (80058f0 <_strtod_l+0xb10>)
 8005834:	2200      	movs	r2, #0
 8005836:	4630      	mov	r0, r6
 8005838:	4639      	mov	r1, r7
 800583a:	f7fa feb9 	bl	80005b0 <__aeabi_dmul>
 800583e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005840:	4604      	mov	r4, r0
 8005842:	460d      	mov	r5, r1
 8005844:	b933      	cbnz	r3, 8005854 <_strtod_l+0xa74>
 8005846:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800584a:	9010      	str	r0, [sp, #64]	; 0x40
 800584c:	9311      	str	r3, [sp, #68]	; 0x44
 800584e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005852:	e783      	b.n	800575c <_strtod_l+0x97c>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800585c:	e7f7      	b.n	800584e <_strtod_l+0xa6e>
 800585e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005862:	9b05      	ldr	r3, [sp, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1a8      	bne.n	80057ba <_strtod_l+0x9da>
 8005868:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800586c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800586e:	0d1b      	lsrs	r3, r3, #20
 8005870:	051b      	lsls	r3, r3, #20
 8005872:	429a      	cmp	r2, r3
 8005874:	d1a1      	bne.n	80057ba <_strtod_l+0x9da>
 8005876:	4620      	mov	r0, r4
 8005878:	4629      	mov	r1, r5
 800587a:	f7fb fc3f 	bl	80010fc <__aeabi_d2lz>
 800587e:	f7fa fe69 	bl	8000554 <__aeabi_l2d>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4620      	mov	r0, r4
 8005888:	4629      	mov	r1, r5
 800588a:	f7fa fcd9 	bl	8000240 <__aeabi_dsub>
 800588e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005894:	ea43 0308 	orr.w	r3, r3, r8
 8005898:	4313      	orrs	r3, r2
 800589a:	4604      	mov	r4, r0
 800589c:	460d      	mov	r5, r1
 800589e:	d066      	beq.n	800596e <_strtod_l+0xb8e>
 80058a0:	a309      	add	r3, pc, #36	; (adr r3, 80058c8 <_strtod_l+0xae8>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f7fb f8f5 	bl	8000a94 <__aeabi_dcmplt>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	f47f ace2 	bne.w	8005274 <_strtod_l+0x494>
 80058b0:	a307      	add	r3, pc, #28	; (adr r3, 80058d0 <_strtod_l+0xaf0>)
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	4620      	mov	r0, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	f7fb f909 	bl	8000ad0 <__aeabi_dcmpgt>
 80058be:	2800      	cmp	r0, #0
 80058c0:	f43f af7b 	beq.w	80057ba <_strtod_l+0x9da>
 80058c4:	e4d6      	b.n	8005274 <_strtod_l+0x494>
 80058c6:	bf00      	nop
 80058c8:	94a03595 	.word	0x94a03595
 80058cc:	3fdfffff 	.word	0x3fdfffff
 80058d0:	35afe535 	.word	0x35afe535
 80058d4:	3fe00000 	.word	0x3fe00000
 80058d8:	000fffff 	.word	0x000fffff
 80058dc:	7ff00000 	.word	0x7ff00000
 80058e0:	7fefffff 	.word	0x7fefffff
 80058e4:	3ff00000 	.word	0x3ff00000
 80058e8:	7fe00000 	.word	0x7fe00000
 80058ec:	7c9fffff 	.word	0x7c9fffff
 80058f0:	3fe00000 	.word	0x3fe00000
 80058f4:	bff00000 	.word	0xbff00000
 80058f8:	9b05      	ldr	r3, [sp, #20]
 80058fa:	b313      	cbz	r3, 8005942 <_strtod_l+0xb62>
 80058fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005902:	d81e      	bhi.n	8005942 <_strtod_l+0xb62>
 8005904:	a326      	add	r3, pc, #152	; (adr r3, 80059a0 <_strtod_l+0xbc0>)
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	4620      	mov	r0, r4
 800590c:	4629      	mov	r1, r5
 800590e:	f7fb f8cb 	bl	8000aa8 <__aeabi_dcmple>
 8005912:	b190      	cbz	r0, 800593a <_strtod_l+0xb5a>
 8005914:	4629      	mov	r1, r5
 8005916:	4620      	mov	r0, r4
 8005918:	f7fb f922 	bl	8000b60 <__aeabi_d2uiz>
 800591c:	2801      	cmp	r0, #1
 800591e:	bf38      	it	cc
 8005920:	2001      	movcc	r0, #1
 8005922:	f7fa fdcb 	bl	80004bc <__aeabi_ui2d>
 8005926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005928:	4604      	mov	r4, r0
 800592a:	460d      	mov	r5, r1
 800592c:	b9d3      	cbnz	r3, 8005964 <_strtod_l+0xb84>
 800592e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005932:	9012      	str	r0, [sp, #72]	; 0x48
 8005934:	9313      	str	r3, [sp, #76]	; 0x4c
 8005936:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800593a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800593c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005940:	1a9f      	subs	r7, r3, r2
 8005942:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005946:	f002 f93d 	bl	8007bc4 <__ulp>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4630      	mov	r0, r6
 8005950:	4639      	mov	r1, r7
 8005952:	f7fa fe2d 	bl	80005b0 <__aeabi_dmul>
 8005956:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800595a:	f7fa fc73 	bl	8000244 <__adddf3>
 800595e:	4680      	mov	r8, r0
 8005960:	4689      	mov	r9, r1
 8005962:	e77e      	b.n	8005862 <_strtod_l+0xa82>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800596c:	e7e3      	b.n	8005936 <_strtod_l+0xb56>
 800596e:	a30e      	add	r3, pc, #56	; (adr r3, 80059a8 <_strtod_l+0xbc8>)
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f7fb f88e 	bl	8000a94 <__aeabi_dcmplt>
 8005978:	e7a1      	b.n	80058be <_strtod_l+0xade>
 800597a:	2300      	movs	r3, #0
 800597c:	930a      	str	r3, [sp, #40]	; 0x28
 800597e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005980:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	f7ff ba71 	b.w	8004e6a <_strtod_l+0x8a>
 8005988:	2a65      	cmp	r2, #101	; 0x65
 800598a:	f43f ab63 	beq.w	8005054 <_strtod_l+0x274>
 800598e:	2a45      	cmp	r2, #69	; 0x45
 8005990:	f43f ab60 	beq.w	8005054 <_strtod_l+0x274>
 8005994:	2301      	movs	r3, #1
 8005996:	f7ff bb95 	b.w	80050c4 <_strtod_l+0x2e4>
 800599a:	bf00      	nop
 800599c:	f3af 8000 	nop.w
 80059a0:	ffc00000 	.word	0xffc00000
 80059a4:	41dfffff 	.word	0x41dfffff
 80059a8:	94a03595 	.word	0x94a03595
 80059ac:	3fcfffff 	.word	0x3fcfffff

080059b0 <_strtod_r>:
 80059b0:	4b01      	ldr	r3, [pc, #4]	; (80059b8 <_strtod_r+0x8>)
 80059b2:	f7ff ba15 	b.w	8004de0 <_strtod_l>
 80059b6:	bf00      	nop
 80059b8:	2000009c 	.word	0x2000009c

080059bc <_strtol_l.constprop.0>:
 80059bc:	2b01      	cmp	r3, #1
 80059be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c2:	4680      	mov	r8, r0
 80059c4:	d001      	beq.n	80059ca <_strtol_l.constprop.0+0xe>
 80059c6:	2b24      	cmp	r3, #36	; 0x24
 80059c8:	d906      	bls.n	80059d8 <_strtol_l.constprop.0+0x1c>
 80059ca:	f7fe fb21 	bl	8004010 <__errno>
 80059ce:	2316      	movs	r3, #22
 80059d0:	6003      	str	r3, [r0, #0]
 80059d2:	2000      	movs	r0, #0
 80059d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d8:	460d      	mov	r5, r1
 80059da:	4f35      	ldr	r7, [pc, #212]	; (8005ab0 <_strtol_l.constprop.0+0xf4>)
 80059dc:	4628      	mov	r0, r5
 80059de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059e2:	5de6      	ldrb	r6, [r4, r7]
 80059e4:	f016 0608 	ands.w	r6, r6, #8
 80059e8:	d1f8      	bne.n	80059dc <_strtol_l.constprop.0+0x20>
 80059ea:	2c2d      	cmp	r4, #45	; 0x2d
 80059ec:	d12f      	bne.n	8005a4e <_strtol_l.constprop.0+0x92>
 80059ee:	2601      	movs	r6, #1
 80059f0:	782c      	ldrb	r4, [r5, #0]
 80059f2:	1c85      	adds	r5, r0, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d057      	beq.n	8005aa8 <_strtol_l.constprop.0+0xec>
 80059f8:	2b10      	cmp	r3, #16
 80059fa:	d109      	bne.n	8005a10 <_strtol_l.constprop.0+0x54>
 80059fc:	2c30      	cmp	r4, #48	; 0x30
 80059fe:	d107      	bne.n	8005a10 <_strtol_l.constprop.0+0x54>
 8005a00:	7828      	ldrb	r0, [r5, #0]
 8005a02:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005a06:	2858      	cmp	r0, #88	; 0x58
 8005a08:	d149      	bne.n	8005a9e <_strtol_l.constprop.0+0xe2>
 8005a0a:	2310      	movs	r3, #16
 8005a0c:	786c      	ldrb	r4, [r5, #1]
 8005a0e:	3502      	adds	r5, #2
 8005a10:	2700      	movs	r7, #0
 8005a12:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005a16:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005a1a:	fbbe f9f3 	udiv	r9, lr, r3
 8005a1e:	4638      	mov	r0, r7
 8005a20:	fb03 ea19 	mls	sl, r3, r9, lr
 8005a24:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005a28:	f1bc 0f09 	cmp.w	ip, #9
 8005a2c:	d814      	bhi.n	8005a58 <_strtol_l.constprop.0+0x9c>
 8005a2e:	4664      	mov	r4, ip
 8005a30:	42a3      	cmp	r3, r4
 8005a32:	dd22      	ble.n	8005a7a <_strtol_l.constprop.0+0xbe>
 8005a34:	2f00      	cmp	r7, #0
 8005a36:	db1d      	blt.n	8005a74 <_strtol_l.constprop.0+0xb8>
 8005a38:	4581      	cmp	r9, r0
 8005a3a:	d31b      	bcc.n	8005a74 <_strtol_l.constprop.0+0xb8>
 8005a3c:	d101      	bne.n	8005a42 <_strtol_l.constprop.0+0x86>
 8005a3e:	45a2      	cmp	sl, r4
 8005a40:	db18      	blt.n	8005a74 <_strtol_l.constprop.0+0xb8>
 8005a42:	2701      	movs	r7, #1
 8005a44:	fb00 4003 	mla	r0, r0, r3, r4
 8005a48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a4c:	e7ea      	b.n	8005a24 <_strtol_l.constprop.0+0x68>
 8005a4e:	2c2b      	cmp	r4, #43	; 0x2b
 8005a50:	bf04      	itt	eq
 8005a52:	782c      	ldrbeq	r4, [r5, #0]
 8005a54:	1c85      	addeq	r5, r0, #2
 8005a56:	e7cd      	b.n	80059f4 <_strtol_l.constprop.0+0x38>
 8005a58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005a5c:	f1bc 0f19 	cmp.w	ip, #25
 8005a60:	d801      	bhi.n	8005a66 <_strtol_l.constprop.0+0xaa>
 8005a62:	3c37      	subs	r4, #55	; 0x37
 8005a64:	e7e4      	b.n	8005a30 <_strtol_l.constprop.0+0x74>
 8005a66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005a6a:	f1bc 0f19 	cmp.w	ip, #25
 8005a6e:	d804      	bhi.n	8005a7a <_strtol_l.constprop.0+0xbe>
 8005a70:	3c57      	subs	r4, #87	; 0x57
 8005a72:	e7dd      	b.n	8005a30 <_strtol_l.constprop.0+0x74>
 8005a74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005a78:	e7e6      	b.n	8005a48 <_strtol_l.constprop.0+0x8c>
 8005a7a:	2f00      	cmp	r7, #0
 8005a7c:	da07      	bge.n	8005a8e <_strtol_l.constprop.0+0xd2>
 8005a7e:	2322      	movs	r3, #34	; 0x22
 8005a80:	4670      	mov	r0, lr
 8005a82:	f8c8 3000 	str.w	r3, [r8]
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	d0a4      	beq.n	80059d4 <_strtol_l.constprop.0+0x18>
 8005a8a:	1e69      	subs	r1, r5, #1
 8005a8c:	e005      	b.n	8005a9a <_strtol_l.constprop.0+0xde>
 8005a8e:	b106      	cbz	r6, 8005a92 <_strtol_l.constprop.0+0xd6>
 8005a90:	4240      	negs	r0, r0
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	d09e      	beq.n	80059d4 <_strtol_l.constprop.0+0x18>
 8005a96:	2f00      	cmp	r7, #0
 8005a98:	d1f7      	bne.n	8005a8a <_strtol_l.constprop.0+0xce>
 8005a9a:	6011      	str	r1, [r2, #0]
 8005a9c:	e79a      	b.n	80059d4 <_strtol_l.constprop.0+0x18>
 8005a9e:	2430      	movs	r4, #48	; 0x30
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1b5      	bne.n	8005a10 <_strtol_l.constprop.0+0x54>
 8005aa4:	2308      	movs	r3, #8
 8005aa6:	e7b3      	b.n	8005a10 <_strtol_l.constprop.0+0x54>
 8005aa8:	2c30      	cmp	r4, #48	; 0x30
 8005aaa:	d0a9      	beq.n	8005a00 <_strtol_l.constprop.0+0x44>
 8005aac:	230a      	movs	r3, #10
 8005aae:	e7af      	b.n	8005a10 <_strtol_l.constprop.0+0x54>
 8005ab0:	0802cdb9 	.word	0x0802cdb9

08005ab4 <_strtol_r>:
 8005ab4:	f7ff bf82 	b.w	80059bc <_strtol_l.constprop.0>

08005ab8 <_vsiprintf_r>:
 8005ab8:	b500      	push	{lr}
 8005aba:	b09b      	sub	sp, #108	; 0x6c
 8005abc:	9100      	str	r1, [sp, #0]
 8005abe:	9104      	str	r1, [sp, #16]
 8005ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ac4:	9105      	str	r1, [sp, #20]
 8005ac6:	9102      	str	r1, [sp, #8]
 8005ac8:	4905      	ldr	r1, [pc, #20]	; (8005ae0 <_vsiprintf_r+0x28>)
 8005aca:	9103      	str	r1, [sp, #12]
 8005acc:	4669      	mov	r1, sp
 8005ace:	f002 fb0d 	bl	80080ec <_svfiprintf_r>
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	9b00      	ldr	r3, [sp, #0]
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	b01b      	add	sp, #108	; 0x6c
 8005ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ade:	bf00      	nop
 8005ae0:	ffff0208 	.word	0xffff0208

08005ae4 <vsiprintf>:
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	460a      	mov	r2, r1
 8005ae8:	4601      	mov	r1, r0
 8005aea:	4802      	ldr	r0, [pc, #8]	; (8005af4 <vsiprintf+0x10>)
 8005aec:	6800      	ldr	r0, [r0, #0]
 8005aee:	f7ff bfe3 	b.w	8005ab8 <_vsiprintf_r>
 8005af2:	bf00      	nop
 8005af4:	20000034 	.word	0x20000034

08005af8 <__swbuf_r>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	460e      	mov	r6, r1
 8005afc:	4614      	mov	r4, r2
 8005afe:	4605      	mov	r5, r0
 8005b00:	b118      	cbz	r0, 8005b0a <__swbuf_r+0x12>
 8005b02:	6983      	ldr	r3, [r0, #24]
 8005b04:	b90b      	cbnz	r3, 8005b0a <__swbuf_r+0x12>
 8005b06:	f001 f847 	bl	8006b98 <__sinit>
 8005b0a:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <__swbuf_r+0x98>)
 8005b0c:	429c      	cmp	r4, r3
 8005b0e:	d12b      	bne.n	8005b68 <__swbuf_r+0x70>
 8005b10:	686c      	ldr	r4, [r5, #4]
 8005b12:	69a3      	ldr	r3, [r4, #24]
 8005b14:	60a3      	str	r3, [r4, #8]
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	071a      	lsls	r2, r3, #28
 8005b1a:	d52f      	bpl.n	8005b7c <__swbuf_r+0x84>
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	b36b      	cbz	r3, 8005b7c <__swbuf_r+0x84>
 8005b20:	6923      	ldr	r3, [r4, #16]
 8005b22:	6820      	ldr	r0, [r4, #0]
 8005b24:	b2f6      	uxtb	r6, r6
 8005b26:	1ac0      	subs	r0, r0, r3
 8005b28:	6963      	ldr	r3, [r4, #20]
 8005b2a:	4637      	mov	r7, r6
 8005b2c:	4283      	cmp	r3, r0
 8005b2e:	dc04      	bgt.n	8005b3a <__swbuf_r+0x42>
 8005b30:	4621      	mov	r1, r4
 8005b32:	4628      	mov	r0, r5
 8005b34:	f000 ff9c 	bl	8006a70 <_fflush_r>
 8005b38:	bb30      	cbnz	r0, 8005b88 <__swbuf_r+0x90>
 8005b3a:	68a3      	ldr	r3, [r4, #8]
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	60a3      	str	r3, [r4, #8]
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	6022      	str	r2, [r4, #0]
 8005b48:	701e      	strb	r6, [r3, #0]
 8005b4a:	6963      	ldr	r3, [r4, #20]
 8005b4c:	4283      	cmp	r3, r0
 8005b4e:	d004      	beq.n	8005b5a <__swbuf_r+0x62>
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	07db      	lsls	r3, r3, #31
 8005b54:	d506      	bpl.n	8005b64 <__swbuf_r+0x6c>
 8005b56:	2e0a      	cmp	r6, #10
 8005b58:	d104      	bne.n	8005b64 <__swbuf_r+0x6c>
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 ff87 	bl	8006a70 <_fflush_r>
 8005b62:	b988      	cbnz	r0, 8005b88 <__swbuf_r+0x90>
 8005b64:	4638      	mov	r0, r7
 8005b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <__swbuf_r+0x9c>)
 8005b6a:	429c      	cmp	r4, r3
 8005b6c:	d101      	bne.n	8005b72 <__swbuf_r+0x7a>
 8005b6e:	68ac      	ldr	r4, [r5, #8]
 8005b70:	e7cf      	b.n	8005b12 <__swbuf_r+0x1a>
 8005b72:	4b09      	ldr	r3, [pc, #36]	; (8005b98 <__swbuf_r+0xa0>)
 8005b74:	429c      	cmp	r4, r3
 8005b76:	bf08      	it	eq
 8005b78:	68ec      	ldreq	r4, [r5, #12]
 8005b7a:	e7ca      	b.n	8005b12 <__swbuf_r+0x1a>
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f000 f80c 	bl	8005b9c <__swsetup_r>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d0cb      	beq.n	8005b20 <__swbuf_r+0x28>
 8005b88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005b8c:	e7ea      	b.n	8005b64 <__swbuf_r+0x6c>
 8005b8e:	bf00      	nop
 8005b90:	0802cf6c 	.word	0x0802cf6c
 8005b94:	0802cf8c 	.word	0x0802cf8c
 8005b98:	0802cf4c 	.word	0x0802cf4c

08005b9c <__swsetup_r>:
 8005b9c:	4b32      	ldr	r3, [pc, #200]	; (8005c68 <__swsetup_r+0xcc>)
 8005b9e:	b570      	push	{r4, r5, r6, lr}
 8005ba0:	681d      	ldr	r5, [r3, #0]
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	b125      	cbz	r5, 8005bb2 <__swsetup_r+0x16>
 8005ba8:	69ab      	ldr	r3, [r5, #24]
 8005baa:	b913      	cbnz	r3, 8005bb2 <__swsetup_r+0x16>
 8005bac:	4628      	mov	r0, r5
 8005bae:	f000 fff3 	bl	8006b98 <__sinit>
 8005bb2:	4b2e      	ldr	r3, [pc, #184]	; (8005c6c <__swsetup_r+0xd0>)
 8005bb4:	429c      	cmp	r4, r3
 8005bb6:	d10f      	bne.n	8005bd8 <__swsetup_r+0x3c>
 8005bb8:	686c      	ldr	r4, [r5, #4]
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bc0:	0719      	lsls	r1, r3, #28
 8005bc2:	d42c      	bmi.n	8005c1e <__swsetup_r+0x82>
 8005bc4:	06dd      	lsls	r5, r3, #27
 8005bc6:	d411      	bmi.n	8005bec <__swsetup_r+0x50>
 8005bc8:	2309      	movs	r3, #9
 8005bca:	6033      	str	r3, [r6, #0]
 8005bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	e03e      	b.n	8005c56 <__swsetup_r+0xba>
 8005bd8:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <__swsetup_r+0xd4>)
 8005bda:	429c      	cmp	r4, r3
 8005bdc:	d101      	bne.n	8005be2 <__swsetup_r+0x46>
 8005bde:	68ac      	ldr	r4, [r5, #8]
 8005be0:	e7eb      	b.n	8005bba <__swsetup_r+0x1e>
 8005be2:	4b24      	ldr	r3, [pc, #144]	; (8005c74 <__swsetup_r+0xd8>)
 8005be4:	429c      	cmp	r4, r3
 8005be6:	bf08      	it	eq
 8005be8:	68ec      	ldreq	r4, [r5, #12]
 8005bea:	e7e6      	b.n	8005bba <__swsetup_r+0x1e>
 8005bec:	0758      	lsls	r0, r3, #29
 8005bee:	d512      	bpl.n	8005c16 <__swsetup_r+0x7a>
 8005bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bf2:	b141      	cbz	r1, 8005c06 <__swsetup_r+0x6a>
 8005bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bf8:	4299      	cmp	r1, r3
 8005bfa:	d002      	beq.n	8005c02 <__swsetup_r+0x66>
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	f002 f93d 	bl	8007e7c <_free_r>
 8005c02:	2300      	movs	r3, #0
 8005c04:	6363      	str	r3, [r4, #52]	; 0x34
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c0c:	81a3      	strh	r3, [r4, #12]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6063      	str	r3, [r4, #4]
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	f043 0308 	orr.w	r3, r3, #8
 8005c1c:	81a3      	strh	r3, [r4, #12]
 8005c1e:	6923      	ldr	r3, [r4, #16]
 8005c20:	b94b      	cbnz	r3, 8005c36 <__swsetup_r+0x9a>
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c2c:	d003      	beq.n	8005c36 <__swsetup_r+0x9a>
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4630      	mov	r0, r6
 8005c32:	f001 fbe1 	bl	80073f8 <__smakebuf_r>
 8005c36:	89a0      	ldrh	r0, [r4, #12]
 8005c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c3c:	f010 0301 	ands.w	r3, r0, #1
 8005c40:	d00a      	beq.n	8005c58 <__swsetup_r+0xbc>
 8005c42:	2300      	movs	r3, #0
 8005c44:	60a3      	str	r3, [r4, #8]
 8005c46:	6963      	ldr	r3, [r4, #20]
 8005c48:	425b      	negs	r3, r3
 8005c4a:	61a3      	str	r3, [r4, #24]
 8005c4c:	6923      	ldr	r3, [r4, #16]
 8005c4e:	b943      	cbnz	r3, 8005c62 <__swsetup_r+0xc6>
 8005c50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c54:	d1ba      	bne.n	8005bcc <__swsetup_r+0x30>
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
 8005c58:	0781      	lsls	r1, r0, #30
 8005c5a:	bf58      	it	pl
 8005c5c:	6963      	ldrpl	r3, [r4, #20]
 8005c5e:	60a3      	str	r3, [r4, #8]
 8005c60:	e7f4      	b.n	8005c4c <__swsetup_r+0xb0>
 8005c62:	2000      	movs	r0, #0
 8005c64:	e7f7      	b.n	8005c56 <__swsetup_r+0xba>
 8005c66:	bf00      	nop
 8005c68:	20000034 	.word	0x20000034
 8005c6c:	0802cf6c 	.word	0x0802cf6c
 8005c70:	0802cf8c 	.word	0x0802cf8c
 8005c74:	0802cf4c 	.word	0x0802cf4c

08005c78 <quorem>:
 8005c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7c:	6903      	ldr	r3, [r0, #16]
 8005c7e:	690c      	ldr	r4, [r1, #16]
 8005c80:	4607      	mov	r7, r0
 8005c82:	42a3      	cmp	r3, r4
 8005c84:	f2c0 8082 	blt.w	8005d8c <quorem+0x114>
 8005c88:	3c01      	subs	r4, #1
 8005c8a:	f100 0514 	add.w	r5, r0, #20
 8005c8e:	f101 0814 	add.w	r8, r1, #20
 8005c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ca8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005cac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cb0:	d331      	bcc.n	8005d16 <quorem+0x9e>
 8005cb2:	f04f 0e00 	mov.w	lr, #0
 8005cb6:	4640      	mov	r0, r8
 8005cb8:	46ac      	mov	ip, r5
 8005cba:	46f2      	mov	sl, lr
 8005cbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cc0:	b293      	uxth	r3, r2
 8005cc2:	fb06 e303 	mla	r3, r6, r3, lr
 8005cc6:	0c12      	lsrs	r2, r2, #16
 8005cc8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	fb06 e202 	mla	r2, r6, r2, lr
 8005cd2:	ebaa 0303 	sub.w	r3, sl, r3
 8005cd6:	f8dc a000 	ldr.w	sl, [ip]
 8005cda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cde:	fa1f fa8a 	uxth.w	sl, sl
 8005ce2:	4453      	add	r3, sl
 8005ce4:	f8dc a000 	ldr.w	sl, [ip]
 8005ce8:	b292      	uxth	r2, r2
 8005cea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005cee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cf8:	4581      	cmp	r9, r0
 8005cfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cfe:	f84c 3b04 	str.w	r3, [ip], #4
 8005d02:	d2db      	bcs.n	8005cbc <quorem+0x44>
 8005d04:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d08:	b92b      	cbnz	r3, 8005d16 <quorem+0x9e>
 8005d0a:	9b01      	ldr	r3, [sp, #4]
 8005d0c:	3b04      	subs	r3, #4
 8005d0e:	429d      	cmp	r5, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	d32f      	bcc.n	8005d74 <quorem+0xfc>
 8005d14:	613c      	str	r4, [r7, #16]
 8005d16:	4638      	mov	r0, r7
 8005d18:	f001 feac 	bl	8007a74 <__mcmp>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	db25      	blt.n	8005d6c <quorem+0xf4>
 8005d20:	4628      	mov	r0, r5
 8005d22:	f04f 0c00 	mov.w	ip, #0
 8005d26:	3601      	adds	r6, #1
 8005d28:	f858 1b04 	ldr.w	r1, [r8], #4
 8005d2c:	f8d0 e000 	ldr.w	lr, [r0]
 8005d30:	b28b      	uxth	r3, r1
 8005d32:	ebac 0303 	sub.w	r3, ip, r3
 8005d36:	fa1f f28e 	uxth.w	r2, lr
 8005d3a:	4413      	add	r3, r2
 8005d3c:	0c0a      	lsrs	r2, r1, #16
 8005d3e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d4c:	45c1      	cmp	r9, r8
 8005d4e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d52:	f840 3b04 	str.w	r3, [r0], #4
 8005d56:	d2e7      	bcs.n	8005d28 <quorem+0xb0>
 8005d58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d60:	b922      	cbnz	r2, 8005d6c <quorem+0xf4>
 8005d62:	3b04      	subs	r3, #4
 8005d64:	429d      	cmp	r5, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	d30a      	bcc.n	8005d80 <quorem+0x108>
 8005d6a:	613c      	str	r4, [r7, #16]
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	b003      	add	sp, #12
 8005d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	3b04      	subs	r3, #4
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	d1cb      	bne.n	8005d14 <quorem+0x9c>
 8005d7c:	3c01      	subs	r4, #1
 8005d7e:	e7c6      	b.n	8005d0e <quorem+0x96>
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	3b04      	subs	r3, #4
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	d1f0      	bne.n	8005d6a <quorem+0xf2>
 8005d88:	3c01      	subs	r4, #1
 8005d8a:	e7eb      	b.n	8005d64 <quorem+0xec>
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	e7ee      	b.n	8005d6e <quorem+0xf6>

08005d90 <_dtoa_r>:
 8005d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	4616      	mov	r6, r2
 8005d96:	461f      	mov	r7, r3
 8005d98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d9a:	b099      	sub	sp, #100	; 0x64
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005da2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005da6:	b974      	cbnz	r4, 8005dc6 <_dtoa_r+0x36>
 8005da8:	2010      	movs	r0, #16
 8005daa:	f001 fb65 	bl	8007478 <malloc>
 8005dae:	4602      	mov	r2, r0
 8005db0:	6268      	str	r0, [r5, #36]	; 0x24
 8005db2:	b920      	cbnz	r0, 8005dbe <_dtoa_r+0x2e>
 8005db4:	21ea      	movs	r1, #234	; 0xea
 8005db6:	4ba8      	ldr	r3, [pc, #672]	; (8006058 <_dtoa_r+0x2c8>)
 8005db8:	48a8      	ldr	r0, [pc, #672]	; (800605c <_dtoa_r+0x2cc>)
 8005dba:	f002 fc7b 	bl	80086b4 <__assert_func>
 8005dbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dc2:	6004      	str	r4, [r0, #0]
 8005dc4:	60c4      	str	r4, [r0, #12]
 8005dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005dc8:	6819      	ldr	r1, [r3, #0]
 8005dca:	b151      	cbz	r1, 8005de2 <_dtoa_r+0x52>
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4093      	lsls	r3, r2
 8005dd2:	604a      	str	r2, [r1, #4]
 8005dd4:	608b      	str	r3, [r1, #8]
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f001 fbc4 	bl	8007564 <_Bfree>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	1e3b      	subs	r3, r7, #0
 8005de4:	bfaf      	iteee	ge
 8005de6:	2300      	movge	r3, #0
 8005de8:	2201      	movlt	r2, #1
 8005dea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dee:	9305      	strlt	r3, [sp, #20]
 8005df0:	bfa8      	it	ge
 8005df2:	f8c8 3000 	strge.w	r3, [r8]
 8005df6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005dfa:	4b99      	ldr	r3, [pc, #612]	; (8006060 <_dtoa_r+0x2d0>)
 8005dfc:	bfb8      	it	lt
 8005dfe:	f8c8 2000 	strlt.w	r2, [r8]
 8005e02:	ea33 0309 	bics.w	r3, r3, r9
 8005e06:	d119      	bne.n	8005e3c <_dtoa_r+0xac>
 8005e08:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e14:	4333      	orrs	r3, r6
 8005e16:	f000 857f 	beq.w	8006918 <_dtoa_r+0xb88>
 8005e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e1c:	b953      	cbnz	r3, 8005e34 <_dtoa_r+0xa4>
 8005e1e:	4b91      	ldr	r3, [pc, #580]	; (8006064 <_dtoa_r+0x2d4>)
 8005e20:	e022      	b.n	8005e68 <_dtoa_r+0xd8>
 8005e22:	4b91      	ldr	r3, [pc, #580]	; (8006068 <_dtoa_r+0x2d8>)
 8005e24:	9303      	str	r3, [sp, #12]
 8005e26:	3308      	adds	r3, #8
 8005e28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	9803      	ldr	r0, [sp, #12]
 8005e2e:	b019      	add	sp, #100	; 0x64
 8005e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e34:	4b8b      	ldr	r3, [pc, #556]	; (8006064 <_dtoa_r+0x2d4>)
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	3303      	adds	r3, #3
 8005e3a:	e7f5      	b.n	8005e28 <_dtoa_r+0x98>
 8005e3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005e44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f7fa fe18 	bl	8000a80 <__aeabi_dcmpeq>
 8005e50:	4680      	mov	r8, r0
 8005e52:	b158      	cbz	r0, 8005e6c <_dtoa_r+0xdc>
 8005e54:	2301      	movs	r3, #1
 8005e56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8558 	beq.w	8006912 <_dtoa_r+0xb82>
 8005e62:	4882      	ldr	r0, [pc, #520]	; (800606c <_dtoa_r+0x2dc>)
 8005e64:	6018      	str	r0, [r3, #0]
 8005e66:	1e43      	subs	r3, r0, #1
 8005e68:	9303      	str	r3, [sp, #12]
 8005e6a:	e7df      	b.n	8005e2c <_dtoa_r+0x9c>
 8005e6c:	ab16      	add	r3, sp, #88	; 0x58
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	ab17      	add	r3, sp, #92	; 0x5c
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	4628      	mov	r0, r5
 8005e76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e7a:	f001 ff1d 	bl	8007cb8 <__d2b>
 8005e7e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e82:	4683      	mov	fp, r0
 8005e84:	2c00      	cmp	r4, #0
 8005e86:	d07f      	beq.n	8005f88 <_dtoa_r+0x1f8>
 8005e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e8e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005e92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005e9a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005e9e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	4b72      	ldr	r3, [pc, #456]	; (8006070 <_dtoa_r+0x2e0>)
 8005ea6:	f7fa f9cb 	bl	8000240 <__aeabi_dsub>
 8005eaa:	a365      	add	r3, pc, #404	; (adr r3, 8006040 <_dtoa_r+0x2b0>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f7fa fb7e 	bl	80005b0 <__aeabi_dmul>
 8005eb4:	a364      	add	r3, pc, #400	; (adr r3, 8006048 <_dtoa_r+0x2b8>)
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f7fa f9c3 	bl	8000244 <__adddf3>
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	460f      	mov	r7, r1
 8005ec4:	f7fa fb0a 	bl	80004dc <__aeabi_i2d>
 8005ec8:	a361      	add	r3, pc, #388	; (adr r3, 8006050 <_dtoa_r+0x2c0>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f7fa fb6f 	bl	80005b0 <__aeabi_dmul>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	4639      	mov	r1, r7
 8005eda:	f7fa f9b3 	bl	8000244 <__adddf3>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	f7fa fe15 	bl	8000b10 <__aeabi_d2iz>
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	4682      	mov	sl, r0
 8005eea:	2300      	movs	r3, #0
 8005eec:	4630      	mov	r0, r6
 8005eee:	4639      	mov	r1, r7
 8005ef0:	f7fa fdd0 	bl	8000a94 <__aeabi_dcmplt>
 8005ef4:	b148      	cbz	r0, 8005f0a <_dtoa_r+0x17a>
 8005ef6:	4650      	mov	r0, sl
 8005ef8:	f7fa faf0 	bl	80004dc <__aeabi_i2d>
 8005efc:	4632      	mov	r2, r6
 8005efe:	463b      	mov	r3, r7
 8005f00:	f7fa fdbe 	bl	8000a80 <__aeabi_dcmpeq>
 8005f04:	b908      	cbnz	r0, 8005f0a <_dtoa_r+0x17a>
 8005f06:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f0a:	f1ba 0f16 	cmp.w	sl, #22
 8005f0e:	d858      	bhi.n	8005fc2 <_dtoa_r+0x232>
 8005f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f14:	4b57      	ldr	r3, [pc, #348]	; (8006074 <_dtoa_r+0x2e4>)
 8005f16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f7fa fdb9 	bl	8000a94 <__aeabi_dcmplt>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d04f      	beq.n	8005fc6 <_dtoa_r+0x236>
 8005f26:	2300      	movs	r3, #0
 8005f28:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f30:	1b1c      	subs	r4, r3, r4
 8005f32:	1e63      	subs	r3, r4, #1
 8005f34:	9309      	str	r3, [sp, #36]	; 0x24
 8005f36:	bf49      	itett	mi
 8005f38:	f1c4 0301 	rsbmi	r3, r4, #1
 8005f3c:	2300      	movpl	r3, #0
 8005f3e:	9306      	strmi	r3, [sp, #24]
 8005f40:	2300      	movmi	r3, #0
 8005f42:	bf54      	ite	pl
 8005f44:	9306      	strpl	r3, [sp, #24]
 8005f46:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005f48:	f1ba 0f00 	cmp.w	sl, #0
 8005f4c:	db3d      	blt.n	8005fca <_dtoa_r+0x23a>
 8005f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f50:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005f54:	4453      	add	r3, sl
 8005f56:	9309      	str	r3, [sp, #36]	; 0x24
 8005f58:	2300      	movs	r3, #0
 8005f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f5e:	2b09      	cmp	r3, #9
 8005f60:	f200 808c 	bhi.w	800607c <_dtoa_r+0x2ec>
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	bfc4      	itt	gt
 8005f68:	3b04      	subgt	r3, #4
 8005f6a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f6e:	bfc8      	it	gt
 8005f70:	2400      	movgt	r4, #0
 8005f72:	f1a3 0302 	sub.w	r3, r3, #2
 8005f76:	bfd8      	it	le
 8005f78:	2401      	movle	r4, #1
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	f200 808a 	bhi.w	8006094 <_dtoa_r+0x304>
 8005f80:	e8df f003 	tbb	[pc, r3]
 8005f84:	5b4d4f2d 	.word	0x5b4d4f2d
 8005f88:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005f8c:	441c      	add	r4, r3
 8005f8e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	bfc3      	ittte	gt
 8005f96:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f9a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005f9e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005fa2:	f1c3 0320 	rsble	r3, r3, #32
 8005fa6:	bfc6      	itte	gt
 8005fa8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fac:	4318      	orrgt	r0, r3
 8005fae:	fa06 f003 	lslle.w	r0, r6, r3
 8005fb2:	f7fa fa83 	bl	80004bc <__aeabi_ui2d>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005fbc:	3c01      	subs	r4, #1
 8005fbe:	9313      	str	r3, [sp, #76]	; 0x4c
 8005fc0:	e76f      	b.n	8005ea2 <_dtoa_r+0x112>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e7b2      	b.n	8005f2c <_dtoa_r+0x19c>
 8005fc6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005fc8:	e7b1      	b.n	8005f2e <_dtoa_r+0x19e>
 8005fca:	9b06      	ldr	r3, [sp, #24]
 8005fcc:	eba3 030a 	sub.w	r3, r3, sl
 8005fd0:	9306      	str	r3, [sp, #24]
 8005fd2:	f1ca 0300 	rsb	r3, sl, #0
 8005fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8005fd8:	2300      	movs	r3, #0
 8005fda:	930e      	str	r3, [sp, #56]	; 0x38
 8005fdc:	e7be      	b.n	8005f5c <_dtoa_r+0x1cc>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	dc58      	bgt.n	800609a <_dtoa_r+0x30a>
 8005fe8:	f04f 0901 	mov.w	r9, #1
 8005fec:	464b      	mov	r3, r9
 8005fee:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ff2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005ffa:	6042      	str	r2, [r0, #4]
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	f102 0614 	add.w	r6, r2, #20
 8006002:	429e      	cmp	r6, r3
 8006004:	6841      	ldr	r1, [r0, #4]
 8006006:	d94e      	bls.n	80060a6 <_dtoa_r+0x316>
 8006008:	4628      	mov	r0, r5
 800600a:	f001 fa6b 	bl	80074e4 <_Balloc>
 800600e:	9003      	str	r0, [sp, #12]
 8006010:	2800      	cmp	r0, #0
 8006012:	d14c      	bne.n	80060ae <_dtoa_r+0x31e>
 8006014:	4602      	mov	r2, r0
 8006016:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800601a:	4b17      	ldr	r3, [pc, #92]	; (8006078 <_dtoa_r+0x2e8>)
 800601c:	e6cc      	b.n	8005db8 <_dtoa_r+0x28>
 800601e:	2301      	movs	r3, #1
 8006020:	e7de      	b.n	8005fe0 <_dtoa_r+0x250>
 8006022:	2300      	movs	r3, #0
 8006024:	930b      	str	r3, [sp, #44]	; 0x2c
 8006026:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006028:	eb0a 0903 	add.w	r9, sl, r3
 800602c:	f109 0301 	add.w	r3, r9, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	9308      	str	r3, [sp, #32]
 8006034:	bfb8      	it	lt
 8006036:	2301      	movlt	r3, #1
 8006038:	e7dd      	b.n	8005ff6 <_dtoa_r+0x266>
 800603a:	2301      	movs	r3, #1
 800603c:	e7f2      	b.n	8006024 <_dtoa_r+0x294>
 800603e:	bf00      	nop
 8006040:	636f4361 	.word	0x636f4361
 8006044:	3fd287a7 	.word	0x3fd287a7
 8006048:	8b60c8b3 	.word	0x8b60c8b3
 800604c:	3fc68a28 	.word	0x3fc68a28
 8006050:	509f79fb 	.word	0x509f79fb
 8006054:	3fd34413 	.word	0x3fd34413
 8006058:	0802cec6 	.word	0x0802cec6
 800605c:	0802cedd 	.word	0x0802cedd
 8006060:	7ff00000 	.word	0x7ff00000
 8006064:	0802cec2 	.word	0x0802cec2
 8006068:	0802ceb9 	.word	0x0802ceb9
 800606c:	0802cd39 	.word	0x0802cd39
 8006070:	3ff80000 	.word	0x3ff80000
 8006074:	0802d0b0 	.word	0x0802d0b0
 8006078:	0802cf38 	.word	0x0802cf38
 800607c:	2401      	movs	r4, #1
 800607e:	2300      	movs	r3, #0
 8006080:	940b      	str	r4, [sp, #44]	; 0x2c
 8006082:	9322      	str	r3, [sp, #136]	; 0x88
 8006084:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006088:	2200      	movs	r2, #0
 800608a:	2312      	movs	r3, #18
 800608c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006090:	9223      	str	r2, [sp, #140]	; 0x8c
 8006092:	e7b0      	b.n	8005ff6 <_dtoa_r+0x266>
 8006094:	2301      	movs	r3, #1
 8006096:	930b      	str	r3, [sp, #44]	; 0x2c
 8006098:	e7f4      	b.n	8006084 <_dtoa_r+0x2f4>
 800609a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800609e:	464b      	mov	r3, r9
 80060a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80060a4:	e7a7      	b.n	8005ff6 <_dtoa_r+0x266>
 80060a6:	3101      	adds	r1, #1
 80060a8:	6041      	str	r1, [r0, #4]
 80060aa:	0052      	lsls	r2, r2, #1
 80060ac:	e7a7      	b.n	8005ffe <_dtoa_r+0x26e>
 80060ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060b0:	9a03      	ldr	r2, [sp, #12]
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	2b0e      	cmp	r3, #14
 80060b8:	f200 80a8 	bhi.w	800620c <_dtoa_r+0x47c>
 80060bc:	2c00      	cmp	r4, #0
 80060be:	f000 80a5 	beq.w	800620c <_dtoa_r+0x47c>
 80060c2:	f1ba 0f00 	cmp.w	sl, #0
 80060c6:	dd34      	ble.n	8006132 <_dtoa_r+0x3a2>
 80060c8:	4a9a      	ldr	r2, [pc, #616]	; (8006334 <_dtoa_r+0x5a4>)
 80060ca:	f00a 030f 	and.w	r3, sl, #15
 80060ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060d2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80060d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80060e2:	d016      	beq.n	8006112 <_dtoa_r+0x382>
 80060e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060e8:	4b93      	ldr	r3, [pc, #588]	; (8006338 <_dtoa_r+0x5a8>)
 80060ea:	2703      	movs	r7, #3
 80060ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060f0:	f7fa fb88 	bl	8000804 <__aeabi_ddiv>
 80060f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060f8:	f004 040f 	and.w	r4, r4, #15
 80060fc:	4e8e      	ldr	r6, [pc, #568]	; (8006338 <_dtoa_r+0x5a8>)
 80060fe:	b954      	cbnz	r4, 8006116 <_dtoa_r+0x386>
 8006100:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006108:	f7fa fb7c 	bl	8000804 <__aeabi_ddiv>
 800610c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006110:	e029      	b.n	8006166 <_dtoa_r+0x3d6>
 8006112:	2702      	movs	r7, #2
 8006114:	e7f2      	b.n	80060fc <_dtoa_r+0x36c>
 8006116:	07e1      	lsls	r1, r4, #31
 8006118:	d508      	bpl.n	800612c <_dtoa_r+0x39c>
 800611a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800611e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006122:	f7fa fa45 	bl	80005b0 <__aeabi_dmul>
 8006126:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800612a:	3701      	adds	r7, #1
 800612c:	1064      	asrs	r4, r4, #1
 800612e:	3608      	adds	r6, #8
 8006130:	e7e5      	b.n	80060fe <_dtoa_r+0x36e>
 8006132:	f000 80a5 	beq.w	8006280 <_dtoa_r+0x4f0>
 8006136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800613a:	f1ca 0400 	rsb	r4, sl, #0
 800613e:	4b7d      	ldr	r3, [pc, #500]	; (8006334 <_dtoa_r+0x5a4>)
 8006140:	f004 020f 	and.w	r2, r4, #15
 8006144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f7fa fa30 	bl	80005b0 <__aeabi_dmul>
 8006150:	2702      	movs	r7, #2
 8006152:	2300      	movs	r3, #0
 8006154:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006158:	4e77      	ldr	r6, [pc, #476]	; (8006338 <_dtoa_r+0x5a8>)
 800615a:	1124      	asrs	r4, r4, #4
 800615c:	2c00      	cmp	r4, #0
 800615e:	f040 8084 	bne.w	800626a <_dtoa_r+0x4da>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1d2      	bne.n	800610c <_dtoa_r+0x37c>
 8006166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 808b 	beq.w	8006284 <_dtoa_r+0x4f4>
 800616e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006172:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006176:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800617a:	2200      	movs	r2, #0
 800617c:	4b6f      	ldr	r3, [pc, #444]	; (800633c <_dtoa_r+0x5ac>)
 800617e:	f7fa fc89 	bl	8000a94 <__aeabi_dcmplt>
 8006182:	2800      	cmp	r0, #0
 8006184:	d07e      	beq.n	8006284 <_dtoa_r+0x4f4>
 8006186:	9b08      	ldr	r3, [sp, #32]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d07b      	beq.n	8006284 <_dtoa_r+0x4f4>
 800618c:	f1b9 0f00 	cmp.w	r9, #0
 8006190:	dd38      	ble.n	8006204 <_dtoa_r+0x474>
 8006192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006196:	2200      	movs	r2, #0
 8006198:	4b69      	ldr	r3, [pc, #420]	; (8006340 <_dtoa_r+0x5b0>)
 800619a:	f7fa fa09 	bl	80005b0 <__aeabi_dmul>
 800619e:	464c      	mov	r4, r9
 80061a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061a4:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80061a8:	3701      	adds	r7, #1
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7fa f996 	bl	80004dc <__aeabi_i2d>
 80061b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061b4:	f7fa f9fc 	bl	80005b0 <__aeabi_dmul>
 80061b8:	2200      	movs	r2, #0
 80061ba:	4b62      	ldr	r3, [pc, #392]	; (8006344 <_dtoa_r+0x5b4>)
 80061bc:	f7fa f842 	bl	8000244 <__adddf3>
 80061c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80061c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061c8:	9611      	str	r6, [sp, #68]	; 0x44
 80061ca:	2c00      	cmp	r4, #0
 80061cc:	d15d      	bne.n	800628a <_dtoa_r+0x4fa>
 80061ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061d2:	2200      	movs	r2, #0
 80061d4:	4b5c      	ldr	r3, [pc, #368]	; (8006348 <_dtoa_r+0x5b8>)
 80061d6:	f7fa f833 	bl	8000240 <__aeabi_dsub>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061e2:	4633      	mov	r3, r6
 80061e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061e6:	f7fa fc73 	bl	8000ad0 <__aeabi_dcmpgt>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	f040 829c 	bne.w	8006728 <_dtoa_r+0x998>
 80061f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80061fa:	f7fa fc4b 	bl	8000a94 <__aeabi_dcmplt>
 80061fe:	2800      	cmp	r0, #0
 8006200:	f040 8290 	bne.w	8006724 <_dtoa_r+0x994>
 8006204:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006208:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800620c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800620e:	2b00      	cmp	r3, #0
 8006210:	f2c0 8152 	blt.w	80064b8 <_dtoa_r+0x728>
 8006214:	f1ba 0f0e 	cmp.w	sl, #14
 8006218:	f300 814e 	bgt.w	80064b8 <_dtoa_r+0x728>
 800621c:	4b45      	ldr	r3, [pc, #276]	; (8006334 <_dtoa_r+0x5a4>)
 800621e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006222:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006226:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800622a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800622c:	2b00      	cmp	r3, #0
 800622e:	f280 80db 	bge.w	80063e8 <_dtoa_r+0x658>
 8006232:	9b08      	ldr	r3, [sp, #32]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f300 80d7 	bgt.w	80063e8 <_dtoa_r+0x658>
 800623a:	f040 8272 	bne.w	8006722 <_dtoa_r+0x992>
 800623e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006242:	2200      	movs	r2, #0
 8006244:	4b40      	ldr	r3, [pc, #256]	; (8006348 <_dtoa_r+0x5b8>)
 8006246:	f7fa f9b3 	bl	80005b0 <__aeabi_dmul>
 800624a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800624e:	f7fa fc35 	bl	8000abc <__aeabi_dcmpge>
 8006252:	9c08      	ldr	r4, [sp, #32]
 8006254:	4626      	mov	r6, r4
 8006256:	2800      	cmp	r0, #0
 8006258:	f040 8248 	bne.w	80066ec <_dtoa_r+0x95c>
 800625c:	2331      	movs	r3, #49	; 0x31
 800625e:	9f03      	ldr	r7, [sp, #12]
 8006260:	f10a 0a01 	add.w	sl, sl, #1
 8006264:	f807 3b01 	strb.w	r3, [r7], #1
 8006268:	e244      	b.n	80066f4 <_dtoa_r+0x964>
 800626a:	07e2      	lsls	r2, r4, #31
 800626c:	d505      	bpl.n	800627a <_dtoa_r+0x4ea>
 800626e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006272:	f7fa f99d 	bl	80005b0 <__aeabi_dmul>
 8006276:	2301      	movs	r3, #1
 8006278:	3701      	adds	r7, #1
 800627a:	1064      	asrs	r4, r4, #1
 800627c:	3608      	adds	r6, #8
 800627e:	e76d      	b.n	800615c <_dtoa_r+0x3cc>
 8006280:	2702      	movs	r7, #2
 8006282:	e770      	b.n	8006166 <_dtoa_r+0x3d6>
 8006284:	46d0      	mov	r8, sl
 8006286:	9c08      	ldr	r4, [sp, #32]
 8006288:	e78f      	b.n	80061aa <_dtoa_r+0x41a>
 800628a:	9903      	ldr	r1, [sp, #12]
 800628c:	4b29      	ldr	r3, [pc, #164]	; (8006334 <_dtoa_r+0x5a4>)
 800628e:	4421      	add	r1, r4
 8006290:	9112      	str	r1, [sp, #72]	; 0x48
 8006292:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006294:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006298:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800629c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062a0:	2900      	cmp	r1, #0
 80062a2:	d055      	beq.n	8006350 <_dtoa_r+0x5c0>
 80062a4:	2000      	movs	r0, #0
 80062a6:	4929      	ldr	r1, [pc, #164]	; (800634c <_dtoa_r+0x5bc>)
 80062a8:	f7fa faac 	bl	8000804 <__aeabi_ddiv>
 80062ac:	463b      	mov	r3, r7
 80062ae:	4632      	mov	r2, r6
 80062b0:	f7f9 ffc6 	bl	8000240 <__aeabi_dsub>
 80062b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062b8:	9f03      	ldr	r7, [sp, #12]
 80062ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062be:	f7fa fc27 	bl	8000b10 <__aeabi_d2iz>
 80062c2:	4604      	mov	r4, r0
 80062c4:	f7fa f90a 	bl	80004dc <__aeabi_i2d>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062d0:	f7f9 ffb6 	bl	8000240 <__aeabi_dsub>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	3430      	adds	r4, #48	; 0x30
 80062da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062e2:	f807 4b01 	strb.w	r4, [r7], #1
 80062e6:	f7fa fbd5 	bl	8000a94 <__aeabi_dcmplt>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d174      	bne.n	80063d8 <_dtoa_r+0x648>
 80062ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f2:	2000      	movs	r0, #0
 80062f4:	4911      	ldr	r1, [pc, #68]	; (800633c <_dtoa_r+0x5ac>)
 80062f6:	f7f9 ffa3 	bl	8000240 <__aeabi_dsub>
 80062fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062fe:	f7fa fbc9 	bl	8000a94 <__aeabi_dcmplt>
 8006302:	2800      	cmp	r0, #0
 8006304:	f040 80b7 	bne.w	8006476 <_dtoa_r+0x6e6>
 8006308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800630a:	429f      	cmp	r7, r3
 800630c:	f43f af7a 	beq.w	8006204 <_dtoa_r+0x474>
 8006310:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006314:	2200      	movs	r2, #0
 8006316:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <_dtoa_r+0x5b0>)
 8006318:	f7fa f94a 	bl	80005b0 <__aeabi_dmul>
 800631c:	2200      	movs	r2, #0
 800631e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006326:	4b06      	ldr	r3, [pc, #24]	; (8006340 <_dtoa_r+0x5b0>)
 8006328:	f7fa f942 	bl	80005b0 <__aeabi_dmul>
 800632c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006330:	e7c3      	b.n	80062ba <_dtoa_r+0x52a>
 8006332:	bf00      	nop
 8006334:	0802d0b0 	.word	0x0802d0b0
 8006338:	0802d088 	.word	0x0802d088
 800633c:	3ff00000 	.word	0x3ff00000
 8006340:	40240000 	.word	0x40240000
 8006344:	401c0000 	.word	0x401c0000
 8006348:	40140000 	.word	0x40140000
 800634c:	3fe00000 	.word	0x3fe00000
 8006350:	4630      	mov	r0, r6
 8006352:	4639      	mov	r1, r7
 8006354:	f7fa f92c 	bl	80005b0 <__aeabi_dmul>
 8006358:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800635a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800635e:	9c03      	ldr	r4, [sp, #12]
 8006360:	9314      	str	r3, [sp, #80]	; 0x50
 8006362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006366:	f7fa fbd3 	bl	8000b10 <__aeabi_d2iz>
 800636a:	9015      	str	r0, [sp, #84]	; 0x54
 800636c:	f7fa f8b6 	bl	80004dc <__aeabi_i2d>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006378:	f7f9 ff62 	bl	8000240 <__aeabi_dsub>
 800637c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800637e:	4606      	mov	r6, r0
 8006380:	3330      	adds	r3, #48	; 0x30
 8006382:	f804 3b01 	strb.w	r3, [r4], #1
 8006386:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006388:	460f      	mov	r7, r1
 800638a:	429c      	cmp	r4, r3
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	d124      	bne.n	80063dc <_dtoa_r+0x64c>
 8006392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006396:	4bb0      	ldr	r3, [pc, #704]	; (8006658 <_dtoa_r+0x8c8>)
 8006398:	f7f9 ff54 	bl	8000244 <__adddf3>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4630      	mov	r0, r6
 80063a2:	4639      	mov	r1, r7
 80063a4:	f7fa fb94 	bl	8000ad0 <__aeabi_dcmpgt>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d163      	bne.n	8006474 <_dtoa_r+0x6e4>
 80063ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063b0:	2000      	movs	r0, #0
 80063b2:	49a9      	ldr	r1, [pc, #676]	; (8006658 <_dtoa_r+0x8c8>)
 80063b4:	f7f9 ff44 	bl	8000240 <__aeabi_dsub>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f7fa fb68 	bl	8000a94 <__aeabi_dcmplt>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f43f af1d 	beq.w	8006204 <_dtoa_r+0x474>
 80063ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80063cc:	1e7b      	subs	r3, r7, #1
 80063ce:	9314      	str	r3, [sp, #80]	; 0x50
 80063d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	d0f8      	beq.n	80063ca <_dtoa_r+0x63a>
 80063d8:	46c2      	mov	sl, r8
 80063da:	e03b      	b.n	8006454 <_dtoa_r+0x6c4>
 80063dc:	4b9f      	ldr	r3, [pc, #636]	; (800665c <_dtoa_r+0x8cc>)
 80063de:	f7fa f8e7 	bl	80005b0 <__aeabi_dmul>
 80063e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063e6:	e7bc      	b.n	8006362 <_dtoa_r+0x5d2>
 80063e8:	9f03      	ldr	r7, [sp, #12]
 80063ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80063ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063f2:	4640      	mov	r0, r8
 80063f4:	4649      	mov	r1, r9
 80063f6:	f7fa fa05 	bl	8000804 <__aeabi_ddiv>
 80063fa:	f7fa fb89 	bl	8000b10 <__aeabi_d2iz>
 80063fe:	4604      	mov	r4, r0
 8006400:	f7fa f86c 	bl	80004dc <__aeabi_i2d>
 8006404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006408:	f7fa f8d2 	bl	80005b0 <__aeabi_dmul>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4640      	mov	r0, r8
 8006412:	4649      	mov	r1, r9
 8006414:	f7f9 ff14 	bl	8000240 <__aeabi_dsub>
 8006418:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800641c:	f807 6b01 	strb.w	r6, [r7], #1
 8006420:	9e03      	ldr	r6, [sp, #12]
 8006422:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006426:	1bbe      	subs	r6, r7, r6
 8006428:	45b4      	cmp	ip, r6
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	d136      	bne.n	800649e <_dtoa_r+0x70e>
 8006430:	f7f9 ff08 	bl	8000244 <__adddf3>
 8006434:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006438:	4680      	mov	r8, r0
 800643a:	4689      	mov	r9, r1
 800643c:	f7fa fb48 	bl	8000ad0 <__aeabi_dcmpgt>
 8006440:	bb58      	cbnz	r0, 800649a <_dtoa_r+0x70a>
 8006442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006446:	4640      	mov	r0, r8
 8006448:	4649      	mov	r1, r9
 800644a:	f7fa fb19 	bl	8000a80 <__aeabi_dcmpeq>
 800644e:	b108      	cbz	r0, 8006454 <_dtoa_r+0x6c4>
 8006450:	07e1      	lsls	r1, r4, #31
 8006452:	d422      	bmi.n	800649a <_dtoa_r+0x70a>
 8006454:	4628      	mov	r0, r5
 8006456:	4659      	mov	r1, fp
 8006458:	f001 f884 	bl	8007564 <_Bfree>
 800645c:	2300      	movs	r3, #0
 800645e:	703b      	strb	r3, [r7, #0]
 8006460:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006462:	f10a 0001 	add.w	r0, sl, #1
 8006466:	6018      	str	r0, [r3, #0]
 8006468:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800646a:	2b00      	cmp	r3, #0
 800646c:	f43f acde 	beq.w	8005e2c <_dtoa_r+0x9c>
 8006470:	601f      	str	r7, [r3, #0]
 8006472:	e4db      	b.n	8005e2c <_dtoa_r+0x9c>
 8006474:	4627      	mov	r7, r4
 8006476:	463b      	mov	r3, r7
 8006478:	461f      	mov	r7, r3
 800647a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800647e:	2a39      	cmp	r2, #57	; 0x39
 8006480:	d107      	bne.n	8006492 <_dtoa_r+0x702>
 8006482:	9a03      	ldr	r2, [sp, #12]
 8006484:	429a      	cmp	r2, r3
 8006486:	d1f7      	bne.n	8006478 <_dtoa_r+0x6e8>
 8006488:	2230      	movs	r2, #48	; 0x30
 800648a:	9903      	ldr	r1, [sp, #12]
 800648c:	f108 0801 	add.w	r8, r8, #1
 8006490:	700a      	strb	r2, [r1, #0]
 8006492:	781a      	ldrb	r2, [r3, #0]
 8006494:	3201      	adds	r2, #1
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e79e      	b.n	80063d8 <_dtoa_r+0x648>
 800649a:	46d0      	mov	r8, sl
 800649c:	e7eb      	b.n	8006476 <_dtoa_r+0x6e6>
 800649e:	2200      	movs	r2, #0
 80064a0:	4b6e      	ldr	r3, [pc, #440]	; (800665c <_dtoa_r+0x8cc>)
 80064a2:	f7fa f885 	bl	80005b0 <__aeabi_dmul>
 80064a6:	2200      	movs	r2, #0
 80064a8:	2300      	movs	r3, #0
 80064aa:	4680      	mov	r8, r0
 80064ac:	4689      	mov	r9, r1
 80064ae:	f7fa fae7 	bl	8000a80 <__aeabi_dcmpeq>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d09b      	beq.n	80063ee <_dtoa_r+0x65e>
 80064b6:	e7cd      	b.n	8006454 <_dtoa_r+0x6c4>
 80064b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	f000 80d0 	beq.w	8006660 <_dtoa_r+0x8d0>
 80064c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80064c2:	2a01      	cmp	r2, #1
 80064c4:	f300 80ae 	bgt.w	8006624 <_dtoa_r+0x894>
 80064c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	f000 80a6 	beq.w	800661c <_dtoa_r+0x88c>
 80064d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064d6:	9f06      	ldr	r7, [sp, #24]
 80064d8:	9a06      	ldr	r2, [sp, #24]
 80064da:	2101      	movs	r1, #1
 80064dc:	441a      	add	r2, r3
 80064de:	9206      	str	r2, [sp, #24]
 80064e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e2:	4628      	mov	r0, r5
 80064e4:	441a      	add	r2, r3
 80064e6:	9209      	str	r2, [sp, #36]	; 0x24
 80064e8:	f001 f93c 	bl	8007764 <__i2b>
 80064ec:	4606      	mov	r6, r0
 80064ee:	2f00      	cmp	r7, #0
 80064f0:	dd0c      	ble.n	800650c <_dtoa_r+0x77c>
 80064f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	dd09      	ble.n	800650c <_dtoa_r+0x77c>
 80064f8:	42bb      	cmp	r3, r7
 80064fa:	bfa8      	it	ge
 80064fc:	463b      	movge	r3, r7
 80064fe:	9a06      	ldr	r2, [sp, #24]
 8006500:	1aff      	subs	r7, r7, r3
 8006502:	1ad2      	subs	r2, r2, r3
 8006504:	9206      	str	r2, [sp, #24]
 8006506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	9309      	str	r3, [sp, #36]	; 0x24
 800650c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650e:	b1f3      	cbz	r3, 800654e <_dtoa_r+0x7be>
 8006510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80a8 	beq.w	8006668 <_dtoa_r+0x8d8>
 8006518:	2c00      	cmp	r4, #0
 800651a:	dd10      	ble.n	800653e <_dtoa_r+0x7ae>
 800651c:	4631      	mov	r1, r6
 800651e:	4622      	mov	r2, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f001 f9dd 	bl	80078e0 <__pow5mult>
 8006526:	465a      	mov	r2, fp
 8006528:	4601      	mov	r1, r0
 800652a:	4606      	mov	r6, r0
 800652c:	4628      	mov	r0, r5
 800652e:	f001 f92f 	bl	8007790 <__multiply>
 8006532:	4680      	mov	r8, r0
 8006534:	4659      	mov	r1, fp
 8006536:	4628      	mov	r0, r5
 8006538:	f001 f814 	bl	8007564 <_Bfree>
 800653c:	46c3      	mov	fp, r8
 800653e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006540:	1b1a      	subs	r2, r3, r4
 8006542:	d004      	beq.n	800654e <_dtoa_r+0x7be>
 8006544:	4659      	mov	r1, fp
 8006546:	4628      	mov	r0, r5
 8006548:	f001 f9ca 	bl	80078e0 <__pow5mult>
 800654c:	4683      	mov	fp, r0
 800654e:	2101      	movs	r1, #1
 8006550:	4628      	mov	r0, r5
 8006552:	f001 f907 	bl	8007764 <__i2b>
 8006556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006558:	4604      	mov	r4, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	f340 8086 	ble.w	800666c <_dtoa_r+0x8dc>
 8006560:	461a      	mov	r2, r3
 8006562:	4601      	mov	r1, r0
 8006564:	4628      	mov	r0, r5
 8006566:	f001 f9bb 	bl	80078e0 <__pow5mult>
 800656a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800656c:	4604      	mov	r4, r0
 800656e:	2b01      	cmp	r3, #1
 8006570:	dd7f      	ble.n	8006672 <_dtoa_r+0x8e2>
 8006572:	f04f 0800 	mov.w	r8, #0
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800657c:	6918      	ldr	r0, [r3, #16]
 800657e:	f001 f8a3 	bl	80076c8 <__hi0bits>
 8006582:	f1c0 0020 	rsb	r0, r0, #32
 8006586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006588:	4418      	add	r0, r3
 800658a:	f010 001f 	ands.w	r0, r0, #31
 800658e:	f000 8092 	beq.w	80066b6 <_dtoa_r+0x926>
 8006592:	f1c0 0320 	rsb	r3, r0, #32
 8006596:	2b04      	cmp	r3, #4
 8006598:	f340 808a 	ble.w	80066b0 <_dtoa_r+0x920>
 800659c:	f1c0 001c 	rsb	r0, r0, #28
 80065a0:	9b06      	ldr	r3, [sp, #24]
 80065a2:	4407      	add	r7, r0
 80065a4:	4403      	add	r3, r0
 80065a6:	9306      	str	r3, [sp, #24]
 80065a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065aa:	4403      	add	r3, r0
 80065ac:	9309      	str	r3, [sp, #36]	; 0x24
 80065ae:	9b06      	ldr	r3, [sp, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	dd05      	ble.n	80065c0 <_dtoa_r+0x830>
 80065b4:	4659      	mov	r1, fp
 80065b6:	461a      	mov	r2, r3
 80065b8:	4628      	mov	r0, r5
 80065ba:	f001 f9eb 	bl	8007994 <__lshift>
 80065be:	4683      	mov	fp, r0
 80065c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dd05      	ble.n	80065d2 <_dtoa_r+0x842>
 80065c6:	4621      	mov	r1, r4
 80065c8:	461a      	mov	r2, r3
 80065ca:	4628      	mov	r0, r5
 80065cc:	f001 f9e2 	bl	8007994 <__lshift>
 80065d0:	4604      	mov	r4, r0
 80065d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d070      	beq.n	80066ba <_dtoa_r+0x92a>
 80065d8:	4621      	mov	r1, r4
 80065da:	4658      	mov	r0, fp
 80065dc:	f001 fa4a 	bl	8007a74 <__mcmp>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	da6a      	bge.n	80066ba <_dtoa_r+0x92a>
 80065e4:	2300      	movs	r3, #0
 80065e6:	4659      	mov	r1, fp
 80065e8:	220a      	movs	r2, #10
 80065ea:	4628      	mov	r0, r5
 80065ec:	f000 ffdc 	bl	80075a8 <__multadd>
 80065f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f2:	4683      	mov	fp, r0
 80065f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8194 	beq.w	8006926 <_dtoa_r+0xb96>
 80065fe:	4631      	mov	r1, r6
 8006600:	2300      	movs	r3, #0
 8006602:	220a      	movs	r2, #10
 8006604:	4628      	mov	r0, r5
 8006606:	f000 ffcf 	bl	80075a8 <__multadd>
 800660a:	f1b9 0f00 	cmp.w	r9, #0
 800660e:	4606      	mov	r6, r0
 8006610:	f300 8093 	bgt.w	800673a <_dtoa_r+0x9aa>
 8006614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006616:	2b02      	cmp	r3, #2
 8006618:	dc57      	bgt.n	80066ca <_dtoa_r+0x93a>
 800661a:	e08e      	b.n	800673a <_dtoa_r+0x9aa>
 800661c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800661e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006622:	e757      	b.n	80064d4 <_dtoa_r+0x744>
 8006624:	9b08      	ldr	r3, [sp, #32]
 8006626:	1e5c      	subs	r4, r3, #1
 8006628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662a:	42a3      	cmp	r3, r4
 800662c:	bfb7      	itett	lt
 800662e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006630:	1b1c      	subge	r4, r3, r4
 8006632:	1ae2      	sublt	r2, r4, r3
 8006634:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006636:	bfbe      	ittt	lt
 8006638:	940a      	strlt	r4, [sp, #40]	; 0x28
 800663a:	189b      	addlt	r3, r3, r2
 800663c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800663e:	9b08      	ldr	r3, [sp, #32]
 8006640:	bfb8      	it	lt
 8006642:	2400      	movlt	r4, #0
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfbb      	ittet	lt
 8006648:	9b06      	ldrlt	r3, [sp, #24]
 800664a:	9a08      	ldrlt	r2, [sp, #32]
 800664c:	9f06      	ldrge	r7, [sp, #24]
 800664e:	1a9f      	sublt	r7, r3, r2
 8006650:	bfac      	ite	ge
 8006652:	9b08      	ldrge	r3, [sp, #32]
 8006654:	2300      	movlt	r3, #0
 8006656:	e73f      	b.n	80064d8 <_dtoa_r+0x748>
 8006658:	3fe00000 	.word	0x3fe00000
 800665c:	40240000 	.word	0x40240000
 8006660:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006662:	9f06      	ldr	r7, [sp, #24]
 8006664:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006666:	e742      	b.n	80064ee <_dtoa_r+0x75e>
 8006668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800666a:	e76b      	b.n	8006544 <_dtoa_r+0x7b4>
 800666c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800666e:	2b01      	cmp	r3, #1
 8006670:	dc19      	bgt.n	80066a6 <_dtoa_r+0x916>
 8006672:	9b04      	ldr	r3, [sp, #16]
 8006674:	b9bb      	cbnz	r3, 80066a6 <_dtoa_r+0x916>
 8006676:	9b05      	ldr	r3, [sp, #20]
 8006678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800667c:	b99b      	cbnz	r3, 80066a6 <_dtoa_r+0x916>
 800667e:	9b05      	ldr	r3, [sp, #20]
 8006680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006684:	0d1b      	lsrs	r3, r3, #20
 8006686:	051b      	lsls	r3, r3, #20
 8006688:	b183      	cbz	r3, 80066ac <_dtoa_r+0x91c>
 800668a:	f04f 0801 	mov.w	r8, #1
 800668e:	9b06      	ldr	r3, [sp, #24]
 8006690:	3301      	adds	r3, #1
 8006692:	9306      	str	r3, [sp, #24]
 8006694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006696:	3301      	adds	r3, #1
 8006698:	9309      	str	r3, [sp, #36]	; 0x24
 800669a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800669c:	2b00      	cmp	r3, #0
 800669e:	f47f af6a 	bne.w	8006576 <_dtoa_r+0x7e6>
 80066a2:	2001      	movs	r0, #1
 80066a4:	e76f      	b.n	8006586 <_dtoa_r+0x7f6>
 80066a6:	f04f 0800 	mov.w	r8, #0
 80066aa:	e7f6      	b.n	800669a <_dtoa_r+0x90a>
 80066ac:	4698      	mov	r8, r3
 80066ae:	e7f4      	b.n	800669a <_dtoa_r+0x90a>
 80066b0:	f43f af7d 	beq.w	80065ae <_dtoa_r+0x81e>
 80066b4:	4618      	mov	r0, r3
 80066b6:	301c      	adds	r0, #28
 80066b8:	e772      	b.n	80065a0 <_dtoa_r+0x810>
 80066ba:	9b08      	ldr	r3, [sp, #32]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	dc36      	bgt.n	800672e <_dtoa_r+0x99e>
 80066c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	dd33      	ble.n	800672e <_dtoa_r+0x99e>
 80066c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066ca:	f1b9 0f00 	cmp.w	r9, #0
 80066ce:	d10d      	bne.n	80066ec <_dtoa_r+0x95c>
 80066d0:	4621      	mov	r1, r4
 80066d2:	464b      	mov	r3, r9
 80066d4:	2205      	movs	r2, #5
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 ff66 	bl	80075a8 <__multadd>
 80066dc:	4601      	mov	r1, r0
 80066de:	4604      	mov	r4, r0
 80066e0:	4658      	mov	r0, fp
 80066e2:	f001 f9c7 	bl	8007a74 <__mcmp>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f73f adb8 	bgt.w	800625c <_dtoa_r+0x4cc>
 80066ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066ee:	9f03      	ldr	r7, [sp, #12]
 80066f0:	ea6f 0a03 	mvn.w	sl, r3
 80066f4:	f04f 0800 	mov.w	r8, #0
 80066f8:	4621      	mov	r1, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	f000 ff32 	bl	8007564 <_Bfree>
 8006700:	2e00      	cmp	r6, #0
 8006702:	f43f aea7 	beq.w	8006454 <_dtoa_r+0x6c4>
 8006706:	f1b8 0f00 	cmp.w	r8, #0
 800670a:	d005      	beq.n	8006718 <_dtoa_r+0x988>
 800670c:	45b0      	cmp	r8, r6
 800670e:	d003      	beq.n	8006718 <_dtoa_r+0x988>
 8006710:	4641      	mov	r1, r8
 8006712:	4628      	mov	r0, r5
 8006714:	f000 ff26 	bl	8007564 <_Bfree>
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	f000 ff22 	bl	8007564 <_Bfree>
 8006720:	e698      	b.n	8006454 <_dtoa_r+0x6c4>
 8006722:	2400      	movs	r4, #0
 8006724:	4626      	mov	r6, r4
 8006726:	e7e1      	b.n	80066ec <_dtoa_r+0x95c>
 8006728:	46c2      	mov	sl, r8
 800672a:	4626      	mov	r6, r4
 800672c:	e596      	b.n	800625c <_dtoa_r+0x4cc>
 800672e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006730:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80fd 	beq.w	8006934 <_dtoa_r+0xba4>
 800673a:	2f00      	cmp	r7, #0
 800673c:	dd05      	ble.n	800674a <_dtoa_r+0x9ba>
 800673e:	4631      	mov	r1, r6
 8006740:	463a      	mov	r2, r7
 8006742:	4628      	mov	r0, r5
 8006744:	f001 f926 	bl	8007994 <__lshift>
 8006748:	4606      	mov	r6, r0
 800674a:	f1b8 0f00 	cmp.w	r8, #0
 800674e:	d05c      	beq.n	800680a <_dtoa_r+0xa7a>
 8006750:	4628      	mov	r0, r5
 8006752:	6871      	ldr	r1, [r6, #4]
 8006754:	f000 fec6 	bl	80074e4 <_Balloc>
 8006758:	4607      	mov	r7, r0
 800675a:	b928      	cbnz	r0, 8006768 <_dtoa_r+0x9d8>
 800675c:	4602      	mov	r2, r0
 800675e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006762:	4b7f      	ldr	r3, [pc, #508]	; (8006960 <_dtoa_r+0xbd0>)
 8006764:	f7ff bb28 	b.w	8005db8 <_dtoa_r+0x28>
 8006768:	6932      	ldr	r2, [r6, #16]
 800676a:	f106 010c 	add.w	r1, r6, #12
 800676e:	3202      	adds	r2, #2
 8006770:	0092      	lsls	r2, r2, #2
 8006772:	300c      	adds	r0, #12
 8006774:	f000 fea8 	bl	80074c8 <memcpy>
 8006778:	2201      	movs	r2, #1
 800677a:	4639      	mov	r1, r7
 800677c:	4628      	mov	r0, r5
 800677e:	f001 f909 	bl	8007994 <__lshift>
 8006782:	46b0      	mov	r8, r6
 8006784:	4606      	mov	r6, r0
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	9308      	str	r3, [sp, #32]
 800678c:	9b03      	ldr	r3, [sp, #12]
 800678e:	444b      	add	r3, r9
 8006790:	930a      	str	r3, [sp, #40]	; 0x28
 8006792:	9b04      	ldr	r3, [sp, #16]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	9309      	str	r3, [sp, #36]	; 0x24
 800679a:	9b08      	ldr	r3, [sp, #32]
 800679c:	4621      	mov	r1, r4
 800679e:	3b01      	subs	r3, #1
 80067a0:	4658      	mov	r0, fp
 80067a2:	9304      	str	r3, [sp, #16]
 80067a4:	f7ff fa68 	bl	8005c78 <quorem>
 80067a8:	4603      	mov	r3, r0
 80067aa:	4641      	mov	r1, r8
 80067ac:	3330      	adds	r3, #48	; 0x30
 80067ae:	9006      	str	r0, [sp, #24]
 80067b0:	4658      	mov	r0, fp
 80067b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80067b4:	f001 f95e 	bl	8007a74 <__mcmp>
 80067b8:	4632      	mov	r2, r6
 80067ba:	4681      	mov	r9, r0
 80067bc:	4621      	mov	r1, r4
 80067be:	4628      	mov	r0, r5
 80067c0:	f001 f974 	bl	8007aac <__mdiff>
 80067c4:	68c2      	ldr	r2, [r0, #12]
 80067c6:	4607      	mov	r7, r0
 80067c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ca:	bb02      	cbnz	r2, 800680e <_dtoa_r+0xa7e>
 80067cc:	4601      	mov	r1, r0
 80067ce:	4658      	mov	r0, fp
 80067d0:	f001 f950 	bl	8007a74 <__mcmp>
 80067d4:	4602      	mov	r2, r0
 80067d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067d8:	4639      	mov	r1, r7
 80067da:	4628      	mov	r0, r5
 80067dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80067e0:	f000 fec0 	bl	8007564 <_Bfree>
 80067e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067e8:	9f08      	ldr	r7, [sp, #32]
 80067ea:	ea43 0102 	orr.w	r1, r3, r2
 80067ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f0:	430b      	orrs	r3, r1
 80067f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067f4:	d10d      	bne.n	8006812 <_dtoa_r+0xa82>
 80067f6:	2b39      	cmp	r3, #57	; 0x39
 80067f8:	d029      	beq.n	800684e <_dtoa_r+0xabe>
 80067fa:	f1b9 0f00 	cmp.w	r9, #0
 80067fe:	dd01      	ble.n	8006804 <_dtoa_r+0xa74>
 8006800:	9b06      	ldr	r3, [sp, #24]
 8006802:	3331      	adds	r3, #49	; 0x31
 8006804:	9a04      	ldr	r2, [sp, #16]
 8006806:	7013      	strb	r3, [r2, #0]
 8006808:	e776      	b.n	80066f8 <_dtoa_r+0x968>
 800680a:	4630      	mov	r0, r6
 800680c:	e7b9      	b.n	8006782 <_dtoa_r+0x9f2>
 800680e:	2201      	movs	r2, #1
 8006810:	e7e2      	b.n	80067d8 <_dtoa_r+0xa48>
 8006812:	f1b9 0f00 	cmp.w	r9, #0
 8006816:	db06      	blt.n	8006826 <_dtoa_r+0xa96>
 8006818:	9922      	ldr	r1, [sp, #136]	; 0x88
 800681a:	ea41 0909 	orr.w	r9, r1, r9
 800681e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006820:	ea59 0101 	orrs.w	r1, r9, r1
 8006824:	d120      	bne.n	8006868 <_dtoa_r+0xad8>
 8006826:	2a00      	cmp	r2, #0
 8006828:	ddec      	ble.n	8006804 <_dtoa_r+0xa74>
 800682a:	4659      	mov	r1, fp
 800682c:	2201      	movs	r2, #1
 800682e:	4628      	mov	r0, r5
 8006830:	9308      	str	r3, [sp, #32]
 8006832:	f001 f8af 	bl	8007994 <__lshift>
 8006836:	4621      	mov	r1, r4
 8006838:	4683      	mov	fp, r0
 800683a:	f001 f91b 	bl	8007a74 <__mcmp>
 800683e:	2800      	cmp	r0, #0
 8006840:	9b08      	ldr	r3, [sp, #32]
 8006842:	dc02      	bgt.n	800684a <_dtoa_r+0xaba>
 8006844:	d1de      	bne.n	8006804 <_dtoa_r+0xa74>
 8006846:	07da      	lsls	r2, r3, #31
 8006848:	d5dc      	bpl.n	8006804 <_dtoa_r+0xa74>
 800684a:	2b39      	cmp	r3, #57	; 0x39
 800684c:	d1d8      	bne.n	8006800 <_dtoa_r+0xa70>
 800684e:	2339      	movs	r3, #57	; 0x39
 8006850:	9a04      	ldr	r2, [sp, #16]
 8006852:	7013      	strb	r3, [r2, #0]
 8006854:	463b      	mov	r3, r7
 8006856:	461f      	mov	r7, r3
 8006858:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800685c:	3b01      	subs	r3, #1
 800685e:	2a39      	cmp	r2, #57	; 0x39
 8006860:	d050      	beq.n	8006904 <_dtoa_r+0xb74>
 8006862:	3201      	adds	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	e747      	b.n	80066f8 <_dtoa_r+0x968>
 8006868:	2a00      	cmp	r2, #0
 800686a:	dd03      	ble.n	8006874 <_dtoa_r+0xae4>
 800686c:	2b39      	cmp	r3, #57	; 0x39
 800686e:	d0ee      	beq.n	800684e <_dtoa_r+0xabe>
 8006870:	3301      	adds	r3, #1
 8006872:	e7c7      	b.n	8006804 <_dtoa_r+0xa74>
 8006874:	9a08      	ldr	r2, [sp, #32]
 8006876:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006878:	f802 3c01 	strb.w	r3, [r2, #-1]
 800687c:	428a      	cmp	r2, r1
 800687e:	d02a      	beq.n	80068d6 <_dtoa_r+0xb46>
 8006880:	4659      	mov	r1, fp
 8006882:	2300      	movs	r3, #0
 8006884:	220a      	movs	r2, #10
 8006886:	4628      	mov	r0, r5
 8006888:	f000 fe8e 	bl	80075a8 <__multadd>
 800688c:	45b0      	cmp	r8, r6
 800688e:	4683      	mov	fp, r0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	f04f 020a 	mov.w	r2, #10
 8006898:	4641      	mov	r1, r8
 800689a:	4628      	mov	r0, r5
 800689c:	d107      	bne.n	80068ae <_dtoa_r+0xb1e>
 800689e:	f000 fe83 	bl	80075a8 <__multadd>
 80068a2:	4680      	mov	r8, r0
 80068a4:	4606      	mov	r6, r0
 80068a6:	9b08      	ldr	r3, [sp, #32]
 80068a8:	3301      	adds	r3, #1
 80068aa:	9308      	str	r3, [sp, #32]
 80068ac:	e775      	b.n	800679a <_dtoa_r+0xa0a>
 80068ae:	f000 fe7b 	bl	80075a8 <__multadd>
 80068b2:	4631      	mov	r1, r6
 80068b4:	4680      	mov	r8, r0
 80068b6:	2300      	movs	r3, #0
 80068b8:	220a      	movs	r2, #10
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 fe74 	bl	80075a8 <__multadd>
 80068c0:	4606      	mov	r6, r0
 80068c2:	e7f0      	b.n	80068a6 <_dtoa_r+0xb16>
 80068c4:	f1b9 0f00 	cmp.w	r9, #0
 80068c8:	bfcc      	ite	gt
 80068ca:	464f      	movgt	r7, r9
 80068cc:	2701      	movle	r7, #1
 80068ce:	f04f 0800 	mov.w	r8, #0
 80068d2:	9a03      	ldr	r2, [sp, #12]
 80068d4:	4417      	add	r7, r2
 80068d6:	4659      	mov	r1, fp
 80068d8:	2201      	movs	r2, #1
 80068da:	4628      	mov	r0, r5
 80068dc:	9308      	str	r3, [sp, #32]
 80068de:	f001 f859 	bl	8007994 <__lshift>
 80068e2:	4621      	mov	r1, r4
 80068e4:	4683      	mov	fp, r0
 80068e6:	f001 f8c5 	bl	8007a74 <__mcmp>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	dcb2      	bgt.n	8006854 <_dtoa_r+0xac4>
 80068ee:	d102      	bne.n	80068f6 <_dtoa_r+0xb66>
 80068f0:	9b08      	ldr	r3, [sp, #32]
 80068f2:	07db      	lsls	r3, r3, #31
 80068f4:	d4ae      	bmi.n	8006854 <_dtoa_r+0xac4>
 80068f6:	463b      	mov	r3, r7
 80068f8:	461f      	mov	r7, r3
 80068fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068fe:	2a30      	cmp	r2, #48	; 0x30
 8006900:	d0fa      	beq.n	80068f8 <_dtoa_r+0xb68>
 8006902:	e6f9      	b.n	80066f8 <_dtoa_r+0x968>
 8006904:	9a03      	ldr	r2, [sp, #12]
 8006906:	429a      	cmp	r2, r3
 8006908:	d1a5      	bne.n	8006856 <_dtoa_r+0xac6>
 800690a:	2331      	movs	r3, #49	; 0x31
 800690c:	f10a 0a01 	add.w	sl, sl, #1
 8006910:	e779      	b.n	8006806 <_dtoa_r+0xa76>
 8006912:	4b14      	ldr	r3, [pc, #80]	; (8006964 <_dtoa_r+0xbd4>)
 8006914:	f7ff baa8 	b.w	8005e68 <_dtoa_r+0xd8>
 8006918:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800691a:	2b00      	cmp	r3, #0
 800691c:	f47f aa81 	bne.w	8005e22 <_dtoa_r+0x92>
 8006920:	4b11      	ldr	r3, [pc, #68]	; (8006968 <_dtoa_r+0xbd8>)
 8006922:	f7ff baa1 	b.w	8005e68 <_dtoa_r+0xd8>
 8006926:	f1b9 0f00 	cmp.w	r9, #0
 800692a:	dc03      	bgt.n	8006934 <_dtoa_r+0xba4>
 800692c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800692e:	2b02      	cmp	r3, #2
 8006930:	f73f aecb 	bgt.w	80066ca <_dtoa_r+0x93a>
 8006934:	9f03      	ldr	r7, [sp, #12]
 8006936:	4621      	mov	r1, r4
 8006938:	4658      	mov	r0, fp
 800693a:	f7ff f99d 	bl	8005c78 <quorem>
 800693e:	9a03      	ldr	r2, [sp, #12]
 8006940:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006944:	f807 3b01 	strb.w	r3, [r7], #1
 8006948:	1aba      	subs	r2, r7, r2
 800694a:	4591      	cmp	r9, r2
 800694c:	ddba      	ble.n	80068c4 <_dtoa_r+0xb34>
 800694e:	4659      	mov	r1, fp
 8006950:	2300      	movs	r3, #0
 8006952:	220a      	movs	r2, #10
 8006954:	4628      	mov	r0, r5
 8006956:	f000 fe27 	bl	80075a8 <__multadd>
 800695a:	4683      	mov	fp, r0
 800695c:	e7eb      	b.n	8006936 <_dtoa_r+0xba6>
 800695e:	bf00      	nop
 8006960:	0802cf38 	.word	0x0802cf38
 8006964:	0802cd38 	.word	0x0802cd38
 8006968:	0802ceb9 	.word	0x0802ceb9

0800696c <__sflush_r>:
 800696c:	898a      	ldrh	r2, [r1, #12]
 800696e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006970:	4605      	mov	r5, r0
 8006972:	0710      	lsls	r0, r2, #28
 8006974:	460c      	mov	r4, r1
 8006976:	d457      	bmi.n	8006a28 <__sflush_r+0xbc>
 8006978:	684b      	ldr	r3, [r1, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	dc04      	bgt.n	8006988 <__sflush_r+0x1c>
 800697e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	dc01      	bgt.n	8006988 <__sflush_r+0x1c>
 8006984:	2000      	movs	r0, #0
 8006986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800698a:	2e00      	cmp	r6, #0
 800698c:	d0fa      	beq.n	8006984 <__sflush_r+0x18>
 800698e:	2300      	movs	r3, #0
 8006990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006994:	682f      	ldr	r7, [r5, #0]
 8006996:	602b      	str	r3, [r5, #0]
 8006998:	d032      	beq.n	8006a00 <__sflush_r+0x94>
 800699a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	075a      	lsls	r2, r3, #29
 80069a0:	d505      	bpl.n	80069ae <__sflush_r+0x42>
 80069a2:	6863      	ldr	r3, [r4, #4]
 80069a4:	1ac0      	subs	r0, r0, r3
 80069a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069a8:	b10b      	cbz	r3, 80069ae <__sflush_r+0x42>
 80069aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069ac:	1ac0      	subs	r0, r0, r3
 80069ae:	2300      	movs	r3, #0
 80069b0:	4602      	mov	r2, r0
 80069b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069b4:	4628      	mov	r0, r5
 80069b6:	6a21      	ldr	r1, [r4, #32]
 80069b8:	47b0      	blx	r6
 80069ba:	1c43      	adds	r3, r0, #1
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	d106      	bne.n	80069ce <__sflush_r+0x62>
 80069c0:	6829      	ldr	r1, [r5, #0]
 80069c2:	291d      	cmp	r1, #29
 80069c4:	d82c      	bhi.n	8006a20 <__sflush_r+0xb4>
 80069c6:	4a29      	ldr	r2, [pc, #164]	; (8006a6c <__sflush_r+0x100>)
 80069c8:	40ca      	lsrs	r2, r1
 80069ca:	07d6      	lsls	r6, r2, #31
 80069cc:	d528      	bpl.n	8006a20 <__sflush_r+0xb4>
 80069ce:	2200      	movs	r2, #0
 80069d0:	6062      	str	r2, [r4, #4]
 80069d2:	6922      	ldr	r2, [r4, #16]
 80069d4:	04d9      	lsls	r1, r3, #19
 80069d6:	6022      	str	r2, [r4, #0]
 80069d8:	d504      	bpl.n	80069e4 <__sflush_r+0x78>
 80069da:	1c42      	adds	r2, r0, #1
 80069dc:	d101      	bne.n	80069e2 <__sflush_r+0x76>
 80069de:	682b      	ldr	r3, [r5, #0]
 80069e0:	b903      	cbnz	r3, 80069e4 <__sflush_r+0x78>
 80069e2:	6560      	str	r0, [r4, #84]	; 0x54
 80069e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069e6:	602f      	str	r7, [r5, #0]
 80069e8:	2900      	cmp	r1, #0
 80069ea:	d0cb      	beq.n	8006984 <__sflush_r+0x18>
 80069ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f0:	4299      	cmp	r1, r3
 80069f2:	d002      	beq.n	80069fa <__sflush_r+0x8e>
 80069f4:	4628      	mov	r0, r5
 80069f6:	f001 fa41 	bl	8007e7c <_free_r>
 80069fa:	2000      	movs	r0, #0
 80069fc:	6360      	str	r0, [r4, #52]	; 0x34
 80069fe:	e7c2      	b.n	8006986 <__sflush_r+0x1a>
 8006a00:	6a21      	ldr	r1, [r4, #32]
 8006a02:	2301      	movs	r3, #1
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b0      	blx	r6
 8006a08:	1c41      	adds	r1, r0, #1
 8006a0a:	d1c7      	bne.n	800699c <__sflush_r+0x30>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0c4      	beq.n	800699c <__sflush_r+0x30>
 8006a12:	2b1d      	cmp	r3, #29
 8006a14:	d001      	beq.n	8006a1a <__sflush_r+0xae>
 8006a16:	2b16      	cmp	r3, #22
 8006a18:	d101      	bne.n	8006a1e <__sflush_r+0xb2>
 8006a1a:	602f      	str	r7, [r5, #0]
 8006a1c:	e7b2      	b.n	8006984 <__sflush_r+0x18>
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	e7ae      	b.n	8006986 <__sflush_r+0x1a>
 8006a28:	690f      	ldr	r7, [r1, #16]
 8006a2a:	2f00      	cmp	r7, #0
 8006a2c:	d0aa      	beq.n	8006984 <__sflush_r+0x18>
 8006a2e:	0793      	lsls	r3, r2, #30
 8006a30:	bf18      	it	ne
 8006a32:	2300      	movne	r3, #0
 8006a34:	680e      	ldr	r6, [r1, #0]
 8006a36:	bf08      	it	eq
 8006a38:	694b      	ldreq	r3, [r1, #20]
 8006a3a:	1bf6      	subs	r6, r6, r7
 8006a3c:	600f      	str	r7, [r1, #0]
 8006a3e:	608b      	str	r3, [r1, #8]
 8006a40:	2e00      	cmp	r6, #0
 8006a42:	dd9f      	ble.n	8006984 <__sflush_r+0x18>
 8006a44:	4633      	mov	r3, r6
 8006a46:	463a      	mov	r2, r7
 8006a48:	4628      	mov	r0, r5
 8006a4a:	6a21      	ldr	r1, [r4, #32]
 8006a4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006a50:	47e0      	blx	ip
 8006a52:	2800      	cmp	r0, #0
 8006a54:	dc06      	bgt.n	8006a64 <__sflush_r+0xf8>
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a60:	81a3      	strh	r3, [r4, #12]
 8006a62:	e790      	b.n	8006986 <__sflush_r+0x1a>
 8006a64:	4407      	add	r7, r0
 8006a66:	1a36      	subs	r6, r6, r0
 8006a68:	e7ea      	b.n	8006a40 <__sflush_r+0xd4>
 8006a6a:	bf00      	nop
 8006a6c:	20400001 	.word	0x20400001

08006a70 <_fflush_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	690b      	ldr	r3, [r1, #16]
 8006a74:	4605      	mov	r5, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	b913      	cbnz	r3, 8006a80 <_fflush_r+0x10>
 8006a7a:	2500      	movs	r5, #0
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	b118      	cbz	r0, 8006a8a <_fflush_r+0x1a>
 8006a82:	6983      	ldr	r3, [r0, #24]
 8006a84:	b90b      	cbnz	r3, 8006a8a <_fflush_r+0x1a>
 8006a86:	f000 f887 	bl	8006b98 <__sinit>
 8006a8a:	4b14      	ldr	r3, [pc, #80]	; (8006adc <_fflush_r+0x6c>)
 8006a8c:	429c      	cmp	r4, r3
 8006a8e:	d11b      	bne.n	8006ac8 <_fflush_r+0x58>
 8006a90:	686c      	ldr	r4, [r5, #4]
 8006a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0ef      	beq.n	8006a7a <_fflush_r+0xa>
 8006a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a9c:	07d0      	lsls	r0, r2, #31
 8006a9e:	d404      	bmi.n	8006aaa <_fflush_r+0x3a>
 8006aa0:	0599      	lsls	r1, r3, #22
 8006aa2:	d402      	bmi.n	8006aaa <_fflush_r+0x3a>
 8006aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aa6:	f000 fc80 	bl	80073aa <__retarget_lock_acquire_recursive>
 8006aaa:	4628      	mov	r0, r5
 8006aac:	4621      	mov	r1, r4
 8006aae:	f7ff ff5d 	bl	800696c <__sflush_r>
 8006ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	07da      	lsls	r2, r3, #31
 8006ab8:	d4e0      	bmi.n	8006a7c <_fflush_r+0xc>
 8006aba:	89a3      	ldrh	r3, [r4, #12]
 8006abc:	059b      	lsls	r3, r3, #22
 8006abe:	d4dd      	bmi.n	8006a7c <_fflush_r+0xc>
 8006ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ac2:	f000 fc73 	bl	80073ac <__retarget_lock_release_recursive>
 8006ac6:	e7d9      	b.n	8006a7c <_fflush_r+0xc>
 8006ac8:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <_fflush_r+0x70>)
 8006aca:	429c      	cmp	r4, r3
 8006acc:	d101      	bne.n	8006ad2 <_fflush_r+0x62>
 8006ace:	68ac      	ldr	r4, [r5, #8]
 8006ad0:	e7df      	b.n	8006a92 <_fflush_r+0x22>
 8006ad2:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <_fflush_r+0x74>)
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	bf08      	it	eq
 8006ad8:	68ec      	ldreq	r4, [r5, #12]
 8006ada:	e7da      	b.n	8006a92 <_fflush_r+0x22>
 8006adc:	0802cf6c 	.word	0x0802cf6c
 8006ae0:	0802cf8c 	.word	0x0802cf8c
 8006ae4:	0802cf4c 	.word	0x0802cf4c

08006ae8 <std>:
 8006ae8:	2300      	movs	r3, #0
 8006aea:	b510      	push	{r4, lr}
 8006aec:	4604      	mov	r4, r0
 8006aee:	e9c0 3300 	strd	r3, r3, [r0]
 8006af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006af6:	6083      	str	r3, [r0, #8]
 8006af8:	8181      	strh	r1, [r0, #12]
 8006afa:	6643      	str	r3, [r0, #100]	; 0x64
 8006afc:	81c2      	strh	r2, [r0, #14]
 8006afe:	6183      	str	r3, [r0, #24]
 8006b00:	4619      	mov	r1, r3
 8006b02:	2208      	movs	r2, #8
 8006b04:	305c      	adds	r0, #92	; 0x5c
 8006b06:	f7fd faad 	bl	8004064 <memset>
 8006b0a:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <std+0x38>)
 8006b0c:	6224      	str	r4, [r4, #32]
 8006b0e:	6263      	str	r3, [r4, #36]	; 0x24
 8006b10:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <std+0x3c>)
 8006b12:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b14:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <std+0x40>)
 8006b16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <std+0x44>)
 8006b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	bf00      	nop
 8006b20:	080085c9 	.word	0x080085c9
 8006b24:	080085eb 	.word	0x080085eb
 8006b28:	08008623 	.word	0x08008623
 8006b2c:	08008647 	.word	0x08008647

08006b30 <_cleanup_r>:
 8006b30:	4901      	ldr	r1, [pc, #4]	; (8006b38 <_cleanup_r+0x8>)
 8006b32:	f000 b8af 	b.w	8006c94 <_fwalk_reent>
 8006b36:	bf00      	nop
 8006b38:	08006a71 	.word	0x08006a71

08006b3c <__sfmoreglue>:
 8006b3c:	2268      	movs	r2, #104	; 0x68
 8006b3e:	b570      	push	{r4, r5, r6, lr}
 8006b40:	1e4d      	subs	r5, r1, #1
 8006b42:	4355      	muls	r5, r2
 8006b44:	460e      	mov	r6, r1
 8006b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b4a:	f001 f9ff 	bl	8007f4c <_malloc_r>
 8006b4e:	4604      	mov	r4, r0
 8006b50:	b140      	cbz	r0, 8006b64 <__sfmoreglue+0x28>
 8006b52:	2100      	movs	r1, #0
 8006b54:	e9c0 1600 	strd	r1, r6, [r0]
 8006b58:	300c      	adds	r0, #12
 8006b5a:	60a0      	str	r0, [r4, #8]
 8006b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b60:	f7fd fa80 	bl	8004064 <memset>
 8006b64:	4620      	mov	r0, r4
 8006b66:	bd70      	pop	{r4, r5, r6, pc}

08006b68 <__sfp_lock_acquire>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__sfp_lock_acquire+0x8>)
 8006b6a:	f000 bc1e 	b.w	80073aa <__retarget_lock_acquire_recursive>
 8006b6e:	bf00      	nop
 8006b70:	200004d1 	.word	0x200004d1

08006b74 <__sfp_lock_release>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__sfp_lock_release+0x8>)
 8006b76:	f000 bc19 	b.w	80073ac <__retarget_lock_release_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	200004d1 	.word	0x200004d1

08006b80 <__sinit_lock_acquire>:
 8006b80:	4801      	ldr	r0, [pc, #4]	; (8006b88 <__sinit_lock_acquire+0x8>)
 8006b82:	f000 bc12 	b.w	80073aa <__retarget_lock_acquire_recursive>
 8006b86:	bf00      	nop
 8006b88:	200004d2 	.word	0x200004d2

08006b8c <__sinit_lock_release>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	; (8006b94 <__sinit_lock_release+0x8>)
 8006b8e:	f000 bc0d 	b.w	80073ac <__retarget_lock_release_recursive>
 8006b92:	bf00      	nop
 8006b94:	200004d2 	.word	0x200004d2

08006b98 <__sinit>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	f7ff fff0 	bl	8006b80 <__sinit_lock_acquire>
 8006ba0:	69a3      	ldr	r3, [r4, #24]
 8006ba2:	b11b      	cbz	r3, 8006bac <__sinit+0x14>
 8006ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba8:	f7ff bff0 	b.w	8006b8c <__sinit_lock_release>
 8006bac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8006bb2:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <__sinit+0x68>)
 8006bb4:	4a13      	ldr	r2, [pc, #76]	; (8006c04 <__sinit+0x6c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bba:	42a3      	cmp	r3, r4
 8006bbc:	bf08      	it	eq
 8006bbe:	2301      	moveq	r3, #1
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	bf08      	it	eq
 8006bc4:	61a3      	streq	r3, [r4, #24]
 8006bc6:	f000 f81f 	bl	8006c08 <__sfp>
 8006bca:	6060      	str	r0, [r4, #4]
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 f81b 	bl	8006c08 <__sfp>
 8006bd2:	60a0      	str	r0, [r4, #8]
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f000 f817 	bl	8006c08 <__sfp>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2104      	movs	r1, #4
 8006bde:	60e0      	str	r0, [r4, #12]
 8006be0:	6860      	ldr	r0, [r4, #4]
 8006be2:	f7ff ff81 	bl	8006ae8 <std>
 8006be6:	2201      	movs	r2, #1
 8006be8:	2109      	movs	r1, #9
 8006bea:	68a0      	ldr	r0, [r4, #8]
 8006bec:	f7ff ff7c 	bl	8006ae8 <std>
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	2112      	movs	r1, #18
 8006bf4:	68e0      	ldr	r0, [r4, #12]
 8006bf6:	f7ff ff77 	bl	8006ae8 <std>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	61a3      	str	r3, [r4, #24]
 8006bfe:	e7d1      	b.n	8006ba4 <__sinit+0xc>
 8006c00:	0802cd24 	.word	0x0802cd24
 8006c04:	08006b31 	.word	0x08006b31

08006c08 <__sfp>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	f7ff ffac 	bl	8006b68 <__sfp_lock_acquire>
 8006c10:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <__sfp+0x84>)
 8006c12:	681e      	ldr	r6, [r3, #0]
 8006c14:	69b3      	ldr	r3, [r6, #24]
 8006c16:	b913      	cbnz	r3, 8006c1e <__sfp+0x16>
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f7ff ffbd 	bl	8006b98 <__sinit>
 8006c1e:	3648      	adds	r6, #72	; 0x48
 8006c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	d503      	bpl.n	8006c30 <__sfp+0x28>
 8006c28:	6833      	ldr	r3, [r6, #0]
 8006c2a:	b30b      	cbz	r3, 8006c70 <__sfp+0x68>
 8006c2c:	6836      	ldr	r6, [r6, #0]
 8006c2e:	e7f7      	b.n	8006c20 <__sfp+0x18>
 8006c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c34:	b9d5      	cbnz	r5, 8006c6c <__sfp+0x64>
 8006c36:	4b16      	ldr	r3, [pc, #88]	; (8006c90 <__sfp+0x88>)
 8006c38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c3c:	60e3      	str	r3, [r4, #12]
 8006c3e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c40:	f000 fbb2 	bl	80073a8 <__retarget_lock_init_recursive>
 8006c44:	f7ff ff96 	bl	8006b74 <__sfp_lock_release>
 8006c48:	2208      	movs	r2, #8
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c54:	6025      	str	r5, [r4, #0]
 8006c56:	61a5      	str	r5, [r4, #24]
 8006c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c5c:	f7fd fa02 	bl	8004064 <memset>
 8006c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c68:	4620      	mov	r0, r4
 8006c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6c:	3468      	adds	r4, #104	; 0x68
 8006c6e:	e7d9      	b.n	8006c24 <__sfp+0x1c>
 8006c70:	2104      	movs	r1, #4
 8006c72:	4638      	mov	r0, r7
 8006c74:	f7ff ff62 	bl	8006b3c <__sfmoreglue>
 8006c78:	4604      	mov	r4, r0
 8006c7a:	6030      	str	r0, [r6, #0]
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d1d5      	bne.n	8006c2c <__sfp+0x24>
 8006c80:	f7ff ff78 	bl	8006b74 <__sfp_lock_release>
 8006c84:	230c      	movs	r3, #12
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	e7ee      	b.n	8006c68 <__sfp+0x60>
 8006c8a:	bf00      	nop
 8006c8c:	0802cd24 	.word	0x0802cd24
 8006c90:	ffff0001 	.word	0xffff0001

08006c94 <_fwalk_reent>:
 8006c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c98:	4606      	mov	r6, r0
 8006c9a:	4688      	mov	r8, r1
 8006c9c:	2700      	movs	r7, #0
 8006c9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ca6:	f1b9 0901 	subs.w	r9, r9, #1
 8006caa:	d505      	bpl.n	8006cb8 <_fwalk_reent+0x24>
 8006cac:	6824      	ldr	r4, [r4, #0]
 8006cae:	2c00      	cmp	r4, #0
 8006cb0:	d1f7      	bne.n	8006ca2 <_fwalk_reent+0xe>
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cb8:	89ab      	ldrh	r3, [r5, #12]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d907      	bls.n	8006cce <_fwalk_reent+0x3a>
 8006cbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	d003      	beq.n	8006cce <_fwalk_reent+0x3a>
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4630      	mov	r0, r6
 8006cca:	47c0      	blx	r8
 8006ccc:	4307      	orrs	r7, r0
 8006cce:	3568      	adds	r5, #104	; 0x68
 8006cd0:	e7e9      	b.n	8006ca6 <_fwalk_reent+0x12>

08006cd2 <rshift>:
 8006cd2:	6903      	ldr	r3, [r0, #16]
 8006cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cd8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006cdc:	f100 0414 	add.w	r4, r0, #20
 8006ce0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006ce4:	dd46      	ble.n	8006d74 <rshift+0xa2>
 8006ce6:	f011 011f 	ands.w	r1, r1, #31
 8006cea:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006cee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006cf2:	d10c      	bne.n	8006d0e <rshift+0x3c>
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f100 0710 	add.w	r7, r0, #16
 8006cfa:	42b1      	cmp	r1, r6
 8006cfc:	d335      	bcc.n	8006d6a <rshift+0x98>
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	1eea      	subs	r2, r5, #3
 8006d04:	4296      	cmp	r6, r2
 8006d06:	bf38      	it	cc
 8006d08:	2300      	movcc	r3, #0
 8006d0a:	4423      	add	r3, r4
 8006d0c:	e015      	b.n	8006d3a <rshift+0x68>
 8006d0e:	46a1      	mov	r9, r4
 8006d10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006d14:	f1c1 0820 	rsb	r8, r1, #32
 8006d18:	40cf      	lsrs	r7, r1
 8006d1a:	f105 0e04 	add.w	lr, r5, #4
 8006d1e:	4576      	cmp	r6, lr
 8006d20:	46f4      	mov	ip, lr
 8006d22:	d816      	bhi.n	8006d52 <rshift+0x80>
 8006d24:	1a9a      	subs	r2, r3, r2
 8006d26:	0092      	lsls	r2, r2, #2
 8006d28:	3a04      	subs	r2, #4
 8006d2a:	3501      	adds	r5, #1
 8006d2c:	42ae      	cmp	r6, r5
 8006d2e:	bf38      	it	cc
 8006d30:	2200      	movcc	r2, #0
 8006d32:	18a3      	adds	r3, r4, r2
 8006d34:	50a7      	str	r7, [r4, r2]
 8006d36:	b107      	cbz	r7, 8006d3a <rshift+0x68>
 8006d38:	3304      	adds	r3, #4
 8006d3a:	42a3      	cmp	r3, r4
 8006d3c:	eba3 0204 	sub.w	r2, r3, r4
 8006d40:	bf08      	it	eq
 8006d42:	2300      	moveq	r3, #0
 8006d44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d48:	6102      	str	r2, [r0, #16]
 8006d4a:	bf08      	it	eq
 8006d4c:	6143      	streq	r3, [r0, #20]
 8006d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d52:	f8dc c000 	ldr.w	ip, [ip]
 8006d56:	fa0c fc08 	lsl.w	ip, ip, r8
 8006d5a:	ea4c 0707 	orr.w	r7, ip, r7
 8006d5e:	f849 7b04 	str.w	r7, [r9], #4
 8006d62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d66:	40cf      	lsrs	r7, r1
 8006d68:	e7d9      	b.n	8006d1e <rshift+0x4c>
 8006d6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d72:	e7c2      	b.n	8006cfa <rshift+0x28>
 8006d74:	4623      	mov	r3, r4
 8006d76:	e7e0      	b.n	8006d3a <rshift+0x68>

08006d78 <__hexdig_fun>:
 8006d78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006d7c:	2b09      	cmp	r3, #9
 8006d7e:	d802      	bhi.n	8006d86 <__hexdig_fun+0xe>
 8006d80:	3820      	subs	r0, #32
 8006d82:	b2c0      	uxtb	r0, r0
 8006d84:	4770      	bx	lr
 8006d86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d801      	bhi.n	8006d92 <__hexdig_fun+0x1a>
 8006d8e:	3847      	subs	r0, #71	; 0x47
 8006d90:	e7f7      	b.n	8006d82 <__hexdig_fun+0xa>
 8006d92:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006d96:	2b05      	cmp	r3, #5
 8006d98:	d801      	bhi.n	8006d9e <__hexdig_fun+0x26>
 8006d9a:	3827      	subs	r0, #39	; 0x27
 8006d9c:	e7f1      	b.n	8006d82 <__hexdig_fun+0xa>
 8006d9e:	2000      	movs	r0, #0
 8006da0:	4770      	bx	lr
	...

08006da4 <__gethex>:
 8006da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	b08b      	sub	sp, #44	; 0x2c
 8006daa:	9305      	str	r3, [sp, #20]
 8006dac:	4bb2      	ldr	r3, [pc, #712]	; (8007078 <__gethex+0x2d4>)
 8006dae:	9002      	str	r0, [sp, #8]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	468b      	mov	fp, r1
 8006db4:	4618      	mov	r0, r3
 8006db6:	4690      	mov	r8, r2
 8006db8:	9303      	str	r3, [sp, #12]
 8006dba:	f7f9 fa35 	bl	8000228 <strlen>
 8006dbe:	4682      	mov	sl, r0
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	f8db 2000 	ldr.w	r2, [fp]
 8006dc6:	4403      	add	r3, r0
 8006dc8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006dcc:	9306      	str	r3, [sp, #24]
 8006dce:	1c93      	adds	r3, r2, #2
 8006dd0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006dd4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006dd8:	32fe      	adds	r2, #254	; 0xfe
 8006dda:	18d1      	adds	r1, r2, r3
 8006ddc:	461f      	mov	r7, r3
 8006dde:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006de2:	9101      	str	r1, [sp, #4]
 8006de4:	2830      	cmp	r0, #48	; 0x30
 8006de6:	d0f8      	beq.n	8006dda <__gethex+0x36>
 8006de8:	f7ff ffc6 	bl	8006d78 <__hexdig_fun>
 8006dec:	4604      	mov	r4, r0
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d13a      	bne.n	8006e68 <__gethex+0xc4>
 8006df2:	4652      	mov	r2, sl
 8006df4:	4638      	mov	r0, r7
 8006df6:	9903      	ldr	r1, [sp, #12]
 8006df8:	f001 fc29 	bl	800864e <strncmp>
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d166      	bne.n	8006ed0 <__gethex+0x12c>
 8006e02:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006e06:	eb07 060a 	add.w	r6, r7, sl
 8006e0a:	f7ff ffb5 	bl	8006d78 <__hexdig_fun>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d060      	beq.n	8006ed4 <__gethex+0x130>
 8006e12:	4633      	mov	r3, r6
 8006e14:	7818      	ldrb	r0, [r3, #0]
 8006e16:	461f      	mov	r7, r3
 8006e18:	2830      	cmp	r0, #48	; 0x30
 8006e1a:	f103 0301 	add.w	r3, r3, #1
 8006e1e:	d0f9      	beq.n	8006e14 <__gethex+0x70>
 8006e20:	f7ff ffaa 	bl	8006d78 <__hexdig_fun>
 8006e24:	2301      	movs	r3, #1
 8006e26:	fab0 f480 	clz	r4, r0
 8006e2a:	4635      	mov	r5, r6
 8006e2c:	0964      	lsrs	r4, r4, #5
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	463a      	mov	r2, r7
 8006e32:	4616      	mov	r6, r2
 8006e34:	7830      	ldrb	r0, [r6, #0]
 8006e36:	3201      	adds	r2, #1
 8006e38:	f7ff ff9e 	bl	8006d78 <__hexdig_fun>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d1f8      	bne.n	8006e32 <__gethex+0x8e>
 8006e40:	4652      	mov	r2, sl
 8006e42:	4630      	mov	r0, r6
 8006e44:	9903      	ldr	r1, [sp, #12]
 8006e46:	f001 fc02 	bl	800864e <strncmp>
 8006e4a:	b980      	cbnz	r0, 8006e6e <__gethex+0xca>
 8006e4c:	b94d      	cbnz	r5, 8006e62 <__gethex+0xbe>
 8006e4e:	eb06 050a 	add.w	r5, r6, sl
 8006e52:	462a      	mov	r2, r5
 8006e54:	4616      	mov	r6, r2
 8006e56:	7830      	ldrb	r0, [r6, #0]
 8006e58:	3201      	adds	r2, #1
 8006e5a:	f7ff ff8d 	bl	8006d78 <__hexdig_fun>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d1f8      	bne.n	8006e54 <__gethex+0xb0>
 8006e62:	1bad      	subs	r5, r5, r6
 8006e64:	00ad      	lsls	r5, r5, #2
 8006e66:	e004      	b.n	8006e72 <__gethex+0xce>
 8006e68:	2400      	movs	r4, #0
 8006e6a:	4625      	mov	r5, r4
 8006e6c:	e7e0      	b.n	8006e30 <__gethex+0x8c>
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	d1f7      	bne.n	8006e62 <__gethex+0xbe>
 8006e72:	7833      	ldrb	r3, [r6, #0]
 8006e74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e78:	2b50      	cmp	r3, #80	; 0x50
 8006e7a:	d139      	bne.n	8006ef0 <__gethex+0x14c>
 8006e7c:	7873      	ldrb	r3, [r6, #1]
 8006e7e:	2b2b      	cmp	r3, #43	; 0x2b
 8006e80:	d02a      	beq.n	8006ed8 <__gethex+0x134>
 8006e82:	2b2d      	cmp	r3, #45	; 0x2d
 8006e84:	d02c      	beq.n	8006ee0 <__gethex+0x13c>
 8006e86:	f04f 0900 	mov.w	r9, #0
 8006e8a:	1c71      	adds	r1, r6, #1
 8006e8c:	7808      	ldrb	r0, [r1, #0]
 8006e8e:	f7ff ff73 	bl	8006d78 <__hexdig_fun>
 8006e92:	1e43      	subs	r3, r0, #1
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b18      	cmp	r3, #24
 8006e98:	d82a      	bhi.n	8006ef0 <__gethex+0x14c>
 8006e9a:	f1a0 0210 	sub.w	r2, r0, #16
 8006e9e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ea2:	f7ff ff69 	bl	8006d78 <__hexdig_fun>
 8006ea6:	1e43      	subs	r3, r0, #1
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b18      	cmp	r3, #24
 8006eac:	d91b      	bls.n	8006ee6 <__gethex+0x142>
 8006eae:	f1b9 0f00 	cmp.w	r9, #0
 8006eb2:	d000      	beq.n	8006eb6 <__gethex+0x112>
 8006eb4:	4252      	negs	r2, r2
 8006eb6:	4415      	add	r5, r2
 8006eb8:	f8cb 1000 	str.w	r1, [fp]
 8006ebc:	b1d4      	cbz	r4, 8006ef4 <__gethex+0x150>
 8006ebe:	9b01      	ldr	r3, [sp, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	bf14      	ite	ne
 8006ec4:	2700      	movne	r7, #0
 8006ec6:	2706      	moveq	r7, #6
 8006ec8:	4638      	mov	r0, r7
 8006eca:	b00b      	add	sp, #44	; 0x2c
 8006ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed0:	463e      	mov	r6, r7
 8006ed2:	4625      	mov	r5, r4
 8006ed4:	2401      	movs	r4, #1
 8006ed6:	e7cc      	b.n	8006e72 <__gethex+0xce>
 8006ed8:	f04f 0900 	mov.w	r9, #0
 8006edc:	1cb1      	adds	r1, r6, #2
 8006ede:	e7d5      	b.n	8006e8c <__gethex+0xe8>
 8006ee0:	f04f 0901 	mov.w	r9, #1
 8006ee4:	e7fa      	b.n	8006edc <__gethex+0x138>
 8006ee6:	230a      	movs	r3, #10
 8006ee8:	fb03 0202 	mla	r2, r3, r2, r0
 8006eec:	3a10      	subs	r2, #16
 8006eee:	e7d6      	b.n	8006e9e <__gethex+0xfa>
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	e7e1      	b.n	8006eb8 <__gethex+0x114>
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	1bf3      	subs	r3, r6, r7
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	2b07      	cmp	r3, #7
 8006efc:	dc0a      	bgt.n	8006f14 <__gethex+0x170>
 8006efe:	9802      	ldr	r0, [sp, #8]
 8006f00:	f000 faf0 	bl	80074e4 <_Balloc>
 8006f04:	4604      	mov	r4, r0
 8006f06:	b940      	cbnz	r0, 8006f1a <__gethex+0x176>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	21de      	movs	r1, #222	; 0xde
 8006f0c:	4b5b      	ldr	r3, [pc, #364]	; (800707c <__gethex+0x2d8>)
 8006f0e:	485c      	ldr	r0, [pc, #368]	; (8007080 <__gethex+0x2dc>)
 8006f10:	f001 fbd0 	bl	80086b4 <__assert_func>
 8006f14:	3101      	adds	r1, #1
 8006f16:	105b      	asrs	r3, r3, #1
 8006f18:	e7ef      	b.n	8006efa <__gethex+0x156>
 8006f1a:	f04f 0b00 	mov.w	fp, #0
 8006f1e:	f100 0914 	add.w	r9, r0, #20
 8006f22:	f1ca 0301 	rsb	r3, sl, #1
 8006f26:	f8cd 9010 	str.w	r9, [sp, #16]
 8006f2a:	f8cd b004 	str.w	fp, [sp, #4]
 8006f2e:	9308      	str	r3, [sp, #32]
 8006f30:	42b7      	cmp	r7, r6
 8006f32:	d33f      	bcc.n	8006fb4 <__gethex+0x210>
 8006f34:	9f04      	ldr	r7, [sp, #16]
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	f847 3b04 	str.w	r3, [r7], #4
 8006f3c:	eba7 0709 	sub.w	r7, r7, r9
 8006f40:	10bf      	asrs	r7, r7, #2
 8006f42:	6127      	str	r7, [r4, #16]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fbbf 	bl	80076c8 <__hi0bits>
 8006f4a:	017f      	lsls	r7, r7, #5
 8006f4c:	f8d8 6000 	ldr.w	r6, [r8]
 8006f50:	1a3f      	subs	r7, r7, r0
 8006f52:	42b7      	cmp	r7, r6
 8006f54:	dd62      	ble.n	800701c <__gethex+0x278>
 8006f56:	1bbf      	subs	r7, r7, r6
 8006f58:	4639      	mov	r1, r7
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 ff59 	bl	8007e12 <__any_on>
 8006f60:	4682      	mov	sl, r0
 8006f62:	b1a8      	cbz	r0, 8006f90 <__gethex+0x1ec>
 8006f64:	f04f 0a01 	mov.w	sl, #1
 8006f68:	1e7b      	subs	r3, r7, #1
 8006f6a:	1159      	asrs	r1, r3, #5
 8006f6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006f70:	f003 021f 	and.w	r2, r3, #31
 8006f74:	fa0a f202 	lsl.w	r2, sl, r2
 8006f78:	420a      	tst	r2, r1
 8006f7a:	d009      	beq.n	8006f90 <__gethex+0x1ec>
 8006f7c:	4553      	cmp	r3, sl
 8006f7e:	dd05      	ble.n	8006f8c <__gethex+0x1e8>
 8006f80:	4620      	mov	r0, r4
 8006f82:	1eb9      	subs	r1, r7, #2
 8006f84:	f000 ff45 	bl	8007e12 <__any_on>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d144      	bne.n	8007016 <__gethex+0x272>
 8006f8c:	f04f 0a02 	mov.w	sl, #2
 8006f90:	4639      	mov	r1, r7
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7ff fe9d 	bl	8006cd2 <rshift>
 8006f98:	443d      	add	r5, r7
 8006f9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f9e:	42ab      	cmp	r3, r5
 8006fa0:	da4a      	bge.n	8007038 <__gethex+0x294>
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	9802      	ldr	r0, [sp, #8]
 8006fa6:	f000 fadd 	bl	8007564 <_Bfree>
 8006faa:	2300      	movs	r3, #0
 8006fac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fae:	27a3      	movs	r7, #163	; 0xa3
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	e789      	b.n	8006ec8 <__gethex+0x124>
 8006fb4:	1e73      	subs	r3, r6, #1
 8006fb6:	9a06      	ldr	r2, [sp, #24]
 8006fb8:	9307      	str	r3, [sp, #28]
 8006fba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d019      	beq.n	8006ff6 <__gethex+0x252>
 8006fc2:	f1bb 0f20 	cmp.w	fp, #32
 8006fc6:	d107      	bne.n	8006fd8 <__gethex+0x234>
 8006fc8:	9b04      	ldr	r3, [sp, #16]
 8006fca:	9a01      	ldr	r2, [sp, #4]
 8006fcc:	f843 2b04 	str.w	r2, [r3], #4
 8006fd0:	9304      	str	r3, [sp, #16]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	469b      	mov	fp, r3
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006fdc:	f7ff fecc 	bl	8006d78 <__hexdig_fun>
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	f000 000f 	and.w	r0, r0, #15
 8006fe6:	fa00 f00b 	lsl.w	r0, r0, fp
 8006fea:	4303      	orrs	r3, r0
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	f10b 0b04 	add.w	fp, fp, #4
 8006ff2:	9b07      	ldr	r3, [sp, #28]
 8006ff4:	e00d      	b.n	8007012 <__gethex+0x26e>
 8006ff6:	9a08      	ldr	r2, [sp, #32]
 8006ff8:	1e73      	subs	r3, r6, #1
 8006ffa:	4413      	add	r3, r2
 8006ffc:	42bb      	cmp	r3, r7
 8006ffe:	d3e0      	bcc.n	8006fc2 <__gethex+0x21e>
 8007000:	4618      	mov	r0, r3
 8007002:	4652      	mov	r2, sl
 8007004:	9903      	ldr	r1, [sp, #12]
 8007006:	9309      	str	r3, [sp, #36]	; 0x24
 8007008:	f001 fb21 	bl	800864e <strncmp>
 800700c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800700e:	2800      	cmp	r0, #0
 8007010:	d1d7      	bne.n	8006fc2 <__gethex+0x21e>
 8007012:	461e      	mov	r6, r3
 8007014:	e78c      	b.n	8006f30 <__gethex+0x18c>
 8007016:	f04f 0a03 	mov.w	sl, #3
 800701a:	e7b9      	b.n	8006f90 <__gethex+0x1ec>
 800701c:	da09      	bge.n	8007032 <__gethex+0x28e>
 800701e:	1bf7      	subs	r7, r6, r7
 8007020:	4621      	mov	r1, r4
 8007022:	463a      	mov	r2, r7
 8007024:	9802      	ldr	r0, [sp, #8]
 8007026:	f000 fcb5 	bl	8007994 <__lshift>
 800702a:	4604      	mov	r4, r0
 800702c:	1bed      	subs	r5, r5, r7
 800702e:	f100 0914 	add.w	r9, r0, #20
 8007032:	f04f 0a00 	mov.w	sl, #0
 8007036:	e7b0      	b.n	8006f9a <__gethex+0x1f6>
 8007038:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800703c:	42a8      	cmp	r0, r5
 800703e:	dd72      	ble.n	8007126 <__gethex+0x382>
 8007040:	1b45      	subs	r5, r0, r5
 8007042:	42ae      	cmp	r6, r5
 8007044:	dc35      	bgt.n	80070b2 <__gethex+0x30e>
 8007046:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d029      	beq.n	80070a2 <__gethex+0x2fe>
 800704e:	2b03      	cmp	r3, #3
 8007050:	d02b      	beq.n	80070aa <__gethex+0x306>
 8007052:	2b01      	cmp	r3, #1
 8007054:	d11c      	bne.n	8007090 <__gethex+0x2ec>
 8007056:	42ae      	cmp	r6, r5
 8007058:	d11a      	bne.n	8007090 <__gethex+0x2ec>
 800705a:	2e01      	cmp	r6, #1
 800705c:	d112      	bne.n	8007084 <__gethex+0x2e0>
 800705e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007062:	9a05      	ldr	r2, [sp, #20]
 8007064:	2762      	movs	r7, #98	; 0x62
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	2301      	movs	r3, #1
 800706a:	6123      	str	r3, [r4, #16]
 800706c:	f8c9 3000 	str.w	r3, [r9]
 8007070:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007072:	601c      	str	r4, [r3, #0]
 8007074:	e728      	b.n	8006ec8 <__gethex+0x124>
 8007076:	bf00      	nop
 8007078:	0802d014 	.word	0x0802d014
 800707c:	0802cf38 	.word	0x0802cf38
 8007080:	0802cfac 	.word	0x0802cfac
 8007084:	4620      	mov	r0, r4
 8007086:	1e71      	subs	r1, r6, #1
 8007088:	f000 fec3 	bl	8007e12 <__any_on>
 800708c:	2800      	cmp	r0, #0
 800708e:	d1e6      	bne.n	800705e <__gethex+0x2ba>
 8007090:	4621      	mov	r1, r4
 8007092:	9802      	ldr	r0, [sp, #8]
 8007094:	f000 fa66 	bl	8007564 <_Bfree>
 8007098:	2300      	movs	r3, #0
 800709a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800709c:	2750      	movs	r7, #80	; 0x50
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e712      	b.n	8006ec8 <__gethex+0x124>
 80070a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f3      	bne.n	8007090 <__gethex+0x2ec>
 80070a8:	e7d9      	b.n	800705e <__gethex+0x2ba>
 80070aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1d6      	bne.n	800705e <__gethex+0x2ba>
 80070b0:	e7ee      	b.n	8007090 <__gethex+0x2ec>
 80070b2:	1e6f      	subs	r7, r5, #1
 80070b4:	f1ba 0f00 	cmp.w	sl, #0
 80070b8:	d132      	bne.n	8007120 <__gethex+0x37c>
 80070ba:	b127      	cbz	r7, 80070c6 <__gethex+0x322>
 80070bc:	4639      	mov	r1, r7
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fea7 	bl	8007e12 <__any_on>
 80070c4:	4682      	mov	sl, r0
 80070c6:	2101      	movs	r1, #1
 80070c8:	117b      	asrs	r3, r7, #5
 80070ca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80070ce:	f007 071f 	and.w	r7, r7, #31
 80070d2:	fa01 f707 	lsl.w	r7, r1, r7
 80070d6:	421f      	tst	r7, r3
 80070d8:	f04f 0702 	mov.w	r7, #2
 80070dc:	4629      	mov	r1, r5
 80070de:	4620      	mov	r0, r4
 80070e0:	bf18      	it	ne
 80070e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80070e6:	1b76      	subs	r6, r6, r5
 80070e8:	f7ff fdf3 	bl	8006cd2 <rshift>
 80070ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80070f0:	f1ba 0f00 	cmp.w	sl, #0
 80070f4:	d048      	beq.n	8007188 <__gethex+0x3e4>
 80070f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d015      	beq.n	800712a <__gethex+0x386>
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d017      	beq.n	8007132 <__gethex+0x38e>
 8007102:	2b01      	cmp	r3, #1
 8007104:	d109      	bne.n	800711a <__gethex+0x376>
 8007106:	f01a 0f02 	tst.w	sl, #2
 800710a:	d006      	beq.n	800711a <__gethex+0x376>
 800710c:	f8d9 0000 	ldr.w	r0, [r9]
 8007110:	ea4a 0a00 	orr.w	sl, sl, r0
 8007114:	f01a 0f01 	tst.w	sl, #1
 8007118:	d10e      	bne.n	8007138 <__gethex+0x394>
 800711a:	f047 0710 	orr.w	r7, r7, #16
 800711e:	e033      	b.n	8007188 <__gethex+0x3e4>
 8007120:	f04f 0a01 	mov.w	sl, #1
 8007124:	e7cf      	b.n	80070c6 <__gethex+0x322>
 8007126:	2701      	movs	r7, #1
 8007128:	e7e2      	b.n	80070f0 <__gethex+0x34c>
 800712a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800712c:	f1c3 0301 	rsb	r3, r3, #1
 8007130:	9315      	str	r3, [sp, #84]	; 0x54
 8007132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f0      	beq.n	800711a <__gethex+0x376>
 8007138:	f04f 0c00 	mov.w	ip, #0
 800713c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007140:	f104 0314 	add.w	r3, r4, #20
 8007144:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007148:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800714c:	4618      	mov	r0, r3
 800714e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007152:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007156:	d01c      	beq.n	8007192 <__gethex+0x3ee>
 8007158:	3201      	adds	r2, #1
 800715a:	6002      	str	r2, [r0, #0]
 800715c:	2f02      	cmp	r7, #2
 800715e:	f104 0314 	add.w	r3, r4, #20
 8007162:	d13d      	bne.n	80071e0 <__gethex+0x43c>
 8007164:	f8d8 2000 	ldr.w	r2, [r8]
 8007168:	3a01      	subs	r2, #1
 800716a:	42b2      	cmp	r2, r6
 800716c:	d10a      	bne.n	8007184 <__gethex+0x3e0>
 800716e:	2201      	movs	r2, #1
 8007170:	1171      	asrs	r1, r6, #5
 8007172:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007176:	f006 061f 	and.w	r6, r6, #31
 800717a:	fa02 f606 	lsl.w	r6, r2, r6
 800717e:	421e      	tst	r6, r3
 8007180:	bf18      	it	ne
 8007182:	4617      	movne	r7, r2
 8007184:	f047 0720 	orr.w	r7, r7, #32
 8007188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800718a:	601c      	str	r4, [r3, #0]
 800718c:	9b05      	ldr	r3, [sp, #20]
 800718e:	601d      	str	r5, [r3, #0]
 8007190:	e69a      	b.n	8006ec8 <__gethex+0x124>
 8007192:	4299      	cmp	r1, r3
 8007194:	f843 cc04 	str.w	ip, [r3, #-4]
 8007198:	d8d8      	bhi.n	800714c <__gethex+0x3a8>
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	459b      	cmp	fp, r3
 800719e:	db17      	blt.n	80071d0 <__gethex+0x42c>
 80071a0:	6861      	ldr	r1, [r4, #4]
 80071a2:	9802      	ldr	r0, [sp, #8]
 80071a4:	3101      	adds	r1, #1
 80071a6:	f000 f99d 	bl	80074e4 <_Balloc>
 80071aa:	4681      	mov	r9, r0
 80071ac:	b918      	cbnz	r0, 80071b6 <__gethex+0x412>
 80071ae:	4602      	mov	r2, r0
 80071b0:	2184      	movs	r1, #132	; 0x84
 80071b2:	4b19      	ldr	r3, [pc, #100]	; (8007218 <__gethex+0x474>)
 80071b4:	e6ab      	b.n	8006f0e <__gethex+0x16a>
 80071b6:	6922      	ldr	r2, [r4, #16]
 80071b8:	f104 010c 	add.w	r1, r4, #12
 80071bc:	3202      	adds	r2, #2
 80071be:	0092      	lsls	r2, r2, #2
 80071c0:	300c      	adds	r0, #12
 80071c2:	f000 f981 	bl	80074c8 <memcpy>
 80071c6:	4621      	mov	r1, r4
 80071c8:	9802      	ldr	r0, [sp, #8]
 80071ca:	f000 f9cb 	bl	8007564 <_Bfree>
 80071ce:	464c      	mov	r4, r9
 80071d0:	6923      	ldr	r3, [r4, #16]
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	6122      	str	r2, [r4, #16]
 80071d6:	2201      	movs	r2, #1
 80071d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071dc:	615a      	str	r2, [r3, #20]
 80071de:	e7bd      	b.n	800715c <__gethex+0x3b8>
 80071e0:	6922      	ldr	r2, [r4, #16]
 80071e2:	455a      	cmp	r2, fp
 80071e4:	dd0b      	ble.n	80071fe <__gethex+0x45a>
 80071e6:	2101      	movs	r1, #1
 80071e8:	4620      	mov	r0, r4
 80071ea:	f7ff fd72 	bl	8006cd2 <rshift>
 80071ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80071f2:	3501      	adds	r5, #1
 80071f4:	42ab      	cmp	r3, r5
 80071f6:	f6ff aed4 	blt.w	8006fa2 <__gethex+0x1fe>
 80071fa:	2701      	movs	r7, #1
 80071fc:	e7c2      	b.n	8007184 <__gethex+0x3e0>
 80071fe:	f016 061f 	ands.w	r6, r6, #31
 8007202:	d0fa      	beq.n	80071fa <__gethex+0x456>
 8007204:	4453      	add	r3, sl
 8007206:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800720a:	f000 fa5d 	bl	80076c8 <__hi0bits>
 800720e:	f1c6 0620 	rsb	r6, r6, #32
 8007212:	42b0      	cmp	r0, r6
 8007214:	dbe7      	blt.n	80071e6 <__gethex+0x442>
 8007216:	e7f0      	b.n	80071fa <__gethex+0x456>
 8007218:	0802cf38 	.word	0x0802cf38

0800721c <L_shift>:
 800721c:	f1c2 0208 	rsb	r2, r2, #8
 8007220:	0092      	lsls	r2, r2, #2
 8007222:	b570      	push	{r4, r5, r6, lr}
 8007224:	f1c2 0620 	rsb	r6, r2, #32
 8007228:	6843      	ldr	r3, [r0, #4]
 800722a:	6804      	ldr	r4, [r0, #0]
 800722c:	fa03 f506 	lsl.w	r5, r3, r6
 8007230:	432c      	orrs	r4, r5
 8007232:	40d3      	lsrs	r3, r2
 8007234:	6004      	str	r4, [r0, #0]
 8007236:	f840 3f04 	str.w	r3, [r0, #4]!
 800723a:	4288      	cmp	r0, r1
 800723c:	d3f4      	bcc.n	8007228 <L_shift+0xc>
 800723e:	bd70      	pop	{r4, r5, r6, pc}

08007240 <__match>:
 8007240:	b530      	push	{r4, r5, lr}
 8007242:	6803      	ldr	r3, [r0, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800724a:	b914      	cbnz	r4, 8007252 <__match+0x12>
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	2001      	movs	r0, #1
 8007250:	bd30      	pop	{r4, r5, pc}
 8007252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007256:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800725a:	2d19      	cmp	r5, #25
 800725c:	bf98      	it	ls
 800725e:	3220      	addls	r2, #32
 8007260:	42a2      	cmp	r2, r4
 8007262:	d0f0      	beq.n	8007246 <__match+0x6>
 8007264:	2000      	movs	r0, #0
 8007266:	e7f3      	b.n	8007250 <__match+0x10>

08007268 <__hexnan>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	2500      	movs	r5, #0
 800726e:	680b      	ldr	r3, [r1, #0]
 8007270:	4682      	mov	sl, r0
 8007272:	115e      	asrs	r6, r3, #5
 8007274:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007278:	f013 031f 	ands.w	r3, r3, #31
 800727c:	bf18      	it	ne
 800727e:	3604      	addne	r6, #4
 8007280:	1f37      	subs	r7, r6, #4
 8007282:	46b9      	mov	r9, r7
 8007284:	463c      	mov	r4, r7
 8007286:	46ab      	mov	fp, r5
 8007288:	b087      	sub	sp, #28
 800728a:	4690      	mov	r8, r2
 800728c:	6802      	ldr	r2, [r0, #0]
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	f846 5c04 	str.w	r5, [r6, #-4]
 8007294:	9502      	str	r5, [sp, #8]
 8007296:	7851      	ldrb	r1, [r2, #1]
 8007298:	1c53      	adds	r3, r2, #1
 800729a:	9303      	str	r3, [sp, #12]
 800729c:	b341      	cbz	r1, 80072f0 <__hexnan+0x88>
 800729e:	4608      	mov	r0, r1
 80072a0:	9205      	str	r2, [sp, #20]
 80072a2:	9104      	str	r1, [sp, #16]
 80072a4:	f7ff fd68 	bl	8006d78 <__hexdig_fun>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d14f      	bne.n	800734c <__hexnan+0xe4>
 80072ac:	9904      	ldr	r1, [sp, #16]
 80072ae:	9a05      	ldr	r2, [sp, #20]
 80072b0:	2920      	cmp	r1, #32
 80072b2:	d818      	bhi.n	80072e6 <__hexnan+0x7e>
 80072b4:	9b02      	ldr	r3, [sp, #8]
 80072b6:	459b      	cmp	fp, r3
 80072b8:	dd13      	ble.n	80072e2 <__hexnan+0x7a>
 80072ba:	454c      	cmp	r4, r9
 80072bc:	d206      	bcs.n	80072cc <__hexnan+0x64>
 80072be:	2d07      	cmp	r5, #7
 80072c0:	dc04      	bgt.n	80072cc <__hexnan+0x64>
 80072c2:	462a      	mov	r2, r5
 80072c4:	4649      	mov	r1, r9
 80072c6:	4620      	mov	r0, r4
 80072c8:	f7ff ffa8 	bl	800721c <L_shift>
 80072cc:	4544      	cmp	r4, r8
 80072ce:	d950      	bls.n	8007372 <__hexnan+0x10a>
 80072d0:	2300      	movs	r3, #0
 80072d2:	f1a4 0904 	sub.w	r9, r4, #4
 80072d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80072da:	461d      	mov	r5, r3
 80072dc:	464c      	mov	r4, r9
 80072de:	f8cd b008 	str.w	fp, [sp, #8]
 80072e2:	9a03      	ldr	r2, [sp, #12]
 80072e4:	e7d7      	b.n	8007296 <__hexnan+0x2e>
 80072e6:	2929      	cmp	r1, #41	; 0x29
 80072e8:	d156      	bne.n	8007398 <__hexnan+0x130>
 80072ea:	3202      	adds	r2, #2
 80072ec:	f8ca 2000 	str.w	r2, [sl]
 80072f0:	f1bb 0f00 	cmp.w	fp, #0
 80072f4:	d050      	beq.n	8007398 <__hexnan+0x130>
 80072f6:	454c      	cmp	r4, r9
 80072f8:	d206      	bcs.n	8007308 <__hexnan+0xa0>
 80072fa:	2d07      	cmp	r5, #7
 80072fc:	dc04      	bgt.n	8007308 <__hexnan+0xa0>
 80072fe:	462a      	mov	r2, r5
 8007300:	4649      	mov	r1, r9
 8007302:	4620      	mov	r0, r4
 8007304:	f7ff ff8a 	bl	800721c <L_shift>
 8007308:	4544      	cmp	r4, r8
 800730a:	d934      	bls.n	8007376 <__hexnan+0x10e>
 800730c:	4623      	mov	r3, r4
 800730e:	f1a8 0204 	sub.w	r2, r8, #4
 8007312:	f853 1b04 	ldr.w	r1, [r3], #4
 8007316:	429f      	cmp	r7, r3
 8007318:	f842 1f04 	str.w	r1, [r2, #4]!
 800731c:	d2f9      	bcs.n	8007312 <__hexnan+0xaa>
 800731e:	1b3b      	subs	r3, r7, r4
 8007320:	f023 0303 	bic.w	r3, r3, #3
 8007324:	3304      	adds	r3, #4
 8007326:	3401      	adds	r4, #1
 8007328:	3e03      	subs	r6, #3
 800732a:	42b4      	cmp	r4, r6
 800732c:	bf88      	it	hi
 800732e:	2304      	movhi	r3, #4
 8007330:	2200      	movs	r2, #0
 8007332:	4443      	add	r3, r8
 8007334:	f843 2b04 	str.w	r2, [r3], #4
 8007338:	429f      	cmp	r7, r3
 800733a:	d2fb      	bcs.n	8007334 <__hexnan+0xcc>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	b91b      	cbnz	r3, 8007348 <__hexnan+0xe0>
 8007340:	4547      	cmp	r7, r8
 8007342:	d127      	bne.n	8007394 <__hexnan+0x12c>
 8007344:	2301      	movs	r3, #1
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	2005      	movs	r0, #5
 800734a:	e026      	b.n	800739a <__hexnan+0x132>
 800734c:	3501      	adds	r5, #1
 800734e:	2d08      	cmp	r5, #8
 8007350:	f10b 0b01 	add.w	fp, fp, #1
 8007354:	dd06      	ble.n	8007364 <__hexnan+0xfc>
 8007356:	4544      	cmp	r4, r8
 8007358:	d9c3      	bls.n	80072e2 <__hexnan+0x7a>
 800735a:	2300      	movs	r3, #0
 800735c:	2501      	movs	r5, #1
 800735e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007362:	3c04      	subs	r4, #4
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	f000 000f 	and.w	r0, r0, #15
 800736a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800736e:	6022      	str	r2, [r4, #0]
 8007370:	e7b7      	b.n	80072e2 <__hexnan+0x7a>
 8007372:	2508      	movs	r5, #8
 8007374:	e7b5      	b.n	80072e2 <__hexnan+0x7a>
 8007376:	9b01      	ldr	r3, [sp, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0df      	beq.n	800733c <__hexnan+0xd4>
 800737c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007380:	f1c3 0320 	rsb	r3, r3, #32
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
 8007388:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800738c:	401a      	ands	r2, r3
 800738e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007392:	e7d3      	b.n	800733c <__hexnan+0xd4>
 8007394:	3f04      	subs	r7, #4
 8007396:	e7d1      	b.n	800733c <__hexnan+0xd4>
 8007398:	2004      	movs	r0, #4
 800739a:	b007      	add	sp, #28
 800739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073a0 <_localeconv_r>:
 80073a0:	4800      	ldr	r0, [pc, #0]	; (80073a4 <_localeconv_r+0x4>)
 80073a2:	4770      	bx	lr
 80073a4:	2000018c 	.word	0x2000018c

080073a8 <__retarget_lock_init_recursive>:
 80073a8:	4770      	bx	lr

080073aa <__retarget_lock_acquire_recursive>:
 80073aa:	4770      	bx	lr

080073ac <__retarget_lock_release_recursive>:
 80073ac:	4770      	bx	lr

080073ae <__swhatbuf_r>:
 80073ae:	b570      	push	{r4, r5, r6, lr}
 80073b0:	460e      	mov	r6, r1
 80073b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b6:	4614      	mov	r4, r2
 80073b8:	2900      	cmp	r1, #0
 80073ba:	461d      	mov	r5, r3
 80073bc:	b096      	sub	sp, #88	; 0x58
 80073be:	da08      	bge.n	80073d2 <__swhatbuf_r+0x24>
 80073c0:	2200      	movs	r2, #0
 80073c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073c6:	602a      	str	r2, [r5, #0]
 80073c8:	061a      	lsls	r2, r3, #24
 80073ca:	d410      	bmi.n	80073ee <__swhatbuf_r+0x40>
 80073cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d0:	e00e      	b.n	80073f0 <__swhatbuf_r+0x42>
 80073d2:	466a      	mov	r2, sp
 80073d4:	f001 f9ae 	bl	8008734 <_fstat_r>
 80073d8:	2800      	cmp	r0, #0
 80073da:	dbf1      	blt.n	80073c0 <__swhatbuf_r+0x12>
 80073dc:	9a01      	ldr	r2, [sp, #4]
 80073de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073e6:	425a      	negs	r2, r3
 80073e8:	415a      	adcs	r2, r3
 80073ea:	602a      	str	r2, [r5, #0]
 80073ec:	e7ee      	b.n	80073cc <__swhatbuf_r+0x1e>
 80073ee:	2340      	movs	r3, #64	; 0x40
 80073f0:	2000      	movs	r0, #0
 80073f2:	6023      	str	r3, [r4, #0]
 80073f4:	b016      	add	sp, #88	; 0x58
 80073f6:	bd70      	pop	{r4, r5, r6, pc}

080073f8 <__smakebuf_r>:
 80073f8:	898b      	ldrh	r3, [r1, #12]
 80073fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073fc:	079d      	lsls	r5, r3, #30
 80073fe:	4606      	mov	r6, r0
 8007400:	460c      	mov	r4, r1
 8007402:	d507      	bpl.n	8007414 <__smakebuf_r+0x1c>
 8007404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	6123      	str	r3, [r4, #16]
 800740c:	2301      	movs	r3, #1
 800740e:	6163      	str	r3, [r4, #20]
 8007410:	b002      	add	sp, #8
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	466a      	mov	r2, sp
 8007416:	ab01      	add	r3, sp, #4
 8007418:	f7ff ffc9 	bl	80073ae <__swhatbuf_r>
 800741c:	9900      	ldr	r1, [sp, #0]
 800741e:	4605      	mov	r5, r0
 8007420:	4630      	mov	r0, r6
 8007422:	f000 fd93 	bl	8007f4c <_malloc_r>
 8007426:	b948      	cbnz	r0, 800743c <__smakebuf_r+0x44>
 8007428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800742c:	059a      	lsls	r2, r3, #22
 800742e:	d4ef      	bmi.n	8007410 <__smakebuf_r+0x18>
 8007430:	f023 0303 	bic.w	r3, r3, #3
 8007434:	f043 0302 	orr.w	r3, r3, #2
 8007438:	81a3      	strh	r3, [r4, #12]
 800743a:	e7e3      	b.n	8007404 <__smakebuf_r+0xc>
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <__smakebuf_r+0x7c>)
 800743e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	6020      	str	r0, [r4, #0]
 8007444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007448:	81a3      	strh	r3, [r4, #12]
 800744a:	9b00      	ldr	r3, [sp, #0]
 800744c:	6120      	str	r0, [r4, #16]
 800744e:	6163      	str	r3, [r4, #20]
 8007450:	9b01      	ldr	r3, [sp, #4]
 8007452:	b15b      	cbz	r3, 800746c <__smakebuf_r+0x74>
 8007454:	4630      	mov	r0, r6
 8007456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800745a:	f001 f97d 	bl	8008758 <_isatty_r>
 800745e:	b128      	cbz	r0, 800746c <__smakebuf_r+0x74>
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	f023 0303 	bic.w	r3, r3, #3
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	81a3      	strh	r3, [r4, #12]
 800746c:	89a0      	ldrh	r0, [r4, #12]
 800746e:	4305      	orrs	r5, r0
 8007470:	81a5      	strh	r5, [r4, #12]
 8007472:	e7cd      	b.n	8007410 <__smakebuf_r+0x18>
 8007474:	08006b31 	.word	0x08006b31

08007478 <malloc>:
 8007478:	4b02      	ldr	r3, [pc, #8]	; (8007484 <malloc+0xc>)
 800747a:	4601      	mov	r1, r0
 800747c:	6818      	ldr	r0, [r3, #0]
 800747e:	f000 bd65 	b.w	8007f4c <_malloc_r>
 8007482:	bf00      	nop
 8007484:	20000034 	.word	0x20000034

08007488 <__ascii_mbtowc>:
 8007488:	b082      	sub	sp, #8
 800748a:	b901      	cbnz	r1, 800748e <__ascii_mbtowc+0x6>
 800748c:	a901      	add	r1, sp, #4
 800748e:	b142      	cbz	r2, 80074a2 <__ascii_mbtowc+0x1a>
 8007490:	b14b      	cbz	r3, 80074a6 <__ascii_mbtowc+0x1e>
 8007492:	7813      	ldrb	r3, [r2, #0]
 8007494:	600b      	str	r3, [r1, #0]
 8007496:	7812      	ldrb	r2, [r2, #0]
 8007498:	1e10      	subs	r0, r2, #0
 800749a:	bf18      	it	ne
 800749c:	2001      	movne	r0, #1
 800749e:	b002      	add	sp, #8
 80074a0:	4770      	bx	lr
 80074a2:	4610      	mov	r0, r2
 80074a4:	e7fb      	b.n	800749e <__ascii_mbtowc+0x16>
 80074a6:	f06f 0001 	mvn.w	r0, #1
 80074aa:	e7f8      	b.n	800749e <__ascii_mbtowc+0x16>

080074ac <memchr>:
 80074ac:	4603      	mov	r3, r0
 80074ae:	b510      	push	{r4, lr}
 80074b0:	b2c9      	uxtb	r1, r1
 80074b2:	4402      	add	r2, r0
 80074b4:	4293      	cmp	r3, r2
 80074b6:	4618      	mov	r0, r3
 80074b8:	d101      	bne.n	80074be <memchr+0x12>
 80074ba:	2000      	movs	r0, #0
 80074bc:	e003      	b.n	80074c6 <memchr+0x1a>
 80074be:	7804      	ldrb	r4, [r0, #0]
 80074c0:	3301      	adds	r3, #1
 80074c2:	428c      	cmp	r4, r1
 80074c4:	d1f6      	bne.n	80074b4 <memchr+0x8>
 80074c6:	bd10      	pop	{r4, pc}

080074c8 <memcpy>:
 80074c8:	440a      	add	r2, r1
 80074ca:	4291      	cmp	r1, r2
 80074cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80074d0:	d100      	bne.n	80074d4 <memcpy+0xc>
 80074d2:	4770      	bx	lr
 80074d4:	b510      	push	{r4, lr}
 80074d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074da:	4291      	cmp	r1, r2
 80074dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074e0:	d1f9      	bne.n	80074d6 <memcpy+0xe>
 80074e2:	bd10      	pop	{r4, pc}

080074e4 <_Balloc>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074e8:	4604      	mov	r4, r0
 80074ea:	460d      	mov	r5, r1
 80074ec:	b976      	cbnz	r6, 800750c <_Balloc+0x28>
 80074ee:	2010      	movs	r0, #16
 80074f0:	f7ff ffc2 	bl	8007478 <malloc>
 80074f4:	4602      	mov	r2, r0
 80074f6:	6260      	str	r0, [r4, #36]	; 0x24
 80074f8:	b920      	cbnz	r0, 8007504 <_Balloc+0x20>
 80074fa:	2166      	movs	r1, #102	; 0x66
 80074fc:	4b17      	ldr	r3, [pc, #92]	; (800755c <_Balloc+0x78>)
 80074fe:	4818      	ldr	r0, [pc, #96]	; (8007560 <_Balloc+0x7c>)
 8007500:	f001 f8d8 	bl	80086b4 <__assert_func>
 8007504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007508:	6006      	str	r6, [r0, #0]
 800750a:	60c6      	str	r6, [r0, #12]
 800750c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800750e:	68f3      	ldr	r3, [r6, #12]
 8007510:	b183      	cbz	r3, 8007534 <_Balloc+0x50>
 8007512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800751a:	b9b8      	cbnz	r0, 800754c <_Balloc+0x68>
 800751c:	2101      	movs	r1, #1
 800751e:	fa01 f605 	lsl.w	r6, r1, r5
 8007522:	1d72      	adds	r2, r6, #5
 8007524:	4620      	mov	r0, r4
 8007526:	0092      	lsls	r2, r2, #2
 8007528:	f000 fc94 	bl	8007e54 <_calloc_r>
 800752c:	b160      	cbz	r0, 8007548 <_Balloc+0x64>
 800752e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007532:	e00e      	b.n	8007552 <_Balloc+0x6e>
 8007534:	2221      	movs	r2, #33	; 0x21
 8007536:	2104      	movs	r1, #4
 8007538:	4620      	mov	r0, r4
 800753a:	f000 fc8b 	bl	8007e54 <_calloc_r>
 800753e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007540:	60f0      	str	r0, [r6, #12]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e4      	bne.n	8007512 <_Balloc+0x2e>
 8007548:	2000      	movs	r0, #0
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	6802      	ldr	r2, [r0, #0]
 800754e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007552:	2300      	movs	r3, #0
 8007554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007558:	e7f7      	b.n	800754a <_Balloc+0x66>
 800755a:	bf00      	nop
 800755c:	0802cec6 	.word	0x0802cec6
 8007560:	0802d028 	.word	0x0802d028

08007564 <_Bfree>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007568:	4605      	mov	r5, r0
 800756a:	460c      	mov	r4, r1
 800756c:	b976      	cbnz	r6, 800758c <_Bfree+0x28>
 800756e:	2010      	movs	r0, #16
 8007570:	f7ff ff82 	bl	8007478 <malloc>
 8007574:	4602      	mov	r2, r0
 8007576:	6268      	str	r0, [r5, #36]	; 0x24
 8007578:	b920      	cbnz	r0, 8007584 <_Bfree+0x20>
 800757a:	218a      	movs	r1, #138	; 0x8a
 800757c:	4b08      	ldr	r3, [pc, #32]	; (80075a0 <_Bfree+0x3c>)
 800757e:	4809      	ldr	r0, [pc, #36]	; (80075a4 <_Bfree+0x40>)
 8007580:	f001 f898 	bl	80086b4 <__assert_func>
 8007584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007588:	6006      	str	r6, [r0, #0]
 800758a:	60c6      	str	r6, [r0, #12]
 800758c:	b13c      	cbz	r4, 800759e <_Bfree+0x3a>
 800758e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007590:	6862      	ldr	r2, [r4, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007598:	6021      	str	r1, [r4, #0]
 800759a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	0802cec6 	.word	0x0802cec6
 80075a4:	0802d028 	.word	0x0802d028

080075a8 <__multadd>:
 80075a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ac:	4607      	mov	r7, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	461e      	mov	r6, r3
 80075b2:	2000      	movs	r0, #0
 80075b4:	690d      	ldr	r5, [r1, #16]
 80075b6:	f101 0c14 	add.w	ip, r1, #20
 80075ba:	f8dc 3000 	ldr.w	r3, [ip]
 80075be:	3001      	adds	r0, #1
 80075c0:	b299      	uxth	r1, r3
 80075c2:	fb02 6101 	mla	r1, r2, r1, r6
 80075c6:	0c1e      	lsrs	r6, r3, #16
 80075c8:	0c0b      	lsrs	r3, r1, #16
 80075ca:	fb02 3306 	mla	r3, r2, r6, r3
 80075ce:	b289      	uxth	r1, r1
 80075d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075d4:	4285      	cmp	r5, r0
 80075d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075da:	f84c 1b04 	str.w	r1, [ip], #4
 80075de:	dcec      	bgt.n	80075ba <__multadd+0x12>
 80075e0:	b30e      	cbz	r6, 8007626 <__multadd+0x7e>
 80075e2:	68a3      	ldr	r3, [r4, #8]
 80075e4:	42ab      	cmp	r3, r5
 80075e6:	dc19      	bgt.n	800761c <__multadd+0x74>
 80075e8:	6861      	ldr	r1, [r4, #4]
 80075ea:	4638      	mov	r0, r7
 80075ec:	3101      	adds	r1, #1
 80075ee:	f7ff ff79 	bl	80074e4 <_Balloc>
 80075f2:	4680      	mov	r8, r0
 80075f4:	b928      	cbnz	r0, 8007602 <__multadd+0x5a>
 80075f6:	4602      	mov	r2, r0
 80075f8:	21b5      	movs	r1, #181	; 0xb5
 80075fa:	4b0c      	ldr	r3, [pc, #48]	; (800762c <__multadd+0x84>)
 80075fc:	480c      	ldr	r0, [pc, #48]	; (8007630 <__multadd+0x88>)
 80075fe:	f001 f859 	bl	80086b4 <__assert_func>
 8007602:	6922      	ldr	r2, [r4, #16]
 8007604:	f104 010c 	add.w	r1, r4, #12
 8007608:	3202      	adds	r2, #2
 800760a:	0092      	lsls	r2, r2, #2
 800760c:	300c      	adds	r0, #12
 800760e:	f7ff ff5b 	bl	80074c8 <memcpy>
 8007612:	4621      	mov	r1, r4
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff ffa5 	bl	8007564 <_Bfree>
 800761a:	4644      	mov	r4, r8
 800761c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007620:	3501      	adds	r5, #1
 8007622:	615e      	str	r6, [r3, #20]
 8007624:	6125      	str	r5, [r4, #16]
 8007626:	4620      	mov	r0, r4
 8007628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800762c:	0802cf38 	.word	0x0802cf38
 8007630:	0802d028 	.word	0x0802d028

08007634 <__s2b>:
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007638:	4615      	mov	r5, r2
 800763a:	2209      	movs	r2, #9
 800763c:	461f      	mov	r7, r3
 800763e:	3308      	adds	r3, #8
 8007640:	460c      	mov	r4, r1
 8007642:	fb93 f3f2 	sdiv	r3, r3, r2
 8007646:	4606      	mov	r6, r0
 8007648:	2201      	movs	r2, #1
 800764a:	2100      	movs	r1, #0
 800764c:	429a      	cmp	r2, r3
 800764e:	db09      	blt.n	8007664 <__s2b+0x30>
 8007650:	4630      	mov	r0, r6
 8007652:	f7ff ff47 	bl	80074e4 <_Balloc>
 8007656:	b940      	cbnz	r0, 800766a <__s2b+0x36>
 8007658:	4602      	mov	r2, r0
 800765a:	21ce      	movs	r1, #206	; 0xce
 800765c:	4b18      	ldr	r3, [pc, #96]	; (80076c0 <__s2b+0x8c>)
 800765e:	4819      	ldr	r0, [pc, #100]	; (80076c4 <__s2b+0x90>)
 8007660:	f001 f828 	bl	80086b4 <__assert_func>
 8007664:	0052      	lsls	r2, r2, #1
 8007666:	3101      	adds	r1, #1
 8007668:	e7f0      	b.n	800764c <__s2b+0x18>
 800766a:	9b08      	ldr	r3, [sp, #32]
 800766c:	2d09      	cmp	r5, #9
 800766e:	6143      	str	r3, [r0, #20]
 8007670:	f04f 0301 	mov.w	r3, #1
 8007674:	6103      	str	r3, [r0, #16]
 8007676:	dd16      	ble.n	80076a6 <__s2b+0x72>
 8007678:	f104 0909 	add.w	r9, r4, #9
 800767c:	46c8      	mov	r8, r9
 800767e:	442c      	add	r4, r5
 8007680:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007684:	4601      	mov	r1, r0
 8007686:	220a      	movs	r2, #10
 8007688:	4630      	mov	r0, r6
 800768a:	3b30      	subs	r3, #48	; 0x30
 800768c:	f7ff ff8c 	bl	80075a8 <__multadd>
 8007690:	45a0      	cmp	r8, r4
 8007692:	d1f5      	bne.n	8007680 <__s2b+0x4c>
 8007694:	f1a5 0408 	sub.w	r4, r5, #8
 8007698:	444c      	add	r4, r9
 800769a:	1b2d      	subs	r5, r5, r4
 800769c:	1963      	adds	r3, r4, r5
 800769e:	42bb      	cmp	r3, r7
 80076a0:	db04      	blt.n	80076ac <__s2b+0x78>
 80076a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a6:	2509      	movs	r5, #9
 80076a8:	340a      	adds	r4, #10
 80076aa:	e7f6      	b.n	800769a <__s2b+0x66>
 80076ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076b0:	4601      	mov	r1, r0
 80076b2:	220a      	movs	r2, #10
 80076b4:	4630      	mov	r0, r6
 80076b6:	3b30      	subs	r3, #48	; 0x30
 80076b8:	f7ff ff76 	bl	80075a8 <__multadd>
 80076bc:	e7ee      	b.n	800769c <__s2b+0x68>
 80076be:	bf00      	nop
 80076c0:	0802cf38 	.word	0x0802cf38
 80076c4:	0802d028 	.word	0x0802d028

080076c8 <__hi0bits>:
 80076c8:	0c02      	lsrs	r2, r0, #16
 80076ca:	0412      	lsls	r2, r2, #16
 80076cc:	4603      	mov	r3, r0
 80076ce:	b9ca      	cbnz	r2, 8007704 <__hi0bits+0x3c>
 80076d0:	0403      	lsls	r3, r0, #16
 80076d2:	2010      	movs	r0, #16
 80076d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80076d8:	bf04      	itt	eq
 80076da:	021b      	lsleq	r3, r3, #8
 80076dc:	3008      	addeq	r0, #8
 80076de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80076e2:	bf04      	itt	eq
 80076e4:	011b      	lsleq	r3, r3, #4
 80076e6:	3004      	addeq	r0, #4
 80076e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80076ec:	bf04      	itt	eq
 80076ee:	009b      	lsleq	r3, r3, #2
 80076f0:	3002      	addeq	r0, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	db05      	blt.n	8007702 <__hi0bits+0x3a>
 80076f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80076fa:	f100 0001 	add.w	r0, r0, #1
 80076fe:	bf08      	it	eq
 8007700:	2020      	moveq	r0, #32
 8007702:	4770      	bx	lr
 8007704:	2000      	movs	r0, #0
 8007706:	e7e5      	b.n	80076d4 <__hi0bits+0xc>

08007708 <__lo0bits>:
 8007708:	6803      	ldr	r3, [r0, #0]
 800770a:	4602      	mov	r2, r0
 800770c:	f013 0007 	ands.w	r0, r3, #7
 8007710:	d00b      	beq.n	800772a <__lo0bits+0x22>
 8007712:	07d9      	lsls	r1, r3, #31
 8007714:	d421      	bmi.n	800775a <__lo0bits+0x52>
 8007716:	0798      	lsls	r0, r3, #30
 8007718:	bf49      	itett	mi
 800771a:	085b      	lsrmi	r3, r3, #1
 800771c:	089b      	lsrpl	r3, r3, #2
 800771e:	2001      	movmi	r0, #1
 8007720:	6013      	strmi	r3, [r2, #0]
 8007722:	bf5c      	itt	pl
 8007724:	2002      	movpl	r0, #2
 8007726:	6013      	strpl	r3, [r2, #0]
 8007728:	4770      	bx	lr
 800772a:	b299      	uxth	r1, r3
 800772c:	b909      	cbnz	r1, 8007732 <__lo0bits+0x2a>
 800772e:	2010      	movs	r0, #16
 8007730:	0c1b      	lsrs	r3, r3, #16
 8007732:	b2d9      	uxtb	r1, r3
 8007734:	b909      	cbnz	r1, 800773a <__lo0bits+0x32>
 8007736:	3008      	adds	r0, #8
 8007738:	0a1b      	lsrs	r3, r3, #8
 800773a:	0719      	lsls	r1, r3, #28
 800773c:	bf04      	itt	eq
 800773e:	091b      	lsreq	r3, r3, #4
 8007740:	3004      	addeq	r0, #4
 8007742:	0799      	lsls	r1, r3, #30
 8007744:	bf04      	itt	eq
 8007746:	089b      	lsreq	r3, r3, #2
 8007748:	3002      	addeq	r0, #2
 800774a:	07d9      	lsls	r1, r3, #31
 800774c:	d403      	bmi.n	8007756 <__lo0bits+0x4e>
 800774e:	085b      	lsrs	r3, r3, #1
 8007750:	f100 0001 	add.w	r0, r0, #1
 8007754:	d003      	beq.n	800775e <__lo0bits+0x56>
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	4770      	bx	lr
 800775a:	2000      	movs	r0, #0
 800775c:	4770      	bx	lr
 800775e:	2020      	movs	r0, #32
 8007760:	4770      	bx	lr
	...

08007764 <__i2b>:
 8007764:	b510      	push	{r4, lr}
 8007766:	460c      	mov	r4, r1
 8007768:	2101      	movs	r1, #1
 800776a:	f7ff febb 	bl	80074e4 <_Balloc>
 800776e:	4602      	mov	r2, r0
 8007770:	b928      	cbnz	r0, 800777e <__i2b+0x1a>
 8007772:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007776:	4b04      	ldr	r3, [pc, #16]	; (8007788 <__i2b+0x24>)
 8007778:	4804      	ldr	r0, [pc, #16]	; (800778c <__i2b+0x28>)
 800777a:	f000 ff9b 	bl	80086b4 <__assert_func>
 800777e:	2301      	movs	r3, #1
 8007780:	6144      	str	r4, [r0, #20]
 8007782:	6103      	str	r3, [r0, #16]
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	0802cf38 	.word	0x0802cf38
 800778c:	0802d028 	.word	0x0802d028

08007790 <__multiply>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	4691      	mov	r9, r2
 8007796:	690a      	ldr	r2, [r1, #16]
 8007798:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800779c:	460c      	mov	r4, r1
 800779e:	429a      	cmp	r2, r3
 80077a0:	bfbe      	ittt	lt
 80077a2:	460b      	movlt	r3, r1
 80077a4:	464c      	movlt	r4, r9
 80077a6:	4699      	movlt	r9, r3
 80077a8:	6927      	ldr	r7, [r4, #16]
 80077aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077ae:	68a3      	ldr	r3, [r4, #8]
 80077b0:	6861      	ldr	r1, [r4, #4]
 80077b2:	eb07 060a 	add.w	r6, r7, sl
 80077b6:	42b3      	cmp	r3, r6
 80077b8:	b085      	sub	sp, #20
 80077ba:	bfb8      	it	lt
 80077bc:	3101      	addlt	r1, #1
 80077be:	f7ff fe91 	bl	80074e4 <_Balloc>
 80077c2:	b930      	cbnz	r0, 80077d2 <__multiply+0x42>
 80077c4:	4602      	mov	r2, r0
 80077c6:	f240 115d 	movw	r1, #349	; 0x15d
 80077ca:	4b43      	ldr	r3, [pc, #268]	; (80078d8 <__multiply+0x148>)
 80077cc:	4843      	ldr	r0, [pc, #268]	; (80078dc <__multiply+0x14c>)
 80077ce:	f000 ff71 	bl	80086b4 <__assert_func>
 80077d2:	f100 0514 	add.w	r5, r0, #20
 80077d6:	462b      	mov	r3, r5
 80077d8:	2200      	movs	r2, #0
 80077da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077de:	4543      	cmp	r3, r8
 80077e0:	d321      	bcc.n	8007826 <__multiply+0x96>
 80077e2:	f104 0314 	add.w	r3, r4, #20
 80077e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077ea:	f109 0314 	add.w	r3, r9, #20
 80077ee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077f2:	9202      	str	r2, [sp, #8]
 80077f4:	1b3a      	subs	r2, r7, r4
 80077f6:	3a15      	subs	r2, #21
 80077f8:	f022 0203 	bic.w	r2, r2, #3
 80077fc:	3204      	adds	r2, #4
 80077fe:	f104 0115 	add.w	r1, r4, #21
 8007802:	428f      	cmp	r7, r1
 8007804:	bf38      	it	cc
 8007806:	2204      	movcc	r2, #4
 8007808:	9201      	str	r2, [sp, #4]
 800780a:	9a02      	ldr	r2, [sp, #8]
 800780c:	9303      	str	r3, [sp, #12]
 800780e:	429a      	cmp	r2, r3
 8007810:	d80c      	bhi.n	800782c <__multiply+0x9c>
 8007812:	2e00      	cmp	r6, #0
 8007814:	dd03      	ble.n	800781e <__multiply+0x8e>
 8007816:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800781a:	2b00      	cmp	r3, #0
 800781c:	d059      	beq.n	80078d2 <__multiply+0x142>
 800781e:	6106      	str	r6, [r0, #16]
 8007820:	b005      	add	sp, #20
 8007822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007826:	f843 2b04 	str.w	r2, [r3], #4
 800782a:	e7d8      	b.n	80077de <__multiply+0x4e>
 800782c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007830:	f1ba 0f00 	cmp.w	sl, #0
 8007834:	d023      	beq.n	800787e <__multiply+0xee>
 8007836:	46a9      	mov	r9, r5
 8007838:	f04f 0c00 	mov.w	ip, #0
 800783c:	f104 0e14 	add.w	lr, r4, #20
 8007840:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007844:	f8d9 1000 	ldr.w	r1, [r9]
 8007848:	fa1f fb82 	uxth.w	fp, r2
 800784c:	b289      	uxth	r1, r1
 800784e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007852:	4461      	add	r1, ip
 8007854:	f8d9 c000 	ldr.w	ip, [r9]
 8007858:	0c12      	lsrs	r2, r2, #16
 800785a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800785e:	fb0a c202 	mla	r2, sl, r2, ip
 8007862:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007866:	b289      	uxth	r1, r1
 8007868:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800786c:	4577      	cmp	r7, lr
 800786e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007872:	f849 1b04 	str.w	r1, [r9], #4
 8007876:	d8e3      	bhi.n	8007840 <__multiply+0xb0>
 8007878:	9a01      	ldr	r2, [sp, #4]
 800787a:	f845 c002 	str.w	ip, [r5, r2]
 800787e:	9a03      	ldr	r2, [sp, #12]
 8007880:	3304      	adds	r3, #4
 8007882:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007886:	f1b9 0f00 	cmp.w	r9, #0
 800788a:	d020      	beq.n	80078ce <__multiply+0x13e>
 800788c:	46ae      	mov	lr, r5
 800788e:	f04f 0a00 	mov.w	sl, #0
 8007892:	6829      	ldr	r1, [r5, #0]
 8007894:	f104 0c14 	add.w	ip, r4, #20
 8007898:	f8bc b000 	ldrh.w	fp, [ip]
 800789c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078a0:	b289      	uxth	r1, r1
 80078a2:	fb09 220b 	mla	r2, r9, fp, r2
 80078a6:	4492      	add	sl, r2
 80078a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80078ac:	f84e 1b04 	str.w	r1, [lr], #4
 80078b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80078b4:	f8be 1000 	ldrh.w	r1, [lr]
 80078b8:	0c12      	lsrs	r2, r2, #16
 80078ba:	fb09 1102 	mla	r1, r9, r2, r1
 80078be:	4567      	cmp	r7, ip
 80078c0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80078c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078c8:	d8e6      	bhi.n	8007898 <__multiply+0x108>
 80078ca:	9a01      	ldr	r2, [sp, #4]
 80078cc:	50a9      	str	r1, [r5, r2]
 80078ce:	3504      	adds	r5, #4
 80078d0:	e79b      	b.n	800780a <__multiply+0x7a>
 80078d2:	3e01      	subs	r6, #1
 80078d4:	e79d      	b.n	8007812 <__multiply+0x82>
 80078d6:	bf00      	nop
 80078d8:	0802cf38 	.word	0x0802cf38
 80078dc:	0802d028 	.word	0x0802d028

080078e0 <__pow5mult>:
 80078e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e4:	4615      	mov	r5, r2
 80078e6:	f012 0203 	ands.w	r2, r2, #3
 80078ea:	4606      	mov	r6, r0
 80078ec:	460f      	mov	r7, r1
 80078ee:	d007      	beq.n	8007900 <__pow5mult+0x20>
 80078f0:	4c25      	ldr	r4, [pc, #148]	; (8007988 <__pow5mult+0xa8>)
 80078f2:	3a01      	subs	r2, #1
 80078f4:	2300      	movs	r3, #0
 80078f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078fa:	f7ff fe55 	bl	80075a8 <__multadd>
 80078fe:	4607      	mov	r7, r0
 8007900:	10ad      	asrs	r5, r5, #2
 8007902:	d03d      	beq.n	8007980 <__pow5mult+0xa0>
 8007904:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007906:	b97c      	cbnz	r4, 8007928 <__pow5mult+0x48>
 8007908:	2010      	movs	r0, #16
 800790a:	f7ff fdb5 	bl	8007478 <malloc>
 800790e:	4602      	mov	r2, r0
 8007910:	6270      	str	r0, [r6, #36]	; 0x24
 8007912:	b928      	cbnz	r0, 8007920 <__pow5mult+0x40>
 8007914:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007918:	4b1c      	ldr	r3, [pc, #112]	; (800798c <__pow5mult+0xac>)
 800791a:	481d      	ldr	r0, [pc, #116]	; (8007990 <__pow5mult+0xb0>)
 800791c:	f000 feca 	bl	80086b4 <__assert_func>
 8007920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007924:	6004      	str	r4, [r0, #0]
 8007926:	60c4      	str	r4, [r0, #12]
 8007928:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800792c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007930:	b94c      	cbnz	r4, 8007946 <__pow5mult+0x66>
 8007932:	f240 2171 	movw	r1, #625	; 0x271
 8007936:	4630      	mov	r0, r6
 8007938:	f7ff ff14 	bl	8007764 <__i2b>
 800793c:	2300      	movs	r3, #0
 800793e:	4604      	mov	r4, r0
 8007940:	f8c8 0008 	str.w	r0, [r8, #8]
 8007944:	6003      	str	r3, [r0, #0]
 8007946:	f04f 0900 	mov.w	r9, #0
 800794a:	07eb      	lsls	r3, r5, #31
 800794c:	d50a      	bpl.n	8007964 <__pow5mult+0x84>
 800794e:	4639      	mov	r1, r7
 8007950:	4622      	mov	r2, r4
 8007952:	4630      	mov	r0, r6
 8007954:	f7ff ff1c 	bl	8007790 <__multiply>
 8007958:	4680      	mov	r8, r0
 800795a:	4639      	mov	r1, r7
 800795c:	4630      	mov	r0, r6
 800795e:	f7ff fe01 	bl	8007564 <_Bfree>
 8007962:	4647      	mov	r7, r8
 8007964:	106d      	asrs	r5, r5, #1
 8007966:	d00b      	beq.n	8007980 <__pow5mult+0xa0>
 8007968:	6820      	ldr	r0, [r4, #0]
 800796a:	b938      	cbnz	r0, 800797c <__pow5mult+0x9c>
 800796c:	4622      	mov	r2, r4
 800796e:	4621      	mov	r1, r4
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff ff0d 	bl	8007790 <__multiply>
 8007976:	6020      	str	r0, [r4, #0]
 8007978:	f8c0 9000 	str.w	r9, [r0]
 800797c:	4604      	mov	r4, r0
 800797e:	e7e4      	b.n	800794a <__pow5mult+0x6a>
 8007980:	4638      	mov	r0, r7
 8007982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007986:	bf00      	nop
 8007988:	0802d178 	.word	0x0802d178
 800798c:	0802cec6 	.word	0x0802cec6
 8007990:	0802d028 	.word	0x0802d028

08007994 <__lshift>:
 8007994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	460c      	mov	r4, r1
 800799a:	4607      	mov	r7, r0
 800799c:	4691      	mov	r9, r2
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	6849      	ldr	r1, [r1, #4]
 80079a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079ac:	f108 0601 	add.w	r6, r8, #1
 80079b0:	42b3      	cmp	r3, r6
 80079b2:	db0b      	blt.n	80079cc <__lshift+0x38>
 80079b4:	4638      	mov	r0, r7
 80079b6:	f7ff fd95 	bl	80074e4 <_Balloc>
 80079ba:	4605      	mov	r5, r0
 80079bc:	b948      	cbnz	r0, 80079d2 <__lshift+0x3e>
 80079be:	4602      	mov	r2, r0
 80079c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079c4:	4b29      	ldr	r3, [pc, #164]	; (8007a6c <__lshift+0xd8>)
 80079c6:	482a      	ldr	r0, [pc, #168]	; (8007a70 <__lshift+0xdc>)
 80079c8:	f000 fe74 	bl	80086b4 <__assert_func>
 80079cc:	3101      	adds	r1, #1
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	e7ee      	b.n	80079b0 <__lshift+0x1c>
 80079d2:	2300      	movs	r3, #0
 80079d4:	f100 0114 	add.w	r1, r0, #20
 80079d8:	f100 0210 	add.w	r2, r0, #16
 80079dc:	4618      	mov	r0, r3
 80079de:	4553      	cmp	r3, sl
 80079e0:	db37      	blt.n	8007a52 <__lshift+0xbe>
 80079e2:	6920      	ldr	r0, [r4, #16]
 80079e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079e8:	f104 0314 	add.w	r3, r4, #20
 80079ec:	f019 091f 	ands.w	r9, r9, #31
 80079f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80079f8:	d02f      	beq.n	8007a5a <__lshift+0xc6>
 80079fa:	468a      	mov	sl, r1
 80079fc:	f04f 0c00 	mov.w	ip, #0
 8007a00:	f1c9 0e20 	rsb	lr, r9, #32
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	fa02 f209 	lsl.w	r2, r2, r9
 8007a0a:	ea42 020c 	orr.w	r2, r2, ip
 8007a0e:	f84a 2b04 	str.w	r2, [sl], #4
 8007a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a16:	4298      	cmp	r0, r3
 8007a18:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a1c:	d8f2      	bhi.n	8007a04 <__lshift+0x70>
 8007a1e:	1b03      	subs	r3, r0, r4
 8007a20:	3b15      	subs	r3, #21
 8007a22:	f023 0303 	bic.w	r3, r3, #3
 8007a26:	3304      	adds	r3, #4
 8007a28:	f104 0215 	add.w	r2, r4, #21
 8007a2c:	4290      	cmp	r0, r2
 8007a2e:	bf38      	it	cc
 8007a30:	2304      	movcc	r3, #4
 8007a32:	f841 c003 	str.w	ip, [r1, r3]
 8007a36:	f1bc 0f00 	cmp.w	ip, #0
 8007a3a:	d001      	beq.n	8007a40 <__lshift+0xac>
 8007a3c:	f108 0602 	add.w	r6, r8, #2
 8007a40:	3e01      	subs	r6, #1
 8007a42:	4638      	mov	r0, r7
 8007a44:	4621      	mov	r1, r4
 8007a46:	612e      	str	r6, [r5, #16]
 8007a48:	f7ff fd8c 	bl	8007564 <_Bfree>
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a56:	3301      	adds	r3, #1
 8007a58:	e7c1      	b.n	80079de <__lshift+0x4a>
 8007a5a:	3904      	subs	r1, #4
 8007a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a60:	4298      	cmp	r0, r3
 8007a62:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a66:	d8f9      	bhi.n	8007a5c <__lshift+0xc8>
 8007a68:	e7ea      	b.n	8007a40 <__lshift+0xac>
 8007a6a:	bf00      	nop
 8007a6c:	0802cf38 	.word	0x0802cf38
 8007a70:	0802d028 	.word	0x0802d028

08007a74 <__mcmp>:
 8007a74:	4603      	mov	r3, r0
 8007a76:	690a      	ldr	r2, [r1, #16]
 8007a78:	6900      	ldr	r0, [r0, #16]
 8007a7a:	b530      	push	{r4, r5, lr}
 8007a7c:	1a80      	subs	r0, r0, r2
 8007a7e:	d10d      	bne.n	8007a9c <__mcmp+0x28>
 8007a80:	3314      	adds	r3, #20
 8007a82:	3114      	adds	r1, #20
 8007a84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a94:	4295      	cmp	r5, r2
 8007a96:	d002      	beq.n	8007a9e <__mcmp+0x2a>
 8007a98:	d304      	bcc.n	8007aa4 <__mcmp+0x30>
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	bd30      	pop	{r4, r5, pc}
 8007a9e:	42a3      	cmp	r3, r4
 8007aa0:	d3f4      	bcc.n	8007a8c <__mcmp+0x18>
 8007aa2:	e7fb      	b.n	8007a9c <__mcmp+0x28>
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aa8:	e7f8      	b.n	8007a9c <__mcmp+0x28>
	...

08007aac <__mdiff>:
 8007aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	4614      	mov	r4, r2
 8007aba:	f7ff ffdb 	bl	8007a74 <__mcmp>
 8007abe:	1e06      	subs	r6, r0, #0
 8007ac0:	d111      	bne.n	8007ae6 <__mdiff+0x3a>
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	f7ff fd0d 	bl	80074e4 <_Balloc>
 8007aca:	4602      	mov	r2, r0
 8007acc:	b928      	cbnz	r0, 8007ada <__mdiff+0x2e>
 8007ace:	f240 2132 	movw	r1, #562	; 0x232
 8007ad2:	4b3a      	ldr	r3, [pc, #232]	; (8007bbc <__mdiff+0x110>)
 8007ad4:	483a      	ldr	r0, [pc, #232]	; (8007bc0 <__mdiff+0x114>)
 8007ad6:	f000 fded 	bl	80086b4 <__assert_func>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae6:	bfa4      	itt	ge
 8007ae8:	4623      	movge	r3, r4
 8007aea:	462c      	movge	r4, r5
 8007aec:	4638      	mov	r0, r7
 8007aee:	6861      	ldr	r1, [r4, #4]
 8007af0:	bfa6      	itte	ge
 8007af2:	461d      	movge	r5, r3
 8007af4:	2600      	movge	r6, #0
 8007af6:	2601      	movlt	r6, #1
 8007af8:	f7ff fcf4 	bl	80074e4 <_Balloc>
 8007afc:	4602      	mov	r2, r0
 8007afe:	b918      	cbnz	r0, 8007b08 <__mdiff+0x5c>
 8007b00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b04:	4b2d      	ldr	r3, [pc, #180]	; (8007bbc <__mdiff+0x110>)
 8007b06:	e7e5      	b.n	8007ad4 <__mdiff+0x28>
 8007b08:	f102 0814 	add.w	r8, r2, #20
 8007b0c:	46c2      	mov	sl, r8
 8007b0e:	f04f 0c00 	mov.w	ip, #0
 8007b12:	6927      	ldr	r7, [r4, #16]
 8007b14:	60c6      	str	r6, [r0, #12]
 8007b16:	692e      	ldr	r6, [r5, #16]
 8007b18:	f104 0014 	add.w	r0, r4, #20
 8007b1c:	f105 0914 	add.w	r9, r5, #20
 8007b20:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007b24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b28:	3410      	adds	r4, #16
 8007b2a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007b2e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b32:	fa1f f18b 	uxth.w	r1, fp
 8007b36:	448c      	add	ip, r1
 8007b38:	b299      	uxth	r1, r3
 8007b3a:	0c1b      	lsrs	r3, r3, #16
 8007b3c:	ebac 0101 	sub.w	r1, ip, r1
 8007b40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b44:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b48:	b289      	uxth	r1, r1
 8007b4a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007b4e:	454e      	cmp	r6, r9
 8007b50:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007b54:	f84a 3b04 	str.w	r3, [sl], #4
 8007b58:	d8e7      	bhi.n	8007b2a <__mdiff+0x7e>
 8007b5a:	1b73      	subs	r3, r6, r5
 8007b5c:	3b15      	subs	r3, #21
 8007b5e:	f023 0303 	bic.w	r3, r3, #3
 8007b62:	3515      	adds	r5, #21
 8007b64:	3304      	adds	r3, #4
 8007b66:	42ae      	cmp	r6, r5
 8007b68:	bf38      	it	cc
 8007b6a:	2304      	movcc	r3, #4
 8007b6c:	4418      	add	r0, r3
 8007b6e:	4443      	add	r3, r8
 8007b70:	461e      	mov	r6, r3
 8007b72:	4605      	mov	r5, r0
 8007b74:	4575      	cmp	r5, lr
 8007b76:	d30e      	bcc.n	8007b96 <__mdiff+0xea>
 8007b78:	f10e 0103 	add.w	r1, lr, #3
 8007b7c:	1a09      	subs	r1, r1, r0
 8007b7e:	f021 0103 	bic.w	r1, r1, #3
 8007b82:	3803      	subs	r0, #3
 8007b84:	4586      	cmp	lr, r0
 8007b86:	bf38      	it	cc
 8007b88:	2100      	movcc	r1, #0
 8007b8a:	4419      	add	r1, r3
 8007b8c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007b90:	b18b      	cbz	r3, 8007bb6 <__mdiff+0x10a>
 8007b92:	6117      	str	r7, [r2, #16]
 8007b94:	e7a4      	b.n	8007ae0 <__mdiff+0x34>
 8007b96:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b9a:	fa1f f188 	uxth.w	r1, r8
 8007b9e:	4461      	add	r1, ip
 8007ba0:	140c      	asrs	r4, r1, #16
 8007ba2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ba6:	b289      	uxth	r1, r1
 8007ba8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007bac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007bb0:	f846 1b04 	str.w	r1, [r6], #4
 8007bb4:	e7de      	b.n	8007b74 <__mdiff+0xc8>
 8007bb6:	3f01      	subs	r7, #1
 8007bb8:	e7e8      	b.n	8007b8c <__mdiff+0xe0>
 8007bba:	bf00      	nop
 8007bbc:	0802cf38 	.word	0x0802cf38
 8007bc0:	0802d028 	.word	0x0802d028

08007bc4 <__ulp>:
 8007bc4:	4b11      	ldr	r3, [pc, #68]	; (8007c0c <__ulp+0x48>)
 8007bc6:	400b      	ands	r3, r1
 8007bc8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dd02      	ble.n	8007bd6 <__ulp+0x12>
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4770      	bx	lr
 8007bd6:	425b      	negs	r3, r3
 8007bd8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007bdc:	f04f 0000 	mov.w	r0, #0
 8007be0:	f04f 0100 	mov.w	r1, #0
 8007be4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007be8:	da04      	bge.n	8007bf4 <__ulp+0x30>
 8007bea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007bee:	fa43 f102 	asr.w	r1, r3, r2
 8007bf2:	4770      	bx	lr
 8007bf4:	f1a2 0314 	sub.w	r3, r2, #20
 8007bf8:	2b1e      	cmp	r3, #30
 8007bfa:	bfd6      	itet	le
 8007bfc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007c00:	2301      	movgt	r3, #1
 8007c02:	fa22 f303 	lsrle.w	r3, r2, r3
 8007c06:	4618      	mov	r0, r3
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	7ff00000 	.word	0x7ff00000

08007c10 <__b2d>:
 8007c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c14:	6907      	ldr	r7, [r0, #16]
 8007c16:	f100 0914 	add.w	r9, r0, #20
 8007c1a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007c1e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007c22:	f1a7 0804 	sub.w	r8, r7, #4
 8007c26:	4630      	mov	r0, r6
 8007c28:	f7ff fd4e 	bl	80076c8 <__hi0bits>
 8007c2c:	f1c0 0320 	rsb	r3, r0, #32
 8007c30:	280a      	cmp	r0, #10
 8007c32:	600b      	str	r3, [r1, #0]
 8007c34:	491f      	ldr	r1, [pc, #124]	; (8007cb4 <__b2d+0xa4>)
 8007c36:	dc17      	bgt.n	8007c68 <__b2d+0x58>
 8007c38:	45c1      	cmp	r9, r8
 8007c3a:	bf28      	it	cs
 8007c3c:	2200      	movcs	r2, #0
 8007c3e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c42:	fa26 f30c 	lsr.w	r3, r6, ip
 8007c46:	bf38      	it	cc
 8007c48:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007c4c:	ea43 0501 	orr.w	r5, r3, r1
 8007c50:	f100 0315 	add.w	r3, r0, #21
 8007c54:	fa06 f303 	lsl.w	r3, r6, r3
 8007c58:	fa22 f20c 	lsr.w	r2, r2, ip
 8007c5c:	ea43 0402 	orr.w	r4, r3, r2
 8007c60:	4620      	mov	r0, r4
 8007c62:	4629      	mov	r1, r5
 8007c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c68:	45c1      	cmp	r9, r8
 8007c6a:	bf2e      	itee	cs
 8007c6c:	2200      	movcs	r2, #0
 8007c6e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007c72:	f1a7 0808 	subcc.w	r8, r7, #8
 8007c76:	f1b0 030b 	subs.w	r3, r0, #11
 8007c7a:	d016      	beq.n	8007caa <__b2d+0x9a>
 8007c7c:	f1c3 0720 	rsb	r7, r3, #32
 8007c80:	fa22 f107 	lsr.w	r1, r2, r7
 8007c84:	45c8      	cmp	r8, r9
 8007c86:	fa06 f603 	lsl.w	r6, r6, r3
 8007c8a:	ea46 0601 	orr.w	r6, r6, r1
 8007c8e:	bf94      	ite	ls
 8007c90:	2100      	movls	r1, #0
 8007c92:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007c96:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007c9a:	fa02 f003 	lsl.w	r0, r2, r3
 8007c9e:	40f9      	lsrs	r1, r7
 8007ca0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ca4:	ea40 0401 	orr.w	r4, r0, r1
 8007ca8:	e7da      	b.n	8007c60 <__b2d+0x50>
 8007caa:	4614      	mov	r4, r2
 8007cac:	ea46 0501 	orr.w	r5, r6, r1
 8007cb0:	e7d6      	b.n	8007c60 <__b2d+0x50>
 8007cb2:	bf00      	nop
 8007cb4:	3ff00000 	.word	0x3ff00000

08007cb8 <__d2b>:
 8007cb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007cc2:	4690      	mov	r8, r2
 8007cc4:	461d      	mov	r5, r3
 8007cc6:	f7ff fc0d 	bl	80074e4 <_Balloc>
 8007cca:	4604      	mov	r4, r0
 8007ccc:	b930      	cbnz	r0, 8007cdc <__d2b+0x24>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	f240 310a 	movw	r1, #778	; 0x30a
 8007cd4:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <__d2b+0xb0>)
 8007cd6:	4825      	ldr	r0, [pc, #148]	; (8007d6c <__d2b+0xb4>)
 8007cd8:	f000 fcec 	bl	80086b4 <__assert_func>
 8007cdc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007ce0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007ce4:	bb2d      	cbnz	r5, 8007d32 <__d2b+0x7a>
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	f1b8 0300 	subs.w	r3, r8, #0
 8007cec:	d026      	beq.n	8007d3c <__d2b+0x84>
 8007cee:	4668      	mov	r0, sp
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	f7ff fd09 	bl	8007708 <__lo0bits>
 8007cf6:	9900      	ldr	r1, [sp, #0]
 8007cf8:	b1f0      	cbz	r0, 8007d38 <__d2b+0x80>
 8007cfa:	9a01      	ldr	r2, [sp, #4]
 8007cfc:	f1c0 0320 	rsb	r3, r0, #32
 8007d00:	fa02 f303 	lsl.w	r3, r2, r3
 8007d04:	430b      	orrs	r3, r1
 8007d06:	40c2      	lsrs	r2, r0
 8007d08:	6163      	str	r3, [r4, #20]
 8007d0a:	9201      	str	r2, [sp, #4]
 8007d0c:	9b01      	ldr	r3, [sp, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bf14      	ite	ne
 8007d12:	2102      	movne	r1, #2
 8007d14:	2101      	moveq	r1, #1
 8007d16:	61a3      	str	r3, [r4, #24]
 8007d18:	6121      	str	r1, [r4, #16]
 8007d1a:	b1c5      	cbz	r5, 8007d4e <__d2b+0x96>
 8007d1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d20:	4405      	add	r5, r0
 8007d22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d26:	603d      	str	r5, [r7, #0]
 8007d28:	6030      	str	r0, [r6, #0]
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	b002      	add	sp, #8
 8007d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d36:	e7d6      	b.n	8007ce6 <__d2b+0x2e>
 8007d38:	6161      	str	r1, [r4, #20]
 8007d3a:	e7e7      	b.n	8007d0c <__d2b+0x54>
 8007d3c:	a801      	add	r0, sp, #4
 8007d3e:	f7ff fce3 	bl	8007708 <__lo0bits>
 8007d42:	2101      	movs	r1, #1
 8007d44:	9b01      	ldr	r3, [sp, #4]
 8007d46:	6121      	str	r1, [r4, #16]
 8007d48:	6163      	str	r3, [r4, #20]
 8007d4a:	3020      	adds	r0, #32
 8007d4c:	e7e5      	b.n	8007d1a <__d2b+0x62>
 8007d4e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007d52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d56:	6038      	str	r0, [r7, #0]
 8007d58:	6918      	ldr	r0, [r3, #16]
 8007d5a:	f7ff fcb5 	bl	80076c8 <__hi0bits>
 8007d5e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007d62:	6031      	str	r1, [r6, #0]
 8007d64:	e7e1      	b.n	8007d2a <__d2b+0x72>
 8007d66:	bf00      	nop
 8007d68:	0802cf38 	.word	0x0802cf38
 8007d6c:	0802d028 	.word	0x0802d028

08007d70 <__ratio>:
 8007d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	4688      	mov	r8, r1
 8007d76:	4669      	mov	r1, sp
 8007d78:	4681      	mov	r9, r0
 8007d7a:	f7ff ff49 	bl	8007c10 <__b2d>
 8007d7e:	460f      	mov	r7, r1
 8007d80:	4604      	mov	r4, r0
 8007d82:	460d      	mov	r5, r1
 8007d84:	4640      	mov	r0, r8
 8007d86:	a901      	add	r1, sp, #4
 8007d88:	f7ff ff42 	bl	8007c10 <__b2d>
 8007d8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d90:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d94:	468b      	mov	fp, r1
 8007d96:	eba3 0c02 	sub.w	ip, r3, r2
 8007d9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bfd5      	itete	le
 8007da8:	460a      	movle	r2, r1
 8007daa:	462a      	movgt	r2, r5
 8007dac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007db0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007db4:	bfd8      	it	le
 8007db6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007dba:	465b      	mov	r3, fp
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f7f8 fd1f 	bl	8000804 <__aeabi_ddiv>
 8007dc6:	b003      	add	sp, #12
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dcc <__copybits>:
 8007dcc:	3901      	subs	r1, #1
 8007dce:	b570      	push	{r4, r5, r6, lr}
 8007dd0:	1149      	asrs	r1, r1, #5
 8007dd2:	6914      	ldr	r4, [r2, #16]
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	f102 0314 	add.w	r3, r2, #20
 8007dda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007dde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007de2:	1f05      	subs	r5, r0, #4
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	d30c      	bcc.n	8007e02 <__copybits+0x36>
 8007de8:	1aa3      	subs	r3, r4, r2
 8007dea:	3b11      	subs	r3, #17
 8007dec:	f023 0303 	bic.w	r3, r3, #3
 8007df0:	3211      	adds	r2, #17
 8007df2:	42a2      	cmp	r2, r4
 8007df4:	bf88      	it	hi
 8007df6:	2300      	movhi	r3, #0
 8007df8:	4418      	add	r0, r3
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4288      	cmp	r0, r1
 8007dfe:	d305      	bcc.n	8007e0c <__copybits+0x40>
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e06:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e0a:	e7eb      	b.n	8007de4 <__copybits+0x18>
 8007e0c:	f840 3b04 	str.w	r3, [r0], #4
 8007e10:	e7f4      	b.n	8007dfc <__copybits+0x30>

08007e12 <__any_on>:
 8007e12:	f100 0214 	add.w	r2, r0, #20
 8007e16:	6900      	ldr	r0, [r0, #16]
 8007e18:	114b      	asrs	r3, r1, #5
 8007e1a:	4298      	cmp	r0, r3
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	db11      	blt.n	8007e44 <__any_on+0x32>
 8007e20:	dd0a      	ble.n	8007e38 <__any_on+0x26>
 8007e22:	f011 011f 	ands.w	r1, r1, #31
 8007e26:	d007      	beq.n	8007e38 <__any_on+0x26>
 8007e28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e2c:	fa24 f001 	lsr.w	r0, r4, r1
 8007e30:	fa00 f101 	lsl.w	r1, r0, r1
 8007e34:	428c      	cmp	r4, r1
 8007e36:	d10b      	bne.n	8007e50 <__any_on+0x3e>
 8007e38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d803      	bhi.n	8007e48 <__any_on+0x36>
 8007e40:	2000      	movs	r0, #0
 8007e42:	bd10      	pop	{r4, pc}
 8007e44:	4603      	mov	r3, r0
 8007e46:	e7f7      	b.n	8007e38 <__any_on+0x26>
 8007e48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	d0f5      	beq.n	8007e3c <__any_on+0x2a>
 8007e50:	2001      	movs	r0, #1
 8007e52:	e7f6      	b.n	8007e42 <__any_on+0x30>

08007e54 <_calloc_r>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	fba1 5402 	umull	r5, r4, r1, r2
 8007e5a:	b934      	cbnz	r4, 8007e6a <_calloc_r+0x16>
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f000 f875 	bl	8007f4c <_malloc_r>
 8007e62:	4606      	mov	r6, r0
 8007e64:	b928      	cbnz	r0, 8007e72 <_calloc_r+0x1e>
 8007e66:	4630      	mov	r0, r6
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	220c      	movs	r2, #12
 8007e6c:	2600      	movs	r6, #0
 8007e6e:	6002      	str	r2, [r0, #0]
 8007e70:	e7f9      	b.n	8007e66 <_calloc_r+0x12>
 8007e72:	462a      	mov	r2, r5
 8007e74:	4621      	mov	r1, r4
 8007e76:	f7fc f8f5 	bl	8004064 <memset>
 8007e7a:	e7f4      	b.n	8007e66 <_calloc_r+0x12>

08007e7c <_free_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4605      	mov	r5, r0
 8007e80:	2900      	cmp	r1, #0
 8007e82:	d040      	beq.n	8007f06 <_free_r+0x8a>
 8007e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e88:	1f0c      	subs	r4, r1, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	bfb8      	it	lt
 8007e8e:	18e4      	addlt	r4, r4, r3
 8007e90:	f000 fc9e 	bl	80087d0 <__malloc_lock>
 8007e94:	4a1c      	ldr	r2, [pc, #112]	; (8007f08 <_free_r+0x8c>)
 8007e96:	6813      	ldr	r3, [r2, #0]
 8007e98:	b933      	cbnz	r3, 8007ea8 <_free_r+0x2c>
 8007e9a:	6063      	str	r3, [r4, #4]
 8007e9c:	6014      	str	r4, [r2, #0]
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea4:	f000 bc9a 	b.w	80087dc <__malloc_unlock>
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	d908      	bls.n	8007ebe <_free_r+0x42>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	1821      	adds	r1, r4, r0
 8007eb0:	428b      	cmp	r3, r1
 8007eb2:	bf01      	itttt	eq
 8007eb4:	6819      	ldreq	r1, [r3, #0]
 8007eb6:	685b      	ldreq	r3, [r3, #4]
 8007eb8:	1809      	addeq	r1, r1, r0
 8007eba:	6021      	streq	r1, [r4, #0]
 8007ebc:	e7ed      	b.n	8007e9a <_free_r+0x1e>
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	b10b      	cbz	r3, 8007ec8 <_free_r+0x4c>
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	d9fa      	bls.n	8007ebe <_free_r+0x42>
 8007ec8:	6811      	ldr	r1, [r2, #0]
 8007eca:	1850      	adds	r0, r2, r1
 8007ecc:	42a0      	cmp	r0, r4
 8007ece:	d10b      	bne.n	8007ee8 <_free_r+0x6c>
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	4401      	add	r1, r0
 8007ed4:	1850      	adds	r0, r2, r1
 8007ed6:	4283      	cmp	r3, r0
 8007ed8:	6011      	str	r1, [r2, #0]
 8007eda:	d1e0      	bne.n	8007e9e <_free_r+0x22>
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4401      	add	r1, r0
 8007ee2:	6011      	str	r1, [r2, #0]
 8007ee4:	6053      	str	r3, [r2, #4]
 8007ee6:	e7da      	b.n	8007e9e <_free_r+0x22>
 8007ee8:	d902      	bls.n	8007ef0 <_free_r+0x74>
 8007eea:	230c      	movs	r3, #12
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	e7d6      	b.n	8007e9e <_free_r+0x22>
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	1821      	adds	r1, r4, r0
 8007ef4:	428b      	cmp	r3, r1
 8007ef6:	bf01      	itttt	eq
 8007ef8:	6819      	ldreq	r1, [r3, #0]
 8007efa:	685b      	ldreq	r3, [r3, #4]
 8007efc:	1809      	addeq	r1, r1, r0
 8007efe:	6021      	streq	r1, [r4, #0]
 8007f00:	6063      	str	r3, [r4, #4]
 8007f02:	6054      	str	r4, [r2, #4]
 8007f04:	e7cb      	b.n	8007e9e <_free_r+0x22>
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	200004d4 	.word	0x200004d4

08007f0c <sbrk_aligned>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	4e0e      	ldr	r6, [pc, #56]	; (8007f48 <sbrk_aligned+0x3c>)
 8007f10:	460c      	mov	r4, r1
 8007f12:	6831      	ldr	r1, [r6, #0]
 8007f14:	4605      	mov	r5, r0
 8007f16:	b911      	cbnz	r1, 8007f1e <sbrk_aligned+0x12>
 8007f18:	f000 fb46 	bl	80085a8 <_sbrk_r>
 8007f1c:	6030      	str	r0, [r6, #0]
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	f000 fb41 	bl	80085a8 <_sbrk_r>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	d00a      	beq.n	8007f40 <sbrk_aligned+0x34>
 8007f2a:	1cc4      	adds	r4, r0, #3
 8007f2c:	f024 0403 	bic.w	r4, r4, #3
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	d007      	beq.n	8007f44 <sbrk_aligned+0x38>
 8007f34:	1a21      	subs	r1, r4, r0
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 fb36 	bl	80085a8 <_sbrk_r>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d101      	bne.n	8007f44 <sbrk_aligned+0x38>
 8007f40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007f44:	4620      	mov	r0, r4
 8007f46:	bd70      	pop	{r4, r5, r6, pc}
 8007f48:	200004d8 	.word	0x200004d8

08007f4c <_malloc_r>:
 8007f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f50:	1ccd      	adds	r5, r1, #3
 8007f52:	f025 0503 	bic.w	r5, r5, #3
 8007f56:	3508      	adds	r5, #8
 8007f58:	2d0c      	cmp	r5, #12
 8007f5a:	bf38      	it	cc
 8007f5c:	250c      	movcc	r5, #12
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	4607      	mov	r7, r0
 8007f62:	db01      	blt.n	8007f68 <_malloc_r+0x1c>
 8007f64:	42a9      	cmp	r1, r5
 8007f66:	d905      	bls.n	8007f74 <_malloc_r+0x28>
 8007f68:	230c      	movs	r3, #12
 8007f6a:	2600      	movs	r6, #0
 8007f6c:	603b      	str	r3, [r7, #0]
 8007f6e:	4630      	mov	r0, r6
 8007f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f74:	4e2e      	ldr	r6, [pc, #184]	; (8008030 <_malloc_r+0xe4>)
 8007f76:	f000 fc2b 	bl	80087d0 <__malloc_lock>
 8007f7a:	6833      	ldr	r3, [r6, #0]
 8007f7c:	461c      	mov	r4, r3
 8007f7e:	bb34      	cbnz	r4, 8007fce <_malloc_r+0x82>
 8007f80:	4629      	mov	r1, r5
 8007f82:	4638      	mov	r0, r7
 8007f84:	f7ff ffc2 	bl	8007f0c <sbrk_aligned>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	d14d      	bne.n	800802a <_malloc_r+0xde>
 8007f8e:	6834      	ldr	r4, [r6, #0]
 8007f90:	4626      	mov	r6, r4
 8007f92:	2e00      	cmp	r6, #0
 8007f94:	d140      	bne.n	8008018 <_malloc_r+0xcc>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4638      	mov	r0, r7
 8007f9c:	eb04 0803 	add.w	r8, r4, r3
 8007fa0:	f000 fb02 	bl	80085a8 <_sbrk_r>
 8007fa4:	4580      	cmp	r8, r0
 8007fa6:	d13a      	bne.n	800801e <_malloc_r+0xd2>
 8007fa8:	6821      	ldr	r1, [r4, #0]
 8007faa:	3503      	adds	r5, #3
 8007fac:	1a6d      	subs	r5, r5, r1
 8007fae:	f025 0503 	bic.w	r5, r5, #3
 8007fb2:	3508      	adds	r5, #8
 8007fb4:	2d0c      	cmp	r5, #12
 8007fb6:	bf38      	it	cc
 8007fb8:	250c      	movcc	r5, #12
 8007fba:	4638      	mov	r0, r7
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	f7ff ffa5 	bl	8007f0c <sbrk_aligned>
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d02b      	beq.n	800801e <_malloc_r+0xd2>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	442b      	add	r3, r5
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	e00e      	b.n	8007fec <_malloc_r+0xa0>
 8007fce:	6822      	ldr	r2, [r4, #0]
 8007fd0:	1b52      	subs	r2, r2, r5
 8007fd2:	d41e      	bmi.n	8008012 <_malloc_r+0xc6>
 8007fd4:	2a0b      	cmp	r2, #11
 8007fd6:	d916      	bls.n	8008006 <_malloc_r+0xba>
 8007fd8:	1961      	adds	r1, r4, r5
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	6025      	str	r5, [r4, #0]
 8007fde:	bf18      	it	ne
 8007fe0:	6059      	strne	r1, [r3, #4]
 8007fe2:	6863      	ldr	r3, [r4, #4]
 8007fe4:	bf08      	it	eq
 8007fe6:	6031      	streq	r1, [r6, #0]
 8007fe8:	5162      	str	r2, [r4, r5]
 8007fea:	604b      	str	r3, [r1, #4]
 8007fec:	4638      	mov	r0, r7
 8007fee:	f104 060b 	add.w	r6, r4, #11
 8007ff2:	f000 fbf3 	bl	80087dc <__malloc_unlock>
 8007ff6:	f026 0607 	bic.w	r6, r6, #7
 8007ffa:	1d23      	adds	r3, r4, #4
 8007ffc:	1af2      	subs	r2, r6, r3
 8007ffe:	d0b6      	beq.n	8007f6e <_malloc_r+0x22>
 8008000:	1b9b      	subs	r3, r3, r6
 8008002:	50a3      	str	r3, [r4, r2]
 8008004:	e7b3      	b.n	8007f6e <_malloc_r+0x22>
 8008006:	6862      	ldr	r2, [r4, #4]
 8008008:	42a3      	cmp	r3, r4
 800800a:	bf0c      	ite	eq
 800800c:	6032      	streq	r2, [r6, #0]
 800800e:	605a      	strne	r2, [r3, #4]
 8008010:	e7ec      	b.n	8007fec <_malloc_r+0xa0>
 8008012:	4623      	mov	r3, r4
 8008014:	6864      	ldr	r4, [r4, #4]
 8008016:	e7b2      	b.n	8007f7e <_malloc_r+0x32>
 8008018:	4634      	mov	r4, r6
 800801a:	6876      	ldr	r6, [r6, #4]
 800801c:	e7b9      	b.n	8007f92 <_malloc_r+0x46>
 800801e:	230c      	movs	r3, #12
 8008020:	4638      	mov	r0, r7
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	f000 fbda 	bl	80087dc <__malloc_unlock>
 8008028:	e7a1      	b.n	8007f6e <_malloc_r+0x22>
 800802a:	6025      	str	r5, [r4, #0]
 800802c:	e7de      	b.n	8007fec <_malloc_r+0xa0>
 800802e:	bf00      	nop
 8008030:	200004d4 	.word	0x200004d4

08008034 <__ssputs_r>:
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	688e      	ldr	r6, [r1, #8]
 800803a:	4682      	mov	sl, r0
 800803c:	429e      	cmp	r6, r3
 800803e:	460c      	mov	r4, r1
 8008040:	4690      	mov	r8, r2
 8008042:	461f      	mov	r7, r3
 8008044:	d838      	bhi.n	80080b8 <__ssputs_r+0x84>
 8008046:	898a      	ldrh	r2, [r1, #12]
 8008048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800804c:	d032      	beq.n	80080b4 <__ssputs_r+0x80>
 800804e:	6825      	ldr	r5, [r4, #0]
 8008050:	6909      	ldr	r1, [r1, #16]
 8008052:	3301      	adds	r3, #1
 8008054:	eba5 0901 	sub.w	r9, r5, r1
 8008058:	6965      	ldr	r5, [r4, #20]
 800805a:	444b      	add	r3, r9
 800805c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008060:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008064:	106d      	asrs	r5, r5, #1
 8008066:	429d      	cmp	r5, r3
 8008068:	bf38      	it	cc
 800806a:	461d      	movcc	r5, r3
 800806c:	0553      	lsls	r3, r2, #21
 800806e:	d531      	bpl.n	80080d4 <__ssputs_r+0xa0>
 8008070:	4629      	mov	r1, r5
 8008072:	f7ff ff6b 	bl	8007f4c <_malloc_r>
 8008076:	4606      	mov	r6, r0
 8008078:	b950      	cbnz	r0, 8008090 <__ssputs_r+0x5c>
 800807a:	230c      	movs	r3, #12
 800807c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008080:	f8ca 3000 	str.w	r3, [sl]
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808a:	81a3      	strh	r3, [r4, #12]
 800808c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008090:	464a      	mov	r2, r9
 8008092:	6921      	ldr	r1, [r4, #16]
 8008094:	f7ff fa18 	bl	80074c8 <memcpy>
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800809e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	6126      	str	r6, [r4, #16]
 80080a6:	444e      	add	r6, r9
 80080a8:	6026      	str	r6, [r4, #0]
 80080aa:	463e      	mov	r6, r7
 80080ac:	6165      	str	r5, [r4, #20]
 80080ae:	eba5 0509 	sub.w	r5, r5, r9
 80080b2:	60a5      	str	r5, [r4, #8]
 80080b4:	42be      	cmp	r6, r7
 80080b6:	d900      	bls.n	80080ba <__ssputs_r+0x86>
 80080b8:	463e      	mov	r6, r7
 80080ba:	4632      	mov	r2, r6
 80080bc:	4641      	mov	r1, r8
 80080be:	6820      	ldr	r0, [r4, #0]
 80080c0:	f000 fb6c 	bl	800879c <memmove>
 80080c4:	68a3      	ldr	r3, [r4, #8]
 80080c6:	2000      	movs	r0, #0
 80080c8:	1b9b      	subs	r3, r3, r6
 80080ca:	60a3      	str	r3, [r4, #8]
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	4433      	add	r3, r6
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	e7db      	b.n	800808c <__ssputs_r+0x58>
 80080d4:	462a      	mov	r2, r5
 80080d6:	f000 fb87 	bl	80087e8 <_realloc_r>
 80080da:	4606      	mov	r6, r0
 80080dc:	2800      	cmp	r0, #0
 80080de:	d1e1      	bne.n	80080a4 <__ssputs_r+0x70>
 80080e0:	4650      	mov	r0, sl
 80080e2:	6921      	ldr	r1, [r4, #16]
 80080e4:	f7ff feca 	bl	8007e7c <_free_r>
 80080e8:	e7c7      	b.n	800807a <__ssputs_r+0x46>
	...

080080ec <_svfiprintf_r>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	4698      	mov	r8, r3
 80080f2:	898b      	ldrh	r3, [r1, #12]
 80080f4:	4607      	mov	r7, r0
 80080f6:	061b      	lsls	r3, r3, #24
 80080f8:	460d      	mov	r5, r1
 80080fa:	4614      	mov	r4, r2
 80080fc:	b09d      	sub	sp, #116	; 0x74
 80080fe:	d50e      	bpl.n	800811e <_svfiprintf_r+0x32>
 8008100:	690b      	ldr	r3, [r1, #16]
 8008102:	b963      	cbnz	r3, 800811e <_svfiprintf_r+0x32>
 8008104:	2140      	movs	r1, #64	; 0x40
 8008106:	f7ff ff21 	bl	8007f4c <_malloc_r>
 800810a:	6028      	str	r0, [r5, #0]
 800810c:	6128      	str	r0, [r5, #16]
 800810e:	b920      	cbnz	r0, 800811a <_svfiprintf_r+0x2e>
 8008110:	230c      	movs	r3, #12
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008118:	e0d1      	b.n	80082be <_svfiprintf_r+0x1d2>
 800811a:	2340      	movs	r3, #64	; 0x40
 800811c:	616b      	str	r3, [r5, #20]
 800811e:	2300      	movs	r3, #0
 8008120:	9309      	str	r3, [sp, #36]	; 0x24
 8008122:	2320      	movs	r3, #32
 8008124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008128:	2330      	movs	r3, #48	; 0x30
 800812a:	f04f 0901 	mov.w	r9, #1
 800812e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008132:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082d8 <_svfiprintf_r+0x1ec>
 8008136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800813a:	4623      	mov	r3, r4
 800813c:	469a      	mov	sl, r3
 800813e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008142:	b10a      	cbz	r2, 8008148 <_svfiprintf_r+0x5c>
 8008144:	2a25      	cmp	r2, #37	; 0x25
 8008146:	d1f9      	bne.n	800813c <_svfiprintf_r+0x50>
 8008148:	ebba 0b04 	subs.w	fp, sl, r4
 800814c:	d00b      	beq.n	8008166 <_svfiprintf_r+0x7a>
 800814e:	465b      	mov	r3, fp
 8008150:	4622      	mov	r2, r4
 8008152:	4629      	mov	r1, r5
 8008154:	4638      	mov	r0, r7
 8008156:	f7ff ff6d 	bl	8008034 <__ssputs_r>
 800815a:	3001      	adds	r0, #1
 800815c:	f000 80aa 	beq.w	80082b4 <_svfiprintf_r+0x1c8>
 8008160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008162:	445a      	add	r2, fp
 8008164:	9209      	str	r2, [sp, #36]	; 0x24
 8008166:	f89a 3000 	ldrb.w	r3, [sl]
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 80a2 	beq.w	80082b4 <_svfiprintf_r+0x1c8>
 8008170:	2300      	movs	r3, #0
 8008172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800817a:	f10a 0a01 	add.w	sl, sl, #1
 800817e:	9304      	str	r3, [sp, #16]
 8008180:	9307      	str	r3, [sp, #28]
 8008182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008186:	931a      	str	r3, [sp, #104]	; 0x68
 8008188:	4654      	mov	r4, sl
 800818a:	2205      	movs	r2, #5
 800818c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008190:	4851      	ldr	r0, [pc, #324]	; (80082d8 <_svfiprintf_r+0x1ec>)
 8008192:	f7ff f98b 	bl	80074ac <memchr>
 8008196:	9a04      	ldr	r2, [sp, #16]
 8008198:	b9d8      	cbnz	r0, 80081d2 <_svfiprintf_r+0xe6>
 800819a:	06d0      	lsls	r0, r2, #27
 800819c:	bf44      	itt	mi
 800819e:	2320      	movmi	r3, #32
 80081a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081a4:	0711      	lsls	r1, r2, #28
 80081a6:	bf44      	itt	mi
 80081a8:	232b      	movmi	r3, #43	; 0x2b
 80081aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ae:	f89a 3000 	ldrb.w	r3, [sl]
 80081b2:	2b2a      	cmp	r3, #42	; 0x2a
 80081b4:	d015      	beq.n	80081e2 <_svfiprintf_r+0xf6>
 80081b6:	4654      	mov	r4, sl
 80081b8:	2000      	movs	r0, #0
 80081ba:	f04f 0c0a 	mov.w	ip, #10
 80081be:	9a07      	ldr	r2, [sp, #28]
 80081c0:	4621      	mov	r1, r4
 80081c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081c6:	3b30      	subs	r3, #48	; 0x30
 80081c8:	2b09      	cmp	r3, #9
 80081ca:	d94e      	bls.n	800826a <_svfiprintf_r+0x17e>
 80081cc:	b1b0      	cbz	r0, 80081fc <_svfiprintf_r+0x110>
 80081ce:	9207      	str	r2, [sp, #28]
 80081d0:	e014      	b.n	80081fc <_svfiprintf_r+0x110>
 80081d2:	eba0 0308 	sub.w	r3, r0, r8
 80081d6:	fa09 f303 	lsl.w	r3, r9, r3
 80081da:	4313      	orrs	r3, r2
 80081dc:	46a2      	mov	sl, r4
 80081de:	9304      	str	r3, [sp, #16]
 80081e0:	e7d2      	b.n	8008188 <_svfiprintf_r+0x9c>
 80081e2:	9b03      	ldr	r3, [sp, #12]
 80081e4:	1d19      	adds	r1, r3, #4
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	9103      	str	r1, [sp, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	bfbb      	ittet	lt
 80081ee:	425b      	neglt	r3, r3
 80081f0:	f042 0202 	orrlt.w	r2, r2, #2
 80081f4:	9307      	strge	r3, [sp, #28]
 80081f6:	9307      	strlt	r3, [sp, #28]
 80081f8:	bfb8      	it	lt
 80081fa:	9204      	strlt	r2, [sp, #16]
 80081fc:	7823      	ldrb	r3, [r4, #0]
 80081fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008200:	d10c      	bne.n	800821c <_svfiprintf_r+0x130>
 8008202:	7863      	ldrb	r3, [r4, #1]
 8008204:	2b2a      	cmp	r3, #42	; 0x2a
 8008206:	d135      	bne.n	8008274 <_svfiprintf_r+0x188>
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	3402      	adds	r4, #2
 800820c:	1d1a      	adds	r2, r3, #4
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	9203      	str	r2, [sp, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	bfb8      	it	lt
 8008216:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800821a:	9305      	str	r3, [sp, #20]
 800821c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80082dc <_svfiprintf_r+0x1f0>
 8008220:	2203      	movs	r2, #3
 8008222:	4650      	mov	r0, sl
 8008224:	7821      	ldrb	r1, [r4, #0]
 8008226:	f7ff f941 	bl	80074ac <memchr>
 800822a:	b140      	cbz	r0, 800823e <_svfiprintf_r+0x152>
 800822c:	2340      	movs	r3, #64	; 0x40
 800822e:	eba0 000a 	sub.w	r0, r0, sl
 8008232:	fa03 f000 	lsl.w	r0, r3, r0
 8008236:	9b04      	ldr	r3, [sp, #16]
 8008238:	3401      	adds	r4, #1
 800823a:	4303      	orrs	r3, r0
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008242:	2206      	movs	r2, #6
 8008244:	4826      	ldr	r0, [pc, #152]	; (80082e0 <_svfiprintf_r+0x1f4>)
 8008246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800824a:	f7ff f92f 	bl	80074ac <memchr>
 800824e:	2800      	cmp	r0, #0
 8008250:	d038      	beq.n	80082c4 <_svfiprintf_r+0x1d8>
 8008252:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <_svfiprintf_r+0x1f8>)
 8008254:	bb1b      	cbnz	r3, 800829e <_svfiprintf_r+0x1b2>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	3307      	adds	r3, #7
 800825a:	f023 0307 	bic.w	r3, r3, #7
 800825e:	3308      	adds	r3, #8
 8008260:	9303      	str	r3, [sp, #12]
 8008262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008264:	4433      	add	r3, r6
 8008266:	9309      	str	r3, [sp, #36]	; 0x24
 8008268:	e767      	b.n	800813a <_svfiprintf_r+0x4e>
 800826a:	460c      	mov	r4, r1
 800826c:	2001      	movs	r0, #1
 800826e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008272:	e7a5      	b.n	80081c0 <_svfiprintf_r+0xd4>
 8008274:	2300      	movs	r3, #0
 8008276:	f04f 0c0a 	mov.w	ip, #10
 800827a:	4619      	mov	r1, r3
 800827c:	3401      	adds	r4, #1
 800827e:	9305      	str	r3, [sp, #20]
 8008280:	4620      	mov	r0, r4
 8008282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008286:	3a30      	subs	r2, #48	; 0x30
 8008288:	2a09      	cmp	r2, #9
 800828a:	d903      	bls.n	8008294 <_svfiprintf_r+0x1a8>
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0c5      	beq.n	800821c <_svfiprintf_r+0x130>
 8008290:	9105      	str	r1, [sp, #20]
 8008292:	e7c3      	b.n	800821c <_svfiprintf_r+0x130>
 8008294:	4604      	mov	r4, r0
 8008296:	2301      	movs	r3, #1
 8008298:	fb0c 2101 	mla	r1, ip, r1, r2
 800829c:	e7f0      	b.n	8008280 <_svfiprintf_r+0x194>
 800829e:	ab03      	add	r3, sp, #12
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	462a      	mov	r2, r5
 80082a4:	4638      	mov	r0, r7
 80082a6:	4b10      	ldr	r3, [pc, #64]	; (80082e8 <_svfiprintf_r+0x1fc>)
 80082a8:	a904      	add	r1, sp, #16
 80082aa:	f7fb ff81 	bl	80041b0 <_printf_float>
 80082ae:	1c42      	adds	r2, r0, #1
 80082b0:	4606      	mov	r6, r0
 80082b2:	d1d6      	bne.n	8008262 <_svfiprintf_r+0x176>
 80082b4:	89ab      	ldrh	r3, [r5, #12]
 80082b6:	065b      	lsls	r3, r3, #25
 80082b8:	f53f af2c 	bmi.w	8008114 <_svfiprintf_r+0x28>
 80082bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082be:	b01d      	add	sp, #116	; 0x74
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	ab03      	add	r3, sp, #12
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	462a      	mov	r2, r5
 80082ca:	4638      	mov	r0, r7
 80082cc:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <_svfiprintf_r+0x1fc>)
 80082ce:	a904      	add	r1, sp, #16
 80082d0:	f7fc fa0a 	bl	80046e8 <_printf_i>
 80082d4:	e7eb      	b.n	80082ae <_svfiprintf_r+0x1c2>
 80082d6:	bf00      	nop
 80082d8:	0802d184 	.word	0x0802d184
 80082dc:	0802d18a 	.word	0x0802d18a
 80082e0:	0802d18e 	.word	0x0802d18e
 80082e4:	080041b1 	.word	0x080041b1
 80082e8:	08008035 	.word	0x08008035

080082ec <__sfputc_r>:
 80082ec:	6893      	ldr	r3, [r2, #8]
 80082ee:	b410      	push	{r4}
 80082f0:	3b01      	subs	r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	6093      	str	r3, [r2, #8]
 80082f6:	da07      	bge.n	8008308 <__sfputc_r+0x1c>
 80082f8:	6994      	ldr	r4, [r2, #24]
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	db01      	blt.n	8008302 <__sfputc_r+0x16>
 80082fe:	290a      	cmp	r1, #10
 8008300:	d102      	bne.n	8008308 <__sfputc_r+0x1c>
 8008302:	bc10      	pop	{r4}
 8008304:	f7fd bbf8 	b.w	8005af8 <__swbuf_r>
 8008308:	6813      	ldr	r3, [r2, #0]
 800830a:	1c58      	adds	r0, r3, #1
 800830c:	6010      	str	r0, [r2, #0]
 800830e:	7019      	strb	r1, [r3, #0]
 8008310:	4608      	mov	r0, r1
 8008312:	bc10      	pop	{r4}
 8008314:	4770      	bx	lr

08008316 <__sfputs_r>:
 8008316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008318:	4606      	mov	r6, r0
 800831a:	460f      	mov	r7, r1
 800831c:	4614      	mov	r4, r2
 800831e:	18d5      	adds	r5, r2, r3
 8008320:	42ac      	cmp	r4, r5
 8008322:	d101      	bne.n	8008328 <__sfputs_r+0x12>
 8008324:	2000      	movs	r0, #0
 8008326:	e007      	b.n	8008338 <__sfputs_r+0x22>
 8008328:	463a      	mov	r2, r7
 800832a:	4630      	mov	r0, r6
 800832c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008330:	f7ff ffdc 	bl	80082ec <__sfputc_r>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d1f3      	bne.n	8008320 <__sfputs_r+0xa>
 8008338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800833c <_vfiprintf_r>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	460d      	mov	r5, r1
 8008342:	4614      	mov	r4, r2
 8008344:	4698      	mov	r8, r3
 8008346:	4606      	mov	r6, r0
 8008348:	b09d      	sub	sp, #116	; 0x74
 800834a:	b118      	cbz	r0, 8008354 <_vfiprintf_r+0x18>
 800834c:	6983      	ldr	r3, [r0, #24]
 800834e:	b90b      	cbnz	r3, 8008354 <_vfiprintf_r+0x18>
 8008350:	f7fe fc22 	bl	8006b98 <__sinit>
 8008354:	4b89      	ldr	r3, [pc, #548]	; (800857c <_vfiprintf_r+0x240>)
 8008356:	429d      	cmp	r5, r3
 8008358:	d11b      	bne.n	8008392 <_vfiprintf_r+0x56>
 800835a:	6875      	ldr	r5, [r6, #4]
 800835c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800835e:	07d9      	lsls	r1, r3, #31
 8008360:	d405      	bmi.n	800836e <_vfiprintf_r+0x32>
 8008362:	89ab      	ldrh	r3, [r5, #12]
 8008364:	059a      	lsls	r2, r3, #22
 8008366:	d402      	bmi.n	800836e <_vfiprintf_r+0x32>
 8008368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800836a:	f7ff f81e 	bl	80073aa <__retarget_lock_acquire_recursive>
 800836e:	89ab      	ldrh	r3, [r5, #12]
 8008370:	071b      	lsls	r3, r3, #28
 8008372:	d501      	bpl.n	8008378 <_vfiprintf_r+0x3c>
 8008374:	692b      	ldr	r3, [r5, #16]
 8008376:	b9eb      	cbnz	r3, 80083b4 <_vfiprintf_r+0x78>
 8008378:	4629      	mov	r1, r5
 800837a:	4630      	mov	r0, r6
 800837c:	f7fd fc0e 	bl	8005b9c <__swsetup_r>
 8008380:	b1c0      	cbz	r0, 80083b4 <_vfiprintf_r+0x78>
 8008382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008384:	07dc      	lsls	r4, r3, #31
 8008386:	d50e      	bpl.n	80083a6 <_vfiprintf_r+0x6a>
 8008388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800838c:	b01d      	add	sp, #116	; 0x74
 800838e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008392:	4b7b      	ldr	r3, [pc, #492]	; (8008580 <_vfiprintf_r+0x244>)
 8008394:	429d      	cmp	r5, r3
 8008396:	d101      	bne.n	800839c <_vfiprintf_r+0x60>
 8008398:	68b5      	ldr	r5, [r6, #8]
 800839a:	e7df      	b.n	800835c <_vfiprintf_r+0x20>
 800839c:	4b79      	ldr	r3, [pc, #484]	; (8008584 <_vfiprintf_r+0x248>)
 800839e:	429d      	cmp	r5, r3
 80083a0:	bf08      	it	eq
 80083a2:	68f5      	ldreq	r5, [r6, #12]
 80083a4:	e7da      	b.n	800835c <_vfiprintf_r+0x20>
 80083a6:	89ab      	ldrh	r3, [r5, #12]
 80083a8:	0598      	lsls	r0, r3, #22
 80083aa:	d4ed      	bmi.n	8008388 <_vfiprintf_r+0x4c>
 80083ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ae:	f7fe fffd 	bl	80073ac <__retarget_lock_release_recursive>
 80083b2:	e7e9      	b.n	8008388 <_vfiprintf_r+0x4c>
 80083b4:	2300      	movs	r3, #0
 80083b6:	9309      	str	r3, [sp, #36]	; 0x24
 80083b8:	2320      	movs	r3, #32
 80083ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083be:	2330      	movs	r3, #48	; 0x30
 80083c0:	f04f 0901 	mov.w	r9, #1
 80083c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80083c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008588 <_vfiprintf_r+0x24c>
 80083cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083d0:	4623      	mov	r3, r4
 80083d2:	469a      	mov	sl, r3
 80083d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083d8:	b10a      	cbz	r2, 80083de <_vfiprintf_r+0xa2>
 80083da:	2a25      	cmp	r2, #37	; 0x25
 80083dc:	d1f9      	bne.n	80083d2 <_vfiprintf_r+0x96>
 80083de:	ebba 0b04 	subs.w	fp, sl, r4
 80083e2:	d00b      	beq.n	80083fc <_vfiprintf_r+0xc0>
 80083e4:	465b      	mov	r3, fp
 80083e6:	4622      	mov	r2, r4
 80083e8:	4629      	mov	r1, r5
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ff93 	bl	8008316 <__sfputs_r>
 80083f0:	3001      	adds	r0, #1
 80083f2:	f000 80aa 	beq.w	800854a <_vfiprintf_r+0x20e>
 80083f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f8:	445a      	add	r2, fp
 80083fa:	9209      	str	r2, [sp, #36]	; 0x24
 80083fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 80a2 	beq.w	800854a <_vfiprintf_r+0x20e>
 8008406:	2300      	movs	r3, #0
 8008408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800840c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008410:	f10a 0a01 	add.w	sl, sl, #1
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	9307      	str	r3, [sp, #28]
 8008418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800841c:	931a      	str	r3, [sp, #104]	; 0x68
 800841e:	4654      	mov	r4, sl
 8008420:	2205      	movs	r2, #5
 8008422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008426:	4858      	ldr	r0, [pc, #352]	; (8008588 <_vfiprintf_r+0x24c>)
 8008428:	f7ff f840 	bl	80074ac <memchr>
 800842c:	9a04      	ldr	r2, [sp, #16]
 800842e:	b9d8      	cbnz	r0, 8008468 <_vfiprintf_r+0x12c>
 8008430:	06d1      	lsls	r1, r2, #27
 8008432:	bf44      	itt	mi
 8008434:	2320      	movmi	r3, #32
 8008436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800843a:	0713      	lsls	r3, r2, #28
 800843c:	bf44      	itt	mi
 800843e:	232b      	movmi	r3, #43	; 0x2b
 8008440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008444:	f89a 3000 	ldrb.w	r3, [sl]
 8008448:	2b2a      	cmp	r3, #42	; 0x2a
 800844a:	d015      	beq.n	8008478 <_vfiprintf_r+0x13c>
 800844c:	4654      	mov	r4, sl
 800844e:	2000      	movs	r0, #0
 8008450:	f04f 0c0a 	mov.w	ip, #10
 8008454:	9a07      	ldr	r2, [sp, #28]
 8008456:	4621      	mov	r1, r4
 8008458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800845c:	3b30      	subs	r3, #48	; 0x30
 800845e:	2b09      	cmp	r3, #9
 8008460:	d94e      	bls.n	8008500 <_vfiprintf_r+0x1c4>
 8008462:	b1b0      	cbz	r0, 8008492 <_vfiprintf_r+0x156>
 8008464:	9207      	str	r2, [sp, #28]
 8008466:	e014      	b.n	8008492 <_vfiprintf_r+0x156>
 8008468:	eba0 0308 	sub.w	r3, r0, r8
 800846c:	fa09 f303 	lsl.w	r3, r9, r3
 8008470:	4313      	orrs	r3, r2
 8008472:	46a2      	mov	sl, r4
 8008474:	9304      	str	r3, [sp, #16]
 8008476:	e7d2      	b.n	800841e <_vfiprintf_r+0xe2>
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	1d19      	adds	r1, r3, #4
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	9103      	str	r1, [sp, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	bfbb      	ittet	lt
 8008484:	425b      	neglt	r3, r3
 8008486:	f042 0202 	orrlt.w	r2, r2, #2
 800848a:	9307      	strge	r3, [sp, #28]
 800848c:	9307      	strlt	r3, [sp, #28]
 800848e:	bfb8      	it	lt
 8008490:	9204      	strlt	r2, [sp, #16]
 8008492:	7823      	ldrb	r3, [r4, #0]
 8008494:	2b2e      	cmp	r3, #46	; 0x2e
 8008496:	d10c      	bne.n	80084b2 <_vfiprintf_r+0x176>
 8008498:	7863      	ldrb	r3, [r4, #1]
 800849a:	2b2a      	cmp	r3, #42	; 0x2a
 800849c:	d135      	bne.n	800850a <_vfiprintf_r+0x1ce>
 800849e:	9b03      	ldr	r3, [sp, #12]
 80084a0:	3402      	adds	r4, #2
 80084a2:	1d1a      	adds	r2, r3, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	9203      	str	r2, [sp, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	bfb8      	it	lt
 80084ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084b0:	9305      	str	r3, [sp, #20]
 80084b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800858c <_vfiprintf_r+0x250>
 80084b6:	2203      	movs	r2, #3
 80084b8:	4650      	mov	r0, sl
 80084ba:	7821      	ldrb	r1, [r4, #0]
 80084bc:	f7fe fff6 	bl	80074ac <memchr>
 80084c0:	b140      	cbz	r0, 80084d4 <_vfiprintf_r+0x198>
 80084c2:	2340      	movs	r3, #64	; 0x40
 80084c4:	eba0 000a 	sub.w	r0, r0, sl
 80084c8:	fa03 f000 	lsl.w	r0, r3, r0
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	3401      	adds	r4, #1
 80084d0:	4303      	orrs	r3, r0
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d8:	2206      	movs	r2, #6
 80084da:	482d      	ldr	r0, [pc, #180]	; (8008590 <_vfiprintf_r+0x254>)
 80084dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084e0:	f7fe ffe4 	bl	80074ac <memchr>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d03f      	beq.n	8008568 <_vfiprintf_r+0x22c>
 80084e8:	4b2a      	ldr	r3, [pc, #168]	; (8008594 <_vfiprintf_r+0x258>)
 80084ea:	bb1b      	cbnz	r3, 8008534 <_vfiprintf_r+0x1f8>
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	3307      	adds	r3, #7
 80084f0:	f023 0307 	bic.w	r3, r3, #7
 80084f4:	3308      	adds	r3, #8
 80084f6:	9303      	str	r3, [sp, #12]
 80084f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fa:	443b      	add	r3, r7
 80084fc:	9309      	str	r3, [sp, #36]	; 0x24
 80084fe:	e767      	b.n	80083d0 <_vfiprintf_r+0x94>
 8008500:	460c      	mov	r4, r1
 8008502:	2001      	movs	r0, #1
 8008504:	fb0c 3202 	mla	r2, ip, r2, r3
 8008508:	e7a5      	b.n	8008456 <_vfiprintf_r+0x11a>
 800850a:	2300      	movs	r3, #0
 800850c:	f04f 0c0a 	mov.w	ip, #10
 8008510:	4619      	mov	r1, r3
 8008512:	3401      	adds	r4, #1
 8008514:	9305      	str	r3, [sp, #20]
 8008516:	4620      	mov	r0, r4
 8008518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800851c:	3a30      	subs	r2, #48	; 0x30
 800851e:	2a09      	cmp	r2, #9
 8008520:	d903      	bls.n	800852a <_vfiprintf_r+0x1ee>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0c5      	beq.n	80084b2 <_vfiprintf_r+0x176>
 8008526:	9105      	str	r1, [sp, #20]
 8008528:	e7c3      	b.n	80084b2 <_vfiprintf_r+0x176>
 800852a:	4604      	mov	r4, r0
 800852c:	2301      	movs	r3, #1
 800852e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008532:	e7f0      	b.n	8008516 <_vfiprintf_r+0x1da>
 8008534:	ab03      	add	r3, sp, #12
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	462a      	mov	r2, r5
 800853a:	4630      	mov	r0, r6
 800853c:	4b16      	ldr	r3, [pc, #88]	; (8008598 <_vfiprintf_r+0x25c>)
 800853e:	a904      	add	r1, sp, #16
 8008540:	f7fb fe36 	bl	80041b0 <_printf_float>
 8008544:	4607      	mov	r7, r0
 8008546:	1c78      	adds	r0, r7, #1
 8008548:	d1d6      	bne.n	80084f8 <_vfiprintf_r+0x1bc>
 800854a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800854c:	07d9      	lsls	r1, r3, #31
 800854e:	d405      	bmi.n	800855c <_vfiprintf_r+0x220>
 8008550:	89ab      	ldrh	r3, [r5, #12]
 8008552:	059a      	lsls	r2, r3, #22
 8008554:	d402      	bmi.n	800855c <_vfiprintf_r+0x220>
 8008556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008558:	f7fe ff28 	bl	80073ac <__retarget_lock_release_recursive>
 800855c:	89ab      	ldrh	r3, [r5, #12]
 800855e:	065b      	lsls	r3, r3, #25
 8008560:	f53f af12 	bmi.w	8008388 <_vfiprintf_r+0x4c>
 8008564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008566:	e711      	b.n	800838c <_vfiprintf_r+0x50>
 8008568:	ab03      	add	r3, sp, #12
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	462a      	mov	r2, r5
 800856e:	4630      	mov	r0, r6
 8008570:	4b09      	ldr	r3, [pc, #36]	; (8008598 <_vfiprintf_r+0x25c>)
 8008572:	a904      	add	r1, sp, #16
 8008574:	f7fc f8b8 	bl	80046e8 <_printf_i>
 8008578:	e7e4      	b.n	8008544 <_vfiprintf_r+0x208>
 800857a:	bf00      	nop
 800857c:	0802cf6c 	.word	0x0802cf6c
 8008580:	0802cf8c 	.word	0x0802cf8c
 8008584:	0802cf4c 	.word	0x0802cf4c
 8008588:	0802d184 	.word	0x0802d184
 800858c:	0802d18a 	.word	0x0802d18a
 8008590:	0802d18e 	.word	0x0802d18e
 8008594:	080041b1 	.word	0x080041b1
 8008598:	08008317 	.word	0x08008317

0800859c <nan>:
 800859c:	2000      	movs	r0, #0
 800859e:	4901      	ldr	r1, [pc, #4]	; (80085a4 <nan+0x8>)
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	7ff80000 	.word	0x7ff80000

080085a8 <_sbrk_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	2300      	movs	r3, #0
 80085ac:	4d05      	ldr	r5, [pc, #20]	; (80085c4 <_sbrk_r+0x1c>)
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	602b      	str	r3, [r5, #0]
 80085b4:	f7f9 fc8c 	bl	8001ed0 <_sbrk>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d102      	bne.n	80085c2 <_sbrk_r+0x1a>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	b103      	cbz	r3, 80085c2 <_sbrk_r+0x1a>
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	200004dc 	.word	0x200004dc

080085c8 <__sread>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	460c      	mov	r4, r1
 80085cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d0:	f000 f93a 	bl	8008848 <_read_r>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	bfab      	itete	ge
 80085d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085da:	89a3      	ldrhlt	r3, [r4, #12]
 80085dc:	181b      	addge	r3, r3, r0
 80085de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085e2:	bfac      	ite	ge
 80085e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80085e6:	81a3      	strhlt	r3, [r4, #12]
 80085e8:	bd10      	pop	{r4, pc}

080085ea <__swrite>:
 80085ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ee:	461f      	mov	r7, r3
 80085f0:	898b      	ldrh	r3, [r1, #12]
 80085f2:	4605      	mov	r5, r0
 80085f4:	05db      	lsls	r3, r3, #23
 80085f6:	460c      	mov	r4, r1
 80085f8:	4616      	mov	r6, r2
 80085fa:	d505      	bpl.n	8008608 <__swrite+0x1e>
 80085fc:	2302      	movs	r3, #2
 80085fe:	2200      	movs	r2, #0
 8008600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008604:	f000 f8b8 	bl	8008778 <_lseek_r>
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	4632      	mov	r2, r6
 800860c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008610:	81a3      	strh	r3, [r4, #12]
 8008612:	4628      	mov	r0, r5
 8008614:	463b      	mov	r3, r7
 8008616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800861a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800861e:	f000 b837 	b.w	8008690 <_write_r>

08008622 <__sseek>:
 8008622:	b510      	push	{r4, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862a:	f000 f8a5 	bl	8008778 <_lseek_r>
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	bf15      	itete	ne
 8008634:	6560      	strne	r0, [r4, #84]	; 0x54
 8008636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800863a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800863e:	81a3      	strheq	r3, [r4, #12]
 8008640:	bf18      	it	ne
 8008642:	81a3      	strhne	r3, [r4, #12]
 8008644:	bd10      	pop	{r4, pc}

08008646 <__sclose>:
 8008646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800864a:	f000 b851 	b.w	80086f0 <_close_r>

0800864e <strncmp>:
 800864e:	4603      	mov	r3, r0
 8008650:	b510      	push	{r4, lr}
 8008652:	b172      	cbz	r2, 8008672 <strncmp+0x24>
 8008654:	3901      	subs	r1, #1
 8008656:	1884      	adds	r4, r0, r2
 8008658:	f813 0b01 	ldrb.w	r0, [r3], #1
 800865c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008660:	4290      	cmp	r0, r2
 8008662:	d101      	bne.n	8008668 <strncmp+0x1a>
 8008664:	42a3      	cmp	r3, r4
 8008666:	d101      	bne.n	800866c <strncmp+0x1e>
 8008668:	1a80      	subs	r0, r0, r2
 800866a:	bd10      	pop	{r4, pc}
 800866c:	2800      	cmp	r0, #0
 800866e:	d1f3      	bne.n	8008658 <strncmp+0xa>
 8008670:	e7fa      	b.n	8008668 <strncmp+0x1a>
 8008672:	4610      	mov	r0, r2
 8008674:	e7f9      	b.n	800866a <strncmp+0x1c>

08008676 <__ascii_wctomb>:
 8008676:	4603      	mov	r3, r0
 8008678:	4608      	mov	r0, r1
 800867a:	b141      	cbz	r1, 800868e <__ascii_wctomb+0x18>
 800867c:	2aff      	cmp	r2, #255	; 0xff
 800867e:	d904      	bls.n	800868a <__ascii_wctomb+0x14>
 8008680:	228a      	movs	r2, #138	; 0x8a
 8008682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	4770      	bx	lr
 800868a:	2001      	movs	r0, #1
 800868c:	700a      	strb	r2, [r1, #0]
 800868e:	4770      	bx	lr

08008690 <_write_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4604      	mov	r4, r0
 8008694:	4608      	mov	r0, r1
 8008696:	4611      	mov	r1, r2
 8008698:	2200      	movs	r2, #0
 800869a:	4d05      	ldr	r5, [pc, #20]	; (80086b0 <_write_r+0x20>)
 800869c:	602a      	str	r2, [r5, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f7f9 fbfa 	bl	8001e98 <_write>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_write_r+0x1e>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_write_r+0x1e>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	200004dc 	.word	0x200004dc

080086b4 <__assert_func>:
 80086b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086b6:	4614      	mov	r4, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <__assert_func+0x2c>)
 80086bc:	4605      	mov	r5, r0
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68d8      	ldr	r0, [r3, #12]
 80086c2:	b14c      	cbz	r4, 80086d8 <__assert_func+0x24>
 80086c4:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <__assert_func+0x30>)
 80086c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086ca:	9100      	str	r1, [sp, #0]
 80086cc:	462b      	mov	r3, r5
 80086ce:	4906      	ldr	r1, [pc, #24]	; (80086e8 <__assert_func+0x34>)
 80086d0:	f000 f81e 	bl	8008710 <fiprintf>
 80086d4:	f000 f8ca 	bl	800886c <abort>
 80086d8:	4b04      	ldr	r3, [pc, #16]	; (80086ec <__assert_func+0x38>)
 80086da:	461c      	mov	r4, r3
 80086dc:	e7f3      	b.n	80086c6 <__assert_func+0x12>
 80086de:	bf00      	nop
 80086e0:	20000034 	.word	0x20000034
 80086e4:	0802d195 	.word	0x0802d195
 80086e8:	0802d1a2 	.word	0x0802d1a2
 80086ec:	0802d1d0 	.word	0x0802d1d0

080086f0 <_close_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	2300      	movs	r3, #0
 80086f4:	4d05      	ldr	r5, [pc, #20]	; (800870c <_close_r+0x1c>)
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	f7f9 fbda 	bl	8001eb4 <_close>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_close_r+0x1a>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_close_r+0x1a>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	200004dc 	.word	0x200004dc

08008710 <fiprintf>:
 8008710:	b40e      	push	{r1, r2, r3}
 8008712:	b503      	push	{r0, r1, lr}
 8008714:	4601      	mov	r1, r0
 8008716:	ab03      	add	r3, sp, #12
 8008718:	4805      	ldr	r0, [pc, #20]	; (8008730 <fiprintf+0x20>)
 800871a:	f853 2b04 	ldr.w	r2, [r3], #4
 800871e:	6800      	ldr	r0, [r0, #0]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f7ff fe0b 	bl	800833c <_vfiprintf_r>
 8008726:	b002      	add	sp, #8
 8008728:	f85d eb04 	ldr.w	lr, [sp], #4
 800872c:	b003      	add	sp, #12
 800872e:	4770      	bx	lr
 8008730:	20000034 	.word	0x20000034

08008734 <_fstat_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	2300      	movs	r3, #0
 8008738:	4d06      	ldr	r5, [pc, #24]	; (8008754 <_fstat_r+0x20>)
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	4611      	mov	r1, r2
 8008740:	602b      	str	r3, [r5, #0]
 8008742:	f7f9 fbbb 	bl	8001ebc <_fstat>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	d102      	bne.n	8008750 <_fstat_r+0x1c>
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	b103      	cbz	r3, 8008750 <_fstat_r+0x1c>
 800874e:	6023      	str	r3, [r4, #0]
 8008750:	bd38      	pop	{r3, r4, r5, pc}
 8008752:	bf00      	nop
 8008754:	200004dc 	.word	0x200004dc

08008758 <_isatty_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	2300      	movs	r3, #0
 800875c:	4d05      	ldr	r5, [pc, #20]	; (8008774 <_isatty_r+0x1c>)
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	f7f9 fbb0 	bl	8001ec8 <_isatty>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_isatty_r+0x1a>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_isatty_r+0x1a>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	200004dc 	.word	0x200004dc

08008778 <_lseek_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4604      	mov	r4, r0
 800877c:	4608      	mov	r0, r1
 800877e:	4611      	mov	r1, r2
 8008780:	2200      	movs	r2, #0
 8008782:	4d05      	ldr	r5, [pc, #20]	; (8008798 <_lseek_r+0x20>)
 8008784:	602a      	str	r2, [r5, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	f7f9 fba0 	bl	8001ecc <_lseek>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_lseek_r+0x1e>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_lseek_r+0x1e>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	200004dc 	.word	0x200004dc

0800879c <memmove>:
 800879c:	4288      	cmp	r0, r1
 800879e:	b510      	push	{r4, lr}
 80087a0:	eb01 0402 	add.w	r4, r1, r2
 80087a4:	d902      	bls.n	80087ac <memmove+0x10>
 80087a6:	4284      	cmp	r4, r0
 80087a8:	4623      	mov	r3, r4
 80087aa:	d807      	bhi.n	80087bc <memmove+0x20>
 80087ac:	1e43      	subs	r3, r0, #1
 80087ae:	42a1      	cmp	r1, r4
 80087b0:	d008      	beq.n	80087c4 <memmove+0x28>
 80087b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087ba:	e7f8      	b.n	80087ae <memmove+0x12>
 80087bc:	4601      	mov	r1, r0
 80087be:	4402      	add	r2, r0
 80087c0:	428a      	cmp	r2, r1
 80087c2:	d100      	bne.n	80087c6 <memmove+0x2a>
 80087c4:	bd10      	pop	{r4, pc}
 80087c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087ce:	e7f7      	b.n	80087c0 <memmove+0x24>

080087d0 <__malloc_lock>:
 80087d0:	4801      	ldr	r0, [pc, #4]	; (80087d8 <__malloc_lock+0x8>)
 80087d2:	f7fe bdea 	b.w	80073aa <__retarget_lock_acquire_recursive>
 80087d6:	bf00      	nop
 80087d8:	200004d0 	.word	0x200004d0

080087dc <__malloc_unlock>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__malloc_unlock+0x8>)
 80087de:	f7fe bde5 	b.w	80073ac <__retarget_lock_release_recursive>
 80087e2:	bf00      	nop
 80087e4:	200004d0 	.word	0x200004d0

080087e8 <_realloc_r>:
 80087e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ec:	4680      	mov	r8, r0
 80087ee:	4614      	mov	r4, r2
 80087f0:	460e      	mov	r6, r1
 80087f2:	b921      	cbnz	r1, 80087fe <_realloc_r+0x16>
 80087f4:	4611      	mov	r1, r2
 80087f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087fa:	f7ff bba7 	b.w	8007f4c <_malloc_r>
 80087fe:	b92a      	cbnz	r2, 800880c <_realloc_r+0x24>
 8008800:	f7ff fb3c 	bl	8007e7c <_free_r>
 8008804:	4625      	mov	r5, r4
 8008806:	4628      	mov	r0, r5
 8008808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880c:	f000 f835 	bl	800887a <_malloc_usable_size_r>
 8008810:	4284      	cmp	r4, r0
 8008812:	4607      	mov	r7, r0
 8008814:	d802      	bhi.n	800881c <_realloc_r+0x34>
 8008816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800881a:	d812      	bhi.n	8008842 <_realloc_r+0x5a>
 800881c:	4621      	mov	r1, r4
 800881e:	4640      	mov	r0, r8
 8008820:	f7ff fb94 	bl	8007f4c <_malloc_r>
 8008824:	4605      	mov	r5, r0
 8008826:	2800      	cmp	r0, #0
 8008828:	d0ed      	beq.n	8008806 <_realloc_r+0x1e>
 800882a:	42bc      	cmp	r4, r7
 800882c:	4622      	mov	r2, r4
 800882e:	4631      	mov	r1, r6
 8008830:	bf28      	it	cs
 8008832:	463a      	movcs	r2, r7
 8008834:	f7fe fe48 	bl	80074c8 <memcpy>
 8008838:	4631      	mov	r1, r6
 800883a:	4640      	mov	r0, r8
 800883c:	f7ff fb1e 	bl	8007e7c <_free_r>
 8008840:	e7e1      	b.n	8008806 <_realloc_r+0x1e>
 8008842:	4635      	mov	r5, r6
 8008844:	e7df      	b.n	8008806 <_realloc_r+0x1e>
	...

08008848 <_read_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4604      	mov	r4, r0
 800884c:	4608      	mov	r0, r1
 800884e:	4611      	mov	r1, r2
 8008850:	2200      	movs	r2, #0
 8008852:	4d05      	ldr	r5, [pc, #20]	; (8008868 <_read_r+0x20>)
 8008854:	602a      	str	r2, [r5, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	f7f9 fb10 	bl	8001e7c <_read>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d102      	bne.n	8008866 <_read_r+0x1e>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	b103      	cbz	r3, 8008866 <_read_r+0x1e>
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	200004dc 	.word	0x200004dc

0800886c <abort>:
 800886c:	2006      	movs	r0, #6
 800886e:	b508      	push	{r3, lr}
 8008870:	f000 f834 	bl	80088dc <raise>
 8008874:	2001      	movs	r0, #1
 8008876:	f7f9 fafb 	bl	8001e70 <_exit>

0800887a <_malloc_usable_size_r>:
 800887a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800887e:	1f18      	subs	r0, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	bfbc      	itt	lt
 8008884:	580b      	ldrlt	r3, [r1, r0]
 8008886:	18c0      	addlt	r0, r0, r3
 8008888:	4770      	bx	lr

0800888a <_raise_r>:
 800888a:	291f      	cmp	r1, #31
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4604      	mov	r4, r0
 8008890:	460d      	mov	r5, r1
 8008892:	d904      	bls.n	800889e <_raise_r+0x14>
 8008894:	2316      	movs	r3, #22
 8008896:	6003      	str	r3, [r0, #0]
 8008898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800889c:	bd38      	pop	{r3, r4, r5, pc}
 800889e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088a0:	b112      	cbz	r2, 80088a8 <_raise_r+0x1e>
 80088a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088a6:	b94b      	cbnz	r3, 80088bc <_raise_r+0x32>
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 f831 	bl	8008910 <_getpid_r>
 80088ae:	462a      	mov	r2, r5
 80088b0:	4601      	mov	r1, r0
 80088b2:	4620      	mov	r0, r4
 80088b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b8:	f000 b818 	b.w	80088ec <_kill_r>
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d00a      	beq.n	80088d6 <_raise_r+0x4c>
 80088c0:	1c59      	adds	r1, r3, #1
 80088c2:	d103      	bne.n	80088cc <_raise_r+0x42>
 80088c4:	2316      	movs	r3, #22
 80088c6:	6003      	str	r3, [r0, #0]
 80088c8:	2001      	movs	r0, #1
 80088ca:	e7e7      	b.n	800889c <_raise_r+0x12>
 80088cc:	2400      	movs	r4, #0
 80088ce:	4628      	mov	r0, r5
 80088d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088d4:	4798      	blx	r3
 80088d6:	2000      	movs	r0, #0
 80088d8:	e7e0      	b.n	800889c <_raise_r+0x12>
	...

080088dc <raise>:
 80088dc:	4b02      	ldr	r3, [pc, #8]	; (80088e8 <raise+0xc>)
 80088de:	4601      	mov	r1, r0
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	f7ff bfd2 	b.w	800888a <_raise_r>
 80088e6:	bf00      	nop
 80088e8:	20000034 	.word	0x20000034

080088ec <_kill_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	2300      	movs	r3, #0
 80088f0:	4d06      	ldr	r5, [pc, #24]	; (800890c <_kill_r+0x20>)
 80088f2:	4604      	mov	r4, r0
 80088f4:	4608      	mov	r0, r1
 80088f6:	4611      	mov	r1, r2
 80088f8:	602b      	str	r3, [r5, #0]
 80088fa:	f7f9 faaf 	bl	8001e5c <_kill>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	d102      	bne.n	8008908 <_kill_r+0x1c>
 8008902:	682b      	ldr	r3, [r5, #0]
 8008904:	b103      	cbz	r3, 8008908 <_kill_r+0x1c>
 8008906:	6023      	str	r3, [r4, #0]
 8008908:	bd38      	pop	{r3, r4, r5, pc}
 800890a:	bf00      	nop
 800890c:	200004dc 	.word	0x200004dc

08008910 <_getpid_r>:
 8008910:	f7f9 baa2 	b.w	8001e58 <_getpid>

08008914 <_init>:
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	bf00      	nop
 8008918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891a:	bc08      	pop	{r3}
 800891c:	469e      	mov	lr, r3
 800891e:	4770      	bx	lr

08008920 <_fini>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	bf00      	nop
 8008924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008926:	bc08      	pop	{r3}
 8008928:	469e      	mov	lr, r3
 800892a:	4770      	bx	lr
