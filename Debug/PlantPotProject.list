
PlantPotProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088e4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008644  08008ad0  08008ad0  00018ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011114  08011114  00030208  2**0
                  CONTENTS
  4 .ARM          00000000  08011114  08011114  00030208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011114  08011114  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011114  08011114  00021114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011118  08011118  00021118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0801111c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000208  08011324  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08011324  00030478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5f7  00000000  00000000  00030231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003865  00000000  00000000  0004e828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016dc0  00000000  00000000  0005208d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00068e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004b70  00000000  00000000  00069d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c7e1  00000000  00000000  0006e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002065f  00000000  00000000  0008b091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a47eb  00000000  00000000  000ab6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014fedb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ae4  00000000  00000000  0014ff2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000208 	.word	0x20000208
 8000204:	00000000 	.word	0x00000000
 8000208:	08008ab4 	.word	0x08008ab4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000020c 	.word	0x2000020c
 8000224:	08008ab4 	.word	0x08008ab4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_d2lz>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4605      	mov	r5, r0
 800114c:	460c      	mov	r4, r1
 800114e:	2200      	movs	r2, #0
 8001150:	2300      	movs	r3, #0
 8001152:	4628      	mov	r0, r5
 8001154:	4621      	mov	r1, r4
 8001156:	f7ff fc9d 	bl	8000a94 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x20>
 800115c:	4628      	mov	r0, r5
 800115e:	4621      	mov	r1, r4
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4628      	mov	r0, r5
 800116a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff fa13 	bl	80005b0 <__aeabi_dmul>
 800118a:	f7ff fce9 	bl	8000b60 <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f994 	bl	80004bc <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff fa0a 	bl	80005b0 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7ff f84c 	bl	8000240 <__aeabi_dsub>
 80011a8:	f7ff fcda 	bl	8000b60 <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 80011b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011bc:	460c      	mov	r4, r1
 80011be:	4684      	mov	ip, r0
 80011c0:	4620      	mov	r0, r4
  hx711->clk_gpio = clk_gpio;
  hx711->clk_pin = clk_pin;
  hx711->dat_gpio = dat_gpio;
  hx711->dat_pin = dat_pin;

  GPIO_InitTypeDef  gpio = {0};
 80011c2:	f04f 0800 	mov.w	r8, #0
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 80011c6:	461c      	mov	r4, r3
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2701      	movs	r7, #1
  gpio.Pull = GPIO_NOPULL;
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ca:	2603      	movs	r6, #3
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 80011cc:	b084      	sub	sp, #16
 80011ce:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
  hx711->clk_gpio = clk_gpio;
 80011d2:	f8cc 0000 	str.w	r0, [ip]
  gpio.Pin = clk_pin;
  HAL_GPIO_Init(clk_gpio, &gpio);
 80011d6:	4669      	mov	r1, sp
  hx711->dat_pin = dat_pin;
 80011d8:	f8ac 500a 	strh.w	r5, [ip, #10]
  hx711->clk_pin = clk_pin;
 80011dc:	f8ac 2008 	strh.w	r2, [ip, #8]
  hx711->dat_gpio = dat_gpio;
 80011e0:	f8cc 3004 	str.w	r3, [ip, #4]
  gpio.Pin = clk_pin;
 80011e4:	9200      	str	r2, [sp, #0]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	e9cd 7801 	strd	r7, r8, [sp, #4]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(clk_gpio, &gpio);
 80011ec:	f001 ff7e 	bl	80030ec <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
  gpio.Pull = GPIO_PULLUP;
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio.Pin = dat_pin;
  HAL_GPIO_Init(dat_gpio, &gpio);
 80011f0:	4669      	mov	r1, sp
 80011f2:	4620      	mov	r0, r4
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	e9cd 7602 	strd	r7, r6, [sp, #8]
  gpio.Mode = GPIO_MODE_INPUT;
 80011f8:	f8cd 8004 	str.w	r8, [sp, #4]
  gpio.Pin = dat_pin;
 80011fc:	9500      	str	r5, [sp, #0]
  HAL_GPIO_Init(dat_gpio, &gpio);
 80011fe:	f001 ff75 	bl	80030ec <HAL_GPIO_Init>

}
 8001202:	b004      	add	sp, #16
 8001204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001208 <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function.
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 8001208:	6101      	str	r1, [r0, #16]
	hx711->Bscale = Bscale;
 800120a:	61c2      	str	r2, [r0, #28]
}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop

08001210 <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
  // Define A channel's gain
	switch (Again) {
 8001210:	2940      	cmp	r1, #64	; 0x40
 8001212:	d007      	beq.n	8001224 <set_gain+0x14>
 8001214:	2980      	cmp	r1, #128	; 0x80
 8001216:	d101      	bne.n	800121c <set_gain+0xc>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	7503      	strb	r3, [r0, #20]
				break;
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
				break;
		}
	hx711->Bgain = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	f880 3020 	strb.w	r3, [r0, #32]
}
 8001222:	4770      	bx	lr
				hx711->Again = 3;
 8001224:	2303      	movs	r3, #3
 8001226:	7503      	strb	r3, [r0, #20]
	hx711->Bgain = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	f880 3020 	strb.w	r3, [r0, #32]
}
 800122e:	4770      	bx	lr

08001230 <shiftIn>:
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
	else hx711->Boffset = offset;
}

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	2507      	movs	r5, #7
    uint8_t value = 0;
 8001234:	2700      	movs	r7, #0
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8001236:	4604      	mov	r4, r0
 8001238:	460e      	mov	r6, r1
 800123a:	e00e      	b.n	800125a <shiftIn+0x2a>
    uint8_t i;

    for(i = 0; i < 8; ++i) {
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
        if(bitOrder == 0)
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 800123c:	f002 f87e 	bl	800333c <HAL_GPIO_ReadPin>
 8001240:	f1c5 0307 	rsb	r3, r5, #7
 8001244:	4098      	lsls	r0, r3
 8001246:	4338      	orrs	r0, r7
 8001248:	b2c7      	uxtb	r7, r0
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	8921      	ldrh	r1, [r4, #8]
 800124e:	6820      	ldr	r0, [r4, #0]
    for(i = 0; i < 8; ++i) {
 8001250:	3d01      	subs	r5, #1
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001252:	f002 f879 	bl	8003348 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 8001256:	1c6b      	adds	r3, r5, #1
 8001258:	d00e      	beq.n	8001278 <shiftIn+0x48>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 800125a:	8921      	ldrh	r1, [r4, #8]
 800125c:	6820      	ldr	r0, [r4, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	f002 f872 	bl	8003348 <HAL_GPIO_WritePin>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 8001264:	8961      	ldrh	r1, [r4, #10]
 8001266:	6860      	ldr	r0, [r4, #4]
        if(bitOrder == 0)
 8001268:	2e00      	cmp	r6, #0
 800126a:	d0e7      	beq.n	800123c <shiftIn+0xc>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 800126c:	f002 f866 	bl	800333c <HAL_GPIO_ReadPin>
 8001270:	40a8      	lsls	r0, r5
 8001272:	4338      	orrs	r0, r7
 8001274:	b2c7      	uxtb	r7, r0
 8001276:	e7e8      	b.n	800124a <shiftIn+0x1a>
    }
    return value;
}
 8001278:	4638      	mov	r0, r7
 800127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800127c <read>:
		HAL_Delay(0);
	}
}

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 800127c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001280:	4604      	mov	r4, r0
 8001282:	460d      	mov	r5, r1
void wait_ready(hx711_t *hx711) {
 8001284:	e002      	b.n	800128c <read+0x10>
		HAL_Delay(0);
 8001286:	2000      	movs	r0, #0
 8001288:	f001 fb6a 	bl	8002960 <HAL_Delay>
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 800128c:	8961      	ldrh	r1, [r4, #10]
 800128e:	6860      	ldr	r0, [r4, #4]
 8001290:	f002 f854 	bl	800333c <HAL_GPIO_ReadPin>
 8001294:	2800      	cmp	r0, #0
 8001296:	d1f6      	bne.n	8001286 <read+0xa>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
	uint8_t data[3] = { 0 };
	uint8_t filler = 0x00;

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 800129a:	2101      	movs	r1, #1
 800129c:	4620      	mov	r0, r4
 800129e:	f7ff ffc7 	bl	8001230 <shiftIn>
	data[1] = shiftIn(hx711, 1);
 80012a2:	2101      	movs	r1, #1
	data[2] = shiftIn(hx711, 1);
 80012a4:	4607      	mov	r7, r0
	data[1] = shiftIn(hx711, 1);
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff ffc2 	bl	8001230 <shiftIn>
	data[0] = shiftIn(hx711, 1);
 80012ac:	2101      	movs	r1, #1
	data[1] = shiftIn(hx711, 1);
 80012ae:	4606      	mov	r6, r0
	data[0] = shiftIn(hx711, 1);
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff ffbd 	bl	8001230 <shiftIn>
 80012b6:	4681      	mov	r9, r0

	uint8_t gain = 0;
	if(channel == 0) gain = hx711->Again;
 80012b8:	b9f5      	cbnz	r5, 80012f8 <read+0x7c>
 80012ba:	f894 8014 	ldrb.w	r8, [r4, #20]
	else gain = hx711->Bgain;

	for (unsigned int i = 0; i < gain; i++) {
 80012be:	f1b8 0f00 	cmp.w	r8, #0
 80012c2:	d00d      	beq.n	80012e0 <read+0x64>
 80012c4:	2500      	movs	r5, #0
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	8921      	ldrh	r1, [r4, #8]
 80012ca:	6820      	ldr	r0, [r4, #0]
 80012cc:	f002 f83c 	bl	8003348 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 80012d0:	3501      	adds	r5, #1
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	8921      	ldrh	r1, [r4, #8]
 80012d6:	6820      	ldr	r0, [r4, #0]
 80012d8:	f002 f836 	bl	8003348 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 80012dc:	4545      	cmp	r5, r8
 80012de:	d1f2      	bne.n	80012c6 <read+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 80012e0:	b662      	cpsie	i
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
			| (unsigned long)(data[2]) << 16
			| (unsigned long)(data[1]) << 8
 80012e2:	0233      	lsls	r3, r6, #8
	value = ( (unsigned long)(filler) << 24
 80012e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80012e8:	ea43 0309 	orr.w	r3, r3, r9
	if (data[2] & 0x80) {
 80012ec:	f347 10c0 	sbfx	r0, r7, #7, #1
			| (unsigned long)(data[0]) );

	return (long)(value);
}
 80012f0:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80012f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else gain = hx711->Bgain;
 80012f8:	f894 8020 	ldrb.w	r8, [r4, #32]
 80012fc:	e7df      	b.n	80012be <read+0x42>
 80012fe:	bf00      	nop

08001300 <tare_all>:
	double sum = read_average(hx711, times, channel);
	set_offset(hx711, sum, channel);
}

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 8001300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001302:	460d      	mov	r5, r1
	read(hx711, channel); // Change channel
 8001304:	2100      	movs	r1, #0
	double sum = read_average(hx711, times, channel);
 8001306:	b26d      	sxtb	r5, r5
void tare_all(hx711_t *hx711, uint8_t times) {
 8001308:	4606      	mov	r6, r0
	read(hx711, channel); // Change channel
 800130a:	f7ff ffb7 	bl	800127c <read>
	for (int8_t i = 0; i < times; i++) {
 800130e:	2d00      	cmp	r5, #0
 8001310:	dd28      	ble.n	8001364 <tare_all+0x64>
 8001312:	2400      	movs	r4, #0
	long sum = 0;
 8001314:	4627      	mov	r7, r4
		sum += read(hx711, channel);
 8001316:	2100      	movs	r1, #0
 8001318:	4630      	mov	r0, r6
 800131a:	f7ff ffaf 	bl	800127c <read>
 800131e:	4603      	mov	r3, r0
	for (int8_t i = 0; i < times; i++) {
 8001320:	3401      	adds	r4, #1
		HAL_Delay(0);
 8001322:	2000      	movs	r0, #0
		sum += read(hx711, channel);
 8001324:	441f      	add	r7, r3
		HAL_Delay(0);
 8001326:	f001 fb1b 	bl	8002960 <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 800132a:	b263      	sxtb	r3, r4
 800132c:	429d      	cmp	r5, r3
 800132e:	dcf2      	bgt.n	8001316 <tare_all+0x16>
	return sum / times;
 8001330:	fb97 f7f5 	sdiv	r7, r7, r5
	read(hx711, channel); // Change channel
 8001334:	2400      	movs	r4, #0
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8001336:	60f7      	str	r7, [r6, #12]
	read(hx711, channel); // Change channel
 8001338:	2101      	movs	r1, #1
 800133a:	4630      	mov	r0, r6
 800133c:	f7ff ff9e 	bl	800127c <read>
 8001340:	4627      	mov	r7, r4
		sum += read(hx711, channel);
 8001342:	2101      	movs	r1, #1
 8001344:	4630      	mov	r0, r6
 8001346:	f7ff ff99 	bl	800127c <read>
 800134a:	4603      	mov	r3, r0
	for (int8_t i = 0; i < times; i++) {
 800134c:	3401      	adds	r4, #1
		HAL_Delay(0);
 800134e:	2000      	movs	r0, #0
		sum += read(hx711, channel);
 8001350:	441f      	add	r7, r3
		HAL_Delay(0);
 8001352:	f001 fb05 	bl	8002960 <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 8001356:	b263      	sxtb	r3, r4
 8001358:	429d      	cmp	r5, r3
 800135a:	dcf2      	bgt.n	8001342 <tare_all+0x42>
	return sum / times;
 800135c:	fb97 f5f5 	sdiv	r5, r7, r5
	else hx711->Boffset = offset;
 8001360:	61b5      	str	r5, [r6, #24]
	tare(hx711, times, CHANNEL_A);
	tare(hx711, times, CHANNEL_B);
}
 8001362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8001364:	2500      	movs	r5, #0
	read(hx711, channel); // Change channel
 8001366:	2101      	movs	r1, #1
 8001368:	4630      	mov	r0, r6
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 800136a:	60f5      	str	r5, [r6, #12]
	read(hx711, channel); // Change channel
 800136c:	f7ff ff86 	bl	800127c <read>
	else hx711->Boffset = offset;
 8001370:	61b5      	str	r5, [r6, #24]
}
 8001372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001374 <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001378:	4692      	mov	sl, r2
 800137a:	4689      	mov	r9, r1
  // Read load cell
	read(hx711, channel);
 800137c:	4611      	mov	r1, r2
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 800137e:	4606      	mov	r6, r0
	read(hx711, channel);
 8001380:	f7ff ff7c 	bl	800127c <read>
	float scale = 0;
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 8001384:	f1ba 0f00 	cmp.w	sl, #0
 8001388:	d129      	bne.n	80013de <get_weight+0x6a>
	for (int8_t i = 0; i < times; i++) {
 800138a:	f1b9 0f00 	cmp.w	r9, #0
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 800138e:	6937      	ldr	r7, [r6, #16]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 8001390:	f8d6 800c 	ldr.w	r8, [r6, #12]
	for (int8_t i = 0; i < times; i++) {
 8001394:	dd29      	ble.n	80013ea <get_weight+0x76>
 8001396:	2400      	movs	r4, #0
	long sum = 0;
 8001398:	4625      	mov	r5, r4
		sum += read(hx711, channel);
 800139a:	4651      	mov	r1, sl
 800139c:	4630      	mov	r0, r6
 800139e:	f7ff ff6d 	bl	800127c <read>
 80013a2:	4603      	mov	r3, r0
 80013a4:	3401      	adds	r4, #1
		HAL_Delay(0);
 80013a6:	2000      	movs	r0, #0
 80013a8:	b264      	sxtb	r4, r4
		sum += read(hx711, channel);
 80013aa:	441d      	add	r5, r3
		HAL_Delay(0);
 80013ac:	f001 fad8 	bl	8002960 <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 80013b0:	45a1      	cmp	r9, r4
 80013b2:	d1f2      	bne.n	800139a <get_weight+0x26>
	return sum / times;
 80013b4:	fb95 f0f9 	sdiv	r0, r5, r9
	return read_average(hx711, times, channel) - offset;
 80013b8:	eba0 0008 	sub.w	r0, r0, r8
 80013bc:	f7ff f88e 	bl	80004dc <__aeabi_i2d>
 80013c0:	4604      	mov	r4, r0
	else scale = hx711->Bscale;
	return get_value(hx711, times, channel) / scale;
 80013c2:	4638      	mov	r0, r7
	return read_average(hx711, times, channel) - offset;
 80013c4:	460d      	mov	r5, r1
	return get_value(hx711, times, channel) / scale;
 80013c6:	f7ff f89b 	bl	8000500 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7ff fa17 	bl	8000804 <__aeabi_ddiv>
 80013d6:	f7ff fbe3 	bl	8000ba0 <__aeabi_d2f>
}
 80013da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int8_t i = 0; i < times; i++) {
 80013de:	f1b9 0f00 	cmp.w	r9, #0
	else scale = hx711->Bscale;
 80013e2:	69f7      	ldr	r7, [r6, #28]
	else offset = hx711->Boffset;
 80013e4:	f8d6 8018 	ldr.w	r8, [r6, #24]
	for (int8_t i = 0; i < times; i++) {
 80013e8:	dcd5      	bgt.n	8001396 <get_weight+0x22>
 80013ea:	2000      	movs	r0, #0
 80013ec:	e7e4      	b.n	80013b8 <get_weight+0x44>
 80013ee:	bf00      	nop

080013f0 <DHT11_Start>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
		;
}

uint8_t DHT11_Start(void) {
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t Response = 0;
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
	GPIO_InitStructPrivate.Pin = DHT11_Pin;
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2302      	movs	r3, #2
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 80013f4:	2400      	movs	r4, #0
	GPIO_InitStructPrivate.Pin = DHT11_Pin;
 80013f6:	2608      	movs	r6, #8
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2701      	movs	r7, #1
uint8_t DHT11_Start(void) {
 80013fa:	b085      	sub	sp, #20
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStructPrivate); // set the pin as output
 80013fc:	4669      	mov	r1, sp
 80013fe:	482a      	ldr	r0, [pc, #168]	; (80014a8 <DHT11_Start+0xb8>)
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	9303      	str	r3, [sp, #12]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	e9cd 6700 	strd	r6, r7, [sp]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 8001406:	9402      	str	r4, [sp, #8]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStructPrivate); // set the pin as output
 8001408:	f001 fe70 	bl	80030ec <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);   // pull the pin low
 800140c:	4622      	mov	r2, r4
 800140e:	4631      	mov	r1, r6
 8001410:	4825      	ldr	r0, [pc, #148]	; (80014a8 <DHT11_Start+0xb8>)
 8001412:	f001 ff99 	bl	8003348 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001416:	4d25      	ldr	r5, [pc, #148]	; (80014ac <DHT11_Start+0xbc>)
	HAL_Delay(20);   // wait for 20ms
 8001418:	2014      	movs	r0, #20
 800141a:	f001 faa1 	bl	8002960 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 1);   // pull the pin high
 800141e:	463a      	mov	r2, r7
 8001420:	4631      	mov	r1, r6
 8001422:	4821      	ldr	r0, [pc, #132]	; (80014a8 <DHT11_Start+0xb8>)
 8001424:	f001 ff90 	bl	8003348 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001428:	682a      	ldr	r2, [r5, #0]
 800142a:	6254      	str	r4, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 800142c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800142e:	2b1d      	cmp	r3, #29
 8001430:	d9fc      	bls.n	800142c <DHT11_Start+0x3c>
	microDelay(30);   // wait for 30us
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001432:	2400      	movs	r4, #0
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001434:	2301      	movs	r3, #1
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStructPrivate); // set the pin as input
 8001436:	4669      	mov	r1, sp
 8001438:	481b      	ldr	r0, [pc, #108]	; (80014a8 <DHT11_Start+0xb8>)
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800143a:	e9cd 4301 	strd	r4, r3, [sp, #4]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStructPrivate); // set the pin as input
 800143e:	f001 fe55 	bl	80030ec <HAL_GPIO_Init>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001442:	682a      	ldr	r2, [r5, #0]
 8001444:	6254      	str	r4, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8001446:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001448:	2b27      	cmp	r3, #39	; 0x27
 800144a:	d9fc      	bls.n	8001446 <DHT11_Start+0x56>
	microDelay(40);
	if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) {
 800144c:	2108      	movs	r1, #8
 800144e:	4816      	ldr	r0, [pc, #88]	; (80014a8 <DHT11_Start+0xb8>)
 8001450:	f001 ff74 	bl	800333c <HAL_GPIO_ReadPin>
 8001454:	bb30      	cbnz	r0, 80014a4 <DHT11_Start+0xb4>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001456:	682a      	ldr	r2, [r5, #0]
 8001458:	6250      	str	r0, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 800145a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800145c:	2b4f      	cmp	r3, #79	; 0x4f
 800145e:	d9fc      	bls.n	800145a <DHT11_Start+0x6a>
		microDelay(80);
		if ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin)))
 8001460:	2108      	movs	r1, #8
 8001462:	4811      	ldr	r0, [pc, #68]	; (80014a8 <DHT11_Start+0xb8>)
 8001464:	f001 ff6a 	bl	800333c <HAL_GPIO_ReadPin>
	uint8_t Response = 0;
 8001468:	1e07      	subs	r7, r0, #0
 800146a:	bf18      	it	ne
 800146c:	2701      	movne	r7, #1
			Response = 1;
	}
	pMillis = HAL_GetTick();
 800146e:	f001 fa71 	bl	8002954 <HAL_GetTick>
 8001472:	4d0f      	ldr	r5, [pc, #60]	; (80014b0 <DHT11_Start+0xc0>)
	cMillis = HAL_GetTick();
 8001474:	4c0f      	ldr	r4, [pc, #60]	; (80014b4 <DHT11_Start+0xc4>)
	pMillis = HAL_GetTick();
 8001476:	6028      	str	r0, [r5, #0]
	cMillis = HAL_GetTick();
 8001478:	f001 fa6c 	bl	8002954 <HAL_GetTick>
	while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 800147c:	4e0a      	ldr	r6, [pc, #40]	; (80014a8 <DHT11_Start+0xb8>)
	cMillis = HAL_GetTick();
 800147e:	6020      	str	r0, [r4, #0]
	while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 8001480:	e007      	b.n	8001492 <DHT11_Start+0xa2>
			&& pMillis + 2 > cMillis) {
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	6822      	ldr	r2, [r4, #0]
 8001486:	3302      	adds	r3, #2
 8001488:	4293      	cmp	r3, r2
 800148a:	d908      	bls.n	800149e <DHT11_Start+0xae>
		cMillis = HAL_GetTick();
 800148c:	f001 fa62 	bl	8002954 <HAL_GetTick>
 8001490:	6020      	str	r0, [r4, #0]
	while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 8001492:	2108      	movs	r1, #8
 8001494:	4630      	mov	r0, r6
 8001496:	f001 ff51 	bl	800333c <HAL_GPIO_ReadPin>
 800149a:	2800      	cmp	r0, #0
 800149c:	d1f1      	bne.n	8001482 <DHT11_Start+0x92>
	}
	return Response;
}
 800149e:	4638      	mov	r0, r7
 80014a0:	b005      	add	sp, #20
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t Response = 0;
 80014a4:	2700      	movs	r7, #0
 80014a6:	e7e2      	b.n	800146e <DHT11_Start+0x7e>
 80014a8:	40010800 	.word	0x40010800
 80014ac:	20000300 	.word	0x20000300
 80014b0:	20000348 	.word	0x20000348
 80014b4:	20000230 	.word	0x20000230

080014b8 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 80014b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014bc:	f04f 0800 	mov.w	r8, #0
 80014c0:	2707      	movs	r7, #7
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80014c2:	46c1      	mov	r9, r8
 80014c4:	4e24      	ldr	r6, [pc, #144]	; (8001558 <DHT11_Read+0xa0>)
 80014c6:	4c25      	ldr	r4, [pc, #148]	; (800155c <DHT11_Read+0xa4>)
 80014c8:	f8df a094 	ldr.w	sl, [pc, #148]	; 8001560 <DHT11_Read+0xa8>
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
		pMillis = HAL_GetTick();
		cMillis = HAL_GetTick();
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 80014cc:	4d25      	ldr	r5, [pc, #148]	; (8001564 <DHT11_Read+0xac>)
		pMillis = HAL_GetTick();
 80014ce:	f001 fa41 	bl	8002954 <HAL_GetTick>
 80014d2:	6030      	str	r0, [r6, #0]
		cMillis = HAL_GetTick();
 80014d4:	f001 fa3e 	bl	8002954 <HAL_GetTick>
 80014d8:	6020      	str	r0, [r4, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 80014da:	e007      	b.n	80014ec <DHT11_Read+0x34>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
 80014dc:	6833      	ldr	r3, [r6, #0]
 80014de:	6822      	ldr	r2, [r4, #0]
 80014e0:	3302      	adds	r3, #2
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d908      	bls.n	80014f8 <DHT11_Read+0x40>
			cMillis = HAL_GetTick();
 80014e6:	f001 fa35 	bl	8002954 <HAL_GetTick>
 80014ea:	6020      	str	r0, [r4, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 80014ec:	2108      	movs	r1, #8
 80014ee:	4628      	mov	r0, r5
 80014f0:	f001 ff24 	bl	800333c <HAL_GPIO_ReadPin>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	d0f1      	beq.n	80014dc <DHT11_Read+0x24>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80014f8:	f8da 2000 	ldr.w	r2, [sl]
 80014fc:	f8c2 9024 	str.w	r9, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8001500:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001502:	2b27      	cmp	r3, #39	; 0x27
 8001504:	d9fc      	bls.n	8001500 <DHT11_Read+0x48>
		}
		microDelay(40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) // if the pin is low
 8001506:	2108      	movs	r1, #8
 8001508:	4628      	mov	r0, r5
 800150a:	f001 ff17 	bl	800333c <HAL_GPIO_ReadPin>
			b &= ~(1 << (7 - a));
 800150e:	2301      	movs	r3, #1
 8001510:	40bb      	lsls	r3, r7
		if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) // if the pin is low
 8001512:	b9d8      	cbnz	r0, 800154c <DHT11_Read+0x94>
			b &= ~(1 << (7 - a));
 8001514:	ea28 0803 	bic.w	r8, r8, r3
		else
			b |= (1 << (7 - a));
		pMillis = HAL_GetTick();
 8001518:	f001 fa1c 	bl	8002954 <HAL_GetTick>
 800151c:	6030      	str	r0, [r6, #0]
		cMillis = HAL_GetTick();
 800151e:	f001 fa19 	bl	8002954 <HAL_GetTick>
 8001522:	6020      	str	r0, [r4, #0]
		while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 8001524:	e007      	b.n	8001536 <DHT11_Read+0x7e>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
 8001526:	6833      	ldr	r3, [r6, #0]
 8001528:	6822      	ldr	r2, [r4, #0]
 800152a:	3302      	adds	r3, #2
 800152c:	4293      	cmp	r3, r2
 800152e:	d908      	bls.n	8001542 <DHT11_Read+0x8a>
			cMillis = HAL_GetTick();
 8001530:	f001 fa10 	bl	8002954 <HAL_GetTick>
 8001534:	6020      	str	r0, [r4, #0]
		while ((HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 8001536:	2108      	movs	r1, #8
 8001538:	4628      	mov	r0, r5
 800153a:	f001 feff 	bl	800333c <HAL_GPIO_ReadPin>
 800153e:	2800      	cmp	r0, #0
 8001540:	d1f1      	bne.n	8001526 <DHT11_Read+0x6e>
	for (a = 0; a < 8; a++) {
 8001542:	3f01      	subs	r7, #1
 8001544:	d2c3      	bcs.n	80014ce <DHT11_Read+0x16>
		}
	}
	return b;
}
 8001546:	4640      	mov	r0, r8
 8001548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			b |= (1 << (7 - a));
 800154c:	ea43 0808 	orr.w	r8, r3, r8
 8001550:	fa5f f888 	uxtb.w	r8, r8
 8001554:	e7e0      	b.n	8001518 <DHT11_Read+0x60>
 8001556:	bf00      	nop
 8001558:	20000348 	.word	0x20000348
 800155c:	20000230 	.word	0x20000230
 8001560:	20000300 	.word	0x20000300
 8001564:	40010800 	.word	0x40010800

08001568 <displayHumidityTemperature.part.0>:
void displayHumidityTemperature() {
 8001568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		RHI = DHT11_Read(); // Relative humidity integral
 800156c:	f7ff ffa4 	bl	80014b8 <DHT11_Read>
 8001570:	4f2f      	ldr	r7, [pc, #188]	; (8001630 <displayHumidityTemperature.part.0+0xc8>)
		RHD = DHT11_Read(); // Relative humidity decimal
 8001572:	4d30      	ldr	r5, [pc, #192]	; (8001634 <displayHumidityTemperature.part.0+0xcc>)
		RHI = DHT11_Read(); // Relative humidity integral
 8001574:	7038      	strb	r0, [r7, #0]
		RHD = DHT11_Read(); // Relative humidity decimal
 8001576:	f7ff ff9f 	bl	80014b8 <DHT11_Read>
 800157a:	7028      	strb	r0, [r5, #0]
		TCI = DHT11_Read(); // Celsius integral
 800157c:	f7ff ff9c 	bl	80014b8 <DHT11_Read>
 8001580:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8001638 <displayHumidityTemperature.part.0+0xd0>
		TCD = DHT11_Read(); // Celsius decimal
 8001584:	4c2d      	ldr	r4, [pc, #180]	; (800163c <displayHumidityTemperature.part.0+0xd4>)
		TCI = DHT11_Read(); // Celsius integral
 8001586:	f888 0000 	strb.w	r0, [r8]
		TCD = DHT11_Read(); // Celsius decimal
 800158a:	f7ff ff95 	bl	80014b8 <DHT11_Read>
 800158e:	7020      	strb	r0, [r4, #0]
		SUM = DHT11_Read(); // Check sum
 8001590:	f7ff ff92 	bl	80014b8 <DHT11_Read>
 8001594:	4602      	mov	r2, r0
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <displayHumidityTemperature.part.0+0xd8>)
		tCelsius = (float) TCI + (float) (TCD / 10.0);
 8001598:	7820      	ldrb	r0, [r4, #0]
		SUM = DHT11_Read(); // Check sum
 800159a:	701a      	strb	r2, [r3, #0]
		tCelsius = (float) TCI + (float) (TCD / 10.0);
 800159c:	f7fe ff9e 	bl	80004dc <__aeabi_i2d>
 80015a0:	2200      	movs	r2, #0
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <displayHumidityTemperature.part.0+0xdc>)
 80015a4:	f7ff f92e 	bl	8000804 <__aeabi_ddiv>
 80015a8:	f7ff fafa 	bl	8000ba0 <__aeabi_d2f>
 80015ac:	4604      	mov	r4, r0
 80015ae:	f898 0000 	ldrb.w	r0, [r8]
 80015b2:	f7ff fbfb 	bl	8000dac <__aeabi_ui2f>
 80015b6:	4601      	mov	r1, r0
 80015b8:	4620      	mov	r0, r4
 80015ba:	f7ff fb47 	bl	8000c4c <__addsf3>
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <displayHumidityTemperature.part.0+0xe0>)
		tFahrenheit = tCelsius * 9 / 5 + 32;
 80015c0:	4922      	ldr	r1, [pc, #136]	; (800164c <displayHumidityTemperature.part.0+0xe4>)
		tCelsius = (float) TCI + (float) (TCD / 10.0);
 80015c2:	6018      	str	r0, [r3, #0]
 80015c4:	4604      	mov	r4, r0
		tFahrenheit = tCelsius * 9 / 5 + 32;
 80015c6:	f7ff fc49 	bl	8000e5c <__aeabi_fmul>
 80015ca:	4921      	ldr	r1, [pc, #132]	; (8001650 <displayHumidityTemperature.part.0+0xe8>)
 80015cc:	f7ff fcfa 	bl	8000fc4 <__aeabi_fdiv>
 80015d0:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80015d4:	f7ff fb3a 	bl	8000c4c <__addsf3>
 80015d8:	4603      	mov	r3, r0
 80015da:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001654 <displayHumidityTemperature.part.0+0xec>
		RH = (float) RHI + (float) (RHD / 10.0);
 80015de:	7828      	ldrb	r0, [r5, #0]
		tFahrenheit = tCelsius * 9 / 5 + 32;
 80015e0:	f8c9 3000 	str.w	r3, [r9]
		RH = (float) RHI + (float) (RHD / 10.0);
 80015e4:	f7fe ff7a 	bl	80004dc <__aeabi_i2d>
 80015e8:	2200      	movs	r2, #0
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <displayHumidityTemperature.part.0+0xdc>)
 80015ec:	f7ff f90a 	bl	8000804 <__aeabi_ddiv>
 80015f0:	f7ff fad6 	bl	8000ba0 <__aeabi_d2f>
 80015f4:	4605      	mov	r5, r0
 80015f6:	7838      	ldrb	r0, [r7, #0]
 80015f8:	f7ff fbd8 	bl	8000dac <__aeabi_ui2f>
 80015fc:	4601      	mov	r1, r0
 80015fe:	4628      	mov	r0, r5
 8001600:	f7ff fb24 	bl	8000c4c <__addsf3>
 8001604:	4603      	mov	r3, r0
 8001606:	4e14      	ldr	r6, [pc, #80]	; (8001658 <displayHumidityTemperature.part.0+0xf0>)
		lcdPrintf("Temperature: %.1f \r\n", tCelsius);
 8001608:	4620      	mov	r0, r4
		RH = (float) RHI + (float) (RHD / 10.0);
 800160a:	6033      	str	r3, [r6, #0]
		lcdPrintf("Temperature: %.1f \r\n", tCelsius);
 800160c:	f7fe ff78 	bl	8000500 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <displayHumidityTemperature.part.0+0xf4>)
 8001616:	f001 f81f 	bl	8002658 <lcdPrintf>
		lcdPrintf("Humidity:    %.1f \r\n", RH);
 800161a:	6830      	ldr	r0, [r6, #0]
 800161c:	f7fe ff70 	bl	8000500 <__aeabi_f2d>
}
 8001620:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		lcdPrintf("Humidity:    %.1f \r\n", RH);
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <displayHumidityTemperature.part.0+0xf8>)
 800162a:	f001 b815 	b.w	8002658 <lcdPrintf>
 800162e:	bf00      	nop
 8001630:	20000229 	.word	0x20000229
 8001634:	20000228 	.word	0x20000228
 8001638:	2000022c 	.word	0x2000022c
 800163c:	2000022b 	.word	0x2000022b
 8001640:	2000022a 	.word	0x2000022a
 8001644:	40240000 	.word	0x40240000
 8001648:	2000034c 	.word	0x2000034c
 800164c:	41100000 	.word	0x41100000
 8001650:	40a00000 	.word	0x40a00000
 8001654:	20000350 	.word	0x20000350
 8001658:	20000224 	.word	0x20000224
 800165c:	08008ad0 	.word	0x08008ad0
 8001660:	08008ae8 	.word	0x08008ae8

08001664 <displayWeight>:

void displayWeight(hx711_t loadcell) {
 8001664:	b084      	sub	sp, #16
 8001666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001668:	b08d      	sub	sp, #52	; 0x34
 800166a:	f10d 0c0c 	add.w	ip, sp, #12
float measure_weight(hx711_t hx711) {
	long weightA = 0;
	long weightB = 0;

	// Measure the weight for channel A
	weightA = get_weight(&hx711, 10, CHANNEL_A);
 800166e:	4664      	mov	r4, ip
 8001670:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
void displayWeight(hx711_t loadcell) {
 8001674:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001678:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800167c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001680:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001684:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001688:	f8de 3000 	ldr.w	r3, [lr]
	weightA = get_weight(&hx711, 10, CHANNEL_A);
 800168c:	2200      	movs	r2, #0
 800168e:	f8cc 3000 	str.w	r3, [ip]
 8001692:	210a      	movs	r1, #10
 8001694:	4620      	mov	r0, r4
 8001696:	f7ff fe6d 	bl	8001374 <get_weight>
 800169a:	f7ff fd2f 	bl	80010fc <__aeabi_f2iz>
 800169e:	4605      	mov	r5, r0
	// Weight cannot be negative
	weightA = (weightA < 0) ? 0 : weightA;

	// Measure the weight for channel B
	weightB = get_weight(&hx711, 10, CHANNEL_B);
 80016a0:	2201      	movs	r2, #1
 80016a2:	210a      	movs	r1, #10
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff fe65 	bl	8001374 <get_weight>
	// Weight cannot be negative
	weightB = (weightB < 0) ? 0 : weightB;

	return weightA;
 80016aa:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
 80016ae:	f7ff fb81 	bl	8000db4 <__aeabi_i2f>
	snprintf(weightStr, 10, "%.2f", weight);
 80016b2:	f7fe ff25 	bl	8000500 <__aeabi_f2d>
 80016b6:	4606      	mov	r6, r0
 80016b8:	460f      	mov	r7, r1
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <displayWeight+0x90>)
 80016bc:	210a      	movs	r1, #10
 80016be:	4620      	mov	r0, r4
 80016c0:	e9cd 6700 	strd	r6, r7, [sp]
 80016c4:	f003 fbe4 	bl	8004e90 <sniprintf>
	strcat(weightStr, " g   ");
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7fe fdad 	bl	8000228 <strlen>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <displayWeight+0x94>)
 80016d2:	6810      	ldr	r0, [r2, #0]
 80016d4:	8892      	ldrh	r2, [r2, #4]
 80016d6:	50e0      	str	r0, [r4, r3]
 80016d8:	4423      	add	r3, r4
 80016da:	809a      	strh	r2, [r3, #4]
	lcdPrintf("\r\n");
 80016dc:	4807      	ldr	r0, [pc, #28]	; (80016fc <displayWeight+0x98>)
 80016de:	f000 ffbb 	bl	8002658 <lcdPrintf>
	lcdPrintf("Weight: %s \r\n", weightStr);
 80016e2:	4621      	mov	r1, r4
 80016e4:	4806      	ldr	r0, [pc, #24]	; (8001700 <displayWeight+0x9c>)
 80016e6:	f000 ffb7 	bl	8002658 <lcdPrintf>
}
 80016ea:	b00d      	add	sp, #52	; 0x34
 80016ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80016f0:	b004      	add	sp, #16
 80016f2:	4770      	bx	lr
 80016f4:	08008b00 	.word	0x08008b00
 80016f8:	08008b08 	.word	0x08008b08
 80016fc:	08008b10 	.word	0x08008b10
 8001700:	08008b14 	.word	0x08008b14

08001704 <init_weight>:
void init_weight(hx711_t *hx711) {
 8001704:	b530      	push	{r4, r5, lr}
	hx711_init(hx711, GPIOB, GPIO_PIN_6, GPIOB, GPIO_PIN_7);
 8001706:	2580      	movs	r5, #128	; 0x80
void init_weight(hx711_t *hx711) {
 8001708:	4604      	mov	r4, r0
	hx711_init(hx711, GPIOB, GPIO_PIN_6, GPIOB, GPIO_PIN_7);
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <init_weight+0x38>)
void init_weight(hx711_t *hx711) {
 800170c:	b083      	sub	sp, #12
	hx711_init(hx711, GPIOB, GPIO_PIN_6, GPIOB, GPIO_PIN_7);
 800170e:	4619      	mov	r1, r3
 8001710:	2240      	movs	r2, #64	; 0x40
 8001712:	9500      	str	r5, [sp, #0]
 8001714:	f7ff fd50 	bl	80011b8 <hx711_init>
	set_gain(hx711, 128, 32);
 8001718:	4629      	mov	r1, r5
 800171a:	4620      	mov	r0, r4
 800171c:	2220      	movs	r2, #32
 800171e:	f7ff fd77 	bl	8001210 <set_gain>
	set_scale(hx711, 420, 1);
 8001722:	4620      	mov	r0, r4
 8001724:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001728:	4905      	ldr	r1, [pc, #20]	; (8001740 <init_weight+0x3c>)
 800172a:	f7ff fd6d 	bl	8001208 <set_scale>
	tare_all(hx711, 10);
 800172e:	210a      	movs	r1, #10
 8001730:	4620      	mov	r0, r4
}
 8001732:	b003      	add	sp, #12
 8001734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	tare_all(hx711, 10);
 8001738:	f7ff bde2 	b.w	8001300 <tare_all>
 800173c:	40010c00 	.word	0x40010c00
 8001740:	43d20000 	.word	0x43d20000

08001744 <getSoilMoisture>:
	drawLines(COLOR_PEASHOOT_GREEN);
	HAL_Delay(200);
	drawImage();
}

void getSoilMoisture() {
 8001744:	b538      	push	{r3, r4, r5, lr}
	const int WaterValue = 2900;
	int intervals = (AirValue - WaterValue) / 3;
	int soilMoistureValue = 0;
	int moisturePercentage = 0;

	soilMoistureValue = HAL_ADC_GetValue(&hadc1);
 8001746:	482b      	ldr	r0, [pc, #172]	; (80017f4 <getSoilMoisture+0xb0>)
 8001748:	f001 f9ce 	bl	8002ae8 <HAL_ADC_GetValue>

	// Calculate moisture percentage
	if (soilMoistureValue <= WaterValue) {
 800174c:	f640 3354 	movw	r3, #2900	; 0xb54
 8001750:	4298      	cmp	r0, r3
 8001752:	dd2b      	ble.n	80017ac <getSoilMoisture+0x68>
		moisturePercentage = 100;
	} else if (soilMoistureValue >= AirValue) {
 8001754:	f640 63d7 	movw	r3, #3799	; 0xed7
 8001758:	4298      	cmp	r0, r3
 800175a:	4604      	mov	r4, r0
 800175c:	dc24      	bgt.n	80017a8 <getSoilMoisture+0x64>
		moisturePercentage = 0;
	} else {
		moisturePercentage = 100
				- ((soilMoistureValue - WaterValue) * 100)
						/ (AirValue - WaterValue);
 800175e:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <getSoilMoisture+0xb4>)
				- ((soilMoistureValue - WaterValue) * 100)
 8001760:	f6a0 3354 	subw	r3, r0, #2900	; 0xb54
						/ (AirValue - WaterValue);
 8001764:	fb82 1203 	smull	r1, r2, r2, r3
 8001768:	17dd      	asrs	r5, r3, #31
 800176a:	eba5 0562 	sub.w	r5, r5, r2, asr #1
		moisturePercentage = 100
 800176e:	3564      	adds	r5, #100	; 0x64
	}

	lcdSetCursor(0, lcdGetHeight() / 2);
 8001770:	f001 f87c 	bl	800286c <lcdGetHeight>
 8001774:	4601      	mov	r1, r0
 8001776:	2000      	movs	r0, #0
 8001778:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800177c:	f001 f84a 	bl	8002814 <lcdSetCursor>
	lcdPrintf("Soil Moisture: %d%% ", moisturePercentage);
 8001780:	4629      	mov	r1, r5
 8001782:	481e      	ldr	r0, [pc, #120]	; (80017fc <getSoilMoisture+0xb8>)
 8001784:	f000 ff68 	bl	8002658 <lcdPrintf>
	HAL_Delay(200);
 8001788:	20c8      	movs	r0, #200	; 0xc8
 800178a:	f001 f8e9 	bl	8002960 <HAL_Delay>
	if (soilMoistureValue > WaterValue
			&& soilMoistureValue < (WaterValue + intervals)) {
 800178e:	f5b4 6f48 	cmp.w	r4, #3200	; 0xc80
 8001792:	db1c      	blt.n	80017ce <getSoilMoisture+0x8a>
		lcdPrintf("  Very wet");
	} else if (soilMoistureValue > (WaterValue + intervals)
 8001794:	d025      	beq.n	80017e2 <getSoilMoisture+0x9e>
			&& soilMoistureValue < (AirValue - intervals)) {
 8001796:	f640 53ab 	movw	r3, #3499	; 0xdab
 800179a:	429c      	cmp	r4, r3
 800179c:	dd1c      	ble.n	80017d8 <getSoilMoisture+0x94>
		lcdPrintf("  Wet     ");
	} else if (soilMoistureValue < AirValue
 800179e:	f640 63d7 	movw	r3, #3799	; 0xed7
 80017a2:	429c      	cmp	r4, r3
 80017a4:	dd1d      	ble.n	80017e2 <getSoilMoisture+0x9e>
			&& soilMoistureValue > (AirValue - intervals)) {
		lcdPrintf("  Dry     ");
	}
}
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
		moisturePercentage = 0;
 80017a8:	2500      	movs	r5, #0
 80017aa:	e7e1      	b.n	8001770 <getSoilMoisture+0x2c>
	lcdSetCursor(0, lcdGetHeight() / 2);
 80017ac:	f001 f85e 	bl	800286c <lcdGetHeight>
 80017b0:	4601      	mov	r1, r0
 80017b2:	2000      	movs	r0, #0
 80017b4:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80017b8:	f001 f82c 	bl	8002814 <lcdSetCursor>
	lcdPrintf("Soil Moisture: %d%% ", moisturePercentage);
 80017bc:	480f      	ldr	r0, [pc, #60]	; (80017fc <getSoilMoisture+0xb8>)
 80017be:	2164      	movs	r1, #100	; 0x64
 80017c0:	f000 ff4a 	bl	8002658 <lcdPrintf>
}
 80017c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(200);
 80017c8:	20c8      	movs	r0, #200	; 0xc8
 80017ca:	f001 b8c9 	b.w	8002960 <HAL_Delay>
		lcdPrintf("  Very wet");
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <getSoilMoisture+0xbc>)
}
 80017d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lcdPrintf("  Very wet");
 80017d4:	f000 bf40 	b.w	8002658 <lcdPrintf>
		lcdPrintf("  Wet     ");
 80017d8:	480a      	ldr	r0, [pc, #40]	; (8001804 <getSoilMoisture+0xc0>)
}
 80017da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lcdPrintf("  Wet     ");
 80017de:	f000 bf3b 	b.w	8002658 <lcdPrintf>
			&& soilMoistureValue > (AirValue - intervals)) {
 80017e2:	f640 53ac 	movw	r3, #3500	; 0xdac
 80017e6:	429c      	cmp	r4, r3
 80017e8:	dddd      	ble.n	80017a6 <getSoilMoisture+0x62>
}
 80017ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lcdPrintf("  Dry     ");
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <getSoilMoisture+0xc4>)
 80017f0:	f000 bf32 	b.w	8002658 <lcdPrintf>
 80017f4:	20000234 	.word	0x20000234
 80017f8:	38e38e39 	.word	0x38e38e39
 80017fc:	08008b48 	.word	0x08008b48
 8001800:	08008b24 	.word	0x08008b24
 8001804:	08008b30 	.word	0x08008b30
 8001808:	08008b3c 	.word	0x08008b3c

0800180c <drawLines>:
	lcdSetCursor(x, y);
	lcdPrintf(fmt, args);
	va_end(args);
}

void drawLines(uint16_t color) {
 800180c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	4604      	mov	r4, r0
	unsigned long start, t;
	int x1, y1, x2, y2, w = lcdGetWidth(), h = lcdGetHeight();
 8001814:	f001 f824 	bl	8002860 <lcdGetWidth>
 8001818:	4680      	mov	r8, r0
 800181a:	f001 f827 	bl	800286c <lcdGetHeight>
 800181e:	4607      	mov	r7, r0

	lcdFillRGB(COLOR_BLACK);
 8001820:	2000      	movs	r0, #0
 8001822:	f000 fcf9 	bl	8002218 <lcdFillRGB>

	x1 = y1 = 0;
	y2 = h - 1;
 8001826:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
	start = HAL_GetTick();
 800182a:	f001 f893 	bl	8002954 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 800182e:	f1b8 0f00 	cmp.w	r8, #0
 8001832:	d04c      	beq.n	80018ce <drawLines+0xc2>
 8001834:	2500      	movs	r5, #0
	y2 = h - 1;

	start = HAL_GetTick();

	for (x2 = 0; x2 < w; x2 += 6)
		lcdDrawLine(x1, y1, x2, y2, color);
 8001836:	fa0f fa89 	sxth.w	sl, r9
		lcdDrawLine(x1, y1, x2, y2, color);
 800183a:	2100      	movs	r1, #0
 800183c:	b22a      	sxth	r2, r5
 800183e:	4653      	mov	r3, sl
 8001840:	4608      	mov	r0, r1
 8001842:	9400      	str	r4, [sp, #0]
	for (x2 = 0; x2 < w; x2 += 6)
 8001844:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 8001846:	f000 fd1d 	bl	8002284 <lcdDrawLine>
	for (x2 = 0; x2 < w; x2 += 6)
 800184a:	45a8      	cmp	r8, r5
 800184c:	dcf5      	bgt.n	800183a <drawLines+0x2e>
	x2 = w - 1;
 800184e:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
	for (y2 = 0; y2 < h; y2 += 6)
 8001852:	2f00      	cmp	r7, #0
 8001854:	d04b      	beq.n	80018ee <drawLines+0xe2>
 8001856:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 8001858:	b236      	sxth	r6, r6
		lcdDrawLine(x1, y1, x2, y2, color);
 800185a:	2100      	movs	r1, #0
 800185c:	b22b      	sxth	r3, r5
 800185e:	4632      	mov	r2, r6
 8001860:	4608      	mov	r0, r1
 8001862:	9400      	str	r4, [sp, #0]
	for (y2 = 0; y2 < h; y2 += 6)
 8001864:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 8001866:	f000 fd0d 	bl	8002284 <lcdDrawLine>
	for (y2 = 0; y2 < h; y2 += 6)
 800186a:	42af      	cmp	r7, r5
 800186c:	dcf5      	bgt.n	800185a <drawLines+0x4e>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 800186e:	f001 f871 	bl	8002954 <HAL_GetTick>
	HAL_Delay(1000);
 8001872:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001876:	f001 f873 	bl	8002960 <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 800187a:	2000      	movs	r0, #0
 800187c:	f000 fccc 	bl	8002218 <lcdFillRGB>
	start = HAL_GetTick();
 8001880:	f001 f868 	bl	8002954 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 8001884:	f1b8 0f00 	cmp.w	r8, #0
 8001888:	d00d      	beq.n	80018a6 <drawLines+0x9a>
 800188a:	fa0f fa89 	sxth.w	sl, r9
 800188e:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 8001890:	b22a      	sxth	r2, r5
 8001892:	4653      	mov	r3, sl
 8001894:	2100      	movs	r1, #0
 8001896:	4630      	mov	r0, r6
 8001898:	9400      	str	r4, [sp, #0]
	for (x2 = 0; x2 < w; x2 += 6)
 800189a:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 800189c:	f000 fcf2 	bl	8002284 <lcdDrawLine>
	for (x2 = 0; x2 < w; x2 += 6)
 80018a0:	45a8      	cmp	r8, r5
 80018a2:	dcf5      	bgt.n	8001890 <drawLines+0x84>
	x2 = 0;
	for (y2 = 0; y2 < h; y2 += 6)
 80018a4:	b157      	cbz	r7, 80018bc <drawLines+0xb0>
	for (x2 = 0; x2 < w; x2 += 6)
 80018a6:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 80018a8:	2200      	movs	r2, #0
 80018aa:	b22b      	sxth	r3, r5
 80018ac:	4630      	mov	r0, r6
 80018ae:	4611      	mov	r1, r2
 80018b0:	9400      	str	r4, [sp, #0]
	for (y2 = 0; y2 < h; y2 += 6)
 80018b2:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 80018b4:	f000 fce6 	bl	8002284 <lcdDrawLine>
	for (y2 = 0; y2 < h; y2 += 6)
 80018b8:	42af      	cmp	r7, r5
 80018ba:	dcf5      	bgt.n	80018a8 <drawLines+0x9c>
	t += HAL_GetTick() - start;
 80018bc:	f001 f84a 	bl	8002954 <HAL_GetTick>

	HAL_Delay(1000);
 80018c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

//  return t += HAL_GetTick() - start;
}
 80018c4:	b002      	add	sp, #8
 80018c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_Delay(1000);
 80018ca:	f001 b849 	b.w	8002960 <HAL_Delay>
	x2 = w - 1;
 80018ce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (y2 = 0; y2 < h; y2 += 6)
 80018d2:	2f00      	cmp	r7, #0
 80018d4:	d1bf      	bne.n	8001856 <drawLines+0x4a>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 80018d6:	f001 f83d 	bl	8002954 <HAL_GetTick>
	HAL_Delay(1000);
 80018da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018de:	f001 f83f 	bl	8002960 <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 80018e2:	4638      	mov	r0, r7
 80018e4:	f000 fc98 	bl	8002218 <lcdFillRGB>
	start = HAL_GetTick();
 80018e8:	f001 f834 	bl	8002954 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 80018ec:	e7e6      	b.n	80018bc <drawLines+0xb0>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 80018ee:	f001 f831 	bl	8002954 <HAL_GetTick>
	HAL_Delay(1000);
 80018f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018f6:	f001 f833 	bl	8002960 <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 80018fa:	4638      	mov	r0, r7
		lcdDrawLine(x1, y1, x2, y2, color);
 80018fc:	b236      	sxth	r6, r6
	lcdFillRGB(COLOR_BLACK);
 80018fe:	f000 fc8b 	bl	8002218 <lcdFillRGB>
	start = HAL_GetTick();
 8001902:	f001 f827 	bl	8002954 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 8001906:	e7c2      	b.n	800188e <drawLines+0x82>

08001908 <drawImage>:

void drawImage() {

	lcdFillRGB(COLOR_PEASHOOT_GREEN);
 8001908:	f24d 60eb 	movw	r0, #55019	; 0xd6eb
void drawImage() {
 800190c:	b508      	push	{r3, lr}
	lcdFillRGB(COLOR_PEASHOOT_GREEN);
 800190e:	f000 fc83 	bl	8002218 <lcdFillRGB>
	if (lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE
 8001912:	f000 ffb1 	bl	8002878 <lcdGetOrientation>
 8001916:	2801      	cmp	r0, #1
 8001918:	d003      	beq.n	8001922 <drawImage+0x1a>
			|| lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE_MIRROR) {
 800191a:	f000 ffad 	bl	8002878 <lcdGetOrientation>
 800191e:	2803      	cmp	r0, #3
 8001920:	d10d      	bne.n	800193e <drawImage+0x36>
		lcdDrawImage((lcdGetWidth() - bmSTLogo.xSize) / 2, 0, &bmSTLogo);
 8001922:	f000 ff9d 	bl	8002860 <lcdGetWidth>
 8001926:	4a0d      	ldr	r2, [pc, #52]	; (800195c <drawImage+0x54>)
 8001928:	2100      	movs	r1, #0
 800192a:	8813      	ldrh	r3, [r2, #0]
 800192c:	1ac0      	subs	r0, r0, r3
 800192e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001932:	f3c0 004f 	ubfx	r0, r0, #1, #16
	} else {
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
	}
}
 8001936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcdDrawImage((lcdGetWidth() - bmSTLogo.xSize) / 2, 0, &bmSTLogo);
 800193a:	f000 bd53 	b.w	80023e4 <lcdDrawImage>
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
 800193e:	f000 ff95 	bl	800286c <lcdGetHeight>
 8001942:	4601      	mov	r1, r0
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <drawImage+0x54>)
 8001946:	2000      	movs	r0, #0
 8001948:	8853      	ldrh	r3, [r2, #2]
 800194a:	1ac9      	subs	r1, r1, r3
 800194c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8001950:	f3c1 014f 	ubfx	r1, r1, #1, #16
}
 8001954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
 8001958:	f000 bd44 	b.w	80023e4 <lcdDrawImage>
 800195c:	08010c4c 	.word	0x08010c4c

08001960 <start_animation>:
void start_animation() {
 8001960:	b508      	push	{r3, lr}
	drawLines(COLOR_PEASHOOT_GREEN);
 8001962:	f24d 60eb 	movw	r0, #55019	; 0xd6eb
 8001966:	f7ff ff51 	bl	800180c <drawLines>
	HAL_Delay(200);
 800196a:	20c8      	movs	r0, #200	; 0xc8
 800196c:	f000 fff8 	bl	8002960 <HAL_Delay>
}
 8001970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	drawImage();
 8001974:	f7ff bfc8 	b.w	8001908 <drawImage>

08001978 <SystemClock_Config>:
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001978:	2001      	movs	r0, #1
void SystemClock_Config(void) {
 800197a:	b510      	push	{r4, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800197c:	2300      	movs	r3, #0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800197e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001982:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001984:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
void SystemClock_Config(void) {
 8001988:	b096      	sub	sp, #88	; 0x58
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800198a:	900c      	str	r0, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198c:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800198e:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001990:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001994:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001998:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800199c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80019a0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80019a4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019a8:	9115      	str	r1, [sp, #84]	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019aa:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80019ac:	9301      	str	r3, [sp, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80019ae:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b0:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019b2:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80019b4:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019b6:	f001 fd93 	bl	80034e0 <HAL_RCC_OscConfig>
 80019ba:	b108      	cbz	r0, 80019c0 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019be:	e7fe      	b.n	80019be <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019c0:	4603      	mov	r3, r0
 80019c2:	220f      	movs	r2, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c4:	e9cd 4302 	strd	r4, r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c8:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80019ce:	4621      	mov	r1, r4
 80019d0:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d2:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019d4:	9201      	str	r2, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80019d6:	f001 ffaf 	bl	8003938 <HAL_RCC_ClockConfig>
 80019da:	b108      	cbz	r0, 80019e0 <SystemClock_Config+0x68>
 80019dc:	b672      	cpsid	i
	while (1) {
 80019de:	e7fe      	b.n	80019de <SystemClock_Config+0x66>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80019e4:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019e6:	9406      	str	r4, [sp, #24]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019e8:	9308      	str	r3, [sp, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80019ea:	f002 f865 	bl	8003ab8 <HAL_RCCEx_PeriphCLKConfig>
 80019ee:	b108      	cbz	r0, 80019f4 <SystemClock_Config+0x7c>
 80019f0:	b672      	cpsid	i
	while (1) {
 80019f2:	e7fe      	b.n	80019f2 <SystemClock_Config+0x7a>
}
 80019f4:	b016      	add	sp, #88	; 0x58
 80019f6:	bd10      	pop	{r4, pc}

080019f8 <main>:
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019f8:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = DIN_Pin;
 80019fa:	f04f 0a04 	mov.w	sl, #4
int main(void) {
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b096      	sub	sp, #88	; 0x58
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a02:	ad0d      	add	r5, sp, #52	; 0x34
	HAL_Init();
 8001a04:	f000 ff88 	bl	8002918 <HAL_Init>
	SystemClock_Config();
 8001a08:	f7ff ffb6 	bl	8001978 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a0c:	940d      	str	r4, [sp, #52]	; 0x34
 8001a0e:	e9c5 4401 	strd	r4, r4, [r5, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a12:	4baf      	ldr	r3, [pc, #700]	; (8001cd0 <main+0x2d8>)
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001a14:	60ec      	str	r4, [r5, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a16:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2701      	movs	r7, #1
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a1e:	619a      	str	r2, [r3, #24]
 8001a20:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 8001a22:	2119      	movs	r1, #25
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a24:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001a28:	9206      	str	r2, [sp, #24]
 8001a2a:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2c:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 8001a2e:	48a9      	ldr	r0, [pc, #676]	; (8001cd4 <main+0x2dc>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a30:	f042 0210 	orr.w	r2, r2, #16
 8001a34:	619a      	str	r2, [r3, #24]
 8001a36:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a38:	f04f 0803 	mov.w	r8, #3
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3c:	f002 0210 	and.w	r2, r2, #16
 8001a40:	9207      	str	r2, [sp, #28]
 8001a42:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a46:	f44f 5980 	mov.w	r9, #4096	; 0x1000
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	ea42 020a 	orr.w	r2, r2, sl
 8001a4e:	619a      	str	r2, [r3, #24]
 8001a50:	699a      	ldr	r2, [r3, #24]
	hadc1.Instance = ADC1;
 8001a52:	4ea1      	ldr	r6, [pc, #644]	; (8001cd8 <main+0x2e0>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	ea02 020a 	and.w	r2, r2, sl
 8001a58:	9208      	str	r2, [sp, #32]
 8001a5a:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	f042 0220 	orr.w	r2, r2, #32
 8001a62:	619a      	str	r2, [r3, #24]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	f002 0220 	and.w	r2, r2, #32
 8001a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8001a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	f042 0208 	orr.w	r2, r2, #8
 8001a74:	619a      	str	r2, [r3, #24]
 8001a76:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 8001a78:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8001a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 8001a82:	f001 fc61 	bl	8003348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001a86:	4622      	mov	r2, r4
 8001a88:	2108      	movs	r1, #8
 8001a8a:	4894      	ldr	r0, [pc, #592]	; (8001cdc <main+0x2e4>)
 8001a8c:	f001 fc5c 	bl	8003348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_2, GPIO_PIN_RESET);
 8001a90:	4622      	mov	r2, r4
 8001a92:	f241 0104 	movw	r1, #4100	; 0x1004
 8001a96:	4892      	ldr	r0, [pc, #584]	; (8001ce0 <main+0x2e8>)
 8001a98:	f001 fc56 	bl	8003348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 | GPIO_PIN_7, GPIO_PIN_SET);
 8001a9c:	463a      	mov	r2, r7
 8001a9e:	21a0      	movs	r1, #160	; 0xa0
 8001aa0:	4890      	ldr	r0, [pc, #576]	; (8001ce4 <main+0x2ec>)
 8001aa2:	f001 fc51 	bl	8003348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8001aa6:	463a      	mov	r2, r7
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	488a      	ldr	r0, [pc, #552]	; (8001cd4 <main+0x2dc>)
 8001aac:	f001 fc4c 	bl	8003348 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	4888      	ldr	r0, [pc, #544]	; (8001cd4 <main+0x2dc>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	e9cd a40d 	strd	sl, r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f001 fb17 	bl	80030ec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DOUT_Pin | IRQ_Pin | DCLK_Pin | GPIO_PIN_1;
 8001abe:	231b      	movs	r3, #27
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4884      	ldr	r0, [pc, #528]	; (8001cd4 <main+0x2dc>)
	GPIO_InitStruct.Pin = DOUT_Pin | IRQ_Pin | DCLK_Pin | GPIO_PIN_1;
 8001ac4:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	e9cd 740e 	strd	r7, r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ace:	f001 fb0d 	bl	80030ec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DHT11_Pin;
 8001ad2:	2308      	movs	r3, #8
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	4881      	ldr	r0, [pc, #516]	; (8001cdc <main+0x2e4>)
	GPIO_InitStruct.Pin = DHT11_Pin;
 8001ad8:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	e9cd 740e 	strd	r7, r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ade:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f001 fb03 	bl	80030ec <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	487d      	ldr	r0, [pc, #500]	; (8001ce0 <main+0x2e8>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	e9cd 970d 	strd	r9, r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aee:	e9cd 480f 	strd	r4, r8, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af2:	f001 fafb 	bl	80030ec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_Pin;
 8001af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001afa:	4629      	mov	r1, r5
 8001afc:	4878      	ldr	r0, [pc, #480]	; (8001ce0 <main+0x2e8>)
	GPIO_InitStruct.Pin = CS_Pin;
 8001afe:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f001 faf2 	bl	80030ec <HAL_GPIO_Init>
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	4874      	ldr	r0, [pc, #464]	; (8001ce0 <main+0x2e8>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	9310      	str	r3, [sp, #64]	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b16:	f001 fae9 	bl	80030ec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 8001b1a:	23a0      	movs	r3, #160	; 0xa0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	4871      	ldr	r0, [pc, #452]	; (8001ce4 <main+0x2ec>)
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 8001b20:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	e9cd 740e 	strd	r7, r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b26:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f001 fadf 	bl	80030ec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b2e:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	486c      	ldr	r0, [pc, #432]	; (8001ce4 <main+0x2ec>)
 8001b32:	4629      	mov	r1, r5
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b34:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f001 fad7 	bl	80030ec <HAL_GPIO_Init>
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b3e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8001b42:	61f3      	str	r3, [r6, #28]
	hadc1.Instance = ADC1;
 8001b44:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <main+0x2f0>)
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001b46:	4630      	mov	r0, r6
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001b48:	940d      	str	r4, [sp, #52]	; 0x34
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b4a:	60b4      	str	r4, [r6, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001b4c:	e9c5 4401 	strd	r4, r4, [r5, #4]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001b50:	7337      	strb	r7, [r6, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b52:	7534      	strb	r4, [r6, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b54:	6074      	str	r4, [r6, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001b56:	6137      	str	r7, [r6, #16]
	hadc1.Instance = ADC1;
 8001b58:	6033      	str	r3, [r6, #0]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001b5a:	f001 f937 	bl	8002dcc <HAL_ADC_Init>
 8001b5e:	b108      	cbz	r0, 8001b64 <main+0x16c>
 8001b60:	b672      	cpsid	i
	while (1) {
 8001b62:	e7fe      	b.n	8001b62 <main+0x16a>
	sConfig.Channel = ADC_CHANNEL_12;
 8001b64:	230c      	movs	r3, #12
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b66:	900f      	str	r0, [sp, #60]	; 0x3c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b68:	4629      	mov	r1, r5
 8001b6a:	4630      	mov	r0, r6
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b6c:	970e      	str	r7, [sp, #56]	; 0x38
	sConfig.Channel = ADC_CHANNEL_12;
 8001b6e:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b70:	f000 ffbe 	bl	8002af0 <HAL_ADC_ConfigChannel>
 8001b74:	4602      	mov	r2, r0
 8001b76:	bb18      	cbnz	r0, 8001bc0 <main+0x1c8>
	FSMC_NORSRAM_TimingTypeDef Timing = { 0 };
 8001b78:	9010      	str	r0, [sp, #64]	; 0x40
 8001b7a:	9013      	str	r0, [sp, #76]	; 0x4c
	Timing.AddressHoldTime = 15;
 8001b7c:	200f      	movs	r0, #15
 8001b7e:	900e      	str	r0, [sp, #56]	; 0x38
	Timing.DataSetupTime = 5;
 8001b80:	2005      	movs	r0, #5
 8001b82:	900f      	str	r0, [sp, #60]	; 0x3c
	Timing.DataLatency = 17;
 8001b84:	2011      	movs	r0, #17
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001b86:	2310      	movs	r3, #16
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001b88:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
	Timing.DataLatency = 17;
 8001b8c:	9012      	str	r0, [sp, #72]	; 0x48
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001b8e:	4857      	ldr	r0, [pc, #348]	; (8001cec <main+0x2f4>)
	Timing.CLKDivision = 16;
 8001b90:	9311      	str	r3, [sp, #68]	; 0x44
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001b92:	6143      	str	r3, [r0, #20]
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001b94:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <main+0x2f8>)
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001b96:	6001      	str	r1, [r0, #0]
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8001b98:	4629      	mov	r1, r5
	hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001b9a:	e9c0 2202 	strd	r2, r2, [r0, #8]
	hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001b9e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001ba2:	e9c0 2208 	strd	r2, r2, [r0, #32]
	hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001ba6:	e9c0 920a 	strd	r9, r2, [r0, #40]	; 0x28
	hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001baa:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
	Timing.AddressSetupTime = 1;
 8001bae:	970d      	str	r7, [sp, #52]	; 0x34
	hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001bb0:	6102      	str	r2, [r0, #16]
	hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001bb2:	6382      	str	r2, [r0, #56]	; 0x38
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001bb4:	6043      	str	r3, [r0, #4]
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8001bb6:	f002 f887 	bl	8003cc8 <HAL_SRAM_Init>
 8001bba:	b118      	cbz	r0, 8001bc4 <main+0x1cc>
 8001bbc:	b672      	cpsid	i
	while (1) {
 8001bbe:	e7fe      	b.n	8001bbe <main+0x1c6>
 8001bc0:	b672      	cpsid	i
 8001bc2:	e7fe      	b.n	8001bc2 <main+0x1ca>
	htim1.Init.Prescaler = 71;
 8001bc4:	2347      	movs	r3, #71	; 0x47
	htim1.Init.Period = 65535;
 8001bc6:	f64f 78ff 	movw	r8, #65535	; 0xffff
	htim1.Instance = TIM1;
 8001bca:	4c4a      	ldr	r4, [pc, #296]	; (8001cf4 <main+0x2fc>)
	__HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001bcc:	4a4a      	ldr	r2, [pc, #296]	; (8001cf8 <main+0x300>)
	htim1.Init.RepetitionCounter = 0;
 8001bce:	e9c4 0004 	strd	r0, r0, [r4, #16]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	60a0      	str	r0, [r4, #8]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd4:	61a0      	str	r0, [r4, #24]
	htim1.Init.Prescaler = 71;
 8001bd6:	6063      	str	r3, [r4, #4]
	htim1.Init.Period = 65535;
 8001bd8:	f8c4 800c 	str.w	r8, [r4, #12]
	__HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001bdc:	69d3      	ldr	r3, [r2, #28]
 8001bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be2:	61d3      	str	r3, [r2, #28]
	htim1.Instance = TIM1;
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <main+0x304>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001be6:	e9c5 0000 	strd	r0, r0, [r5]
 8001bea:	e9c5 0002 	strd	r0, r0, [r5, #8]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bee:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001bf2:	4620      	mov	r0, r4
	htim1.Instance = TIM1;
 8001bf4:	6023      	str	r3, [r4, #0]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001bf6:	f002 f9c5 	bl	8003f84 <HAL_TIM_Base_Init>
 8001bfa:	b108      	cbz	r0, 8001c00 <main+0x208>
 8001bfc:	b672      	cpsid	i
	while (1) {
 8001bfe:	e7fe      	b.n	8001bfe <main+0x206>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001c00:	4629      	mov	r1, r5
 8001c02:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c04:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001c08:	f002 f8c2 	bl	8003d90 <HAL_TIM_ConfigClockSource>
 8001c0c:	b108      	cbz	r0, 8001c12 <main+0x21a>
 8001c0e:	b672      	cpsid	i
	while (1) {
 8001c10:	e7fe      	b.n	8001c10 <main+0x218>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001c16:	a90b      	add	r1, sp, #44	; 0x2c
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f002 f9e1 	bl	8003fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	b108      	cbz	r0, 8001c26 <main+0x22e>
 8001c22:	b672      	cpsid	i
	while (1) {
 8001c24:	e7fe      	b.n	8001c24 <main+0x22c>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Instance = I2C1;
 8001c2a:	4835      	ldr	r0, [pc, #212]	; (8001d00 <main+0x308>)
	hi2c1.Init.OwnAddress1 = 0;
 8001c2c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hi2c1.Init.OwnAddress2 = 0;
 8001c30:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c34:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c38:	6102      	str	r2, [r0, #16]
	hi2c1.Init.ClockSpeed = 400000;
 8001c3a:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <main+0x30c>)
 8001c3c:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <main+0x310>)
 8001c3e:	e9c0 2300 	strd	r2, r3, [r0]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001c42:	f001 fb85 	bl	8003350 <HAL_I2C_Init>
 8001c46:	4682      	mov	sl, r0
 8001c48:	b108      	cbz	r0, 8001c4e <main+0x256>
 8001c4a:	b672      	cpsid	i
	while (1) {
 8001c4c:	e7fe      	b.n	8001c4c <main+0x254>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f001 f968 	bl	8002f24 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8001c54:	4630      	mov	r0, r6
 8001c56:	f001 f829 	bl	8002cac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c5e:	4630      	mov	r0, r6
 8001c60:	f000 fe90 	bl	8002984 <HAL_ADC_PollForConversion>
	init_weight(&loadcell);
 8001c64:	4628      	mov	r0, r5
 8001c66:	f7ff fd4d 	bl	8001704 <init_weight>
	HAL_TIM_Base_Start(&htim1);
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f002 f860 	bl	8003d30 <HAL_TIM_Base_Start>
	LCD_BL_ON();
 8001c70:	4652      	mov	r2, sl
 8001c72:	4649      	mov	r1, r9
 8001c74:	481a      	ldr	r0, [pc, #104]	; (8001ce0 <main+0x2e8>)
 8001c76:	f001 fb67 	bl	8003348 <HAL_GPIO_WritePin>
	lcdInit();
 8001c7a:	f000 f995 	bl	8001fa8 <lcdInit>
	lcdSetOrientation(1);
 8001c7e:	4638      	mov	r0, r7
 8001c80:	f000 fd62 	bl	8002748 <lcdSetOrientation>
	lcdSetTextFont(&Font16);
 8001c84:	4821      	ldr	r0, [pc, #132]	; (8001d0c <main+0x314>)
 8001c86:	f000 fd53 	bl	8002730 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_PEASHOOT_GREEN);
 8001c8a:	f24d 61eb 	movw	r1, #55019	; 0xd6eb
 8001c8e:	4640      	mov	r0, r8
 8001c90:	f000 fd54 	bl	800273c <lcdSetTextColor>
	start_animation();
 8001c94:	f7ff fe64 	bl	8001960 <start_animation>
	lcdSetCursor(0, lcdGetHeight() / 2);
 8001c98:	f000 fde8 	bl	800286c <lcdGetHeight>
 8001c9c:	4601      	mov	r1, r0
 8001c9e:	4650      	mov	r0, sl
 8001ca0:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8001ca4:	f000 fdb6 	bl	8002814 <lcdSetCursor>
		displayWeight(loadcell);
 8001ca8:	466c      	mov	r4, sp
 8001caa:	ae11      	add	r6, sp, #68	; 0x44
		getSoilMoisture();
 8001cac:	f7ff fd4a 	bl	8001744 <getSoilMoisture>
		displayWeight(loadcell);
 8001cb0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb4:	6833      	ldr	r3, [r6, #0]
 8001cb6:	6023      	str	r3, [r4, #0]
 8001cb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cbc:	f7ff fcd2 	bl	8001664 <displayWeight>
	if (DHT11_Start()) {
 8001cc0:	f7ff fb96 	bl	80013f0 <DHT11_Start>
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	d0ef      	beq.n	8001ca8 <main+0x2b0>
 8001cc8:	f7ff fc4e 	bl	8001568 <displayHumidityTemperature.part.0>
 8001ccc:	e7ec      	b.n	8001ca8 <main+0x2b0>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40011800 	.word	0x40011800
 8001cd8:	20000234 	.word	0x20000234
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	40011400 	.word	0x40011400
 8001ce4:	40010c00 	.word	0x40010c00
 8001ce8:	40012400 	.word	0x40012400
 8001cec:	200002b8 	.word	0x200002b8
 8001cf0:	a0000104 	.word	0xa0000104
 8001cf4:	20000300 	.word	0x20000300
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40012c00 	.word	0x40012c00
 8001d00:	20000264 	.word	0x20000264
 8001d04:	00061a80 	.word	0x00061a80
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	2000000c 	.word	0x2000000c

08001d10 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_MspInit+0x3c>)
{
 8001d12:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d14:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d16:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	619a      	str	r2, [r3, #24]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	f002 0201 	and.w	r2, r2, #1
 8001d24:	9200      	str	r2, [sp, #0]
 8001d26:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d2e:	61da      	str	r2, [r3, #28]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d3a:	684b      	ldr	r3, [r1, #4]
 8001d3c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d44:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	b002      	add	sp, #8
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000

08001d54 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	2300      	movs	r3, #0
{
 8001d56:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC1)
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <HAL_ADC_MspInit+0x5c>)
 8001d5a:	6801      	ldr	r1, [r0, #0]
{
 8001d5c:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 8001d5e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001d64:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC1)
 8001d68:	d001      	beq.n	8001d6e <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d6a:	b007      	add	sp, #28
 8001d6c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d6e:	2504      	movs	r5, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d70:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d76:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d7a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d82:	619a      	str	r2, [r3, #24]
 8001d84:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d88:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001d8c:	9200      	str	r2, [sp, #0]
 8001d8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d90:	699a      	ldr	r2, [r3, #24]
 8001d92:	f042 0210 	orr.w	r2, r2, #16
 8001d96:	619a      	str	r2, [r3, #24]
 8001d98:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9a:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da6:	f001 f9a1 	bl	80030ec <HAL_GPIO_Init>
}
 8001daa:	b007      	add	sp, #28
 8001dac:	bd30      	pop	{r4, r5, pc}
 8001dae:	bf00      	nop
 8001db0:	40012400 	.word	0x40012400
 8001db4:	40011000 	.word	0x40011000

08001db8 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	2300      	movs	r3, #0
{
 8001dba:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 8001dbc:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <HAL_I2C_MspInit+0x68>)
 8001dbe:	6801      	ldr	r1, [r0, #0]
{
 8001dc0:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 8001dc2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001dc8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dce:	b007      	add	sp, #28
 8001dd0:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dd2:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd6:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd8:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4c12      	ldr	r4, [pc, #72]	; (8001e24 <HAL_I2C_MspInit+0x6c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	69a3      	ldr	r3, [r4, #24]
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	61a3      	str	r3, [r4, #24]
 8001de6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001de8:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	480d      	ldr	r0, [pc, #52]	; (8001e28 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df4:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df6:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f001 f978 	bl	80030ec <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001dfc:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <HAL_I2C_MspInit+0x74>)
 8001dfe:	6853      	ldr	r3, [r2, #4]
 8001e00:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e0a:	69e3      	ldr	r3, [r4, #28]
 8001e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e10:	61e3      	str	r3, [r4, #28]
 8001e12:	69e3      	ldr	r3, [r4, #28]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	9b01      	ldr	r3, [sp, #4]
}
 8001e1c:	b007      	add	sp, #28
 8001e1e:	bd30      	pop	{r4, r5, pc}
 8001e20:	40005400 	.word	0x40005400
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	40010000 	.word	0x40010000

08001e30 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_TIM_Base_MspInit+0x28>)
 8001e32:	6802      	ldr	r2, [r0, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d000      	beq.n	8001e3a <HAL_TIM_Base_MspInit+0xa>
 8001e38:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e3a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001e3e:	699a      	ldr	r2, [r3, #24]
{
 8001e40:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e46:	619a      	str	r2, [r3, #24]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e52:	b002      	add	sp, #8
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40012c00 	.word	0x40012c00

08001e5c <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e5c:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_SRAM_MspInit+0x58>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001e62:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 8001e64:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e66:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 8001e68:	bb12      	cbnz	r2, 8001eb0 <HAL_SRAM_MspInit+0x54>
  FSMC_Initialized = 1;
 8001e6a:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6e:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e70:	f64f 7680 	movw	r6, #65408	; 0xff80
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001e78:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 8001e7c:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e7e:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e80:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e86:	6153      	str	r3, [r2, #20]
 8001e88:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e8a:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e94:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e98:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9a:	f001 f927 	bl	80030ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e9e:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <HAL_SRAM_MspInit+0x60>)
 8001ea4:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001eaa:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eac:	f001 f91e 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001eb0:	b007      	add	sp, #28
 8001eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb4:	20000354 	.word	0x20000354
 8001eb8:	40011800 	.word	0x40011800
 8001ebc:	40011400 	.word	0x40011400

08001ec0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <NMI_Handler>
 8001ec2:	bf00      	nop

08001ec4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <HardFault_Handler>
 8001ec6:	bf00      	nop

08001ec8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <MemManage_Handler>
 8001eca:	bf00      	nop

08001ecc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <BusFault_Handler>
 8001ece:	bf00      	nop

08001ed0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <UsageFault_Handler>
 8001ed2:	bf00      	nop

08001ed4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <DebugMon_Handler>:
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop

08001edc <PendSV_Handler>:
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop

08001ee0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee0:	f000 bd2c 	b.w	800293c <HAL_IncTick>

08001ee4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	4770      	bx	lr

08001ee8 <_kill>:

int _kill(int pid, int sig)
{
 8001ee8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001eea:	f002 f92d 	bl	8004148 <__errno>
 8001eee:	2216      	movs	r2, #22
 8001ef0:	4603      	mov	r3, r0
	return -1;
}
 8001ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	errno = EINVAL;
 8001ef6:	601a      	str	r2, [r3, #0]
}
 8001ef8:	bd08      	pop	{r3, pc}
 8001efa:	bf00      	nop

08001efc <_exit>:

void _exit (int status)
{
 8001efc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001efe:	f002 f923 	bl	8004148 <__errno>
 8001f02:	2316      	movs	r3, #22
 8001f04:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001f06:	e7fe      	b.n	8001f06 <_exit+0xa>

08001f08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f08:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	1e16      	subs	r6, r2, #0
 8001f0c:	dd07      	ble.n	8001f1e <_read+0x16>
 8001f0e:	460c      	mov	r4, r1
 8001f10:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001f12:	f3af 8000 	nop.w
 8001f16:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	42a5      	cmp	r5, r4
 8001f1c:	d1f9      	bne.n	8001f12 <_read+0xa>
	}

return len;
}
 8001f1e:	4630      	mov	r0, r6
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
 8001f22:	bf00      	nop

08001f24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f24:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	1e16      	subs	r6, r2, #0
 8001f28:	dd07      	ble.n	8001f3a <_write+0x16>
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001f2e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001f32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	42a5      	cmp	r5, r4
 8001f38:	d1f9      	bne.n	8001f2e <_write+0xa>
	}
	return len;
}
 8001f3a:	4630      	mov	r0, r6
 8001f3c:	bd70      	pop	{r4, r5, r6, pc}
 8001f3e:	bf00      	nop

08001f40 <_close>:

int _close(int file)
{
	return -1;
}
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001f4c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001f4e:	604b      	str	r3, [r1, #4]
}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop

08001f54 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f54:	2001      	movs	r0, #1
 8001f56:	4770      	bx	lr

08001f58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f58:	2000      	movs	r0, #0
 8001f5a:	4770      	bx	lr

08001f5c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f5c:	490d      	ldr	r1, [pc, #52]	; (8001f94 <_sbrk+0x38>)
{
 8001f5e:	4603      	mov	r3, r0
 8001f60:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f62:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <_sbrk+0x3c>)
 8001f64:	4c0d      	ldr	r4, [pc, #52]	; (8001f9c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001f66:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001f6a:	b120      	cbz	r0, 8001f76 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6c:	4403      	add	r3, r0
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d807      	bhi.n	8001f82 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f72:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001f74:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f76:	4c0a      	ldr	r4, [pc, #40]	; (8001fa0 <_sbrk+0x44>)
 8001f78:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001f7a:	4403      	add	r3, r0
 8001f7c:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8001f7e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001f80:	d9f7      	bls.n	8001f72 <_sbrk+0x16>
    errno = ENOMEM;
 8001f82:	f002 f8e1 	bl	8004148 <__errno>
 8001f86:	220c      	movs	r2, #12
 8001f88:	4603      	mov	r3, r0
    return (void *)-1;
 8001f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8001f8e:	601a      	str	r2, [r3, #0]
}
 8001f90:	bd10      	pop	{r4, pc}
 8001f92:	bf00      	nop
 8001f94:	20000358 	.word	0x20000358
 8001f98:	20010000 	.word	0x20010000
 8001f9c:	00000400 	.word	0x00000400
 8001fa0:	20000478 	.word	0x20000478

08001fa4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop

08001fa8 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8001fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001fac:	2348      	movs	r3, #72	; 0x48
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8001fae:	2628      	movs	r6, #40	; 0x28
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001fb0:	2288      	movs	r2, #136	; 0x88
}

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
	LCD_CmdWrite(command);
 8001fb2:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8001fb6:	2501      	movs	r5, #1
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001fb8:	f04f 08e8 	mov.w	r8, #232	; 0xe8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001fbc:	4f91      	ldr	r7, [pc, #580]	; (8002204 <lcdInit+0x25c>)
	HAL_Delay(50);
 8001fbe:	2032      	movs	r0, #50	; 0x32
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001fc0:	703b      	strb	r3, [r7, #0]
  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8001fc2:	4b91      	ldr	r3, [pc, #580]	; (8002208 <lcdInit+0x260>)
}

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
	LCD_DataWrite(data);
 8001fc4:	f04f 0783 	mov.w	r7, #131	; 0x83
  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8001fc8:	701e      	strb	r6, [r3, #0]
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001fca:	4b90      	ldr	r3, [pc, #576]	; (800220c <lcdInit+0x264>)
	LCD_DataWrite(data);
 8001fcc:	f04f 092c 	mov.w	r9, #44	; 0x2c
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001fd0:	701a      	strb	r2, [r3, #0]
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001fd2:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <lcdInit+0x268>)
	LCD_DataWrite(data);
 8001fd4:	f04f 0a11 	mov.w	sl, #17
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001fd8:	f883 8000 	strb.w	r8, [r3]
	LCD_CmdWrite(command);
 8001fdc:	8025      	strh	r5, [r4, #0]
	HAL_Delay(50);
 8001fde:	f000 fcbf 	bl	8002960 <HAL_Delay>
	LCD_CmdWrite(command);
 8001fe2:	23cf      	movs	r3, #207	; 0xcf
	LCD_DataWrite(data);
 8001fe4:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 8001fe6:	8026      	strh	r6, [r4, #0]
 8001fe8:	8023      	strh	r3, [r4, #0]
	LCD_DataWrite(data);
 8001fea:	4b8a      	ldr	r3, [pc, #552]	; (8002214 <lcdInit+0x26c>)
 8001fec:	2664      	movs	r6, #100	; 0x64
 8001fee:	801a      	strh	r2, [r3, #0]
 8001ff0:	801f      	strh	r7, [r3, #0]
 8001ff2:	f04f 0730 	mov.w	r7, #48	; 0x30
 8001ff6:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001ff8:	f04f 07ed 	mov.w	r7, #237	; 0xed
 8001ffc:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8001ffe:	f04f 0703 	mov.w	r7, #3
 8002002:	801e      	strh	r6, [r3, #0]
 8002004:	801f      	strh	r7, [r3, #0]
 8002006:	f04f 0712 	mov.w	r7, #18
 800200a:	801f      	strh	r7, [r3, #0]
 800200c:	f04f 0781 	mov.w	r7, #129	; 0x81
 8002010:	801f      	strh	r7, [r3, #0]
 8002012:	f04f 0785 	mov.w	r7, #133	; 0x85
	LCD_CmdWrite(command);
 8002016:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 800201a:	801f      	strh	r7, [r3, #0]
 800201c:	f04f 0779 	mov.w	r7, #121	; 0x79
 8002020:	801d      	strh	r5, [r3, #0]
 8002022:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8002024:	f04f 07cb 	mov.w	r7, #203	; 0xcb
 8002028:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800202a:	f04f 0739 	mov.w	r7, #57	; 0x39
 800202e:	801f      	strh	r7, [r3, #0]
 8002030:	f04f 0734 	mov.w	r7, #52	; 0x34
 8002034:	f8a3 9000 	strh.w	r9, [r3]
 8002038:	f04f 0802 	mov.w	r8, #2
 800203c:	801a      	strh	r2, [r3, #0]
 800203e:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8002040:	f04f 07f7 	mov.w	r7, #247	; 0xf7
	LCD_DataWrite(data);
 8002044:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8002048:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800204a:	f04f 0720 	mov.w	r7, #32
 800204e:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8002050:	f04f 07ea 	mov.w	r7, #234	; 0xea
 8002054:	8027      	strh	r7, [r4, #0]
 8002056:	f04f 07c0 	mov.w	r7, #192	; 0xc0
	LCD_DataWrite(data);
 800205a:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 800205c:	f04f 08c1 	mov.w	r8, #193	; 0xc1
	LCD_DataWrite(data);
 8002060:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 8002062:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8002064:	f04f 0726 	mov.w	r7, #38	; 0x26
 8002068:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 800206a:	f8a4 8000 	strh.w	r8, [r4]
 800206e:	f04f 08c5 	mov.w	r8, #197	; 0xc5
	LCD_DataWrite(data);
 8002072:	f8a3 a000 	strh.w	sl, [r3]
	LCD_CmdWrite(command);
 8002076:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 800207a:	f04f 0835 	mov.w	r8, #53	; 0x35
 800207e:	f8a3 8000 	strh.w	r8, [r3]
 8002082:	f04f 083e 	mov.w	r8, #62	; 0x3e
 8002086:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 800208a:	f04f 08c7 	mov.w	r8, #199	; 0xc7
 800208e:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8002092:	f04f 08be 	mov.w	r8, #190	; 0xbe
 8002096:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 800209a:	f04f 0836 	mov.w	r8, #54	; 0x36
 800209e:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
 80020a2:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 80020a6:	f04f 0855 	mov.w	r8, #85	; 0x55
  lcdWriteData(lcdPortraitConfig);
 80020aa:	4f56      	ldr	r7, [pc, #344]	; (8002204 <lcdInit+0x25c>)
	LCD_DataWrite(data);
 80020ac:	210a      	movs	r1, #10
  lcdWriteData(lcdPortraitConfig);
 80020ae:	783f      	ldrb	r7, [r7, #0]
	LCD_DataWrite(data);
 80020b0:	2007      	movs	r0, #7
 80020b2:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80020b4:	f8a4 c000 	strh.w	ip, [r4]
	LCD_DataWrite(data);
 80020b8:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 80020bc:	f04f 08b1 	mov.w	r8, #177	; 0xb1
 80020c0:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 80020c4:	f04f 081b 	mov.w	r8, #27
 80020c8:	801a      	strh	r2, [r3, #0]
 80020ca:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 80020ce:	f04f 08f2 	mov.w	r8, #242	; 0xf2
 80020d2:	f04f 0726 	mov.w	r7, #38	; 0x26
 80020d6:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 80020da:	f04f 0808 	mov.w	r8, #8
 80020de:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 80020e2:	8027      	strh	r7, [r4, #0]
 80020e4:	f04f 07e0 	mov.w	r7, #224	; 0xe0
	LCD_DataWrite(data);
 80020e8:	801d      	strh	r5, [r3, #0]
 80020ea:	f04f 081a 	mov.w	r8, #26
	LCD_CmdWrite(command);
 80020ee:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80020f0:	f04f 071f 	mov.w	r7, #31
 80020f4:	801f      	strh	r7, [r3, #0]
 80020f6:	f8a3 8000 	strh.w	r8, [r3]
 80020fa:	f04f 0818 	mov.w	r8, #24
 80020fe:	f8a3 8000 	strh.w	r8, [r3]
 8002102:	f04f 080f 	mov.w	r8, #15
 8002106:	8019      	strh	r1, [r3, #0]
 8002108:	f8a3 8000 	strh.w	r8, [r3]
 800210c:	f04f 0806 	mov.w	r8, #6
 8002110:	f8a3 8000 	strh.w	r8, [r3]
 8002114:	f04f 0845 	mov.w	r8, #69	; 0x45
 8002118:	f8a3 8000 	strh.w	r8, [r3]
 800211c:	f04f 0887 	mov.w	r8, #135	; 0x87
 8002120:	f8a3 8000 	strh.w	r8, [r3]
 8002124:	f04f 0832 	mov.w	r8, #50	; 0x32
 8002128:	f8a3 8000 	strh.w	r8, [r3]
 800212c:	f04f 0802 	mov.w	r8, #2
 8002130:	8019      	strh	r1, [r3, #0]
 8002132:	f04f 0e05 	mov.w	lr, #5
 8002136:	8018      	strh	r0, [r3, #0]
 8002138:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 800213c:	f04f 08e1 	mov.w	r8, #225	; 0xe1
	LCD_DataWrite(data);
 8002140:	8018      	strh	r0, [r3, #0]
 8002142:	f8a3 e000 	strh.w	lr, [r3]
 8002146:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 8002148:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 800214c:	f04f 0825 	mov.w	r8, #37	; 0x25
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	f04f 0b27 	mov.w	fp, #39	; 0x27
 8002156:	f8a3 8000 	strh.w	r8, [r3]
 800215a:	f04f 0810 	mov.w	r8, #16
 800215e:	f8a3 b000 	strh.w	fp, [r3]
 8002162:	f8a3 e000 	strh.w	lr, [r3]
 8002166:	f8a3 8000 	strh.w	r8, [r3]
 800216a:	f04f 0809 	mov.w	r8, #9
 800216e:	f8a3 8000 	strh.w	r8, [r3]
 8002172:	f04f 0878 	mov.w	r8, #120	; 0x78
 8002176:	f8a3 c000 	strh.w	ip, [r3]
 800217a:	f8a3 8000 	strh.w	r8, [r3]
 800217e:	f04f 084d 	mov.w	r8, #77	; 0x4d
 8002182:	f8a3 8000 	strh.w	r8, [r3]
 8002186:	f8a3 e000 	strh.w	lr, [r3]
 800218a:	f04f 0818 	mov.w	r8, #24
 800218e:	f04f 0e0d 	mov.w	lr, #13
 8002192:	f8a3 8000 	strh.w	r8, [r3]
 8002196:	f8a3 e000 	strh.w	lr, [r3]
 800219a:	f04f 0e38 	mov.w	lr, #56	; 0x38
 800219e:	f8a3 e000 	strh.w	lr, [r3]
 80021a2:	f8a3 c000 	strh.w	ip, [r3]
 80021a6:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80021a8:	f04f 072a 	mov.w	r7, #42	; 0x2a
 80021ac:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80021ae:	f04f 07ef 	mov.w	r7, #239	; 0xef
 80021b2:	801a      	strh	r2, [r3, #0]
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	801a      	strh	r2, [r3, #0]
 80021b8:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80021ba:	f04f 072b 	mov.w	r7, #43	; 0x2b
 80021be:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80021c0:	801a      	strh	r2, [r3, #0]
 80021c2:	801a      	strh	r2, [r3, #0]
 80021c4:	801d      	strh	r5, [r3, #0]
 80021c6:	f04f 053f 	mov.w	r5, #63	; 0x3f
 80021ca:	801d      	strh	r5, [r3, #0]
	LCD_CmdWrite(command);
 80021cc:	f04f 05b7 	mov.w	r5, #183	; 0xb7
 80021d0:	8025      	strh	r5, [r4, #0]
	LCD_DataWrite(data);
 80021d2:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 80021d4:	f04f 00b6 	mov.w	r0, #182	; 0xb6
 80021d8:	8020      	strh	r0, [r4, #0]
	LCD_DataWrite(data);
 80021da:	8019      	strh	r1, [r3, #0]
 80021dc:	f04f 0182 	mov.w	r1, #130	; 0x82
  HAL_Delay(100);
 80021e0:	4630      	mov	r0, r6
	LCD_DataWrite(data);
 80021e2:	8019      	strh	r1, [r3, #0]
 80021e4:	f8a3 b000 	strh.w	fp, [r3]
 80021e8:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80021ea:	f8a4 a000 	strh.w	sl, [r4]
  HAL_Delay(100);
 80021ee:	f000 fbb7 	bl	8002960 <HAL_Delay>
	LCD_CmdWrite(command);
 80021f2:	2329      	movs	r3, #41	; 0x29
  HAL_Delay(100);
 80021f4:	4630      	mov	r0, r6
	LCD_CmdWrite(command);
 80021f6:	8023      	strh	r3, [r4, #0]
  HAL_Delay(100);
 80021f8:	f000 fbb2 	bl	8002960 <HAL_Delay>
	LCD_CmdWrite(command);
 80021fc:	f8a4 9000 	strh.w	r9, [r4]
}
 8002200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002204:	20000462 	.word	0x20000462
 8002208:	20000460 	.word	0x20000460
 800220c:	20000463 	.word	0x20000463
 8002210:	20000461 	.word	0x20000461
 8002214:	60020000 	.word	0x60020000

08002218 <lcdFillRGB>:
{
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
	LCD_CmdWrite(command);
 800221a:	232a      	movs	r3, #42	; 0x2a
 800221c:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
	LCD_DataWrite(data);
 8002220:	f04f 0c00 	mov.w	ip, #0
	LCD_CmdWrite(command);
 8002224:	262b      	movs	r6, #43	; 0x2b
 8002226:	252c      	movs	r5, #44	; 0x2c
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8002228:	4c14      	ldr	r4, [pc, #80]	; (800227c <lcdFillRGB+0x64>)
	LCD_DataWrite(data);
 800222a:	4a15      	ldr	r2, [pc, #84]	; (8002280 <lcdFillRGB+0x68>)
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 800222c:	8821      	ldrh	r1, [r4, #0]
	LCD_CmdWrite(command);
 800222e:	f8ae 3000 	strh.w	r3, [lr]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8002232:	8863      	ldrh	r3, [r4, #2]
 8002234:	3901      	subs	r1, #1
 8002236:	3b01      	subs	r3, #1
  lcdWriteData((x1 >> 8) & 0xFF);
 8002238:	f3c1 2707 	ubfx	r7, r1, #8, #8
  lcdWriteData(x1 & 0xFF);
 800223c:	b2c9      	uxtb	r1, r1
	LCD_DataWrite(data);
 800223e:	f8a2 c000 	strh.w	ip, [r2]
 8002242:	f8a2 c000 	strh.w	ip, [r2]
 8002246:	8017      	strh	r7, [r2, #0]
 8002248:	8011      	strh	r1, [r2, #0]
  lcdWriteData((y1 >> 8) & 0xFF);
 800224a:	f3c3 2107 	ubfx	r1, r3, #8, #8
  lcdWriteData(y1 & 0xFF);
 800224e:	b2db      	uxtb	r3, r3
	LCD_CmdWrite(command);
 8002250:	f8ae 6000 	strh.w	r6, [lr]
	LCD_DataWrite(data);
 8002254:	f8a2 c000 	strh.w	ip, [r2]
 8002258:	f8a2 c000 	strh.w	ip, [r2]
 800225c:	8011      	strh	r1, [r2, #0]
 800225e:	8013      	strh	r3, [r2, #0]
	LCD_CmdWrite(command);
 8002260:	f8ae 5000 	strh.w	r5, [lr]
  int dimensions = lcdProperties.width * lcdProperties.height;
 8002264:	8821      	ldrh	r1, [r4, #0]
 8002266:	8863      	ldrh	r3, [r4, #2]
 8002268:	fb03 f101 	mul.w	r1, r3, r1
  while(dimensions--)
 800226c:	b121      	cbz	r1, 8002278 <lcdFillRGB+0x60>
 800226e:	1e4b      	subs	r3, r1, #1
 8002270:	3b01      	subs	r3, #1
 8002272:	1c59      	adds	r1, r3, #1
	LCD_DataWrite(data);
 8002274:	8010      	strh	r0, [r2, #0]
  while(dimensions--)
 8002276:	d1fb      	bne.n	8002270 <lcdFillRGB+0x58>
}
 8002278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227a:	bf00      	nop
 800227c:	20000024 	.word	0x20000024
 8002280:	60020000 	.word	0x60020000

08002284 <lcdDrawLine>:
{
 8002284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8002288:	1a17      	subs	r7, r2, r0
 800228a:	1a5e      	subs	r6, r3, r1
 800228c:	2f00      	cmp	r7, #0
{
 800228e:	b083      	sub	sp, #12
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8002290:	bfb8      	it	lt
 8002292:	427f      	neglt	r7, r7
 8002294:	2e00      	cmp	r6, #0
{
 8002296:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 800229a:	bfb8      	it	lt
 800229c:	4276      	neglt	r6, r6
	if (steep)
 800229e:	42be      	cmp	r6, r7
{
 80022a0:	9401      	str	r4, [sp, #4]
	if (steep)
 80022a2:	f340 8094 	ble.w	80023ce <lcdDrawLine+0x14a>
 80022a6:	4605      	mov	r5, r0
 80022a8:	4694      	mov	ip, r2
 80022aa:	4696      	mov	lr, r2
 80022ac:	4604      	mov	r4, r0
		swap(x2, y2);
 80022ae:	461a      	mov	r2, r3
		swap(x1, y1);
 80022b0:	4608      	mov	r0, r1
		swap(x2, y2);
 80022b2:	4663      	mov	r3, ip
		swap(x1, y1);
 80022b4:	4629      	mov	r1, r5
	if (x1 > x2)
 80022b6:	4290      	cmp	r0, r2
 80022b8:	dd08      	ble.n	80022cc <lcdDrawLine+0x48>
 80022ba:	46a0      	mov	r8, r4
 80022bc:	468c      	mov	ip, r1
 80022be:	4605      	mov	r5, r0
 80022c0:	4674      	mov	r4, lr
		swap(y1, y2);
 80022c2:	4619      	mov	r1, r3
	if (x1 > x2)
 80022c4:	4610      	mov	r0, r2
 80022c6:	46c6      	mov	lr, r8
		swap(y1, y2);
 80022c8:	4663      	mov	r3, ip
	if (x1 > x2)
 80022ca:	462a      	mov	r2, r5
	dy = abs(y2 - y1);
 80022cc:	ebae 0e04 	sub.w	lr, lr, r4
	dx = x2 - x1;
 80022d0:	eba2 0900 	sub.w	r9, r2, r0
	dy = abs(y2 - y1);
 80022d4:	f1be 0f00 	cmp.w	lr, #0
	int16_t err = dx / 2;
 80022d8:	fa0f f489 	sxth.w	r4, r9
 80022dc:	f3c9 3cc0 	ubfx	ip, r9, #15, #1
	dy = abs(y2 - y1);
 80022e0:	bfb8      	it	lt
 80022e2:	f1ce 0e00 	rsblt	lr, lr, #0
	int16_t err = dx / 2;
 80022e6:	44a4      	add	ip, r4
	if (y1 < y2)
 80022e8:	428b      	cmp	r3, r1
	dx = x2 - x1;
 80022ea:	fa1f f989 	uxth.w	r9, r9
	int16_t err = dx / 2;
 80022ee:	ea4f 0c6c 	mov.w	ip, ip, asr #1
	if (y1 < y2)
 80022f2:	dd67      	ble.n	80023c4 <lcdDrawLine+0x140>
		ystep = 1;
 80022f4:	f04f 0b01 	mov.w	fp, #1
	LCD_CmdWrite(command);
 80022f8:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
	LCD_DataWrite(data);
 80022fc:	46ca      	mov	sl, r9
 80022fe:	4d37      	ldr	r5, [pc, #220]	; (80023dc <lcdDrawLine+0x158>)
 8002300:	4c37      	ldr	r4, [pc, #220]	; (80023e0 <lcdDrawLine+0x15c>)
		err -= dy;
 8002302:	fa1f fe8e 	uxth.w	lr, lr
	LCD_DataWrite(data);
 8002306:	9200      	str	r2, [sp, #0]
 8002308:	e038      	b.n	800237c <lcdDrawLine+0xf8>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 800230a:	4548      	cmp	r0, r9
 800230c:	d923      	bls.n	8002356 <lcdDrawLine+0xd2>
 800230e:	8868      	ldrh	r0, [r5, #2]
 8002310:	4298      	cmp	r0, r3
 8002312:	d920      	bls.n	8002356 <lcdDrawLine+0xd2>
	LCD_CmdWrite(command);
 8002314:	f04f 022a 	mov.w	r2, #42	; 0x2a
 8002318:	f8a8 2000 	strh.w	r2, [r8]
 800231c:	f04f 022b 	mov.w	r2, #43	; 0x2b
  lcdWriteData((x0 >> 8) & 0xFF);
 8002320:	ea4f 2019 	mov.w	r0, r9, lsr #8
  lcdWriteData(x0 & 0xFF);
 8002324:	fa5f f989 	uxtb.w	r9, r9
	LCD_DataWrite(data);
 8002328:	8020      	strh	r0, [r4, #0]
 800232a:	f8a4 9000 	strh.w	r9, [r4]
 800232e:	8020      	strh	r0, [r4, #0]
 8002330:	f8a4 9000 	strh.w	r9, [r4]
  lcdWriteData((y0 >> 8) & 0xFF);
 8002334:	ea4f 2913 	mov.w	r9, r3, lsr #8
	LCD_CmdWrite(command);
 8002338:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData(y0 & 0xFF);
 800233c:	b2d8      	uxtb	r0, r3
	LCD_DataWrite(data);
 800233e:	f8a4 9000 	strh.w	r9, [r4]
	LCD_CmdWrite(command);
 8002342:	f04f 022c 	mov.w	r2, #44	; 0x2c
	LCD_DataWrite(data);
 8002346:	8020      	strh	r0, [r4, #0]
 8002348:	f8a4 9000 	strh.w	r9, [r4]
 800234c:	8020      	strh	r0, [r4, #0]
	LCD_CmdWrite(command);
 800234e:	f8a8 2000 	strh.w	r2, [r8]
	LCD_DataWrite(data);
 8002352:	9a01      	ldr	r2, [sp, #4]
 8002354:	8022      	strh	r2, [r4, #0]
		err -= dy;
 8002356:	ebac 0c0e 	sub.w	ip, ip, lr
 800235a:	3301      	adds	r3, #1
 800235c:	b218      	sxth	r0, r3
 800235e:	fa1f f38c 	uxth.w	r3, ip
 8002362:	fa0f fc8c 	sxth.w	ip, ip
		if (err < 0)
 8002366:	f1bc 0f00 	cmp.w	ip, #0
 800236a:	da04      	bge.n	8002376 <lcdDrawLine+0xf2>
			err += dx;
 800236c:	4453      	add	r3, sl
			y1 += ystep;
 800236e:	4459      	add	r1, fp
			err += dx;
 8002370:	fa0f fc83 	sxth.w	ip, r3
			y1 += ystep;
 8002374:	b209      	sxth	r1, r1
	for (; x1 <= x2; x1++)
 8002376:	9b00      	ldr	r3, [sp, #0]
 8002378:	4298      	cmp	r0, r3
 800237a:	dc25      	bgt.n	80023c8 <lcdDrawLine+0x144>
		if (steep)
 800237c:	42be      	cmp	r6, r7
 800237e:	b283      	uxth	r3, r0
			lcdDrawPixel(y1, x1, color);
 8002380:	fa1f f981 	uxth.w	r9, r1
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8002384:	8828      	ldrh	r0, [r5, #0]
		if (steep)
 8002386:	dcc0      	bgt.n	800230a <lcdDrawLine+0x86>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8002388:	4298      	cmp	r0, r3
			lcdDrawPixel(x1, y1, color);
 800238a:	b288      	uxth	r0, r1
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 800238c:	d9e3      	bls.n	8002356 <lcdDrawLine+0xd2>
 800238e:	f8b5 9002 	ldrh.w	r9, [r5, #2]
 8002392:	4581      	cmp	r9, r0
 8002394:	d9df      	bls.n	8002356 <lcdDrawLine+0xd2>
	LCD_CmdWrite(command);
 8002396:	f04f 022a 	mov.w	r2, #42	; 0x2a
  lcdWriteData(x0 & 0xFF);
 800239a:	fa5f f983 	uxtb.w	r9, r3
	LCD_CmdWrite(command);
 800239e:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData((x0 >> 8) & 0xFF);
 80023a2:	0a1a      	lsrs	r2, r3, #8
	LCD_DataWrite(data);
 80023a4:	8022      	strh	r2, [r4, #0]
 80023a6:	f8a4 9000 	strh.w	r9, [r4]
 80023aa:	8022      	strh	r2, [r4, #0]
	LCD_CmdWrite(command);
 80023ac:	f04f 022b 	mov.w	r2, #43	; 0x2b
	LCD_DataWrite(data);
 80023b0:	f8a4 9000 	strh.w	r9, [r4]
  lcdWriteData((y0 >> 8) & 0xFF);
 80023b4:	ea4f 2910 	mov.w	r9, r0, lsr #8
	LCD_CmdWrite(command);
 80023b8:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData(y0 & 0xFF);
 80023bc:	b2c0      	uxtb	r0, r0
	LCD_DataWrite(data);
 80023be:	f8a4 9000 	strh.w	r9, [r4]
 80023c2:	e7be      	b.n	8002342 <lcdDrawLine+0xbe>
	for (; x1 <= x2; x1++)
 80023c4:	4290      	cmp	r0, r2
 80023c6:	dd05      	ble.n	80023d4 <lcdDrawLine+0x150>
}
 80023c8:	b003      	add	sp, #12
 80023ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023ce:	460c      	mov	r4, r1
 80023d0:	469e      	mov	lr, r3
 80023d2:	e770      	b.n	80022b6 <lcdDrawLine+0x32>
		ystep = -1;
 80023d4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80023d8:	e78e      	b.n	80022f8 <lcdDrawLine+0x74>
 80023da:	bf00      	nop
 80023dc:	20000024 	.word	0x20000024
 80023e0:	60020000 	.word	0x60020000

080023e4 <lcdDrawImage>:
{
 80023e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80023e8:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80024b8 <lcdDrawImage+0xd4>
{
 80023ec:	b085      	sub	sp, #20
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80023ee:	f8b8 e000 	ldrh.w	lr, [r8]
 80023f2:	4586      	cmp	lr, r0
 80023f4:	d95c      	bls.n	80024b0 <lcdDrawImage+0xcc>
 80023f6:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 80023fa:	428d      	cmp	r5, r1
 80023fc:	d958      	bls.n	80024b0 <lcdDrawImage+0xcc>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 80023fe:	8813      	ldrh	r3, [r2, #0]
 8002400:	4403      	add	r3, r0
 8002402:	4573      	cmp	r3, lr
 8002404:	dc54      	bgt.n	80024b0 <lcdDrawImage+0xcc>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8002406:	8853      	ldrh	r3, [r2, #2]
 8002408:	18cc      	adds	r4, r1, r3
 800240a:	42ac      	cmp	r4, r5
 800240c:	dc50      	bgt.n	80024b0 <lcdDrawImage+0xcc>
	for (int i = 0; i < pBitmap->ySize; ++i)
 800240e:	2b00      	cmp	r3, #0
 8002410:	d04e      	beq.n	80024b0 <lcdDrawImage+0xcc>
 8002412:	2700      	movs	r7, #0
	LCD_CmdWrite(command);
 8002414:	f04f 49c0 	mov.w	r9, #1610612736	; 0x60000000
 8002418:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 800241c:	7993      	ldrb	r3, [r2, #6]
	LCD_DataWrite(data);
 800241e:	4c27      	ldr	r4, [pc, #156]	; (80024bc <lcdDrawImage+0xd8>)
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8002420:	08db      	lsrs	r3, r3, #3
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	6893      	ldr	r3, [r2, #8]
 8002426:	9300      	str	r3, [sp, #0]
  lcdWriteData((x0 >> 8) & 0xFF);
 8002428:	0a03      	lsrs	r3, r0, #8
 800242a:	9302      	str	r3, [sp, #8]
  lcdWriteData(x0 & 0xFF);
 800242c:	b2c3      	uxtb	r3, r0
 800242e:	9303      	str	r3, [sp, #12]
	LCD_DataWrite(data);
 8002430:	9b02      	ldr	r3, [sp, #8]
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8002432:	8890      	ldrh	r0, [r2, #4]
	LCD_CmdWrite(command);
 8002434:	f8a9 b000 	strh.w	fp, [r9]
	LCD_DataWrite(data);
 8002438:	8023      	strh	r3, [r4, #0]
 800243a:	9b03      	ldr	r3, [sp, #12]
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 800243c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	LCD_DataWrite(data);
 8002440:	8023      	strh	r3, [r4, #0]
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8002442:	9b01      	ldr	r3, [sp, #4]
  lcdWriteData((x1 >> 8) & 0xFF);
 8002444:	f3ce 2a07 	ubfx	sl, lr, #8, #8
  lcdWriteData(x1 & 0xFF);
 8002448:	fa5f fe8e 	uxtb.w	lr, lr
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 800244c:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8002450:	fbb0 f5f3 	udiv	r5, r0, r3
 8002454:	9b00      	ldr	r3, [sp, #0]
	LCD_DataWrite(data);
 8002456:	f8a4 a000 	strh.w	sl, [r4]
 800245a:	f8a4 e000 	strh.w	lr, [r4]
	LCD_CmdWrite(command);
 800245e:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
 8002462:	19ce      	adds	r6, r1, r7
 8002464:	f8a9 e000 	strh.w	lr, [r9]
  lcdWriteData((y0 >> 8) & 0xFF);
 8002468:	f3c6 2e07 	ubfx	lr, r6, #8, #8
  lcdWriteData(y0 & 0xFF);
 800246c:	b2f6      	uxtb	r6, r6
	LCD_DataWrite(data);
 800246e:	f8a4 e000 	strh.w	lr, [r4]
 8002472:	8026      	strh	r6, [r4, #0]
  lcdWriteData((y1 >> 8) & 0xFF);
 8002474:	f3cc 2607 	ubfx	r6, ip, #8, #8
	LCD_DataWrite(data);
 8002478:	8026      	strh	r6, [r4, #0]
	LCD_CmdWrite(command);
 800247a:	f04f 062c 	mov.w	r6, #44	; 0x2c
 800247e:	fb07 3000 	mla	r0, r7, r0, r3
  uint32_t i = 0;
 8002482:	2300      	movs	r3, #0
  lcdWriteData(y1 & 0xFF);
 8002484:	fa5f fc8c 	uxtb.w	ip, ip
	LCD_DataWrite(data);
 8002488:	f8a4 c000 	strh.w	ip, [r4]
	LCD_CmdWrite(command);
 800248c:	3802      	subs	r0, #2
 800248e:	f8a9 6000 	strh.w	r6, [r9]
    lcdWriteData(data[i++]);
 8002492:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8002496:	3301      	adds	r3, #1
  while (i < dataLength);
 8002498:	429d      	cmp	r5, r3
	LCD_DataWrite(data);
 800249a:	8026      	strh	r6, [r4, #0]
  while (i < dataLength);
 800249c:	d8f9      	bhi.n	8002492 <lcdDrawImage+0xae>
	for (int i = 0; i < pBitmap->ySize; ++i)
 800249e:	8853      	ldrh	r3, [r2, #2]
 80024a0:	3701      	adds	r7, #1
 80024a2:	42bb      	cmp	r3, r7
 80024a4:	dd04      	ble.n	80024b0 <lcdDrawImage+0xcc>
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 80024a6:	f8b8 e000 	ldrh.w	lr, [r8]
 80024aa:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 80024ae:	e7bf      	b.n	8002430 <lcdDrawImage+0x4c>
}
 80024b0:	b005      	add	sp, #20
 80024b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b6:	bf00      	nop
 80024b8:	20000024 	.word	0x20000024
 80024bc:	60020000 	.word	0x60020000

080024c0 <lcdDrawChar>:
{
 80024c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((x >= lcdProperties.width) || 			// Clip right
 80024c4:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800264c <lcdDrawChar+0x18c>
{
 80024c8:	b08b      	sub	sp, #44	; 0x2c
	if ((x >= lcdProperties.width) || 			// Clip right
 80024ca:	f8b8 4000 	ldrh.w	r4, [r8]
{
 80024ce:	e9cd 0107 	strd	r0, r1, [sp, #28]
	if ((x >= lcdProperties.width) || 			// Clip right
 80024d2:	42a0      	cmp	r0, r4
{
 80024d4:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 80024d8:	9209      	str	r2, [sp, #36]	; 0x24
	if ((x >= lcdProperties.width) || 			// Clip right
 80024da:	f280 80b3 	bge.w	8002644 <lcdDrawChar+0x184>
 80024de:	4699      	mov	r9, r3
			(y >= lcdProperties.height) || 		// Clip bottom
 80024e0:	f8b8 3002 	ldrh.w	r3, [r8, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 80024e4:	4299      	cmp	r1, r3
 80024e6:	f280 80ad 	bge.w	8002644 <lcdDrawChar+0x184>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 80024ea:	4b59      	ldr	r3, [pc, #356]	; (8002650 <lcdDrawChar+0x190>)
 80024ec:	689c      	ldr	r4, [r3, #8]
 80024ee:	88a3      	ldrh	r3, [r4, #4]
 80024f0:	9403      	str	r4, [sp, #12]
			(y >= lcdProperties.height) || 		// Clip bottom
 80024f2:	42c3      	cmn	r3, r0
 80024f4:	f100 80a6 	bmi.w	8002644 <lcdDrawChar+0x184>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 80024f8:	88e3      	ldrh	r3, [r4, #6]
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 80024fa:	42cb      	cmn	r3, r1
 80024fc:	f100 80a2 	bmi.w	8002644 <lcdDrawChar+0x184>
	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8002500:	f3c3 02c7 	ubfx	r2, r3, #3, #8
 8002504:	9201      	str	r2, [sp, #4]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 809c 	beq.w	8002644 <lcdDrawChar+0x184>
 800250c:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 800250e:	f04f 4bc0 	mov.w	fp, #1610612736	; 0x60000000
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8002512:	4696      	mov	lr, r2
	LCD_DataWrite(data);
 8002514:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8002654 <lcdDrawChar+0x194>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8002518:	9202      	str	r2, [sp, #8]
		for(uint8_t k = 0; k < fontCoeff; k++)
 800251a:	9a01      	ldr	r2, [sp, #4]
 800251c:	2a00      	cmp	r2, #0
 800251e:	f000 8088 	beq.w	8002632 <lcdDrawChar+0x172>
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8002522:	2000      	movs	r0, #0
					lcdDrawPixel(x + j + xP, y + i, bg);
 8002524:	9a08      	ldr	r2, [sp, #32]
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8002526:	9903      	ldr	r1, [sp, #12]
					lcdDrawPixel(x + j + xP, y + i, bg);
 8002528:	4472      	add	r2, lr
 800252a:	b295      	uxth	r5, r2
  lcdWriteData((y0 >> 8) & 0xFF);
 800252c:	f3c2 2e07 	ubfx	lr, r2, #8, #8
  lcdWriteData(y0 & 0xFF);
 8002530:	fa5f fc82 	uxtb.w	ip, r2
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8002534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002536:	6809      	ldr	r1, [r1, #0]
 8002538:	3a20      	subs	r2, #32
 800253a:	9205      	str	r2, [sp, #20]
 800253c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8002540:	9104      	str	r1, [sp, #16]
 8002542:	9206      	str	r2, [sp, #24]
 8002544:	9a02      	ldr	r2, [sp, #8]
 8002546:	9905      	ldr	r1, [sp, #20]
 8002548:	9c06      	ldr	r4, [sp, #24]
 800254a:	fb01 2303 	mla	r3, r1, r3, r2
 800254e:	9a04      	ldr	r2, [sp, #16]
 8002550:	9901      	ldr	r1, [sp, #4]
 8002552:	fb01 2303 	mla	r3, r1, r3, r2
 8002556:	5c1a      	ldrb	r2, [r3, r0]
			for(uint8_t j = 0; j < 8; j++)
 8002558:	00c3      	lsls	r3, r0, #3
 800255a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800255e:	f104 0108 	add.w	r1, r4, #8
 8002562:	4419      	add	r1, r3
 8002564:	4423      	add	r3, r4
 8002566:	b29b      	uxth	r3, r3
 8002568:	b289      	uxth	r1, r1
 800256a:	e02f      	b.n	80025cc <lcdDrawChar+0x10c>
				else if (bg != color)
 800256c:	454f      	cmp	r7, r9
 800256e:	d027      	beq.n	80025c0 <lcdDrawChar+0x100>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8002570:	f8b8 4000 	ldrh.w	r4, [r8]
 8002574:	429c      	cmp	r4, r3
 8002576:	d923      	bls.n	80025c0 <lcdDrawChar+0x100>
 8002578:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800257c:	42ac      	cmp	r4, r5
 800257e:	d91f      	bls.n	80025c0 <lcdDrawChar+0x100>
	LCD_CmdWrite(command);
 8002580:	f04f 062a 	mov.w	r6, #42	; 0x2a
  lcdWriteData((x0 >> 8) & 0xFF);
 8002584:	0a1c      	lsrs	r4, r3, #8
	LCD_CmdWrite(command);
 8002586:	f8ab 6000 	strh.w	r6, [fp]
  lcdWriteData(x0 & 0xFF);
 800258a:	b2de      	uxtb	r6, r3
	LCD_DataWrite(data);
 800258c:	f8aa 4000 	strh.w	r4, [sl]
 8002590:	f8aa 6000 	strh.w	r6, [sl]
 8002594:	f8aa 4000 	strh.w	r4, [sl]
	LCD_CmdWrite(command);
 8002598:	f04f 042b 	mov.w	r4, #43	; 0x2b
	LCD_DataWrite(data);
 800259c:	f8aa 6000 	strh.w	r6, [sl]
	LCD_CmdWrite(command);
 80025a0:	f8ab 4000 	strh.w	r4, [fp]
 80025a4:	f04f 042c 	mov.w	r4, #44	; 0x2c
	LCD_DataWrite(data);
 80025a8:	f8aa e000 	strh.w	lr, [sl]
 80025ac:	f8aa c000 	strh.w	ip, [sl]
 80025b0:	f8aa e000 	strh.w	lr, [sl]
 80025b4:	f8aa c000 	strh.w	ip, [sl]
	LCD_CmdWrite(command);
 80025b8:	f8ab 4000 	strh.w	r4, [fp]
	LCD_DataWrite(data);
 80025bc:	f8aa 7000 	strh.w	r7, [sl]
			for(uint8_t j = 0; j < 8; j++)
 80025c0:	3301      	adds	r3, #1
 80025c2:	b29b      	uxth	r3, r3
				line <<= 1;
 80025c4:	0052      	lsls	r2, r2, #1
			for(uint8_t j = 0; j < 8; j++)
 80025c6:	4299      	cmp	r1, r3
				line <<= 1;
 80025c8:	b2d2      	uxtb	r2, r2
			for(uint8_t j = 0; j < 8; j++)
 80025ca:	d02b      	beq.n	8002624 <lcdDrawChar+0x164>
				if((line & 0x80) == 0x80)
 80025cc:	0614      	lsls	r4, r2, #24
 80025ce:	d5cd      	bpl.n	800256c <lcdDrawChar+0xac>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80025d0:	f8b8 4000 	ldrh.w	r4, [r8]
 80025d4:	429c      	cmp	r4, r3
 80025d6:	d9f3      	bls.n	80025c0 <lcdDrawChar+0x100>
 80025d8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80025dc:	42ac      	cmp	r4, r5
  lcdWriteData((x0 >> 8) & 0xFF);
 80025de:	ea4f 2413 	mov.w	r4, r3, lsr #8
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80025e2:	d9ed      	bls.n	80025c0 <lcdDrawChar+0x100>
	LCD_CmdWrite(command);
 80025e4:	f04f 062a 	mov.w	r6, #42	; 0x2a
 80025e8:	f8ab 6000 	strh.w	r6, [fp]
  lcdWriteData(x0 & 0xFF);
 80025ec:	b2de      	uxtb	r6, r3
	LCD_DataWrite(data);
 80025ee:	f8aa 4000 	strh.w	r4, [sl]
 80025f2:	f8aa 6000 	strh.w	r6, [sl]
 80025f6:	f8aa 4000 	strh.w	r4, [sl]
	LCD_CmdWrite(command);
 80025fa:	f04f 042b 	mov.w	r4, #43	; 0x2b
	LCD_DataWrite(data);
 80025fe:	f8aa 6000 	strh.w	r6, [sl]
	LCD_CmdWrite(command);
 8002602:	f8ab 4000 	strh.w	r4, [fp]
 8002606:	f04f 042c 	mov.w	r4, #44	; 0x2c
	LCD_DataWrite(data);
 800260a:	f8aa e000 	strh.w	lr, [sl]
 800260e:	f8aa c000 	strh.w	ip, [sl]
 8002612:	f8aa e000 	strh.w	lr, [sl]
 8002616:	f8aa c000 	strh.w	ip, [sl]
	LCD_CmdWrite(command);
 800261a:	f8ab 4000 	strh.w	r4, [fp]
	LCD_DataWrite(data);
 800261e:	f8aa 9000 	strh.w	r9, [sl]
}
 8002622:	e7cd      	b.n	80025c0 <lcdDrawChar+0x100>
		for(uint8_t k = 0; k < fontCoeff; k++)
 8002624:	9a01      	ldr	r2, [sp, #4]
 8002626:	3001      	adds	r0, #1
 8002628:	b2c3      	uxtb	r3, r0
 800262a:	4293      	cmp	r3, r2
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	88db      	ldrh	r3, [r3, #6]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8002630:	d388      	bcc.n	8002544 <lcdDrawChar+0x84>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8002632:	9a02      	ldr	r2, [sp, #8]
 8002634:	3201      	adds	r2, #1
 8002636:	fa5f fe82 	uxtb.w	lr, r2
 800263a:	459e      	cmp	lr, r3
 800263c:	f8cd e008 	str.w	lr, [sp, #8]
 8002640:	f4ff af6b 	bcc.w	800251a <lcdDrawChar+0x5a>
}
 8002644:	b00b      	add	sp, #44	; 0x2c
 8002646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800264a:	bf00      	nop
 800264c:	20000024 	.word	0x20000024
 8002650:	20000014 	.word	0x20000014
 8002654:	60020000 	.word	0x60020000

08002658 <lcdPrintf>:
{
 8002658:	b40f      	push	{r0, r1, r2, r3}
 800265a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800265e:	b085      	sub	sp, #20
 8002660:	aa0e      	add	r2, sp, #56	; 0x38
	vsprintf(buf, fmt, lst);
 8002662:	4e2f      	ldr	r6, [pc, #188]	; (8002720 <lcdPrintf+0xc8>)
{
 8002664:	f852 1b04 	ldr.w	r1, [r2], #4
	vsprintf(buf, fmt, lst);
 8002668:	4630      	mov	r0, r6
	va_start(lst, fmt);
 800266a:	9203      	str	r2, [sp, #12]
	vsprintf(buf, fmt, lst);
 800266c:	f003 fb0a 	bl	8005c84 <vsiprintf>
	while (*p)
 8002670:	7832      	ldrb	r2, [r6, #0]
 8002672:	b362      	cbz	r2, 80026ce <lcdPrintf+0x76>
		if (cursorXY.y >= lcdProperties.height)
 8002674:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002724 <lcdPrintf+0xcc>
				cursorXY.x = 0;
 8002678:	f04f 0900 	mov.w	r9, #0
 800267c:	4d2a      	ldr	r5, [pc, #168]	; (8002728 <lcdPrintf+0xd0>)
		if (cursorXY.y >= lcdProperties.height)
 800267e:	f8ba 8002 	ldrh.w	r8, [sl, #2]
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8002682:	4f2a      	ldr	r7, [pc, #168]	; (800272c <lcdPrintf+0xd4>)
 8002684:	e011      	b.n	80026aa <lcdPrintf+0x52>
		else if (*p == '\r')
 8002686:	2a0d      	cmp	r2, #13
 8002688:	d026      	beq.n	80026d8 <lcdPrintf+0x80>
		else if (*p == '\t')
 800268a:	2a09      	cmp	r2, #9
 800268c:	d126      	bne.n	80026dc <lcdPrintf+0x84>
			cursorXY.x += lcdFont.pFont->Width * 4;
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	882b      	ldrh	r3, [r5, #0]
 8002692:	8892      	ldrh	r2, [r2, #4]
		if (cursorXY.y >= lcdProperties.height)
 8002694:	886c      	ldrh	r4, [r5, #2]
			cursorXY.x += lcdFont.pFont->Width * 4;
 8002696:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800269a:	802b      	strh	r3, [r5, #0]
	while (*p)
 800269c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
		if (cursorXY.y >= lcdProperties.height)
 80026a0:	45a0      	cmp	r8, r4
			cursorXY.y = 0;
 80026a2:	bf98      	it	ls
 80026a4:	f8a5 9002 	strhls.w	r9, [r5, #2]
	while (*p)
 80026a8:	b18a      	cbz	r2, 80026ce <lcdPrintf+0x76>
		if (*p == '\n')
 80026aa:	2a0a      	cmp	r2, #10
 80026ac:	d1eb      	bne.n	8002686 <lcdPrintf+0x2e>
			cursorXY.y += lcdFont.pFont->Height;
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	886b      	ldrh	r3, [r5, #2]
 80026b2:	88d4      	ldrh	r4, [r2, #6]
	while (*p)
 80026b4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
			cursorXY.y += lcdFont.pFont->Height;
 80026b8:	441c      	add	r4, r3
 80026ba:	b2a4      	uxth	r4, r4
		if (cursorXY.y >= lcdProperties.height)
 80026bc:	45a0      	cmp	r8, r4
			cursorXY.y += lcdFont.pFont->Height;
 80026be:	806c      	strh	r4, [r5, #2]
			cursorXY.x = 0;
 80026c0:	f8a5 9000 	strh.w	r9, [r5]
			cursorXY.y = 0;
 80026c4:	bf98      	it	ls
 80026c6:	f8a5 9002 	strhls.w	r9, [r5, #2]
	while (*p)
 80026ca:	2a00      	cmp	r2, #0
 80026cc:	d1ed      	bne.n	80026aa <lcdPrintf+0x52>
}
 80026ce:	b005      	add	sp, #20
 80026d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d4:	b004      	add	sp, #16
 80026d6:	4770      	bx	lr
		if (cursorXY.y >= lcdProperties.height)
 80026d8:	886c      	ldrh	r4, [r5, #2]
 80026da:	e7df      	b.n	800269c <lcdPrintf+0x44>
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 80026dc:	88bb      	ldrh	r3, [r7, #4]
 80026de:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80026e2:	f9b5 0000 	ldrsh.w	r0, [r5]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	883b      	ldrh	r3, [r7, #0]
 80026ea:	f8b5 b000 	ldrh.w	fp, [r5]
 80026ee:	886c      	ldrh	r4, [r5, #2]
 80026f0:	f7ff fee6 	bl	80024c0 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 80026f4:	68b9      	ldr	r1, [r7, #8]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 80026f6:	7b38      	ldrb	r0, [r7, #12]
			cursorXY.x += lcdFont.pFont->Width;
 80026f8:	888a      	ldrh	r2, [r1, #4]
 80026fa:	eb0b 0302 	add.w	r3, fp, r2
 80026fe:	b29b      	uxth	r3, r3
 8002700:	802b      	strh	r3, [r5, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8002702:	2800      	cmp	r0, #0
 8002704:	d0ca      	beq.n	800269c <lcdPrintf+0x44>
 8002706:	f8ba 0000 	ldrh.w	r0, [sl]
 800270a:	1a82      	subs	r2, r0, r2
 800270c:	4293      	cmp	r3, r2
 800270e:	ddc5      	ble.n	800269c <lcdPrintf+0x44>
				cursorXY.y += lcdFont.pFont->Height;
 8002710:	88cb      	ldrh	r3, [r1, #6]
				cursorXY.x = 0;
 8002712:	f8a5 9000 	strh.w	r9, [r5]
				cursorXY.y += lcdFont.pFont->Height;
 8002716:	441c      	add	r4, r3
 8002718:	b2a4      	uxth	r4, r4
 800271a:	806c      	strh	r4, [r5, #2]
				cursorXY.x = 0;
 800271c:	e7be      	b.n	800269c <lcdPrintf+0x44>
 800271e:	bf00      	nop
 8002720:	2000035c 	.word	0x2000035c
 8002724:	20000024 	.word	0x20000024
 8002728:	2000045c 	.word	0x2000045c
 800272c:	20000014 	.word	0x20000014

08002730 <lcdSetTextFont>:
	lcdFont.pFont = font;
 8002730:	4b01      	ldr	r3, [pc, #4]	; (8002738 <lcdSetTextFont+0x8>)
 8002732:	6098      	str	r0, [r3, #8]
}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000014 	.word	0x20000014

0800273c <lcdSetTextColor>:
	lcdFont.TextColor = c;
 800273c:	4b01      	ldr	r3, [pc, #4]	; (8002744 <lcdSetTextColor+0x8>)
	lcdFont.BackColor = b;
 800273e:	e9c3 0100 	strd	r0, r1, [r3]
}
 8002742:	4770      	bx	lr
 8002744:	20000014 	.word	0x20000014

08002748 <lcdSetOrientation>:
	LCD_CmdWrite(command);
 8002748:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800274c:	2136      	movs	r1, #54	; 0x36
	lcdProperties.orientation = value;
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <lcdSetOrientation+0xac>)
{
 8002750:	b570      	push	{r4, r5, r6, lr}
	LCD_CmdWrite(command);
 8002752:	8011      	strh	r1, [r2, #0]
	lcdProperties.orientation = value;
 8002754:	7118      	strb	r0, [r3, #4]
	switch (lcdProperties.orientation)
 8002756:	2803      	cmp	r0, #3
 8002758:	d83e      	bhi.n	80027d8 <lcdSetOrientation+0x90>
 800275a:	e8df f000 	tbb	[pc, r0]
 800275e:	2f3b      	.short	0x2f3b
 8002760:	0223      	.short	0x0223
			break;
 8002762:	f04f 0eef 	mov.w	lr, #239	; 0xef
 8002766:	2500      	movs	r5, #0
 8002768:	243f      	movs	r4, #63	; 0x3f
 800276a:	2601      	movs	r6, #1
			lcdWriteData(lcdLandscapeMirrorConfig);
 800276c:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <lcdSetOrientation+0xb0>)
 800276e:	7811      	ldrb	r1, [r2, #0]
	LCD_DataWrite(data);
 8002770:	4a22      	ldr	r2, [pc, #136]	; (80027fc <lcdSetOrientation+0xb4>)
 8002772:	8011      	strh	r1, [r2, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8002774:	4a22      	ldr	r2, [pc, #136]	; (8002800 <lcdSetOrientation+0xb8>)
 8002776:	601a      	str	r2, [r3, #0]
	LCD_CmdWrite(command);
 8002778:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800277c:	232a      	movs	r3, #42	; 0x2a
	LCD_DataWrite(data);
 800277e:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 8002780:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 8002784:	202c      	movs	r0, #44	; 0x2c
 8002786:	800b      	strh	r3, [r1, #0]
	LCD_DataWrite(data);
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <lcdSetOrientation+0xb4>)
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	801e      	strh	r6, [r3, #0]
 8002790:	801c      	strh	r4, [r3, #0]
	LCD_CmdWrite(command);
 8002792:	f8a1 c000 	strh.w	ip, [r1]
	LCD_DataWrite(data);
 8002796:	801a      	strh	r2, [r3, #0]
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	801d      	strh	r5, [r3, #0]
 800279c:	f8a3 e000 	strh.w	lr, [r3]
	LCD_CmdWrite(command);
 80027a0:	8008      	strh	r0, [r1, #0]
}
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
			lcdWriteData(lcdPortraitMirrorConfig);
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <lcdSetOrientation+0xbc>)
 80027a6:	7810      	ldrb	r0, [r2, #0]
	LCD_DataWrite(data);
 80027a8:	4914      	ldr	r1, [pc, #80]	; (80027fc <lcdSetOrientation+0xb4>)
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80027aa:	4a17      	ldr	r2, [pc, #92]	; (8002808 <lcdSetOrientation+0xc0>)
	LCD_DataWrite(data);
 80027ac:	8008      	strh	r0, [r1, #0]
			break;
 80027ae:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 80027b2:	2501      	movs	r5, #1
 80027b4:	24ef      	movs	r4, #239	; 0xef
 80027b6:	2600      	movs	r6, #0
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80027b8:	601a      	str	r2, [r3, #0]
			break;
 80027ba:	e7dd      	b.n	8002778 <lcdSetOrientation+0x30>
			lcdWriteData(lcdLandscapeConfig);
 80027bc:	4a13      	ldr	r2, [pc, #76]	; (800280c <lcdSetOrientation+0xc4>)
	LCD_DataWrite(data);
 80027be:	490f      	ldr	r1, [pc, #60]	; (80027fc <lcdSetOrientation+0xb4>)
			lcdWriteData(lcdLandscapeConfig);
 80027c0:	7810      	ldrb	r0, [r2, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80027c2:	4a0f      	ldr	r2, [pc, #60]	; (8002800 <lcdSetOrientation+0xb8>)
	LCD_DataWrite(data);
 80027c4:	8008      	strh	r0, [r1, #0]
			break;
 80027c6:	f04f 0eef 	mov.w	lr, #239	; 0xef
 80027ca:	2500      	movs	r5, #0
 80027cc:	243f      	movs	r4, #63	; 0x3f
 80027ce:	2601      	movs	r6, #1
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80027d0:	601a      	str	r2, [r3, #0]
			break;
 80027d2:	e7d1      	b.n	8002778 <lcdSetOrientation+0x30>
			lcdWriteData(lcdPortraitConfig);
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <lcdSetOrientation+0xc8>)
 80027d6:	e7e6      	b.n	80027a6 <lcdSetOrientation+0x5e>
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80027d8:	881c      	ldrh	r4, [r3, #0]
 80027da:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 80027de:	3c01      	subs	r4, #1
 80027e0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
  lcdWriteData((x1 >> 8) & 0xFF);
 80027e4:	f3c4 2607 	ubfx	r6, r4, #8, #8
  lcdWriteData((y1 >> 8) & 0xFF);
 80027e8:	f3ce 2507 	ubfx	r5, lr, #8, #8
  lcdWriteData(x1 & 0xFF);
 80027ec:	b2e4      	uxtb	r4, r4
  lcdWriteData(y1 & 0xFF);
 80027ee:	fa5f fe8e 	uxtb.w	lr, lr
 80027f2:	e7c1      	b.n	8002778 <lcdSetOrientation+0x30>
 80027f4:	20000024 	.word	0x20000024
 80027f8:	20000461 	.word	0x20000461
 80027fc:	60020000 	.word	0x60020000
 8002800:	00f00140 	.word	0x00f00140
 8002804:	20000463 	.word	0x20000463
 8002808:	014000f0 	.word	0x014000f0
 800280c:	20000460 	.word	0x20000460
 8002810:	20000462 	.word	0x20000462

08002814 <lcdSetCursor>:
	LCD_CmdWrite(command);
 8002814:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002818:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
{
 800281c:	b530      	push	{r4, r5, lr}
	LCD_CmdWrite(command);
 800281e:	252b      	movs	r5, #43	; 0x2b
 8002820:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
	cursorXY.x = x;
 8002824:	4c0c      	ldr	r4, [pc, #48]	; (8002858 <lcdSetCursor+0x44>)
	LCD_DataWrite(data);
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <lcdSetCursor+0x48>)
	cursorXY.x = x;
 8002828:	8020      	strh	r0, [r4, #0]
	cursorXY.y = y;
 800282a:	8061      	strh	r1, [r4, #2]
	LCD_CmdWrite(command);
 800282c:	f8a2 c000 	strh.w	ip, [r2]
  lcdWriteData((x0 >> 8) & 0xFF);
 8002830:	ea4f 2c10 	mov.w	ip, r0, lsr #8
  lcdWriteData(x0 & 0xFF);
 8002834:	b2c0      	uxtb	r0, r0
	LCD_DataWrite(data);
 8002836:	f8a3 c000 	strh.w	ip, [r3]
 800283a:	8018      	strh	r0, [r3, #0]
 800283c:	f8a3 c000 	strh.w	ip, [r3]
 8002840:	8018      	strh	r0, [r3, #0]
  lcdWriteData((y0 >> 8) & 0xFF);
 8002842:	0a08      	lsrs	r0, r1, #8
  lcdWriteData(y0 & 0xFF);
 8002844:	b2c9      	uxtb	r1, r1
	LCD_CmdWrite(command);
 8002846:	8015      	strh	r5, [r2, #0]
	LCD_DataWrite(data);
 8002848:	8018      	strh	r0, [r3, #0]
 800284a:	8019      	strh	r1, [r3, #0]
 800284c:	8018      	strh	r0, [r3, #0]
 800284e:	8019      	strh	r1, [r3, #0]
	LCD_CmdWrite(command);
 8002850:	f8a2 e000 	strh.w	lr, [r2]
}
 8002854:	bd30      	pop	{r4, r5, pc}
 8002856:	bf00      	nop
 8002858:	2000045c 	.word	0x2000045c
 800285c:	60020000 	.word	0x60020000

08002860 <lcdGetWidth>:
  return lcdProperties.width;
 8002860:	4b01      	ldr	r3, [pc, #4]	; (8002868 <lcdGetWidth+0x8>)
}
 8002862:	8818      	ldrh	r0, [r3, #0]
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000024 	.word	0x20000024

0800286c <lcdGetHeight>:
  return lcdProperties.height;
 800286c:	4b01      	ldr	r3, [pc, #4]	; (8002874 <lcdGetHeight+0x8>)
}
 800286e:	8858      	ldrh	r0, [r3, #2]
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000024 	.word	0x20000024

08002878 <lcdGetOrientation>:
  return lcdProperties.orientation;
 8002878:	4b01      	ldr	r3, [pc, #4]	; (8002880 <lcdGetOrientation+0x8>)
}
 800287a:	7918      	ldrb	r0, [r3, #4]
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000024 	.word	0x20000024

08002884 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002886:	490d      	ldr	r1, [pc, #52]	; (80028bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002888:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800288c:	e002      	b.n	8002894 <LoopCopyDataInit>

0800288e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002892:	3304      	adds	r3, #4

08002894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002898:	d3f9      	bcc.n	800288e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800289c:	4c0a      	ldr	r4, [pc, #40]	; (80028c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a0:	e001      	b.n	80028a6 <LoopFillZerobss>

080028a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a4:	3204      	adds	r2, #4

080028a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a8:	d3fb      	bcc.n	80028a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028aa:	f7ff fb7b 	bl	8001fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ae:	f001 fc51 	bl	8004154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028b2:	f7ff f8a1 	bl	80019f8 <main>
  bx lr
 80028b6:	4770      	bx	lr
  ldr r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028bc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80028c0:	0801111c 	.word	0x0801111c
  ldr r2, =_sbss
 80028c4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80028c8:	20000478 	.word	0x20000478

080028cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028cc:	e7fe      	b.n	80028cc <ADC1_2_IRQHandler>
	...

080028d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d6:	4a0d      	ldr	r2, [pc, #52]	; (800290c <HAL_InitTick+0x3c>)
{
 80028d8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028da:	7811      	ldrb	r1, [r2, #0]
 80028dc:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <HAL_InitTick+0x40>)
 80028de:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	fbb2 f0f3 	udiv	r0, r2, r3
 80028e8:	f000 fbe8 	bl	80030bc <HAL_SYSTICK_Config>
 80028ec:	b908      	cbnz	r0, 80028f2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ee:	2d0f      	cmp	r5, #15
 80028f0:	d901      	bls.n	80028f6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80028f2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80028f4:	bd38      	pop	{r3, r4, r5, pc}
 80028f6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f8:	4602      	mov	r2, r0
 80028fa:	4629      	mov	r1, r5
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002900:	f000 fb9e 	bl	8003040 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_InitTick+0x44>)
 8002906:	4620      	mov	r0, r4
 8002908:	601d      	str	r5, [r3, #0]
}
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	2000002c 	.word	0x2000002c
 8002910:	20000000 	.word	0x20000000
 8002914:	20000030 	.word	0x20000030

08002918 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002918:	4a07      	ldr	r2, [pc, #28]	; (8002938 <HAL_Init+0x20>)
{
 800291a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800291c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002920:	f043 0310 	orr.w	r3, r3, #16
 8002924:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002926:	f000 fb79 	bl	800301c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800292a:	200f      	movs	r0, #15
 800292c:	f7ff ffd0 	bl	80028d0 <HAL_InitTick>
  HAL_MspInit();
 8002930:	f7ff f9ee 	bl	8001d10 <HAL_MspInit>
}
 8002934:	2000      	movs	r0, #0
 8002936:	bd08      	pop	{r3, pc}
 8002938:	40022000 	.word	0x40022000

0800293c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_IncTick+0x10>)
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_IncTick+0x14>)
 8002940:	6811      	ldr	r1, [r2, #0]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	440b      	add	r3, r1
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000464 	.word	0x20000464
 8002950:	2000002c 	.word	0x2000002c

08002954 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002954:	4b01      	ldr	r3, [pc, #4]	; (800295c <HAL_GetTick+0x8>)
 8002956:	6818      	ldr	r0, [r3, #0]
}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000464 	.word	0x20000464

08002960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002960:	b538      	push	{r3, r4, r5, lr}
 8002962:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff fff6 	bl	8002954 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002968:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800296a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800296c:	d002      	beq.n	8002974 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_Delay+0x20>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002974:	f7ff ffee 	bl	8002954 <HAL_GetTick>
 8002978:	1b40      	subs	r0, r0, r5
 800297a:	42a0      	cmp	r0, r4
 800297c:	d3fa      	bcc.n	8002974 <HAL_Delay+0x14>
  {
  }
}
 800297e:	bd38      	pop	{r3, r4, r5, pc}
 8002980:	2000002c 	.word	0x2000002c

08002984 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002986:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002988:	2500      	movs	r5, #0
{
 800298a:	b083      	sub	sp, #12
 800298c:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800298e:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002990:	f7ff ffe0 	bl	8002954 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002994:	6833      	ldr	r3, [r6, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	05d7      	lsls	r7, r2, #23
 800299a:	d472      	bmi.n	8002a82 <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	4607      	mov	r7, r0
 80029a0:	05d5      	lsls	r5, r2, #23
 80029a2:	d403      	bmi.n	80029ac <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80029a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029a6:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80029aa:	d01e      	beq.n	80029ea <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029ac:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <HAL_ADC_PollForConversion+0x154>)
 80029ae:	2002      	movs	r0, #2
 80029b0:	681d      	ldr	r5, [r3, #0]
 80029b2:	f001 f903 	bl	8003bbc <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029b6:	6833      	ldr	r3, [r6, #0]
 80029b8:	4a48      	ldr	r2, [pc, #288]	; (8002adc <HAL_ADC_PollForConversion+0x158>)
 80029ba:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029bc:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029c0:	4211      	tst	r1, r2
 80029c2:	d125      	bne.n	8002a10 <HAL_ADC_PollForConversion+0x8c>
 80029c4:	68d9      	ldr	r1, [r3, #12]
 80029c6:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 80029ca:	4211      	tst	r1, r2
 80029cc:	d120      	bne.n	8002a10 <HAL_ADC_PollForConversion+0x8c>
 80029ce:	6919      	ldr	r1, [r3, #16]
 80029d0:	4a43      	ldr	r2, [pc, #268]	; (8002ae0 <HAL_ADC_PollForConversion+0x15c>)
 80029d2:	4211      	tst	r1, r2
 80029d4:	d17e      	bne.n	8002ad4 <HAL_ADC_PollForConversion+0x150>
 80029d6:	68d9      	ldr	r1, [r3, #12]
 80029d8:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80029dc:	4211      	tst	r1, r2
 80029de:	bf14      	ite	ne
 80029e0:	2029      	movne	r0, #41	; 0x29
 80029e2:	2014      	moveq	r0, #20
 80029e4:	e01e      	b.n	8002a24 <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 80029e6:	1c60      	adds	r0, r4, #1
 80029e8:	d154      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	0791      	lsls	r1, r2, #30
 80029ee:	d5fa      	bpl.n	80029e6 <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029f0:	f06f 0212 	mvn.w	r2, #18
 80029f4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80029f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fc:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a04:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a08:	d055      	beq.n	8002ab6 <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a0a:	2000      	movs	r0, #0
}
 8002a0c:	b003      	add	sp, #12
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a10:	6919      	ldr	r1, [r3, #16]
 8002a12:	4a33      	ldr	r2, [pc, #204]	; (8002ae0 <HAL_ADC_PollForConversion+0x15c>)
 8002a14:	4211      	tst	r1, r2
 8002a16:	d12a      	bne.n	8002a6e <HAL_ADC_PollForConversion+0xea>
 8002a18:	68d9      	ldr	r1, [r3, #12]
 8002a1a:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8002a1e:	4211      	tst	r1, r2
 8002a20:	d125      	bne.n	8002a6e <HAL_ADC_PollForConversion+0xea>
 8002a22:	2054      	movs	r0, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002a24:	fb00 f505 	mul.w	r5, r0, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a28:	9a01      	ldr	r2, [sp, #4]
 8002a2a:	4295      	cmp	r5, r2
 8002a2c:	d809      	bhi.n	8002a42 <HAL_ADC_PollForConversion+0xbe>
 8002a2e:	e7df      	b.n	80029f0 <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a30:	9b01      	ldr	r3, [sp, #4]
 8002a32:	42ab      	cmp	r3, r5
 8002a34:	d311      	bcc.n	8002a5a <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 8002a36:	9b01      	ldr	r3, [sp, #4]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a3c:	9b01      	ldr	r3, [sp, #4]
 8002a3e:	42ab      	cmp	r3, r5
 8002a40:	d237      	bcs.n	8002ab2 <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 8002a42:	1c62      	adds	r2, r4, #1
 8002a44:	d0f7      	beq.n	8002a36 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a46:	2c00      	cmp	r4, #0
 8002a48:	d0f2      	beq.n	8002a30 <HAL_ADC_PollForConversion+0xac>
 8002a4a:	f7ff ff83 	bl	8002954 <HAL_GetTick>
 8002a4e:	1bc0      	subs	r0, r0, r7
 8002a50:	42a0      	cmp	r0, r4
 8002a52:	d9f0      	bls.n	8002a36 <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a54:	9b01      	ldr	r3, [sp, #4]
 8002a56:	42ab      	cmp	r3, r5
 8002a58:	d2ed      	bcs.n	8002a36 <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 8002a5a:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 8002a5c:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a5e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002a60:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8002a6a:	b003      	add	sp, #12
 8002a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a6e:	6919      	ldr	r1, [r3, #16]
 8002a70:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <HAL_ADC_PollForConversion+0x160>)
 8002a72:	4211      	tst	r1, r2
 8002a74:	d114      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0x11c>
 8002a76:	68d9      	ldr	r1, [r3, #12]
 8002a78:	4211      	tst	r1, r2
 8002a7a:	bf14      	ite	ne
 8002a7c:	20fc      	movne	r0, #252	; 0xfc
 8002a7e:	2054      	moveq	r0, #84	; 0x54
 8002a80:	e7d0      	b.n	8002a24 <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 8002a82:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a84:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002a86:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8a:	f043 0320 	orr.w	r3, r3, #32
 8002a8e:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8002a90:	b003      	add	sp, #12
 8002a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a94:	b934      	cbnz	r4, 8002aa4 <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	f012 0202 	ands.w	r2, r2, #2
 8002a9c:	d1a5      	bne.n	80029ea <HAL_ADC_PollForConversion+0x66>
 8002a9e:	e7dd      	b.n	8002a5c <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002aa0:	20fc      	movs	r0, #252	; 0xfc
 8002aa2:	e7bf      	b.n	8002a24 <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002aa4:	f7ff ff56 	bl	8002954 <HAL_GetTick>
 8002aa8:	1bc3      	subs	r3, r0, r7
 8002aaa:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002aac:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002aae:	d99c      	bls.n	80029ea <HAL_ADC_PollForConversion+0x66>
 8002ab0:	e7f1      	b.n	8002a96 <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ab2:	6833      	ldr	r3, [r6, #0]
 8002ab4:	e79c      	b.n	80029f0 <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ab6:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d1a6      	bne.n	8002a0a <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002abc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ac2:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002ac6:	04db      	lsls	r3, r3, #19
 8002ac8:	d49f      	bmi.n	8002a0a <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aca:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ad2:	e79b      	b.n	8002a0c <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002ad4:	2029      	movs	r0, #41	; 0x29
 8002ad6:	e7a5      	b.n	8002a24 <HAL_ADC_PollForConversion+0xa0>
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	24924924 	.word	0x24924924
 8002ae0:	12492492 	.word	0x12492492
 8002ae4:	00249249 	.word	0x00249249

08002ae8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ae8:	6803      	ldr	r3, [r0, #0]
 8002aea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop

08002af0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002af0:	2300      	movs	r3, #0
{ 
 8002af2:	b530      	push	{r4, r5, lr}
 8002af4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002af6:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d074      	beq.n	8002bea <HAL_ADC_ConfigChannel+0xfa>
 8002b00:	2301      	movs	r3, #1
 8002b02:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b06:	684b      	ldr	r3, [r1, #4]
 8002b08:	4602      	mov	r2, r0
 8002b0a:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b0c:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8002b0e:	d932      	bls.n	8002b76 <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b10:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8002b16:	d84e      	bhi.n	8002bb6 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b18:	f04f 0c1f 	mov.w	ip, #31
 8002b1c:	6808      	ldr	r0, [r1, #0]
 8002b1e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002b20:	3b23      	subs	r3, #35	; 0x23
 8002b22:	fa00 fe03 	lsl.w	lr, r0, r3
 8002b26:	fa0c f303 	lsl.w	r3, ip, r3
 8002b2a:	ea25 0303 	bic.w	r3, r5, r3
 8002b2e:	ea43 030e 	orr.w	r3, r3, lr
 8002b32:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b34:	2809      	cmp	r0, #9
 8002b36:	d930      	bls.n	8002b9a <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b38:	f04f 0c07 	mov.w	ip, #7
 8002b3c:	688d      	ldr	r5, [r1, #8]
 8002b3e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002b42:	68e3      	ldr	r3, [r4, #12]
 8002b44:	391e      	subs	r1, #30
 8002b46:	408d      	lsls	r5, r1
 8002b48:	fa0c f101 	lsl.w	r1, ip, r1
 8002b4c:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b50:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b54:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b56:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b58:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b5a:	d844      	bhi.n	8002be6 <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_ADC_ConfigChannel+0x128>)
 8002b5e:	429c      	cmp	r4, r3
 8002b60:	d038      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b64:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002b66:	f043 0320 	orr.w	r3, r3, #32
 8002b6a:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002b72:	b003      	add	sp, #12
 8002b74:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b76:	f04f 0c1f 	mov.w	ip, #31
 8002b7a:	6808      	ldr	r0, [r1, #0]
 8002b7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b80:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002b82:	3b05      	subs	r3, #5
 8002b84:	fa00 fe03 	lsl.w	lr, r0, r3
 8002b88:	fa0c f303 	lsl.w	r3, ip, r3
 8002b8c:	ea25 0303 	bic.w	r3, r5, r3
 8002b90:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b94:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b96:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b98:	d8ce      	bhi.n	8002b38 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b9a:	2507      	movs	r5, #7
 8002b9c:	6889      	ldr	r1, [r1, #8]
 8002b9e:	6923      	ldr	r3, [r4, #16]
 8002ba0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ba4:	4081      	lsls	r1, r0
 8002ba6:	fa05 f000 	lsl.w	r0, r5, r0
 8002baa:	ea23 0300 	bic.w	r3, r3, r0
 8002bae:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb0:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bb2:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bb4:	e7da      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002bb6:	f04f 0c1f 	mov.w	ip, #31
 8002bba:	6808      	ldr	r0, [r1, #0]
 8002bbc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002bbe:	3b41      	subs	r3, #65	; 0x41
 8002bc0:	fa00 fe03 	lsl.w	lr, r0, r3
 8002bc4:	fa0c f303 	lsl.w	r3, ip, r3
 8002bc8:	ea25 0303 	bic.w	r3, r5, r3
 8002bcc:	ea43 030e 	orr.w	r3, r3, lr
 8002bd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bd2:	e7af      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bd4:	68a3      	ldr	r3, [r4, #8]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	d405      	bmi.n	8002be6 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002bda:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bdc:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002bde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002be2:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002be4:	d004      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be6:	2000      	movs	r0, #0
 8002be8:	e7c0      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8002bea:	2002      	movs	r0, #2
}
 8002bec:	b003      	add	sp, #12
 8002bee:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_ADC_ConfigChannel+0x12c>)
 8002bf2:	490b      	ldr	r1, [pc, #44]	; (8002c20 <HAL_ADC_ConfigChannel+0x130>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	fba1 1303 	umull	r1, r3, r1, r3
 8002bfa:	0c9b      	lsrs	r3, r3, #18
 8002bfc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002c04:	9b01      	ldr	r3, [sp, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0ed      	beq.n	8002be6 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8002c0a:	9b01      	ldr	r3, [sp, #4]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002c10:	9b01      	ldr	r3, [sp, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f9      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x11a>
 8002c16:	e7e6      	b.n	8002be6 <HAL_ADC_ConfigChannel+0xf6>
 8002c18:	40012400 	.word	0x40012400
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	431bde83 	.word	0x431bde83

08002c24 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002c24:	2300      	movs	r3, #0
{
 8002c26:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c28:	6802      	ldr	r2, [r0, #0]
{
 8002c2a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002c2c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c2e:	6893      	ldr	r3, [r2, #8]
 8002c30:	07d9      	lsls	r1, r3, #31
 8002c32:	d427      	bmi.n	8002c84 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <ADC_Enable+0x80>)
 8002c36:	4604      	mov	r4, r0
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	481b      	ldr	r0, [pc, #108]	; (8002ca8 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8002c3c:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c3e:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8002c42:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c46:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8002c48:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c4a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002c4c:	9b01      	ldr	r3, [sp, #4]
 8002c4e:	b12b      	cbz	r3, 8002c5c <ADC_Enable+0x38>
    {
      wait_loop_index--;
 8002c50:	9b01      	ldr	r3, [sp, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002c56:	9b01      	ldr	r3, [sp, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f9      	bne.n	8002c50 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c5c:	f7ff fe7a 	bl	8002954 <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c60:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002c62:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	07da      	lsls	r2, r3, #31
 8002c68:	d40c      	bmi.n	8002c84 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c6a:	f7ff fe73 	bl	8002954 <HAL_GetTick>
 8002c6e:	1b43      	subs	r3, r0, r5
 8002c70:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c72:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c74:	d903      	bls.n	8002c7e <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	f012 0201 	ands.w	r2, r2, #1
 8002c7c:	d005      	beq.n	8002c8a <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	07db      	lsls	r3, r3, #31
 8002c82:	d5f2      	bpl.n	8002c6a <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c84:	2000      	movs	r0, #0
}
 8002c86:	b003      	add	sp, #12
 8002c88:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8002c8a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002c8e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c92:	f043 0310 	orr.w	r3, r3, #16
 8002c96:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c9a:	4303      	orrs	r3, r0
 8002c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002c9e:	b003      	add	sp, #12
 8002ca0:	bd30      	pop	{r4, r5, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	431bde83 	.word	0x431bde83

08002cac <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002cac:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d038      	beq.n	8002d26 <HAL_ADC_Start+0x7a>
 8002cb4:	2301      	movs	r3, #1
{
 8002cb6:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002cb8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	f7ff ffb1 	bl	8002c24 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002cc2:	bb60      	cbnz	r0, 8002d1e <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8002cc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002cc6:	6822      	ldr	r2, [r4, #0]
 8002cc8:	4929      	ldr	r1, [pc, #164]	; (8002d70 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002cd6:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 8002cd8:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002cda:	d026      	beq.n	8002d2a <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cde:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ce2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ce4:	6853      	ldr	r3, [r2, #4]
 8002ce6:	0559      	lsls	r1, r3, #21
 8002ce8:	d42b      	bmi.n	8002d42 <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002cec:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cee:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cf2:	bf18      	it	ne
 8002cf4:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8002cf6:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cfa:	bf18      	it	ne
 8002cfc:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002d00:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d02:	f06f 0302 	mvn.w	r3, #2
 8002d06:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d08:	6893      	ldr	r3, [r2, #8]
 8002d0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d12:	d01d      	beq.n	8002d50 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d14:	6893      	ldr	r3, [r2, #8]
 8002d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1a:	6093      	str	r3, [r2, #8]
}
 8002d1c:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002d24:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002d26:	2002      	movs	r0, #2
}
 8002d28:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_ADC_Start+0xc8>)
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8002d32:	d0d3      	beq.n	8002cdc <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d34:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002d36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002d3a:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	055b      	lsls	r3, r3, #21
 8002d40:	d5d3      	bpl.n	8002cea <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d4e:	e7cc      	b.n	8002cea <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_ADC_Start+0xc4>)
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d004      	beq.n	8002d60 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d56:	6893      	ldr	r3, [r2, #8]
 8002d58:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8002d5c:	6093      	str	r3, [r2, #8]
}
 8002d5e:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d60:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002d64:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d66:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002d6a:	d1d3      	bne.n	8002d14 <HAL_ADC_Start+0x68>
 8002d6c:	e7f3      	b.n	8002d56 <HAL_ADC_Start+0xaa>
 8002d6e:	bf00      	nop
 8002d70:	40012800 	.word	0x40012800
 8002d74:	40012400 	.word	0x40012400

08002d78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d78:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d7a:	6803      	ldr	r3, [r0, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	07d4      	lsls	r4, r2, #31
 8002d80:	d401      	bmi.n	8002d86 <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d82:	2000      	movs	r0, #0
}
 8002d84:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002d86:	4604      	mov	r4, r0
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002d90:	f7ff fde0 	bl	8002954 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d94:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002d96:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	07d9      	lsls	r1, r3, #31
 8002d9c:	d5f1      	bpl.n	8002d82 <ADC_ConversionStop_Disable+0xa>
 8002d9e:	e002      	b.n	8002da6 <ADC_ConversionStop_Disable+0x2e>
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	07db      	lsls	r3, r3, #31
 8002da4:	d5ed      	bpl.n	8002d82 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002da6:	f7ff fdd5 	bl	8002954 <HAL_GetTick>
 8002daa:	1b43      	subs	r3, r0, r5
 8002dac:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002dae:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002db0:	d9f6      	bls.n	8002da0 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	07d2      	lsls	r2, r2, #31
 8002db6:	d5f3      	bpl.n	8002da0 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8002db8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dbc:	f043 0310 	orr.w	r3, r3, #16
 8002dc0:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dc4:	4303      	orrs	r3, r0
 8002dc6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002dc8:	bd38      	pop	{r3, r4, r5, pc}
 8002dca:	bf00      	nop

08002dcc <HAL_ADC_Init>:
  if(hadc == NULL)
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d075      	beq.n	8002ebc <HAL_ADC_Init+0xf0>
{
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d052      	beq.n	8002e80 <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff ffcc 	bl	8002d78 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002de2:	f013 0310 	ands.w	r3, r3, #16
 8002de6:	d145      	bne.n	8002e74 <HAL_ADC_Init+0xa8>
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d143      	bne.n	8002e74 <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 8002dec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dee:	4d4a      	ldr	r5, [pc, #296]	; (8002f18 <HAL_ADC_Init+0x14c>)
 8002df0:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002df2:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002df6:	f021 0102 	bic.w	r1, r1, #2
 8002dfa:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dfe:	42aa      	cmp	r2, r5
    ADC_STATE_CLR_SET(hadc->State,
 8002e00:	62a1      	str	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e02:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e04:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e06:	d053      	beq.n	8002eb0 <HAL_ADC_Init+0xe4>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e08:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e0a:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 8002e0e:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e10:	68a5      	ldr	r5, [r4, #8]
 8002e12:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002e16:	d039      	beq.n	8002e8c <HAL_ADC_Init+0xc0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e18:	f894 e014 	ldrb.w	lr, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e1c:	2d01      	cmp	r5, #1
 8002e1e:	bf0c      	ite	eq
 8002e20:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8002e24:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e28:	f1be 0f01 	cmp.w	lr, #1
 8002e2c:	d052      	beq.n	8002ed4 <HAL_ADC_Init+0x108>
      MODIFY_REG(hadc->Instance->CR1,
 8002e2e:	6856      	ldr	r6, [r2, #4]
 8002e30:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8002e34:	ea46 060c 	orr.w	r6, r6, ip
 8002e38:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002e3a:	6897      	ldr	r7, [r2, #8]
 8002e3c:	4e37      	ldr	r6, [pc, #220]	; (8002f1c <HAL_ADC_Init+0x150>)
 8002e3e:	403e      	ands	r6, r7
 8002e40:	430e      	orrs	r6, r1
 8002e42:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e44:	2d01      	cmp	r5, #1
 8002e46:	d02f      	beq.n	8002ea8 <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 8002e48:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8002e4a:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 8002e4e:	ea4c 0303 	orr.w	r3, ip, r3
 8002e52:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e54:	6892      	ldr	r2, [r2, #8]
 8002e56:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_ADC_Init+0x154>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	4299      	cmp	r1, r3
 8002e5c:	d030      	beq.n	8002ec0 <HAL_ADC_Init+0xf4>
      tmp_hal_status = HAL_ERROR;
 8002e5e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002e60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e62:	f023 0312 	bic.w	r3, r3, #18
 8002e66:	f043 0310 	orr.w	r3, r3, #16
 8002e6a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e6e:	4303      	orrs	r3, r0
 8002e70:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002e76:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e78:	f043 0310 	orr.w	r3, r3, #16
 8002e7c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8002e80:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002e82:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002e86:	f7fe ff65 	bl	8001d54 <HAL_ADC_MspInit>
 8002e8a:	e7a6      	b.n	8002dda <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e8c:	7d27      	ldrb	r7, [r4, #20]
 8002e8e:	2f01      	cmp	r7, #1
 8002e90:	d01f      	beq.n	8002ed2 <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CR1,
 8002e92:	6853      	ldr	r3, [r2, #4]
 8002e94:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8002e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9c:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002e9e:	6895      	ldr	r5, [r2, #8]
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <HAL_ADC_Init+0x150>)
 8002ea2:	402b      	ands	r3, r5
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ea8:	6923      	ldr	r3, [r4, #16]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	051b      	lsls	r3, r3, #20
 8002eae:	e7cb      	b.n	8002e48 <HAL_ADC_Init+0x7c>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002eb0:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
 8002eb4:	bf08      	it	eq
 8002eb6:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
 8002eba:	e7a5      	b.n	8002e08 <HAL_ADC_Init+0x3c>
    return HAL_ERROR;
 8002ebc:	2001      	movs	r0, #1
}
 8002ebe:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002ec4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ec6:	f023 0303 	bic.w	r3, r3, #3
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ed2:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ed4:	b1c6      	cbz	r6, 8002f08 <HAL_ADC_Init+0x13c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ed8:	f046 0620 	orr.w	r6, r6, #32
 8002edc:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ede:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ee0:	f046 0601 	orr.w	r6, r6, #1
 8002ee4:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8002ee6:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ee8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002eec:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8002ef0:	ea46 060c 	orr.w	r6, r6, ip
 8002ef4:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002ef6:	6897      	ldr	r7, [r2, #8]
 8002ef8:	4e08      	ldr	r6, [pc, #32]	; (8002f1c <HAL_ADC_Init+0x150>)
 8002efa:	ea06 0607 	and.w	r6, r6, r7
 8002efe:	ea46 0601 	orr.w	r6, r6, r1
 8002f02:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f04:	d19e      	bne.n	8002e44 <HAL_ADC_Init+0x78>
 8002f06:	e7cf      	b.n	8002ea8 <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f08:	69a6      	ldr	r6, [r4, #24]
 8002f0a:	3e01      	subs	r6, #1
 8002f0c:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 8002f10:	f446 6c00 	orr.w	ip, r6, #2048	; 0x800
 8002f14:	e7e7      	b.n	8002ee6 <HAL_ADC_Init+0x11a>
 8002f16:	bf00      	nop
 8002f18:	40013c00 	.word	0x40013c00
 8002f1c:	ffe1f7fd 	.word	0xffe1f7fd
 8002f20:	ff1f0efe 	.word	0xff1f0efe

08002f24 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002f24:	2300      	movs	r3, #0
{
 8002f26:	b570      	push	{r4, r5, r6, lr}
 8002f28:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002f2a:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d05f      	beq.n	8002ff4 <HAL_ADCEx_Calibration_Start+0xd0>
 8002f34:	2301      	movs	r3, #1
 8002f36:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	f7ff ff1c 	bl	8002d78 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f40:	4605      	mov	r5, r0
 8002f42:	b128      	cbz	r0, 8002f50 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f44:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 8002f46:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8002f48:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002f50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f52:	4a31      	ldr	r2, [pc, #196]	; (8003018 <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002f54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f58:	f023 0302 	bic.w	r3, r3, #2
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f62:	2002      	movs	r0, #2
 8002f64:	6816      	ldr	r6, [r2, #0]
 8002f66:	f000 fe29 	bl	8003bbc <HAL_RCCEx_GetPeriphCLKFreq>
 8002f6a:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002f6e:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8002f70:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8002f72:	9b01      	ldr	r3, [sp, #4]
 8002f74:	b12b      	cbz	r3, 8002f82 <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8002f76:	9b01      	ldr	r3, [sp, #4]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002f7c:	9b01      	ldr	r3, [sp, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f9      	bne.n	8002f76 <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 8002f82:	4620      	mov	r0, r4
 8002f84:	f7ff fe4e 	bl	8002c24 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002f88:	6822      	ldr	r2, [r4, #0]
 8002f8a:	6893      	ldr	r3, [r2, #8]
 8002f8c:	f043 0308 	orr.w	r3, r3, #8
 8002f90:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002f92:	f7ff fcdf 	bl	8002954 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f96:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002f98:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	0711      	lsls	r1, r2, #28
 8002f9e:	d50b      	bpl.n	8002fb8 <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002fa0:	f7ff fcd8 	bl	8002954 <HAL_GetTick>
 8002fa4:	1b83      	subs	r3, r0, r6
 8002fa6:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002fa8:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002faa:	d902      	bls.n	8002fb2 <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	0712      	lsls	r2, r2, #28
 8002fb0:	d424      	bmi.n	8002ffc <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	0710      	lsls	r0, r2, #28
 8002fb6:	d4f3      	bmi.n	8002fa0 <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	f042 0204 	orr.w	r2, r2, #4
 8002fbe:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002fc0:	f7ff fcc8 	bl	8002954 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002fc4:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002fc6:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0759      	lsls	r1, r3, #29
 8002fcc:	d50b      	bpl.n	8002fe6 <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002fce:	f7ff fcc1 	bl	8002954 <HAL_GetTick>
 8002fd2:	1b83      	subs	r3, r0, r6
 8002fd4:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002fd6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002fd8:	d902      	bls.n	8002fe0 <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	0752      	lsls	r2, r2, #29
 8002fde:	d40d      	bmi.n	8002ffc <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	075b      	lsls	r3, r3, #29
 8002fe4:	d4f3      	bmi.n	8002fce <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fe8:	f023 0303 	bic.w	r3, r3, #3
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ff2:	e7a7      	b.n	8002f44 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8002ff4:	2502      	movs	r5, #2
}
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 8002ffc:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8002ffe:	2200      	movs	r2, #0
}
 8003000:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 8003002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8003004:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 8003008:	f023 0312 	bic.w	r3, r3, #18
 800300c:	f043 0310 	orr.w	r3, r3, #16
 8003010:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003012:	b002      	add	sp, #8
 8003014:	bd70      	pop	{r4, r5, r6, pc}
 8003016:	bf00      	nop
 8003018:	20000000 	.word	0x20000000

0800301c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301c:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003020:	4906      	ldr	r1, [pc, #24]	; (800303c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003022:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003024:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302a:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800302e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003038:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003042:	b500      	push	{lr}
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800304a:	f1c3 0e07 	rsb	lr, r3, #7
 800304e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003052:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003056:	bf28      	it	cs
 8003058:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305c:	f1bc 0f06 	cmp.w	ip, #6
 8003060:	d91b      	bls.n	800309a <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003062:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003066:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003068:	fa0c fc03 	lsl.w	ip, ip, r3
 800306c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003074:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003078:	ea21 010c 	bic.w	r1, r1, ip
 800307c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800307e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003080:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003084:	db0c      	blt.n	80030a0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	0109      	lsls	r1, r1, #4
 8003088:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800308c:	b2c9      	uxtb	r1, r1
 800308e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003092:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003096:	f85d fb04 	ldr.w	pc, [sp], #4
 800309a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309c:	4613      	mov	r3, r2
 800309e:	e7e7      	b.n	8003070 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_NVIC_SetPriority+0x78>)
 80030a2:	f000 000f 	and.w	r0, r0, #15
 80030a6:	0109      	lsls	r1, r1, #4
 80030a8:	b2c9      	uxtb	r1, r1
 80030aa:	4403      	add	r3, r0
 80030ac:	7619      	strb	r1, [r3, #24]
 80030ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80030b2:	bf00      	nop
 80030b4:	e000ed00 	.word	0xe000ed00
 80030b8:	e000ecfc 	.word	0xe000ecfc

080030bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030bc:	3801      	subs	r0, #1
 80030be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80030c2:	d20f      	bcs.n	80030e4 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030cc:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ce:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030d0:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d2:	4c05      	ldr	r4, [pc, #20]	; (80030e8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030d4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030da:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030dc:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80030de:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e0:	6119      	str	r1, [r3, #16]
 80030e2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80030e4:	2001      	movs	r0, #1
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f0:	680e      	ldr	r6, [r1, #0]
{
 80030f2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f4:	2e00      	cmp	r6, #0
 80030f6:	f000 80be 	beq.w	8003276 <HAL_GPIO_Init+0x18a>
 80030fa:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030fc:	4f85      	ldr	r7, [pc, #532]	; (8003314 <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 80030fe:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8003100:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003102:	4d85      	ldr	r5, [pc, #532]	; (8003318 <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 8003104:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800331c <HAL_GPIO_Init+0x230>
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800310a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800310c:	fa36 f403 	lsrs.w	r4, r6, r3
 8003110:	f102 0204 	add.w	r2, r2, #4
 8003114:	f000 80af 	beq.w	8003276 <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 8003118:	2401      	movs	r4, #1
 800311a:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 800311c:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003120:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8003124:	d1f1      	bne.n	800310a <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8003126:	684e      	ldr	r6, [r1, #4]
 8003128:	2e12      	cmp	r6, #18
 800312a:	f200 80a7 	bhi.w	800327c <HAL_GPIO_Init+0x190>
 800312e:	2e12      	cmp	r6, #18
 8003130:	d81a      	bhi.n	8003168 <HAL_GPIO_Init+0x7c>
 8003132:	e8df f006 	tbb	[pc, r6]
 8003136:	c2b0      	.short	0xc2b0
 8003138:	1919d7be 	.word	0x1919d7be
 800313c:	19191919 	.word	0x19191919
 8003140:	19191919 	.word	0x19191919
 8003144:	ba191919 	.word	0xba191919
 8003148:	c5          	.byte	0xc5
 8003149:	00          	.byte	0x00
 800314a:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8003320 <HAL_GPIO_Init+0x234>
 800314e:	4576      	cmp	r6, lr
 8003150:	f000 80a1 	beq.w	8003296 <HAL_GPIO_Init+0x1aa>
 8003154:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8003158:	4576      	cmp	r6, lr
 800315a:	f000 809c 	beq.w	8003296 <HAL_GPIO_Init+0x1aa>
 800315e:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8003162:	4576      	cmp	r6, lr
 8003164:	f000 8097 	beq.w	8003296 <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003168:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 800316c:	bf9c      	itt	ls
 800316e:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003170:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003172:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003176:	bf84      	itt	hi
 8003178:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800317c:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003180:	f8de 4000 	ldr.w	r4, [lr]
 8003184:	fa0a f90b 	lsl.w	r9, sl, fp
 8003188:	fa06 fb0b 	lsl.w	fp, r6, fp
 800318c:	ea24 040b 	bic.w	r4, r4, fp
 8003190:	ea44 0409 	orr.w	r4, r4, r9
 8003194:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003198:	684c      	ldr	r4, [r1, #4]
 800319a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800319e:	f000 8082 	beq.w	80032a6 <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031a2:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031a6:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031aa:	f04e 0e01 	orr.w	lr, lr, #1
 80031ae:	f8c7 e018 	str.w	lr, [r7, #24]
 80031b2:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031b6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031ba:	f00e 0e01 	and.w	lr, lr, #1
 80031be:	f8cd e004 	str.w	lr, [sp, #4]
 80031c2:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80031c6:	f023 0e03 	bic.w	lr, r3, #3
 80031ca:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80031ce:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80031d2:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031d6:	fa06 f609 	lsl.w	r6, r6, r9
 80031da:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031de:	f8df b144 	ldr.w	fp, [pc, #324]	; 8003324 <HAL_GPIO_Init+0x238>
 80031e2:	4558      	cmp	r0, fp
 80031e4:	d01b      	beq.n	800321e <HAL_GPIO_Init+0x132>
 80031e6:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80031ea:	4558      	cmp	r0, fp
 80031ec:	d073      	beq.n	80032d6 <HAL_GPIO_Init+0x1ea>
 80031ee:	f8df b138 	ldr.w	fp, [pc, #312]	; 8003328 <HAL_GPIO_Init+0x23c>
 80031f2:	4558      	cmp	r0, fp
 80031f4:	d068      	beq.n	80032c8 <HAL_GPIO_Init+0x1dc>
 80031f6:	f8df b134 	ldr.w	fp, [pc, #308]	; 800332c <HAL_GPIO_Init+0x240>
 80031fa:	4558      	cmp	r0, fp
 80031fc:	d07c      	beq.n	80032f8 <HAL_GPIO_Init+0x20c>
 80031fe:	f8df b130 	ldr.w	fp, [pc, #304]	; 8003330 <HAL_GPIO_Init+0x244>
 8003202:	4558      	cmp	r0, fp
 8003204:	d07f      	beq.n	8003306 <HAL_GPIO_Init+0x21a>
 8003206:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8003334 <HAL_GPIO_Init+0x248>
 800320a:	4558      	cmp	r0, fp
 800320c:	bf0c      	ite	eq
 800320e:	f04f 0b05 	moveq.w	fp, #5
 8003212:	f04f 0b06 	movne.w	fp, #6
 8003216:	fa0b f909 	lsl.w	r9, fp, r9
 800321a:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800321e:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003222:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003224:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003228:	bf14      	ite	ne
 800322a:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800322e:	ea26 060c 	biceq.w	r6, r6, ip
 8003232:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8003234:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003236:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800323a:	bf14      	ite	ne
 800323c:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003240:	ea26 060c 	biceq.w	r6, r6, ip
 8003244:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003246:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003248:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800324c:	bf14      	ite	ne
 800324e:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003252:	ea26 060c 	biceq.w	r6, r6, ip
 8003256:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003258:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800325c:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800325e:	d01f      	beq.n	80032a0 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 8003260:	ea44 040c 	orr.w	r4, r4, ip
 8003264:	60ec      	str	r4, [r5, #12]
 8003266:	680e      	ldr	r6, [r1, #0]
	position++;
 8003268:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326a:	fa36 f403 	lsrs.w	r4, r6, r3
 800326e:	f102 0204 	add.w	r2, r2, #4
 8003272:	f47f af51 	bne.w	8003118 <HAL_GPIO_Init+0x2c>
  }
}
 8003276:	b003      	add	sp, #12
 8003278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800327c:	4546      	cmp	r6, r8
 800327e:	d00a      	beq.n	8003296 <HAL_GPIO_Init+0x1aa>
 8003280:	f67f af63 	bls.w	800314a <HAL_GPIO_Init+0x5e>
 8003284:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8003338 <HAL_GPIO_Init+0x24c>
 8003288:	4576      	cmp	r6, lr
 800328a:	d004      	beq.n	8003296 <HAL_GPIO_Init+0x1aa>
 800328c:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003290:	4576      	cmp	r6, lr
 8003292:	f47f af69 	bne.w	8003168 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003296:	688e      	ldr	r6, [r1, #8]
 8003298:	bb3e      	cbnz	r6, 80032ea <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800329a:	f04f 0a04 	mov.w	sl, #4
 800329e:	e763      	b.n	8003168 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032a0:	ea24 040c 	bic.w	r4, r4, ip
 80032a4:	60ec      	str	r4, [r5, #12]
 80032a6:	680e      	ldr	r6, [r1, #0]
 80032a8:	e72f      	b.n	800310a <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032aa:	68cc      	ldr	r4, [r1, #12]
 80032ac:	f104 0a04 	add.w	sl, r4, #4
          break;
 80032b0:	e75a      	b.n	8003168 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032b2:	68cc      	ldr	r4, [r1, #12]
 80032b4:	f104 0a08 	add.w	sl, r4, #8
          break;
 80032b8:	e756      	b.n	8003168 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032ba:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80032be:	e753      	b.n	8003168 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032c0:	68cc      	ldr	r4, [r1, #12]
 80032c2:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80032c6:	e74f      	b.n	8003168 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032c8:	f04f 0b02 	mov.w	fp, #2
 80032cc:	fa0b f909 	lsl.w	r9, fp, r9
 80032d0:	ea46 0609 	orr.w	r6, r6, r9
 80032d4:	e7a3      	b.n	800321e <HAL_GPIO_Init+0x132>
 80032d6:	f04f 0b01 	mov.w	fp, #1
 80032da:	fa0b f909 	lsl.w	r9, fp, r9
 80032de:	ea46 0609 	orr.w	r6, r6, r9
 80032e2:	e79c      	b.n	800321e <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80032e4:	f04f 0a00 	mov.w	sl, #0
 80032e8:	e73e      	b.n	8003168 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032ea:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032ec:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80032f0:	bf0c      	ite	eq
 80032f2:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80032f4:	6144      	strne	r4, [r0, #20]
 80032f6:	e737      	b.n	8003168 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032f8:	f04f 0b03 	mov.w	fp, #3
 80032fc:	fa0b f909 	lsl.w	r9, fp, r9
 8003300:	ea46 0609 	orr.w	r6, r6, r9
 8003304:	e78b      	b.n	800321e <HAL_GPIO_Init+0x132>
 8003306:	f04f 0b04 	mov.w	fp, #4
 800330a:	fa0b f909 	lsl.w	r9, fp, r9
 800330e:	ea46 0609 	orr.w	r6, r6, r9
 8003312:	e784      	b.n	800321e <HAL_GPIO_Init+0x132>
 8003314:	40021000 	.word	0x40021000
 8003318:	40010400 	.word	0x40010400
 800331c:	10220000 	.word	0x10220000
 8003320:	10120000 	.word	0x10120000
 8003324:	40010800 	.word	0x40010800
 8003328:	40011000 	.word	0x40011000
 800332c:	40011400 	.word	0x40011400
 8003330:	40011800 	.word	0x40011800
 8003334:	40011c00 	.word	0x40011c00
 8003338:	10310000 	.word	0x10310000

0800333c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800333c:	6883      	ldr	r3, [r0, #8]
 800333e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003340:	bf14      	ite	ne
 8003342:	2001      	movne	r0, #1
 8003344:	2000      	moveq	r0, #0
 8003346:	4770      	bx	lr

08003348 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003348:	b902      	cbnz	r2, 800334c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800334a:	0409      	lsls	r1, r1, #16
 800334c:	6101      	str	r1, [r0, #16]
  }
}
 800334e:	4770      	bx	lr

08003350 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003350:	2800      	cmp	r0, #0
 8003352:	f000 80b9 	beq.w	80034c8 <HAL_I2C_Init+0x178>
{
 8003356:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003358:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800335c:	4604      	mov	r4, r0
 800335e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8098 	beq.w	8003498 <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003368:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800336a:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800336c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800337e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003388:	f000 fb76 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	494f      	ldr	r1, [pc, #316]	; (80034cc <HAL_I2C_Init+0x17c>)
 8003390:	428b      	cmp	r3, r1
 8003392:	d84f      	bhi.n	8003434 <HAL_I2C_Init+0xe4>
 8003394:	4a4e      	ldr	r2, [pc, #312]	; (80034d0 <HAL_I2C_Init+0x180>)
 8003396:	4290      	cmp	r0, r2
 8003398:	d97c      	bls.n	8003494 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800339a:	4d4e      	ldr	r5, [pc, #312]	; (80034d4 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800339c:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800339e:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a2:	1e43      	subs	r3, r0, #1
 80033a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80033a8:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ac:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80033ae:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b0:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033b2:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80033ba:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80033be:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c0:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033c2:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80033c8:	ea41 010c 	orr.w	r1, r1, ip
 80033cc:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033ce:	69d1      	ldr	r1, [r2, #28]
 80033d0:	ea13 0f0e 	tst.w	r3, lr
 80033d4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80033d8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80033dc:	d161      	bne.n	80034a2 <HAL_I2C_Init+0x152>
 80033de:	2304      	movs	r3, #4
 80033e0:	430b      	orrs	r3, r1
 80033e2:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033e4:	6811      	ldr	r1, [r2, #0]
 80033e6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80033ea:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80033ee:	4303      	orrs	r3, r0
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033f4:	6891      	ldr	r1, [r2, #8]
 80033f6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80033fa:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80033fe:	4303      	orrs	r3, r0
 8003400:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003404:	430b      	orrs	r3, r1
 8003406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003408:	68d0      	ldr	r0, [r2, #12]
 800340a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800340e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003412:	430b      	orrs	r3, r1
 8003414:	4303      	orrs	r3, r0
 8003416:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003418:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341a:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003422:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003426:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800342a:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800342c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 8003430:	4608      	mov	r0, r1
}
 8003432:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003434:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <HAL_I2C_Init+0x188>)
 8003436:	4290      	cmp	r0, r2
 8003438:	d92c      	bls.n	8003494 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800343a:	4d26      	ldr	r5, [pc, #152]	; (80034d4 <HAL_I2C_Init+0x184>)
 800343c:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003440:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003444:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003448:	fb02 f101 	mul.w	r1, r2, r1
 800344c:	4d23      	ldr	r5, [pc, #140]	; (80034dc <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800344e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003450:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003454:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003456:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003458:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800345c:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8003460:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003462:	6a15      	ldr	r5, [r2, #32]
 8003464:	3101      	adds	r1, #1
 8003466:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800346a:	4329      	orrs	r1, r5
 800346c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800346e:	69d1      	ldr	r1, [r2, #28]
 8003470:	68a5      	ldr	r5, [r4, #8]
 8003472:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003476:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800347a:	b9ad      	cbnz	r5, 80034a8 <HAL_I2C_Init+0x158>
 800347c:	3801      	subs	r0, #1
 800347e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	b1d3      	cbz	r3, 80034c4 <HAL_I2C_Init+0x174>
 800348e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003492:	e7a5      	b.n	80033e0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003494:	2001      	movs	r0, #1
}
 8003496:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003498:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800349c:	f7fe fc8c 	bl	8001db8 <HAL_I2C_MspInit>
 80034a0:	e762      	b.n	8003368 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a6:	e79b      	b.n	80033e0 <HAL_I2C_Init+0x90>
 80034a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034ac:	3801      	subs	r0, #1
 80034ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b6:	3301      	adds	r3, #1
 80034b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034bc:	b113      	cbz	r3, 80034c4 <HAL_I2C_Init+0x174>
 80034be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034c2:	e78d      	b.n	80033e0 <HAL_I2C_Init+0x90>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e78b      	b.n	80033e0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80034c8:	2001      	movs	r0, #1
}
 80034ca:	4770      	bx	lr
 80034cc:	000186a0 	.word	0x000186a0
 80034d0:	001e847f 	.word	0x001e847f
 80034d4:	431bde83 	.word	0x431bde83
 80034d8:	003d08ff 	.word	0x003d08ff
 80034dc:	10624dd3 	.word	0x10624dd3

080034e0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034e0:	2800      	cmp	r0, #0
 80034e2:	f000 81b6 	beq.w	8003852 <HAL_RCC_OscConfig+0x372>
{
 80034e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ea:	6803      	ldr	r3, [r0, #0]
 80034ec:	4604      	mov	r4, r0
 80034ee:	07dd      	lsls	r5, r3, #31
{
 80034f0:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f2:	d535      	bpl.n	8003560 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f4:	499a      	ldr	r1, [pc, #616]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 80034f6:	684a      	ldr	r2, [r1, #4]
 80034f8:	f002 020c 	and.w	r2, r2, #12
 80034fc:	2a04      	cmp	r2, #4
 80034fe:	f000 80ef 	beq.w	80036e0 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003502:	684a      	ldr	r2, [r1, #4]
 8003504:	f002 020c 	and.w	r2, r2, #12
 8003508:	2a08      	cmp	r2, #8
 800350a:	f000 80e5 	beq.w	80036d8 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350e:	6863      	ldr	r3, [r4, #4]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d010      	beq.n	8003538 <HAL_RCC_OscConfig+0x58>
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 810c 	beq.w	8003734 <HAL_RCC_OscConfig+0x254>
 800351c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003520:	f000 8182 	beq.w	8003828 <HAL_RCC_OscConfig+0x348>
 8003524:	4b8e      	ldr	r3, [pc, #568]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e004      	b.n	8003542 <HAL_RCC_OscConfig+0x62>
 8003538:	4a89      	ldr	r2, [pc, #548]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 800353a:	6813      	ldr	r3, [r2, #0]
 800353c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003540:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7ff fa07 	bl	8002954 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4e86      	ldr	r6, [pc, #536]	; (8003760 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8003548:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	e005      	b.n	8003558 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7ff fa02 	bl	8002954 <HAL_GetTick>
 8003550:	1b40      	subs	r0, r0, r5
 8003552:	2864      	cmp	r0, #100	; 0x64
 8003554:	f200 80ea 	bhi.w	800372c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003558:	6833      	ldr	r3, [r6, #0]
 800355a:	039a      	lsls	r2, r3, #14
 800355c:	d5f6      	bpl.n	800354c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	079f      	lsls	r7, r3, #30
 8003562:	d528      	bpl.n	80035b6 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003564:	4a7e      	ldr	r2, [pc, #504]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 8003566:	6851      	ldr	r1, [r2, #4]
 8003568:	f011 0f0c 	tst.w	r1, #12
 800356c:	f000 808d 	beq.w	800368a <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003570:	6851      	ldr	r1, [r2, #4]
 8003572:	f001 010c 	and.w	r1, r1, #12
 8003576:	2908      	cmp	r1, #8
 8003578:	f000 8083 	beq.w	8003682 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8118 	beq.w	80037b4 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003584:	2201      	movs	r2, #1
 8003586:	4b77      	ldr	r3, [pc, #476]	; (8003764 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	4e75      	ldr	r6, [pc, #468]	; (8003760 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 800358a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800358c:	f7ff f9e2 	bl	8002954 <HAL_GetTick>
 8003590:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	e005      	b.n	80035a0 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003594:	f7ff f9de 	bl	8002954 <HAL_GetTick>
 8003598:	1b40      	subs	r0, r0, r5
 800359a:	2802      	cmp	r0, #2
 800359c:	f200 80c6 	bhi.w	800372c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	6833      	ldr	r3, [r6, #0]
 80035a2:	0798      	lsls	r0, r3, #30
 80035a4:	d5f6      	bpl.n	8003594 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	6833      	ldr	r3, [r6, #0]
 80035a8:	6962      	ldr	r2, [r4, #20]
 80035aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80035b2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	071a      	lsls	r2, r3, #28
 80035b8:	d41f      	bmi.n	80035fa <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ba:	075d      	lsls	r5, r3, #29
 80035bc:	d542      	bpl.n	8003644 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035be:	4b68      	ldr	r3, [pc, #416]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	00d0      	lsls	r0, r2, #3
 80035c4:	d57d      	bpl.n	80036c2 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80035c6:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4e67      	ldr	r6, [pc, #412]	; (8003768 <HAL_RCC_OscConfig+0x288>)
 80035ca:	6833      	ldr	r3, [r6, #0]
 80035cc:	05d9      	lsls	r1, r3, #23
 80035ce:	f140 809d 	bpl.w	800370c <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d2:	68e3      	ldr	r3, [r4, #12]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	f000 80fe 	beq.w	80037d6 <HAL_RCC_OscConfig+0x2f6>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80ca 	beq.w	8003774 <HAL_RCC_OscConfig+0x294>
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	4b5f      	ldr	r3, [pc, #380]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 80035e4:	6a1a      	ldr	r2, [r3, #32]
 80035e6:	f000 812c 	beq.w	8003842 <HAL_RCC_OscConfig+0x362>
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	621a      	str	r2, [r3, #32]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	f022 0204 	bic.w	r2, r2, #4
 80035f6:	621a      	str	r2, [r3, #32]
 80035f8:	e0f2      	b.n	80037e0 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035fa:	69a3      	ldr	r3, [r4, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d04f      	beq.n	80036a0 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8003600:	2201      	movs	r2, #1
 8003602:	4b58      	ldr	r3, [pc, #352]	; (8003764 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003604:	4e56      	ldr	r6, [pc, #344]	; (8003760 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8003606:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800360a:	f7ff f9a3 	bl	8002954 <HAL_GetTick>
 800360e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003610:	e005      	b.n	800361e <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003612:	f7ff f99f 	bl	8002954 <HAL_GetTick>
 8003616:	1b40      	subs	r0, r0, r5
 8003618:	2802      	cmp	r0, #2
 800361a:	f200 8087 	bhi.w	800372c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003620:	079b      	lsls	r3, r3, #30
 8003622:	d5f6      	bpl.n	8003612 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003624:	4b51      	ldr	r3, [pc, #324]	; (800376c <HAL_RCC_OscConfig+0x28c>)
 8003626:	4a52      	ldr	r2, [pc, #328]	; (8003770 <HAL_RCC_OscConfig+0x290>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0a5b      	lsrs	r3, r3, #9
 8003630:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003632:	bf00      	nop
  }
  while (Delay --);
 8003634:	9b01      	ldr	r3, [sp, #4]
 8003636:	1e5a      	subs	r2, r3, #1
 8003638:	9201      	str	r2, [sp, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f9      	bne.n	8003632 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	075d      	lsls	r5, r3, #29
 8003642:	d4bc      	bmi.n	80035be <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003644:	69e0      	ldr	r0, [r4, #28]
 8003646:	b1c0      	cbz	r0, 800367a <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003648:	4d45      	ldr	r5, [pc, #276]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 800364a:	686b      	ldr	r3, [r5, #4]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b08      	cmp	r3, #8
 8003652:	f000 80d8 	beq.w	8003806 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8003656:	2200      	movs	r2, #0
 8003658:	4b42      	ldr	r3, [pc, #264]	; (8003764 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800365c:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365e:	f000 80fa 	beq.w	8003856 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8003662:	f7ff f977 	bl	8002954 <HAL_GetTick>
 8003666:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003668:	e004      	b.n	8003674 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366a:	f7ff f973 	bl	8002954 <HAL_GetTick>
 800366e:	1b00      	subs	r0, r0, r4
 8003670:	2802      	cmp	r0, #2
 8003672:	d85b      	bhi.n	800372c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	019b      	lsls	r3, r3, #6
 8003678:	d4f7      	bmi.n	800366a <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 800367a:	2000      	movs	r0, #0
}
 800367c:	b002      	add	sp, #8
 800367e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003682:	6852      	ldr	r2, [r2, #4]
 8003684:	03d6      	lsls	r6, r2, #15
 8003686:	f53f af79 	bmi.w	800357c <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	4a35      	ldr	r2, [pc, #212]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	0795      	lsls	r5, r2, #30
 8003690:	d530      	bpl.n	80036f4 <HAL_RCC_OscConfig+0x214>
 8003692:	6922      	ldr	r2, [r4, #16]
 8003694:	2a01      	cmp	r2, #1
 8003696:	d02d      	beq.n	80036f4 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8003698:	2001      	movs	r0, #1
}
 800369a:	b002      	add	sp, #8
 800369c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80036a0:	4a30      	ldr	r2, [pc, #192]	; (8003764 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a2:	4e2f      	ldr	r6, [pc, #188]	; (8003760 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 80036a4:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80036a8:	f7ff f954 	bl	8002954 <HAL_GetTick>
 80036ac:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ae:	e004      	b.n	80036ba <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b0:	f7ff f950 	bl	8002954 <HAL_GetTick>
 80036b4:	1b40      	subs	r0, r0, r5
 80036b6:	2802      	cmp	r0, #2
 80036b8:	d838      	bhi.n	800372c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80036bc:	079f      	lsls	r7, r3, #30
 80036be:	d4f7      	bmi.n	80036b0 <HAL_RCC_OscConfig+0x1d0>
 80036c0:	e7bd      	b.n	800363e <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c2:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80036c4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036ca:	61da      	str	r2, [r3, #28]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80036d6:	e777      	b.n	80035c8 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036d8:	684a      	ldr	r2, [r1, #4]
 80036da:	03d0      	lsls	r0, r2, #15
 80036dc:	f57f af17 	bpl.w	800350e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	0391      	lsls	r1, r2, #14
 80036e6:	f57f af3b 	bpl.w	8003560 <HAL_RCC_OscConfig+0x80>
 80036ea:	6862      	ldr	r2, [r4, #4]
 80036ec:	2a00      	cmp	r2, #0
 80036ee:	f47f af37 	bne.w	8003560 <HAL_RCC_OscConfig+0x80>
 80036f2:	e7d1      	b.n	8003698 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f4:	491a      	ldr	r1, [pc, #104]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 80036f6:	6960      	ldr	r0, [r4, #20]
 80036f8:	680a      	ldr	r2, [r1, #0]
 80036fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80036fe:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003702:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003704:	071a      	lsls	r2, r3, #28
 8003706:	f57f af58 	bpl.w	80035ba <HAL_RCC_OscConfig+0xda>
 800370a:	e776      	b.n	80035fa <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370c:	6833      	ldr	r3, [r6, #0]
 800370e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003712:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003714:	f7ff f91e 	bl	8002954 <HAL_GetTick>
 8003718:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371a:	6833      	ldr	r3, [r6, #0]
 800371c:	05da      	lsls	r2, r3, #23
 800371e:	f53f af58 	bmi.w	80035d2 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003722:	f7ff f917 	bl	8002954 <HAL_GetTick>
 8003726:	1bc0      	subs	r0, r0, r7
 8003728:	2864      	cmp	r0, #100	; 0x64
 800372a:	d9f6      	bls.n	800371a <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 800372c:	2003      	movs	r0, #3
}
 800372e:	b002      	add	sp, #8
 8003730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003734:	4d0a      	ldr	r5, [pc, #40]	; (8003760 <HAL_RCC_OscConfig+0x280>)
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373c:	602b      	str	r3, [r5, #0]
 800373e:	682b      	ldr	r3, [r5, #0]
 8003740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003744:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003746:	f7ff f905 	bl	8002954 <HAL_GetTick>
 800374a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374c:	e004      	b.n	8003758 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374e:	f7ff f901 	bl	8002954 <HAL_GetTick>
 8003752:	1b80      	subs	r0, r0, r6
 8003754:	2864      	cmp	r0, #100	; 0x64
 8003756:	d8e9      	bhi.n	800372c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	039b      	lsls	r3, r3, #14
 800375c:	d4f7      	bmi.n	800374e <HAL_RCC_OscConfig+0x26e>
 800375e:	e6fe      	b.n	800355e <HAL_RCC_OscConfig+0x7e>
 8003760:	40021000 	.word	0x40021000
 8003764:	42420000 	.word	0x42420000
 8003768:	40007000 	.word	0x40007000
 800376c:	20000000 	.word	0x20000000
 8003770:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003774:	4e50      	ldr	r6, [pc, #320]	; (80038b8 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003776:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377a:	6a33      	ldr	r3, [r6, #32]
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6233      	str	r3, [r6, #32]
 8003782:	6a33      	ldr	r3, [r6, #32]
 8003784:	f023 0304 	bic.w	r3, r3, #4
 8003788:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800378a:	f7ff f8e3 	bl	8002954 <HAL_GetTick>
 800378e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	e004      	b.n	800379c <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003792:	f7ff f8df 	bl	8002954 <HAL_GetTick>
 8003796:	1bc0      	subs	r0, r0, r7
 8003798:	4540      	cmp	r0, r8
 800379a:	d8c7      	bhi.n	800372c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379c:	6a33      	ldr	r3, [r6, #32]
 800379e:	0798      	lsls	r0, r3, #30
 80037a0:	d4f7      	bmi.n	8003792 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 80037a2:	2d00      	cmp	r5, #0
 80037a4:	f43f af4e 	beq.w	8003644 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a8:	4a43      	ldr	r2, [pc, #268]	; (80038b8 <HAL_RCC_OscConfig+0x3d8>)
 80037aa:	69d3      	ldr	r3, [r2, #28]
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	61d3      	str	r3, [r2, #28]
 80037b2:	e747      	b.n	8003644 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80037b4:	4a41      	ldr	r2, [pc, #260]	; (80038bc <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	4e40      	ldr	r6, [pc, #256]	; (80038b8 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 80037b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80037ba:	f7ff f8cb 	bl	8002954 <HAL_GetTick>
 80037be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c0:	e004      	b.n	80037cc <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c2:	f7ff f8c7 	bl	8002954 <HAL_GetTick>
 80037c6:	1b40      	subs	r0, r0, r5
 80037c8:	2802      	cmp	r0, #2
 80037ca:	d8af      	bhi.n	800372c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037cc:	6833      	ldr	r3, [r6, #0]
 80037ce:	0799      	lsls	r1, r3, #30
 80037d0:	d4f7      	bmi.n	80037c2 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	e6ef      	b.n	80035b6 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d6:	4a38      	ldr	r2, [pc, #224]	; (80038b8 <HAL_RCC_OscConfig+0x3d8>)
 80037d8:	6a13      	ldr	r3, [r2, #32]
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80037e0:	f7ff f8b8 	bl	8002954 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80037e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ea:	4f33      	ldr	r7, [pc, #204]	; (80038b8 <HAL_RCC_OscConfig+0x3d8>)
 80037ec:	e004      	b.n	80037f8 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ee:	f7ff f8b1 	bl	8002954 <HAL_GetTick>
 80037f2:	1b80      	subs	r0, r0, r6
 80037f4:	4540      	cmp	r0, r8
 80037f6:	d899      	bhi.n	800372c <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	079b      	lsls	r3, r3, #30
 80037fc:	d5f7      	bpl.n	80037ee <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 80037fe:	2d00      	cmp	r5, #0
 8003800:	f43f af20 	beq.w	8003644 <HAL_RCC_OscConfig+0x164>
 8003804:	e7d0      	b.n	80037a8 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003806:	2801      	cmp	r0, #1
 8003808:	f43f af38 	beq.w	800367c <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 800380c:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	6a22      	ldr	r2, [r4, #32]
 8003810:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003814:	4291      	cmp	r1, r2
 8003816:	f47f af3f 	bne.w	8003698 <HAL_RCC_OscConfig+0x1b8>
 800381a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800381c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003820:	1a18      	subs	r0, r3, r0
 8003822:	bf18      	it	ne
 8003824:	2001      	movne	r0, #1
 8003826:	e729      	b.n	800367c <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800382c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e67f      	b.n	8003542 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003842:	f042 0204 	orr.w	r2, r2, #4
 8003846:	621a      	str	r2, [r3, #32]
 8003848:	6a1a      	ldr	r2, [r3, #32]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	621a      	str	r2, [r3, #32]
 8003850:	e7c6      	b.n	80037e0 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8003852:	2001      	movs	r0, #1
}
 8003854:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8003856:	f7ff f87d 	bl	8002954 <HAL_GetTick>
 800385a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385c:	e005      	b.n	800386a <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385e:	f7ff f879 	bl	8002954 <HAL_GetTick>
 8003862:	1b80      	subs	r0, r0, r6
 8003864:	2802      	cmp	r0, #2
 8003866:	f63f af61 	bhi.w	800372c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	0199      	lsls	r1, r3, #6
 800386e:	d4f6      	bmi.n	800385e <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003870:	6a23      	ldr	r3, [r4, #32]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003876:	d105      	bne.n	8003884 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003878:	686a      	ldr	r2, [r5, #4]
 800387a:	68a1      	ldr	r1, [r4, #8]
 800387c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003880:	430a      	orrs	r2, r1
 8003882:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003884:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003886:	4d0c      	ldr	r5, [pc, #48]	; (80038b8 <HAL_RCC_OscConfig+0x3d8>)
 8003888:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800388a:	686a      	ldr	r2, [r5, #4]
 800388c:	430b      	orrs	r3, r1
 800388e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8003892:	490a      	ldr	r1, [pc, #40]	; (80038bc <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003894:	4313      	orrs	r3, r2
 8003896:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003898:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800389a:	f7ff f85b 	bl	8002954 <HAL_GetTick>
 800389e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a0:	e005      	b.n	80038ae <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a2:	f7ff f857 	bl	8002954 <HAL_GetTick>
 80038a6:	1b00      	subs	r0, r0, r4
 80038a8:	2802      	cmp	r0, #2
 80038aa:	f63f af3f 	bhi.w	800372c <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	019a      	lsls	r2, r3, #6
 80038b2:	d5f6      	bpl.n	80038a2 <HAL_RCC_OscConfig+0x3c2>
 80038b4:	e6e1      	b.n	800367a <HAL_RCC_OscConfig+0x19a>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	42420000 	.word	0x42420000

080038c0 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038c0:	f240 2c01 	movw	ip, #513	; 0x201
{
 80038c4:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80038c8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038ca:	f10d 0e18 	add.w	lr, sp, #24
 80038ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038d0:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80038d4:	4a15      	ldr	r2, [pc, #84]	; (800392c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038d6:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 80038da:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80038dc:	f003 010c 	and.w	r1, r3, #12
 80038e0:	2908      	cmp	r1, #8
 80038e2:	d003      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 80038e4:	4812      	ldr	r0, [pc, #72]	; (8003930 <HAL_RCC_GetSysClockFreq+0x70>)
}
 80038e6:	b007      	add	sp, #28
 80038e8:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ec:	f3c3 4183 	ubfx	r1, r3, #18, #4
 80038f0:	3118      	adds	r1, #24
 80038f2:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038f4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038f6:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038fa:	d50e      	bpl.n	800391a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038fc:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003900:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003904:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003908:	3318      	adds	r3, #24
 800390a:	446b      	add	r3, sp
 800390c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003910:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003914:	b007      	add	sp, #28
 8003916:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_GetSysClockFreq+0x74>)
 800391c:	fb03 f000 	mul.w	r0, r3, r0
}
 8003920:	b007      	add	sp, #28
 8003922:	f85d fb04 	ldr.w	pc, [sp], #4
 8003926:	bf00      	nop
 8003928:	08010c58 	.word	0x08010c58
 800392c:	40021000 	.word	0x40021000
 8003930:	007a1200 	.word	0x007a1200
 8003934:	003d0900 	.word	0x003d0900

08003938 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003938:	2800      	cmp	r0, #0
 800393a:	f000 808c 	beq.w	8003a56 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800393e:	4a49      	ldr	r2, [pc, #292]	; (8003a64 <HAL_RCC_ClockConfig+0x12c>)
{
 8003940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	6813      	ldr	r3, [r2, #0]
 8003946:	4604      	mov	r4, r0
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	428b      	cmp	r3, r1
 800394e:	460d      	mov	r5, r1
 8003950:	d20c      	bcs.n	800396c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	6813      	ldr	r3, [r2, #0]
 8003954:	f023 0307 	bic.w	r3, r3, #7
 8003958:	430b      	orrs	r3, r1
 800395a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395c:	6813      	ldr	r3, [r2, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	428b      	cmp	r3, r1
 8003964:	d002      	beq.n	800396c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003966:	2001      	movs	r0, #1
}
 8003968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	0798      	lsls	r0, r3, #30
 8003970:	d514      	bpl.n	800399c <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003972:	0759      	lsls	r1, r3, #29
 8003974:	d504      	bpl.n	8003980 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003976:	493c      	ldr	r1, [pc, #240]	; (8003a68 <HAL_RCC_ClockConfig+0x130>)
 8003978:	684a      	ldr	r2, [r1, #4]
 800397a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800397e:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003980:	071a      	lsls	r2, r3, #28
 8003982:	d504      	bpl.n	800398e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003984:	4938      	ldr	r1, [pc, #224]	; (8003a68 <HAL_RCC_ClockConfig+0x130>)
 8003986:	684a      	ldr	r2, [r1, #4]
 8003988:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800398c:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398e:	4936      	ldr	r1, [pc, #216]	; (8003a68 <HAL_RCC_ClockConfig+0x130>)
 8003990:	68a0      	ldr	r0, [r4, #8]
 8003992:	684a      	ldr	r2, [r1, #4]
 8003994:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003998:	4302      	orrs	r2, r0
 800399a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399c:	07df      	lsls	r7, r3, #31
 800399e:	d520      	bpl.n	80039e2 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a0:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a8:	d057      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039aa:	2a02      	cmp	r2, #2
 80039ac:	d050      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ae:	0799      	lsls	r1, r3, #30
 80039b0:	d5d9      	bpl.n	8003966 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4e2d      	ldr	r6, [pc, #180]	; (8003a68 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b8:	6873      	ldr	r3, [r6, #4]
 80039ba:	f023 0303 	bic.w	r3, r3, #3
 80039be:	4313      	orrs	r3, r2
 80039c0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80039c2:	f7fe ffc7 	bl	8002954 <HAL_GetTick>
 80039c6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c8:	e004      	b.n	80039d4 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ca:	f7fe ffc3 	bl	8002954 <HAL_GetTick>
 80039ce:	1bc0      	subs	r0, r0, r7
 80039d0:	4540      	cmp	r0, r8
 80039d2:	d845      	bhi.n	8003a60 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d4:	6873      	ldr	r3, [r6, #4]
 80039d6:	6862      	ldr	r2, [r4, #4]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80039e0:	d1f3      	bne.n	80039ca <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039e2:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <HAL_RCC_ClockConfig+0x12c>)
 80039e4:	6813      	ldr	r3, [r2, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	42ab      	cmp	r3, r5
 80039ec:	d909      	bls.n	8003a02 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	6813      	ldr	r3, [r2, #0]
 80039f0:	f023 0307 	bic.w	r3, r3, #7
 80039f4:	432b      	orrs	r3, r5
 80039f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f8:	6813      	ldr	r3, [r2, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	42ab      	cmp	r3, r5
 8003a00:	d1b1      	bne.n	8003966 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	075a      	lsls	r2, r3, #29
 8003a06:	d506      	bpl.n	8003a16 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4917      	ldr	r1, [pc, #92]	; (8003a68 <HAL_RCC_ClockConfig+0x130>)
 8003a0a:	68e0      	ldr	r0, [r4, #12]
 8003a0c:	684a      	ldr	r2, [r1, #4]
 8003a0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a12:	4302      	orrs	r2, r0
 8003a14:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a16:	071b      	lsls	r3, r3, #28
 8003a18:	d507      	bpl.n	8003a2a <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a1a:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <HAL_RCC_ClockConfig+0x130>)
 8003a1c:	6921      	ldr	r1, [r4, #16]
 8003a1e:	6853      	ldr	r3, [r2, #4]
 8003a20:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003a24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a28:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a2a:	f7ff ff49 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4a0d      	ldr	r2, [pc, #52]	; (8003a68 <HAL_RCC_ClockConfig+0x130>)
 8003a32:	490e      	ldr	r1, [pc, #56]	; (8003a6c <HAL_RCC_ClockConfig+0x134>)
 8003a34:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003a36:	480e      	ldr	r0, [pc, #56]	; (8003a70 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a38:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003a3c:	5c89      	ldrb	r1, [r1, r2]
 8003a3e:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <HAL_RCC_ClockConfig+0x13c>)
 8003a40:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8003a42:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a44:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003a46:	f7fe ff43 	bl	80028d0 <HAL_InitTick>
  return HAL_OK;
 8003a4a:	2000      	movs	r0, #0
}
 8003a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a50:	0198      	lsls	r0, r3, #6
 8003a52:	d4ae      	bmi.n	80039b2 <HAL_RCC_ClockConfig+0x7a>
 8003a54:	e787      	b.n	8003966 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003a56:	2001      	movs	r0, #1
}
 8003a58:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	039e      	lsls	r6, r3, #14
 8003a5c:	d4a9      	bmi.n	80039b2 <HAL_RCC_ClockConfig+0x7a>
 8003a5e:	e782      	b.n	8003966 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003a60:	2003      	movs	r0, #3
 8003a62:	e781      	b.n	8003968 <HAL_RCC_ClockConfig+0x30>
 8003a64:	40022000 	.word	0x40022000
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	08008b60 	.word	0x08008b60
 8003a70:	20000030 	.word	0x20000030
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4905      	ldr	r1, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003a80:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003a84:	5ccb      	ldrb	r3, [r1, r3]
 8003a86:	6810      	ldr	r0, [r2, #0]
}
 8003a88:	40d8      	lsrs	r0, r3
 8003a8a:	4770      	bx	lr
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	20000000 	.word	0x20000000
 8003a94:	08008b70 	.word	0x08008b70

08003a98 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003a9a:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4905      	ldr	r1, [pc, #20]	; (8003ab4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003aa0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003aa4:	5ccb      	ldrb	r3, [r1, r3]
 8003aa6:	6810      	ldr	r0, [r2, #0]
}
 8003aa8:	40d8      	lsrs	r0, r3
 8003aaa:	4770      	bx	lr
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	20000000 	.word	0x20000000
 8003ab4:	08008b70 	.word	0x08008b70

08003ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003abc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003abe:	6800      	ldr	r0, [r0, #0]
{
 8003ac0:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ac2:	07c1      	lsls	r1, r0, #31
 8003ac4:	d52c      	bpl.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac6:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	00d2      	lsls	r2, r2, #3
 8003acc:	d53f      	bpl.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4d39      	ldr	r5, [pc, #228]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8003ad0:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad2:	682b      	ldr	r3, [r5, #0]
 8003ad4:	05df      	lsls	r7, r3, #23
 8003ad6:	d548      	bpl.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ad8:	4d35      	ldr	r5, [pc, #212]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003ada:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003adc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ae0:	d011      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003ae2:	6861      	ldr	r1, [r4, #4]
 8003ae4:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d00d      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aec:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aee:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af0:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af2:	4a31      	ldr	r2, [pc, #196]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af8:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003afc:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b00:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b02:	07d9      	lsls	r1, r3, #31
 8003b04:	d444      	bmi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b06:	6861      	ldr	r1, [r4, #4]
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003b0a:	6a13      	ldr	r3, [r2, #32]
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b14:	b11e      	cbz	r6, 8003b1e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b16:	69d3      	ldr	r3, [r2, #28]
 8003b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b1e:	6820      	ldr	r0, [r4, #0]
 8003b20:	0783      	lsls	r3, r0, #30
 8003b22:	d506      	bpl.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b24:	4922      	ldr	r1, [pc, #136]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003b26:	68a3      	ldr	r3, [r4, #8]
 8003b28:	684a      	ldr	r2, [r1, #4]
 8003b2a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b32:	f010 0010 	ands.w	r0, r0, #16
 8003b36:	d007      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b38:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b3a:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003b3c:	6961      	ldr	r1, [r4, #20]
 8003b3e:	6853      	ldr	r3, [r2, #4]
 8003b40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6053      	str	r3, [r2, #4]
}
 8003b48:	b002      	add	sp, #8
 8003b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4d18      	ldr	r5, [pc, #96]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b56:	61da      	str	r2, [r3, #28]
 8003b58:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8003b5a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	05df      	lsls	r7, r3, #23
 8003b68:	d4b6      	bmi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6a:	682b      	ldr	r3, [r5, #0]
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003b72:	f7fe feef 	bl	8002954 <HAL_GetTick>
 8003b76:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	05d8      	lsls	r0, r3, #23
 8003b7c:	d4ac      	bmi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fe fee9 	bl	8002954 <HAL_GetTick>
 8003b82:	1bc3      	subs	r3, r0, r7
 8003b84:	2b64      	cmp	r3, #100	; 0x64
 8003b86:	d9f7      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003b88:	2003      	movs	r0, #3
}
 8003b8a:	b002      	add	sp, #8
 8003b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8003b90:	f7fe fee0 	bl	8002954 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b94:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003b98:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	e004      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f7fe feda 	bl	8002954 <HAL_GetTick>
 8003ba0:	1bc0      	subs	r0, r0, r7
 8003ba2:	4540      	cmp	r0, r8
 8003ba4:	d8f0      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba6:	6a2b      	ldr	r3, [r5, #32]
 8003ba8:	079a      	lsls	r2, r3, #30
 8003baa:	d5f7      	bpl.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003bac:	e7ab      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	42420000 	.word	0x42420000

08003bbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bbc:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
{
 8003bc0:	b087      	sub	sp, #28
 8003bc2:	4684      	mov	ip, r0
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc6:	f10d 0e18 	add.w	lr, sp, #24
 8003bca:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bce:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003bd2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bd6:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8003bda:	280f      	cmp	r0, #15
 8003bdc:	d819      	bhi.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8003bde:	e8df f000 	tbb	[pc, r0]
 8003be2:	2108      	.short	0x2108
 8003be4:	18181c18 	.word	0x18181c18
 8003be8:	18181c18 	.word	0x18181c18
 8003bec:	18181818 	.word	0x18181818
 8003bf0:	2e18      	.short	0x2e18
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bf2:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8003bf6:	4930      	ldr	r1, [pc, #192]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8003bf8:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8003c00:	d055      	beq.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0a:	d048      	beq.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c10:	d03d      	beq.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c12:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003c14:	b007      	add	sp, #28
 8003c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c1a:	b007      	add	sp, #28
 8003c1c:	f85d eb04 	ldr.w	lr, [sp], #4
      frequency = HAL_RCC_GetSysClockFreq();
 8003c20:	f7ff be4e 	b.w	80038c0 <HAL_RCC_GetSysClockFreq>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c24:	f7ff ff38 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8003c28:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003c30:	3301      	adds	r3, #1
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003c38:	b007      	add	sp, #28
 8003c3a:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8003c40:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003c48:	d0e4      	beq.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c4a:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8003c4e:	3118      	adds	r1, #24
 8003c50:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c52:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c54:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c58:	d40c      	bmi.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c5a:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8003c5c:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c60:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	025b      	lsls	r3, r3, #9
 8003c66:	d4d5      	bmi.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          frequency = (pllclk * 2) / 3;
 8003c68:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8003c6a:	0040      	lsls	r0, r0, #1
 8003c6c:	fba3 3000 	umull	r3, r0, r3, r0
 8003c70:	0840      	lsrs	r0, r0, #1
 8003c72:	e7cf      	b.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c74:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c78:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003c7c:	3318      	adds	r3, #24
 8003c7e:	446b      	add	r3, sp
 8003c80:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	fb03 f000 	mul.w	r0, r3, r0
 8003c8c:	e7e8      	b.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = HSE_VALUE / 128U;
 8003c8e:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c92:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8003c94:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003c98:	bf18      	it	ne
 8003c9a:	4618      	movne	r0, r3
 8003c9c:	e7ba      	b.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSI_VALUE;
 8003c9e:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ca2:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8003ca4:	f010 0002 	ands.w	r0, r0, #2
 8003ca8:	bf18      	it	ne
 8003caa:	4618      	movne	r0, r3
 8003cac:	e7b2      	b.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSE_VALUE;
 8003cae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003cb2:	e7af      	b.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8003cb4:	08010c58 	.word	0x08010c58
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	003d0900 	.word	0x003d0900
 8003cc0:	aaaaaaab 	.word	0xaaaaaaab
 8003cc4:	007a1200 	.word	0x007a1200

08003cc8 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003cc8:	b368      	cbz	r0, 8003d26 <HAL_SRAM_Init+0x5e>
 8003cca:	6983      	ldr	r3, [r0, #24]
{
 8003ccc:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	d029      	beq.n	8003d2a <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003cd6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003cda:	4615      	mov	r5, r2
 8003cdc:	460e      	mov	r6, r1
 8003cde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ce2:	b1db      	cbz	r3, 8003d1c <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	f851 0b08 	ldr.w	r0, [r1], #8
 8003cea:	f000 f9b3 	bl	8004054 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003cee:	4631      	mov	r1, r6
 8003cf0:	68a2      	ldr	r2, [r4, #8]
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	f000 f9e4 	bl	80040c0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003cf8:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8003cfc:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003cfe:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003d00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d02:	f000 f9ff 	bl	8004104 <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003d06:	6822      	ldr	r2, [r4, #0]
 8003d08:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 8003d0a:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d10:	432b      	orrs	r3, r5
 8003d12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8003d16:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8003d1c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 8003d20:	f7fe f89c 	bl	8001e5c <HAL_SRAM_MspInit>
 8003d24:	e7de      	b.n	8003ce4 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 8003d26:	2001      	movs	r0, #1
}
 8003d28:	4770      	bx	lr
    return HAL_ERROR;
 8003d2a:	2001      	movs	r0, #1
}
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
 8003d2e:	bf00      	nop

08003d30 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d30:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d124      	bne.n	8003d82 <HAL_TIM_Base_Start+0x52>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3a:	6803      	ldr	r3, [r0, #0]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d012      	beq.n	8003d6c <HAL_TIM_Base_Start+0x3c>
 8003d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00e      	beq.n	8003d6c <HAL_TIM_Base_Start+0x3c>
 8003d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d52:	d00b      	beq.n	8003d6c <HAL_TIM_Base_Start+0x3c>
 8003d54:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d007      	beq.n	8003d6c <HAL_TIM_Base_Start+0x3c>
 8003d5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <HAL_TIM_Base_Start+0x3c>
 8003d64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d104      	bne.n	8003d76 <HAL_TIM_Base_Start+0x46>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d72:	2a06      	cmp	r2, #6
 8003d74:	d007      	beq.n	8003d86 <HAL_TIM_Base_Start+0x56>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d76:	681a      	ldr	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d78:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	4770      	bx	lr
    return HAL_ERROR;
 8003d82:	2001      	movs	r0, #1
 8003d84:	4770      	bx	lr
  return HAL_OK;
 8003d86:	2000      	movs	r0, #0
}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40012c00 	.word	0x40012c00

08003d90 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d90:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003d94:	2a01      	cmp	r2, #1
 8003d96:	d075      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0xf4>
{
 8003d98:	b430      	push	{r4, r5}
 8003d9a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003d9c:	2401      	movs	r4, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8003d9e:	2202      	movs	r2, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8003da2:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003daa:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8003dac:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dae:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8003db2:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8003db6:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8003db8:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003dba:	d065      	beq.n	8003e88 <HAL_TIM_ConfigClockSource+0xf8>
 8003dbc:	d831      	bhi.n	8003e22 <HAL_TIM_ConfigClockSource+0x92>
 8003dbe:	2a40      	cmp	r2, #64	; 0x40
 8003dc0:	d048      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0xc4>
 8003dc2:	d921      	bls.n	8003e08 <HAL_TIM_ConfigClockSource+0x78>
 8003dc4:	2a50      	cmp	r2, #80	; 0x50
 8003dc6:	d116      	bne.n	8003df6 <HAL_TIM_ConfigClockSource+0x66>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc8:	684c      	ldr	r4, [r1, #4]
 8003dca:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dcc:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dce:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003dd2:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd4:	6a04      	ldr	r4, [r0, #32]
 8003dd6:	f024 0401 	bic.w	r4, r4, #1
 8003dda:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ddc:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dde:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003de2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003de6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003de8:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dea:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df4:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8003df6:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8003df8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8003dfe:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  return HAL_OK;
 8003e02:	4610      	mov	r0, r2
}
 8003e04:	bc30      	pop	{r4, r5}
 8003e06:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003e08:	2a20      	cmp	r2, #32
 8003e0a:	d002      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x82>
 8003e0c:	d91e      	bls.n	8003e4c <HAL_TIM_ConfigClockSource+0xbc>
 8003e0e:	2a30      	cmp	r2, #48	; 0x30
 8003e10:	d1f1      	bne.n	8003df6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8003e12:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e14:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8003e1e:	6082      	str	r2, [r0, #8]
}
 8003e20:	e7e9      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003e22:	2a70      	cmp	r2, #112	; 0x70
 8003e24:	d049      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x12a>
 8003e26:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e2a:	d1e4      	bne.n	8003df6 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e2c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003e30:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e32:	432a      	orrs	r2, r5
 8003e34:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e36:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003e3e:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e40:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e42:	6882      	ldr	r2, [r0, #8]
 8003e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e48:	6082      	str	r2, [r0, #8]
      break;
 8003e4a:	e7d4      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003e4c:	f032 0110 	bics.w	r1, r2, #16
 8003e50:	d1d1      	bne.n	8003df6 <HAL_TIM_ConfigClockSource+0x66>
 8003e52:	e7de      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e54:	684c      	ldr	r4, [r1, #4]
 8003e56:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003e58:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e5a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003e5e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e60:	6a04      	ldr	r4, [r0, #32]
 8003e62:	f024 0401 	bic.w	r4, r4, #1
 8003e66:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e68:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e6a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e6e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003e72:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e74:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003e76:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e7c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003e80:	6082      	str	r2, [r0, #8]
}
 8003e82:	e7b8      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8003e84:	2002      	movs	r0, #2
}
 8003e86:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e88:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8a:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e90:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e92:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e94:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e96:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e9a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 8003e9e:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8003ea0:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8003eaa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003eac:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eb2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003eb6:	6082      	str	r2, [r0, #8]
}
 8003eb8:	e79d      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eba:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003ebe:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec0:	432a      	orrs	r2, r5
 8003ec2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec4:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003ecc:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003ece:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003ed0:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003ed6:	6082      	str	r2, [r0, #8]
      break;
 8003ed8:	e78d      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x66>
 8003eda:	bf00      	nop

08003edc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003edc:	4a28      	ldr	r2, [pc, #160]	; (8003f80 <TIM_Base_SetConfig+0xa4>)
{
 8003ede:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8003ee2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee4:	d01f      	beq.n	8003f26 <TIM_Base_SetConfig+0x4a>
 8003ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eea:	4290      	cmp	r0, r2
 8003eec:	d01b      	beq.n	8003f26 <TIM_Base_SetConfig+0x4a>
 8003eee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ef2:	d02f      	beq.n	8003f54 <TIM_Base_SetConfig+0x78>
 8003ef4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003ef8:	4290      	cmp	r0, r2
 8003efa:	d02b      	beq.n	8003f54 <TIM_Base_SetConfig+0x78>
 8003efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f00:	4290      	cmp	r0, r2
 8003f02:	d027      	beq.n	8003f54 <TIM_Base_SetConfig+0x78>
 8003f04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f08:	4290      	cmp	r0, r2
 8003f0a:	d023      	beq.n	8003f54 <TIM_Base_SetConfig+0x78>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0c:	694d      	ldr	r5, [r1, #20]
 8003f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f12:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f14:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003f16:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003f18:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003f1a:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1c:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f1e:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003f20:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8003f22:	6143      	str	r3, [r0, #20]
}
 8003f24:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003f26:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f2e:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f36:	694a      	ldr	r2, [r1, #20]
 8003f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003f3e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f40:	688b      	ldr	r3, [r1, #8]
}
 8003f42:	bc30      	pop	{r4, r5}
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f44:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f46:	680b      	ldr	r3, [r1, #0]
 8003f48:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003f4a:	690b      	ldr	r3, [r1, #16]
 8003f4c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	6143      	str	r3, [r0, #20]
}
 8003f52:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003f54:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5a:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f5c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f62:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f64:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f6a:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f6c:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8003f6e:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003f70:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003f72:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f74:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f76:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003f78:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8003f7a:	6143      	str	r3, [r0, #20]
}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40012c00 	.word	0x40012c00

08003f84 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003f84:	b350      	cbz	r0, 8003fdc <HAL_TIM_Base_Init+0x58>
{
 8003f86:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f92:	b1f3      	cbz	r3, 8003fd2 <HAL_TIM_Base_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f96:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003fa0:	f7ff ff9c 	bl	8003edc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003faa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003fae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003fb2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003fb6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003fc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003fca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fce:	2000      	movs	r0, #0
}
 8003fd0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003fd2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003fd6:	f7fd ff2b 	bl	8001e30 <HAL_TIM_Base_MspInit>
 8003fda:	e7db      	b.n	8003f94 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003fdc:	2001      	movs	r0, #1
}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003fe4:	2a01      	cmp	r2, #1
 8003fe6:	d02f      	beq.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003fe8:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fea:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fec:	681a      	ldr	r2, [r3, #0]
{
 8003fee:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003ff4:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff6:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff8:	4d14      	ldr	r5, [pc, #80]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ffa:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ffe:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004000:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8004002:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8004004:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004006:	d011      	beq.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004008:	4811      	ldr	r0, [pc, #68]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800400a:	4282      	cmp	r2, r0
 800400c:	d00e      	beq.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800400e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004012:	d00b      	beq.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004014:	f5a0 3098 	sub.w	r0, r0, #77824	; 0x13000
 8004018:	4282      	cmp	r2, r0
 800401a:	d007      	beq.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800401c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004020:	4282      	cmp	r2, r0
 8004022:	d003      	beq.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004024:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004028:	4282      	cmp	r2, r0
 800402a:	d104      	bne.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800402e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004032:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004034:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004036:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8004038:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800403e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8004042:	4610      	mov	r0, r2
}
 8004044:	bc30      	pop	{r4, r5}
 8004046:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004048:	2002      	movs	r0, #2
}
 800404a:	4770      	bx	lr
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40013400 	.word	0x40013400

08004054 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004054:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 8004056:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004058:	688b      	ldr	r3, [r1, #8]
{
 800405a:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800405c:	2b08      	cmp	r3, #8
 800405e:	bf0c      	ite	eq
 8004060:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8004064:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004066:	684e      	ldr	r6, [r1, #4]
 8004068:	680c      	ldr	r4, [r1, #0]
 800406a:	4333      	orrs	r3, r6
 800406c:	68ce      	ldr	r6, [r1, #12]
 800406e:	4d13      	ldr	r5, [pc, #76]	; (80040bc <FSMC_NORSRAM_Init+0x68>)
 8004070:	4333      	orrs	r3, r6
 8004072:	690e      	ldr	r6, [r1, #16]
 8004074:	4333      	orrs	r3, r6
 8004076:	694e      	ldr	r6, [r1, #20]
 8004078:	4333      	orrs	r3, r6
 800407a:	69ce      	ldr	r6, [r1, #28]
 800407c:	4333      	orrs	r3, r6
 800407e:	6a0e      	ldr	r6, [r1, #32]
 8004080:	4333      	orrs	r3, r6
 8004082:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8004084:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004086:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 800408a:	f026 0601 	bic.w	r6, r6, #1
 800408e:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004092:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8004094:	4333      	orrs	r3, r6
 8004096:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8004098:	4333      	orrs	r3, r6
 800409a:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800409c:	4333      	orrs	r3, r6
 800409e:	698e      	ldr	r6, [r1, #24]
 80040a0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80040a2:	4333      	orrs	r3, r6
 80040a4:	430b      	orrs	r3, r1
 80040a6:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 80040aa:	400d      	ands	r5, r1
 80040ac:	432b      	orrs	r3, r5
 80040ae:	ea43 030c 	orr.w	r3, r3, ip
 80040b2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 80040b6:	bc70      	pop	{r4, r5, r6}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	fff00080 	.word	0xfff00080

080040c0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80040c0:	4603      	mov	r3, r0
 80040c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80040c6:	6853      	ldr	r3, [r2, #4]
{
 80040c8:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80040ca:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 80040ce:	698c      	ldr	r4, [r1, #24]
 80040d0:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 80040d2:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80040d4:	4323      	orrs	r3, r4
 80040d6:	684c      	ldr	r4, [r1, #4]
 80040d8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80040dc:	688c      	ldr	r4, [r1, #8]
 80040de:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80040e2:	68cc      	ldr	r4, [r1, #12]
 80040e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80040e8:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 80040ec:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 80040f0:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 80040f4:	3902      	subs	r1, #2
 80040f6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80040fa:	ea43 030c 	orr.w	r3, r3, ip
 80040fe:	6053      	str	r3, [r2, #4]
}
 8004100:	bd10      	pop	{r4, pc}
 8004102:	bf00      	nop

08004104 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004108:	d005      	beq.n	8004116 <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800410a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800410e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004112:	2000      	movs	r0, #0
 8004114:	4770      	bx	lr
{
 8004116:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004118:	680b      	ldr	r3, [r1, #0]
 800411a:	698d      	ldr	r5, [r1, #24]
 800411c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8004120:	432b      	orrs	r3, r5
 8004122:	684d      	ldr	r5, [r1, #4]
 8004124:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004128:	688d      	ldr	r5, [r1, #8]
 800412a:	68c9      	ldr	r1, [r1, #12]
 800412c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004130:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004134:	4903      	ldr	r1, [pc, #12]	; (8004144 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8004136:	4021      	ands	r1, r4
 8004138:	430b      	orrs	r3, r1
 800413a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800413e:	bc30      	pop	{r4, r5}
 8004140:	2000      	movs	r0, #0
 8004142:	4770      	bx	lr
 8004144:	cff00000 	.word	0xcff00000

08004148 <__errno>:
 8004148:	4b01      	ldr	r3, [pc, #4]	; (8004150 <__errno+0x8>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000034 	.word	0x20000034

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	2600      	movs	r6, #0
 8004158:	4d0c      	ldr	r5, [pc, #48]	; (800418c <__libc_init_array+0x38>)
 800415a:	4c0d      	ldr	r4, [pc, #52]	; (8004190 <__libc_init_array+0x3c>)
 800415c:	1b64      	subs	r4, r4, r5
 800415e:	10a4      	asrs	r4, r4, #2
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	f004 fca6 	bl	8008ab4 <_init>
 8004168:	2600      	movs	r6, #0
 800416a:	4d0a      	ldr	r5, [pc, #40]	; (8004194 <__libc_init_array+0x40>)
 800416c:	4c0a      	ldr	r4, [pc, #40]	; (8004198 <__libc_init_array+0x44>)
 800416e:	1b64      	subs	r4, r4, r5
 8004170:	10a4      	asrs	r4, r4, #2
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	08011114 	.word	0x08011114
 8004190:	08011114 	.word	0x08011114
 8004194:	08011114 	.word	0x08011114
 8004198:	08011118 	.word	0x08011118

0800419c <memset>:
 800419c:	4603      	mov	r3, r0
 800419e:	4402      	add	r2, r0
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d100      	bne.n	80041a6 <memset+0xa>
 80041a4:	4770      	bx	lr
 80041a6:	f803 1b01 	strb.w	r1, [r3], #1
 80041aa:	e7f9      	b.n	80041a0 <memset+0x4>

080041ac <__cvt>:
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b2:	461f      	mov	r7, r3
 80041b4:	bfbb      	ittet	lt
 80041b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80041ba:	461f      	movlt	r7, r3
 80041bc:	2300      	movge	r3, #0
 80041be:	232d      	movlt	r3, #45	; 0x2d
 80041c0:	b088      	sub	sp, #32
 80041c2:	4614      	mov	r4, r2
 80041c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80041c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80041c8:	7013      	strb	r3, [r2, #0]
 80041ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80041cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80041d0:	f023 0820 	bic.w	r8, r3, #32
 80041d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80041d8:	d005      	beq.n	80041e6 <__cvt+0x3a>
 80041da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80041de:	d100      	bne.n	80041e2 <__cvt+0x36>
 80041e0:	3501      	adds	r5, #1
 80041e2:	2302      	movs	r3, #2
 80041e4:	e000      	b.n	80041e8 <__cvt+0x3c>
 80041e6:	2303      	movs	r3, #3
 80041e8:	aa07      	add	r2, sp, #28
 80041ea:	9204      	str	r2, [sp, #16]
 80041ec:	aa06      	add	r2, sp, #24
 80041ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80041f2:	e9cd 3500 	strd	r3, r5, [sp]
 80041f6:	4622      	mov	r2, r4
 80041f8:	463b      	mov	r3, r7
 80041fa:	f001 fdd9 	bl	8005db0 <_dtoa_r>
 80041fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004202:	4606      	mov	r6, r0
 8004204:	d102      	bne.n	800420c <__cvt+0x60>
 8004206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004208:	07db      	lsls	r3, r3, #31
 800420a:	d522      	bpl.n	8004252 <__cvt+0xa6>
 800420c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004210:	eb06 0905 	add.w	r9, r6, r5
 8004214:	d110      	bne.n	8004238 <__cvt+0x8c>
 8004216:	7833      	ldrb	r3, [r6, #0]
 8004218:	2b30      	cmp	r3, #48	; 0x30
 800421a:	d10a      	bne.n	8004232 <__cvt+0x86>
 800421c:	2200      	movs	r2, #0
 800421e:	2300      	movs	r3, #0
 8004220:	4620      	mov	r0, r4
 8004222:	4639      	mov	r1, r7
 8004224:	f7fc fc2c 	bl	8000a80 <__aeabi_dcmpeq>
 8004228:	b918      	cbnz	r0, 8004232 <__cvt+0x86>
 800422a:	f1c5 0501 	rsb	r5, r5, #1
 800422e:	f8ca 5000 	str.w	r5, [sl]
 8004232:	f8da 3000 	ldr.w	r3, [sl]
 8004236:	4499      	add	r9, r3
 8004238:	2200      	movs	r2, #0
 800423a:	2300      	movs	r3, #0
 800423c:	4620      	mov	r0, r4
 800423e:	4639      	mov	r1, r7
 8004240:	f7fc fc1e 	bl	8000a80 <__aeabi_dcmpeq>
 8004244:	b108      	cbz	r0, 800424a <__cvt+0x9e>
 8004246:	f8cd 901c 	str.w	r9, [sp, #28]
 800424a:	2230      	movs	r2, #48	; 0x30
 800424c:	9b07      	ldr	r3, [sp, #28]
 800424e:	454b      	cmp	r3, r9
 8004250:	d307      	bcc.n	8004262 <__cvt+0xb6>
 8004252:	4630      	mov	r0, r6
 8004254:	9b07      	ldr	r3, [sp, #28]
 8004256:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004258:	1b9b      	subs	r3, r3, r6
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	b008      	add	sp, #32
 800425e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004262:	1c59      	adds	r1, r3, #1
 8004264:	9107      	str	r1, [sp, #28]
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	e7f0      	b.n	800424c <__cvt+0xa0>

0800426a <__exponent>:
 800426a:	4603      	mov	r3, r0
 800426c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800426e:	2900      	cmp	r1, #0
 8004270:	f803 2b02 	strb.w	r2, [r3], #2
 8004274:	bfb6      	itet	lt
 8004276:	222d      	movlt	r2, #45	; 0x2d
 8004278:	222b      	movge	r2, #43	; 0x2b
 800427a:	4249      	neglt	r1, r1
 800427c:	2909      	cmp	r1, #9
 800427e:	7042      	strb	r2, [r0, #1]
 8004280:	dd2b      	ble.n	80042da <__exponent+0x70>
 8004282:	f10d 0407 	add.w	r4, sp, #7
 8004286:	46a4      	mov	ip, r4
 8004288:	270a      	movs	r7, #10
 800428a:	fb91 f6f7 	sdiv	r6, r1, r7
 800428e:	460a      	mov	r2, r1
 8004290:	46a6      	mov	lr, r4
 8004292:	fb07 1516 	mls	r5, r7, r6, r1
 8004296:	2a63      	cmp	r2, #99	; 0x63
 8004298:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800429c:	4631      	mov	r1, r6
 800429e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80042a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80042a6:	dcf0      	bgt.n	800428a <__exponent+0x20>
 80042a8:	3130      	adds	r1, #48	; 0x30
 80042aa:	f1ae 0502 	sub.w	r5, lr, #2
 80042ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 80042b2:	4629      	mov	r1, r5
 80042b4:	1c44      	adds	r4, r0, #1
 80042b6:	4561      	cmp	r1, ip
 80042b8:	d30a      	bcc.n	80042d0 <__exponent+0x66>
 80042ba:	f10d 0209 	add.w	r2, sp, #9
 80042be:	eba2 020e 	sub.w	r2, r2, lr
 80042c2:	4565      	cmp	r5, ip
 80042c4:	bf88      	it	hi
 80042c6:	2200      	movhi	r2, #0
 80042c8:	4413      	add	r3, r2
 80042ca:	1a18      	subs	r0, r3, r0
 80042cc:	b003      	add	sp, #12
 80042ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042d4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80042d8:	e7ed      	b.n	80042b6 <__exponent+0x4c>
 80042da:	2330      	movs	r3, #48	; 0x30
 80042dc:	3130      	adds	r1, #48	; 0x30
 80042de:	7083      	strb	r3, [r0, #2]
 80042e0:	70c1      	strb	r1, [r0, #3]
 80042e2:	1d03      	adds	r3, r0, #4
 80042e4:	e7f1      	b.n	80042ca <__exponent+0x60>
	...

080042e8 <_printf_float>:
 80042e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	b091      	sub	sp, #68	; 0x44
 80042ee:	460c      	mov	r4, r1
 80042f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80042f4:	4616      	mov	r6, r2
 80042f6:	461f      	mov	r7, r3
 80042f8:	4605      	mov	r5, r0
 80042fa:	f002 fead 	bl	8007058 <_localeconv_r>
 80042fe:	6803      	ldr	r3, [r0, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	9309      	str	r3, [sp, #36]	; 0x24
 8004304:	f7fb ff90 	bl	8000228 <strlen>
 8004308:	2300      	movs	r3, #0
 800430a:	930e      	str	r3, [sp, #56]	; 0x38
 800430c:	f8d8 3000 	ldr.w	r3, [r8]
 8004310:	900a      	str	r0, [sp, #40]	; 0x28
 8004312:	3307      	adds	r3, #7
 8004314:	f023 0307 	bic.w	r3, r3, #7
 8004318:	f103 0208 	add.w	r2, r3, #8
 800431c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004320:	f8d4 b000 	ldr.w	fp, [r4]
 8004324:	f8c8 2000 	str.w	r2, [r8]
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004330:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004334:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004338:	930b      	str	r3, [sp, #44]	; 0x2c
 800433a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800433e:	4640      	mov	r0, r8
 8004340:	4b9c      	ldr	r3, [pc, #624]	; (80045b4 <_printf_float+0x2cc>)
 8004342:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004344:	f7fc fbce 	bl	8000ae4 <__aeabi_dcmpun>
 8004348:	bb70      	cbnz	r0, 80043a8 <_printf_float+0xc0>
 800434a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800434e:	4640      	mov	r0, r8
 8004350:	4b98      	ldr	r3, [pc, #608]	; (80045b4 <_printf_float+0x2cc>)
 8004352:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004354:	f7fc fba8 	bl	8000aa8 <__aeabi_dcmple>
 8004358:	bb30      	cbnz	r0, 80043a8 <_printf_float+0xc0>
 800435a:	2200      	movs	r2, #0
 800435c:	2300      	movs	r3, #0
 800435e:	4640      	mov	r0, r8
 8004360:	4651      	mov	r1, sl
 8004362:	f7fc fb97 	bl	8000a94 <__aeabi_dcmplt>
 8004366:	b110      	cbz	r0, 800436e <_printf_float+0x86>
 8004368:	232d      	movs	r3, #45	; 0x2d
 800436a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800436e:	4b92      	ldr	r3, [pc, #584]	; (80045b8 <_printf_float+0x2d0>)
 8004370:	4892      	ldr	r0, [pc, #584]	; (80045bc <_printf_float+0x2d4>)
 8004372:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004376:	bf94      	ite	ls
 8004378:	4698      	movls	r8, r3
 800437a:	4680      	movhi	r8, r0
 800437c:	2303      	movs	r3, #3
 800437e:	f04f 0a00 	mov.w	sl, #0
 8004382:	6123      	str	r3, [r4, #16]
 8004384:	f02b 0304 	bic.w	r3, fp, #4
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	4633      	mov	r3, r6
 800438c:	4621      	mov	r1, r4
 800438e:	4628      	mov	r0, r5
 8004390:	9700      	str	r7, [sp, #0]
 8004392:	aa0f      	add	r2, sp, #60	; 0x3c
 8004394:	f000 f9d4 	bl	8004740 <_printf_common>
 8004398:	3001      	adds	r0, #1
 800439a:	f040 8090 	bne.w	80044be <_printf_float+0x1d6>
 800439e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043a2:	b011      	add	sp, #68	; 0x44
 80043a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a8:	4642      	mov	r2, r8
 80043aa:	4653      	mov	r3, sl
 80043ac:	4640      	mov	r0, r8
 80043ae:	4651      	mov	r1, sl
 80043b0:	f7fc fb98 	bl	8000ae4 <__aeabi_dcmpun>
 80043b4:	b148      	cbz	r0, 80043ca <_printf_float+0xe2>
 80043b6:	f1ba 0f00 	cmp.w	sl, #0
 80043ba:	bfb8      	it	lt
 80043bc:	232d      	movlt	r3, #45	; 0x2d
 80043be:	4880      	ldr	r0, [pc, #512]	; (80045c0 <_printf_float+0x2d8>)
 80043c0:	bfb8      	it	lt
 80043c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80043c6:	4b7f      	ldr	r3, [pc, #508]	; (80045c4 <_printf_float+0x2dc>)
 80043c8:	e7d3      	b.n	8004372 <_printf_float+0x8a>
 80043ca:	6863      	ldr	r3, [r4, #4]
 80043cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	d142      	bne.n	800445a <_printf_float+0x172>
 80043d4:	2306      	movs	r3, #6
 80043d6:	6063      	str	r3, [r4, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	9206      	str	r2, [sp, #24]
 80043dc:	aa0e      	add	r2, sp, #56	; 0x38
 80043de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80043e2:	aa0d      	add	r2, sp, #52	; 0x34
 80043e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80043e8:	9203      	str	r2, [sp, #12]
 80043ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80043ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80043f2:	6023      	str	r3, [r4, #0]
 80043f4:	6863      	ldr	r3, [r4, #4]
 80043f6:	4642      	mov	r2, r8
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4628      	mov	r0, r5
 80043fc:	4653      	mov	r3, sl
 80043fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8004400:	f7ff fed4 	bl	80041ac <__cvt>
 8004404:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004406:	4680      	mov	r8, r0
 8004408:	2947      	cmp	r1, #71	; 0x47
 800440a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800440c:	d108      	bne.n	8004420 <_printf_float+0x138>
 800440e:	1cc8      	adds	r0, r1, #3
 8004410:	db02      	blt.n	8004418 <_printf_float+0x130>
 8004412:	6863      	ldr	r3, [r4, #4]
 8004414:	4299      	cmp	r1, r3
 8004416:	dd40      	ble.n	800449a <_printf_float+0x1b2>
 8004418:	f1a9 0902 	sub.w	r9, r9, #2
 800441c:	fa5f f989 	uxtb.w	r9, r9
 8004420:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004424:	d81f      	bhi.n	8004466 <_printf_float+0x17e>
 8004426:	464a      	mov	r2, r9
 8004428:	3901      	subs	r1, #1
 800442a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800442e:	910d      	str	r1, [sp, #52]	; 0x34
 8004430:	f7ff ff1b 	bl	800426a <__exponent>
 8004434:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004436:	4682      	mov	sl, r0
 8004438:	1813      	adds	r3, r2, r0
 800443a:	2a01      	cmp	r2, #1
 800443c:	6123      	str	r3, [r4, #16]
 800443e:	dc02      	bgt.n	8004446 <_printf_float+0x15e>
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	07d2      	lsls	r2, r2, #31
 8004444:	d501      	bpl.n	800444a <_printf_float+0x162>
 8004446:	3301      	adds	r3, #1
 8004448:	6123      	str	r3, [r4, #16]
 800444a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800444e:	2b00      	cmp	r3, #0
 8004450:	d09b      	beq.n	800438a <_printf_float+0xa2>
 8004452:	232d      	movs	r3, #45	; 0x2d
 8004454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004458:	e797      	b.n	800438a <_printf_float+0xa2>
 800445a:	2947      	cmp	r1, #71	; 0x47
 800445c:	d1bc      	bne.n	80043d8 <_printf_float+0xf0>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1ba      	bne.n	80043d8 <_printf_float+0xf0>
 8004462:	2301      	movs	r3, #1
 8004464:	e7b7      	b.n	80043d6 <_printf_float+0xee>
 8004466:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800446a:	d118      	bne.n	800449e <_printf_float+0x1b6>
 800446c:	2900      	cmp	r1, #0
 800446e:	6863      	ldr	r3, [r4, #4]
 8004470:	dd0b      	ble.n	800448a <_printf_float+0x1a2>
 8004472:	6121      	str	r1, [r4, #16]
 8004474:	b913      	cbnz	r3, 800447c <_printf_float+0x194>
 8004476:	6822      	ldr	r2, [r4, #0]
 8004478:	07d0      	lsls	r0, r2, #31
 800447a:	d502      	bpl.n	8004482 <_printf_float+0x19a>
 800447c:	3301      	adds	r3, #1
 800447e:	440b      	add	r3, r1
 8004480:	6123      	str	r3, [r4, #16]
 8004482:	f04f 0a00 	mov.w	sl, #0
 8004486:	65a1      	str	r1, [r4, #88]	; 0x58
 8004488:	e7df      	b.n	800444a <_printf_float+0x162>
 800448a:	b913      	cbnz	r3, 8004492 <_printf_float+0x1aa>
 800448c:	6822      	ldr	r2, [r4, #0]
 800448e:	07d2      	lsls	r2, r2, #31
 8004490:	d501      	bpl.n	8004496 <_printf_float+0x1ae>
 8004492:	3302      	adds	r3, #2
 8004494:	e7f4      	b.n	8004480 <_printf_float+0x198>
 8004496:	2301      	movs	r3, #1
 8004498:	e7f2      	b.n	8004480 <_printf_float+0x198>
 800449a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800449e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044a0:	4299      	cmp	r1, r3
 80044a2:	db05      	blt.n	80044b0 <_printf_float+0x1c8>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	6121      	str	r1, [r4, #16]
 80044a8:	07d8      	lsls	r0, r3, #31
 80044aa:	d5ea      	bpl.n	8004482 <_printf_float+0x19a>
 80044ac:	1c4b      	adds	r3, r1, #1
 80044ae:	e7e7      	b.n	8004480 <_printf_float+0x198>
 80044b0:	2900      	cmp	r1, #0
 80044b2:	bfcc      	ite	gt
 80044b4:	2201      	movgt	r2, #1
 80044b6:	f1c1 0202 	rsble	r2, r1, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	e7e0      	b.n	8004480 <_printf_float+0x198>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	055a      	lsls	r2, r3, #21
 80044c2:	d407      	bmi.n	80044d4 <_printf_float+0x1ec>
 80044c4:	6923      	ldr	r3, [r4, #16]
 80044c6:	4642      	mov	r2, r8
 80044c8:	4631      	mov	r1, r6
 80044ca:	4628      	mov	r0, r5
 80044cc:	47b8      	blx	r7
 80044ce:	3001      	adds	r0, #1
 80044d0:	d12b      	bne.n	800452a <_printf_float+0x242>
 80044d2:	e764      	b.n	800439e <_printf_float+0xb6>
 80044d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044d8:	f240 80dd 	bls.w	8004696 <_printf_float+0x3ae>
 80044dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044e0:	2200      	movs	r2, #0
 80044e2:	2300      	movs	r3, #0
 80044e4:	f7fc facc 	bl	8000a80 <__aeabi_dcmpeq>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d033      	beq.n	8004554 <_printf_float+0x26c>
 80044ec:	2301      	movs	r3, #1
 80044ee:	4631      	mov	r1, r6
 80044f0:	4628      	mov	r0, r5
 80044f2:	4a35      	ldr	r2, [pc, #212]	; (80045c8 <_printf_float+0x2e0>)
 80044f4:	47b8      	blx	r7
 80044f6:	3001      	adds	r0, #1
 80044f8:	f43f af51 	beq.w	800439e <_printf_float+0xb6>
 80044fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004500:	429a      	cmp	r2, r3
 8004502:	db02      	blt.n	800450a <_printf_float+0x222>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	07d8      	lsls	r0, r3, #31
 8004508:	d50f      	bpl.n	800452a <_printf_float+0x242>
 800450a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800450e:	4631      	mov	r1, r6
 8004510:	4628      	mov	r0, r5
 8004512:	47b8      	blx	r7
 8004514:	3001      	adds	r0, #1
 8004516:	f43f af42 	beq.w	800439e <_printf_float+0xb6>
 800451a:	f04f 0800 	mov.w	r8, #0
 800451e:	f104 091a 	add.w	r9, r4, #26
 8004522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004524:	3b01      	subs	r3, #1
 8004526:	4543      	cmp	r3, r8
 8004528:	dc09      	bgt.n	800453e <_printf_float+0x256>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	079b      	lsls	r3, r3, #30
 800452e:	f100 8102 	bmi.w	8004736 <_printf_float+0x44e>
 8004532:	68e0      	ldr	r0, [r4, #12]
 8004534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004536:	4298      	cmp	r0, r3
 8004538:	bfb8      	it	lt
 800453a:	4618      	movlt	r0, r3
 800453c:	e731      	b.n	80043a2 <_printf_float+0xba>
 800453e:	2301      	movs	r3, #1
 8004540:	464a      	mov	r2, r9
 8004542:	4631      	mov	r1, r6
 8004544:	4628      	mov	r0, r5
 8004546:	47b8      	blx	r7
 8004548:	3001      	adds	r0, #1
 800454a:	f43f af28 	beq.w	800439e <_printf_float+0xb6>
 800454e:	f108 0801 	add.w	r8, r8, #1
 8004552:	e7e6      	b.n	8004522 <_printf_float+0x23a>
 8004554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004556:	2b00      	cmp	r3, #0
 8004558:	dc38      	bgt.n	80045cc <_printf_float+0x2e4>
 800455a:	2301      	movs	r3, #1
 800455c:	4631      	mov	r1, r6
 800455e:	4628      	mov	r0, r5
 8004560:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <_printf_float+0x2e0>)
 8004562:	47b8      	blx	r7
 8004564:	3001      	adds	r0, #1
 8004566:	f43f af1a 	beq.w	800439e <_printf_float+0xb6>
 800456a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800456e:	4313      	orrs	r3, r2
 8004570:	d102      	bne.n	8004578 <_printf_float+0x290>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	07d9      	lsls	r1, r3, #31
 8004576:	d5d8      	bpl.n	800452a <_printf_float+0x242>
 8004578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800457c:	4631      	mov	r1, r6
 800457e:	4628      	mov	r0, r5
 8004580:	47b8      	blx	r7
 8004582:	3001      	adds	r0, #1
 8004584:	f43f af0b 	beq.w	800439e <_printf_float+0xb6>
 8004588:	f04f 0900 	mov.w	r9, #0
 800458c:	f104 0a1a 	add.w	sl, r4, #26
 8004590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004592:	425b      	negs	r3, r3
 8004594:	454b      	cmp	r3, r9
 8004596:	dc01      	bgt.n	800459c <_printf_float+0x2b4>
 8004598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800459a:	e794      	b.n	80044c6 <_printf_float+0x1de>
 800459c:	2301      	movs	r3, #1
 800459e:	4652      	mov	r2, sl
 80045a0:	4631      	mov	r1, r6
 80045a2:	4628      	mov	r0, r5
 80045a4:	47b8      	blx	r7
 80045a6:	3001      	adds	r0, #1
 80045a8:	f43f aef9 	beq.w	800439e <_printf_float+0xb6>
 80045ac:	f109 0901 	add.w	r9, r9, #1
 80045b0:	e7ee      	b.n	8004590 <_printf_float+0x2a8>
 80045b2:	bf00      	nop
 80045b4:	7fefffff 	.word	0x7fefffff
 80045b8:	08010c70 	.word	0x08010c70
 80045bc:	08010c74 	.word	0x08010c74
 80045c0:	08010c7c 	.word	0x08010c7c
 80045c4:	08010c78 	.word	0x08010c78
 80045c8:	08010c80 	.word	0x08010c80
 80045cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045d0:	429a      	cmp	r2, r3
 80045d2:	bfa8      	it	ge
 80045d4:	461a      	movge	r2, r3
 80045d6:	2a00      	cmp	r2, #0
 80045d8:	4691      	mov	r9, r2
 80045da:	dc37      	bgt.n	800464c <_printf_float+0x364>
 80045dc:	f04f 0b00 	mov.w	fp, #0
 80045e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045e4:	f104 021a 	add.w	r2, r4, #26
 80045e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80045ec:	ebaa 0309 	sub.w	r3, sl, r9
 80045f0:	455b      	cmp	r3, fp
 80045f2:	dc33      	bgt.n	800465c <_printf_float+0x374>
 80045f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045f8:	429a      	cmp	r2, r3
 80045fa:	db3b      	blt.n	8004674 <_printf_float+0x38c>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	07da      	lsls	r2, r3, #31
 8004600:	d438      	bmi.n	8004674 <_printf_float+0x38c>
 8004602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004604:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004606:	eba3 020a 	sub.w	r2, r3, sl
 800460a:	eba3 0901 	sub.w	r9, r3, r1
 800460e:	4591      	cmp	r9, r2
 8004610:	bfa8      	it	ge
 8004612:	4691      	movge	r9, r2
 8004614:	f1b9 0f00 	cmp.w	r9, #0
 8004618:	dc34      	bgt.n	8004684 <_printf_float+0x39c>
 800461a:	f04f 0800 	mov.w	r8, #0
 800461e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004622:	f104 0a1a 	add.w	sl, r4, #26
 8004626:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	eba3 0309 	sub.w	r3, r3, r9
 8004630:	4543      	cmp	r3, r8
 8004632:	f77f af7a 	ble.w	800452a <_printf_float+0x242>
 8004636:	2301      	movs	r3, #1
 8004638:	4652      	mov	r2, sl
 800463a:	4631      	mov	r1, r6
 800463c:	4628      	mov	r0, r5
 800463e:	47b8      	blx	r7
 8004640:	3001      	adds	r0, #1
 8004642:	f43f aeac 	beq.w	800439e <_printf_float+0xb6>
 8004646:	f108 0801 	add.w	r8, r8, #1
 800464a:	e7ec      	b.n	8004626 <_printf_float+0x33e>
 800464c:	4613      	mov	r3, r2
 800464e:	4631      	mov	r1, r6
 8004650:	4642      	mov	r2, r8
 8004652:	4628      	mov	r0, r5
 8004654:	47b8      	blx	r7
 8004656:	3001      	adds	r0, #1
 8004658:	d1c0      	bne.n	80045dc <_printf_float+0x2f4>
 800465a:	e6a0      	b.n	800439e <_printf_float+0xb6>
 800465c:	2301      	movs	r3, #1
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	920b      	str	r2, [sp, #44]	; 0x2c
 8004664:	47b8      	blx	r7
 8004666:	3001      	adds	r0, #1
 8004668:	f43f ae99 	beq.w	800439e <_printf_float+0xb6>
 800466c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800466e:	f10b 0b01 	add.w	fp, fp, #1
 8004672:	e7b9      	b.n	80045e8 <_printf_float+0x300>
 8004674:	4631      	mov	r1, r6
 8004676:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800467a:	4628      	mov	r0, r5
 800467c:	47b8      	blx	r7
 800467e:	3001      	adds	r0, #1
 8004680:	d1bf      	bne.n	8004602 <_printf_float+0x31a>
 8004682:	e68c      	b.n	800439e <_printf_float+0xb6>
 8004684:	464b      	mov	r3, r9
 8004686:	4631      	mov	r1, r6
 8004688:	4628      	mov	r0, r5
 800468a:	eb08 020a 	add.w	r2, r8, sl
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	d1c2      	bne.n	800461a <_printf_float+0x332>
 8004694:	e683      	b.n	800439e <_printf_float+0xb6>
 8004696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004698:	2a01      	cmp	r2, #1
 800469a:	dc01      	bgt.n	80046a0 <_printf_float+0x3b8>
 800469c:	07db      	lsls	r3, r3, #31
 800469e:	d537      	bpl.n	8004710 <_printf_float+0x428>
 80046a0:	2301      	movs	r3, #1
 80046a2:	4642      	mov	r2, r8
 80046a4:	4631      	mov	r1, r6
 80046a6:	4628      	mov	r0, r5
 80046a8:	47b8      	blx	r7
 80046aa:	3001      	adds	r0, #1
 80046ac:	f43f ae77 	beq.w	800439e <_printf_float+0xb6>
 80046b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046b4:	4631      	mov	r1, r6
 80046b6:	4628      	mov	r0, r5
 80046b8:	47b8      	blx	r7
 80046ba:	3001      	adds	r0, #1
 80046bc:	f43f ae6f 	beq.w	800439e <_printf_float+0xb6>
 80046c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046c4:	2200      	movs	r2, #0
 80046c6:	2300      	movs	r3, #0
 80046c8:	f7fc f9da 	bl	8000a80 <__aeabi_dcmpeq>
 80046cc:	b9d8      	cbnz	r0, 8004706 <_printf_float+0x41e>
 80046ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046d0:	f108 0201 	add.w	r2, r8, #1
 80046d4:	3b01      	subs	r3, #1
 80046d6:	4631      	mov	r1, r6
 80046d8:	4628      	mov	r0, r5
 80046da:	47b8      	blx	r7
 80046dc:	3001      	adds	r0, #1
 80046de:	d10e      	bne.n	80046fe <_printf_float+0x416>
 80046e0:	e65d      	b.n	800439e <_printf_float+0xb6>
 80046e2:	2301      	movs	r3, #1
 80046e4:	464a      	mov	r2, r9
 80046e6:	4631      	mov	r1, r6
 80046e8:	4628      	mov	r0, r5
 80046ea:	47b8      	blx	r7
 80046ec:	3001      	adds	r0, #1
 80046ee:	f43f ae56 	beq.w	800439e <_printf_float+0xb6>
 80046f2:	f108 0801 	add.w	r8, r8, #1
 80046f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046f8:	3b01      	subs	r3, #1
 80046fa:	4543      	cmp	r3, r8
 80046fc:	dcf1      	bgt.n	80046e2 <_printf_float+0x3fa>
 80046fe:	4653      	mov	r3, sl
 8004700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004704:	e6e0      	b.n	80044c8 <_printf_float+0x1e0>
 8004706:	f04f 0800 	mov.w	r8, #0
 800470a:	f104 091a 	add.w	r9, r4, #26
 800470e:	e7f2      	b.n	80046f6 <_printf_float+0x40e>
 8004710:	2301      	movs	r3, #1
 8004712:	4642      	mov	r2, r8
 8004714:	e7df      	b.n	80046d6 <_printf_float+0x3ee>
 8004716:	2301      	movs	r3, #1
 8004718:	464a      	mov	r2, r9
 800471a:	4631      	mov	r1, r6
 800471c:	4628      	mov	r0, r5
 800471e:	47b8      	blx	r7
 8004720:	3001      	adds	r0, #1
 8004722:	f43f ae3c 	beq.w	800439e <_printf_float+0xb6>
 8004726:	f108 0801 	add.w	r8, r8, #1
 800472a:	68e3      	ldr	r3, [r4, #12]
 800472c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800472e:	1a5b      	subs	r3, r3, r1
 8004730:	4543      	cmp	r3, r8
 8004732:	dcf0      	bgt.n	8004716 <_printf_float+0x42e>
 8004734:	e6fd      	b.n	8004532 <_printf_float+0x24a>
 8004736:	f04f 0800 	mov.w	r8, #0
 800473a:	f104 0919 	add.w	r9, r4, #25
 800473e:	e7f4      	b.n	800472a <_printf_float+0x442>

08004740 <_printf_common>:
 8004740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004744:	4616      	mov	r6, r2
 8004746:	4699      	mov	r9, r3
 8004748:	688a      	ldr	r2, [r1, #8]
 800474a:	690b      	ldr	r3, [r1, #16]
 800474c:	4607      	mov	r7, r0
 800474e:	4293      	cmp	r3, r2
 8004750:	bfb8      	it	lt
 8004752:	4613      	movlt	r3, r2
 8004754:	6033      	str	r3, [r6, #0]
 8004756:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800475a:	460c      	mov	r4, r1
 800475c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004760:	b10a      	cbz	r2, 8004766 <_printf_common+0x26>
 8004762:	3301      	adds	r3, #1
 8004764:	6033      	str	r3, [r6, #0]
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	0699      	lsls	r1, r3, #26
 800476a:	bf42      	ittt	mi
 800476c:	6833      	ldrmi	r3, [r6, #0]
 800476e:	3302      	addmi	r3, #2
 8004770:	6033      	strmi	r3, [r6, #0]
 8004772:	6825      	ldr	r5, [r4, #0]
 8004774:	f015 0506 	ands.w	r5, r5, #6
 8004778:	d106      	bne.n	8004788 <_printf_common+0x48>
 800477a:	f104 0a19 	add.w	sl, r4, #25
 800477e:	68e3      	ldr	r3, [r4, #12]
 8004780:	6832      	ldr	r2, [r6, #0]
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	42ab      	cmp	r3, r5
 8004786:	dc28      	bgt.n	80047da <_printf_common+0x9a>
 8004788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800478c:	1e13      	subs	r3, r2, #0
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	bf18      	it	ne
 8004792:	2301      	movne	r3, #1
 8004794:	0692      	lsls	r2, r2, #26
 8004796:	d42d      	bmi.n	80047f4 <_printf_common+0xb4>
 8004798:	4649      	mov	r1, r9
 800479a:	4638      	mov	r0, r7
 800479c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047a0:	47c0      	blx	r8
 80047a2:	3001      	adds	r0, #1
 80047a4:	d020      	beq.n	80047e8 <_printf_common+0xa8>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	68e5      	ldr	r5, [r4, #12]
 80047aa:	f003 0306 	and.w	r3, r3, #6
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	bf18      	it	ne
 80047b2:	2500      	movne	r5, #0
 80047b4:	6832      	ldr	r2, [r6, #0]
 80047b6:	f04f 0600 	mov.w	r6, #0
 80047ba:	68a3      	ldr	r3, [r4, #8]
 80047bc:	bf08      	it	eq
 80047be:	1aad      	subeq	r5, r5, r2
 80047c0:	6922      	ldr	r2, [r4, #16]
 80047c2:	bf08      	it	eq
 80047c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047c8:	4293      	cmp	r3, r2
 80047ca:	bfc4      	itt	gt
 80047cc:	1a9b      	subgt	r3, r3, r2
 80047ce:	18ed      	addgt	r5, r5, r3
 80047d0:	341a      	adds	r4, #26
 80047d2:	42b5      	cmp	r5, r6
 80047d4:	d11a      	bne.n	800480c <_printf_common+0xcc>
 80047d6:	2000      	movs	r0, #0
 80047d8:	e008      	b.n	80047ec <_printf_common+0xac>
 80047da:	2301      	movs	r3, #1
 80047dc:	4652      	mov	r2, sl
 80047de:	4649      	mov	r1, r9
 80047e0:	4638      	mov	r0, r7
 80047e2:	47c0      	blx	r8
 80047e4:	3001      	adds	r0, #1
 80047e6:	d103      	bne.n	80047f0 <_printf_common+0xb0>
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f0:	3501      	adds	r5, #1
 80047f2:	e7c4      	b.n	800477e <_printf_common+0x3e>
 80047f4:	2030      	movs	r0, #48	; 0x30
 80047f6:	18e1      	adds	r1, r4, r3
 80047f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004802:	4422      	add	r2, r4
 8004804:	3302      	adds	r3, #2
 8004806:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800480a:	e7c5      	b.n	8004798 <_printf_common+0x58>
 800480c:	2301      	movs	r3, #1
 800480e:	4622      	mov	r2, r4
 8004810:	4649      	mov	r1, r9
 8004812:	4638      	mov	r0, r7
 8004814:	47c0      	blx	r8
 8004816:	3001      	adds	r0, #1
 8004818:	d0e6      	beq.n	80047e8 <_printf_common+0xa8>
 800481a:	3601      	adds	r6, #1
 800481c:	e7d9      	b.n	80047d2 <_printf_common+0x92>
	...

08004820 <_printf_i>:
 8004820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004824:	7e0f      	ldrb	r7, [r1, #24]
 8004826:	4691      	mov	r9, r2
 8004828:	2f78      	cmp	r7, #120	; 0x78
 800482a:	4680      	mov	r8, r0
 800482c:	460c      	mov	r4, r1
 800482e:	469a      	mov	sl, r3
 8004830:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004836:	d807      	bhi.n	8004848 <_printf_i+0x28>
 8004838:	2f62      	cmp	r7, #98	; 0x62
 800483a:	d80a      	bhi.n	8004852 <_printf_i+0x32>
 800483c:	2f00      	cmp	r7, #0
 800483e:	f000 80d9 	beq.w	80049f4 <_printf_i+0x1d4>
 8004842:	2f58      	cmp	r7, #88	; 0x58
 8004844:	f000 80a4 	beq.w	8004990 <_printf_i+0x170>
 8004848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800484c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004850:	e03a      	b.n	80048c8 <_printf_i+0xa8>
 8004852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004856:	2b15      	cmp	r3, #21
 8004858:	d8f6      	bhi.n	8004848 <_printf_i+0x28>
 800485a:	a101      	add	r1, pc, #4	; (adr r1, 8004860 <_printf_i+0x40>)
 800485c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004860:	080048b9 	.word	0x080048b9
 8004864:	080048cd 	.word	0x080048cd
 8004868:	08004849 	.word	0x08004849
 800486c:	08004849 	.word	0x08004849
 8004870:	08004849 	.word	0x08004849
 8004874:	08004849 	.word	0x08004849
 8004878:	080048cd 	.word	0x080048cd
 800487c:	08004849 	.word	0x08004849
 8004880:	08004849 	.word	0x08004849
 8004884:	08004849 	.word	0x08004849
 8004888:	08004849 	.word	0x08004849
 800488c:	080049db 	.word	0x080049db
 8004890:	080048fd 	.word	0x080048fd
 8004894:	080049bd 	.word	0x080049bd
 8004898:	08004849 	.word	0x08004849
 800489c:	08004849 	.word	0x08004849
 80048a0:	080049fd 	.word	0x080049fd
 80048a4:	08004849 	.word	0x08004849
 80048a8:	080048fd 	.word	0x080048fd
 80048ac:	08004849 	.word	0x08004849
 80048b0:	08004849 	.word	0x08004849
 80048b4:	080049c5 	.word	0x080049c5
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	1d1a      	adds	r2, r3, #4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	602a      	str	r2, [r5, #0]
 80048c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0a4      	b.n	8004a16 <_printf_i+0x1f6>
 80048cc:	6820      	ldr	r0, [r4, #0]
 80048ce:	6829      	ldr	r1, [r5, #0]
 80048d0:	0606      	lsls	r6, r0, #24
 80048d2:	f101 0304 	add.w	r3, r1, #4
 80048d6:	d50a      	bpl.n	80048ee <_printf_i+0xce>
 80048d8:	680e      	ldr	r6, [r1, #0]
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	2e00      	cmp	r6, #0
 80048de:	da03      	bge.n	80048e8 <_printf_i+0xc8>
 80048e0:	232d      	movs	r3, #45	; 0x2d
 80048e2:	4276      	negs	r6, r6
 80048e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e8:	230a      	movs	r3, #10
 80048ea:	485e      	ldr	r0, [pc, #376]	; (8004a64 <_printf_i+0x244>)
 80048ec:	e019      	b.n	8004922 <_printf_i+0x102>
 80048ee:	680e      	ldr	r6, [r1, #0]
 80048f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048f4:	602b      	str	r3, [r5, #0]
 80048f6:	bf18      	it	ne
 80048f8:	b236      	sxthne	r6, r6
 80048fa:	e7ef      	b.n	80048dc <_printf_i+0xbc>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	6820      	ldr	r0, [r4, #0]
 8004900:	1d19      	adds	r1, r3, #4
 8004902:	6029      	str	r1, [r5, #0]
 8004904:	0601      	lsls	r1, r0, #24
 8004906:	d501      	bpl.n	800490c <_printf_i+0xec>
 8004908:	681e      	ldr	r6, [r3, #0]
 800490a:	e002      	b.n	8004912 <_printf_i+0xf2>
 800490c:	0646      	lsls	r6, r0, #25
 800490e:	d5fb      	bpl.n	8004908 <_printf_i+0xe8>
 8004910:	881e      	ldrh	r6, [r3, #0]
 8004912:	2f6f      	cmp	r7, #111	; 0x6f
 8004914:	bf0c      	ite	eq
 8004916:	2308      	moveq	r3, #8
 8004918:	230a      	movne	r3, #10
 800491a:	4852      	ldr	r0, [pc, #328]	; (8004a64 <_printf_i+0x244>)
 800491c:	2100      	movs	r1, #0
 800491e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004922:	6865      	ldr	r5, [r4, #4]
 8004924:	2d00      	cmp	r5, #0
 8004926:	bfa8      	it	ge
 8004928:	6821      	ldrge	r1, [r4, #0]
 800492a:	60a5      	str	r5, [r4, #8]
 800492c:	bfa4      	itt	ge
 800492e:	f021 0104 	bicge.w	r1, r1, #4
 8004932:	6021      	strge	r1, [r4, #0]
 8004934:	b90e      	cbnz	r6, 800493a <_printf_i+0x11a>
 8004936:	2d00      	cmp	r5, #0
 8004938:	d04d      	beq.n	80049d6 <_printf_i+0x1b6>
 800493a:	4615      	mov	r5, r2
 800493c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004940:	fb03 6711 	mls	r7, r3, r1, r6
 8004944:	5dc7      	ldrb	r7, [r0, r7]
 8004946:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800494a:	4637      	mov	r7, r6
 800494c:	42bb      	cmp	r3, r7
 800494e:	460e      	mov	r6, r1
 8004950:	d9f4      	bls.n	800493c <_printf_i+0x11c>
 8004952:	2b08      	cmp	r3, #8
 8004954:	d10b      	bne.n	800496e <_printf_i+0x14e>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	07de      	lsls	r6, r3, #31
 800495a:	d508      	bpl.n	800496e <_printf_i+0x14e>
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	6861      	ldr	r1, [r4, #4]
 8004960:	4299      	cmp	r1, r3
 8004962:	bfde      	ittt	le
 8004964:	2330      	movle	r3, #48	; 0x30
 8004966:	f805 3c01 	strble.w	r3, [r5, #-1]
 800496a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800496e:	1b52      	subs	r2, r2, r5
 8004970:	6122      	str	r2, [r4, #16]
 8004972:	464b      	mov	r3, r9
 8004974:	4621      	mov	r1, r4
 8004976:	4640      	mov	r0, r8
 8004978:	f8cd a000 	str.w	sl, [sp]
 800497c:	aa03      	add	r2, sp, #12
 800497e:	f7ff fedf 	bl	8004740 <_printf_common>
 8004982:	3001      	adds	r0, #1
 8004984:	d14c      	bne.n	8004a20 <_printf_i+0x200>
 8004986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800498a:	b004      	add	sp, #16
 800498c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004990:	4834      	ldr	r0, [pc, #208]	; (8004a64 <_printf_i+0x244>)
 8004992:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004996:	6829      	ldr	r1, [r5, #0]
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	f851 6b04 	ldr.w	r6, [r1], #4
 800499e:	6029      	str	r1, [r5, #0]
 80049a0:	061d      	lsls	r5, r3, #24
 80049a2:	d514      	bpl.n	80049ce <_printf_i+0x1ae>
 80049a4:	07df      	lsls	r7, r3, #31
 80049a6:	bf44      	itt	mi
 80049a8:	f043 0320 	orrmi.w	r3, r3, #32
 80049ac:	6023      	strmi	r3, [r4, #0]
 80049ae:	b91e      	cbnz	r6, 80049b8 <_printf_i+0x198>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	f023 0320 	bic.w	r3, r3, #32
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	2310      	movs	r3, #16
 80049ba:	e7af      	b.n	800491c <_printf_i+0xfc>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	f043 0320 	orr.w	r3, r3, #32
 80049c2:	6023      	str	r3, [r4, #0]
 80049c4:	2378      	movs	r3, #120	; 0x78
 80049c6:	4828      	ldr	r0, [pc, #160]	; (8004a68 <_printf_i+0x248>)
 80049c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049cc:	e7e3      	b.n	8004996 <_printf_i+0x176>
 80049ce:	0659      	lsls	r1, r3, #25
 80049d0:	bf48      	it	mi
 80049d2:	b2b6      	uxthmi	r6, r6
 80049d4:	e7e6      	b.n	80049a4 <_printf_i+0x184>
 80049d6:	4615      	mov	r5, r2
 80049d8:	e7bb      	b.n	8004952 <_printf_i+0x132>
 80049da:	682b      	ldr	r3, [r5, #0]
 80049dc:	6826      	ldr	r6, [r4, #0]
 80049de:	1d18      	adds	r0, r3, #4
 80049e0:	6961      	ldr	r1, [r4, #20]
 80049e2:	6028      	str	r0, [r5, #0]
 80049e4:	0635      	lsls	r5, r6, #24
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	d501      	bpl.n	80049ee <_printf_i+0x1ce>
 80049ea:	6019      	str	r1, [r3, #0]
 80049ec:	e002      	b.n	80049f4 <_printf_i+0x1d4>
 80049ee:	0670      	lsls	r0, r6, #25
 80049f0:	d5fb      	bpl.n	80049ea <_printf_i+0x1ca>
 80049f2:	8019      	strh	r1, [r3, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	4615      	mov	r5, r2
 80049f8:	6123      	str	r3, [r4, #16]
 80049fa:	e7ba      	b.n	8004972 <_printf_i+0x152>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	2100      	movs	r1, #0
 8004a00:	1d1a      	adds	r2, r3, #4
 8004a02:	602a      	str	r2, [r5, #0]
 8004a04:	681d      	ldr	r5, [r3, #0]
 8004a06:	6862      	ldr	r2, [r4, #4]
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f002 fb43 	bl	8007094 <memchr>
 8004a0e:	b108      	cbz	r0, 8004a14 <_printf_i+0x1f4>
 8004a10:	1b40      	subs	r0, r0, r5
 8004a12:	6060      	str	r0, [r4, #4]
 8004a14:	6863      	ldr	r3, [r4, #4]
 8004a16:	6123      	str	r3, [r4, #16]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a1e:	e7a8      	b.n	8004972 <_printf_i+0x152>
 8004a20:	462a      	mov	r2, r5
 8004a22:	4649      	mov	r1, r9
 8004a24:	4640      	mov	r0, r8
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	47d0      	blx	sl
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d0ab      	beq.n	8004986 <_printf_i+0x166>
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	079b      	lsls	r3, r3, #30
 8004a32:	d413      	bmi.n	8004a5c <_printf_i+0x23c>
 8004a34:	68e0      	ldr	r0, [r4, #12]
 8004a36:	9b03      	ldr	r3, [sp, #12]
 8004a38:	4298      	cmp	r0, r3
 8004a3a:	bfb8      	it	lt
 8004a3c:	4618      	movlt	r0, r3
 8004a3e:	e7a4      	b.n	800498a <_printf_i+0x16a>
 8004a40:	2301      	movs	r3, #1
 8004a42:	4632      	mov	r2, r6
 8004a44:	4649      	mov	r1, r9
 8004a46:	4640      	mov	r0, r8
 8004a48:	47d0      	blx	sl
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d09b      	beq.n	8004986 <_printf_i+0x166>
 8004a4e:	3501      	adds	r5, #1
 8004a50:	68e3      	ldr	r3, [r4, #12]
 8004a52:	9903      	ldr	r1, [sp, #12]
 8004a54:	1a5b      	subs	r3, r3, r1
 8004a56:	42ab      	cmp	r3, r5
 8004a58:	dcf2      	bgt.n	8004a40 <_printf_i+0x220>
 8004a5a:	e7eb      	b.n	8004a34 <_printf_i+0x214>
 8004a5c:	2500      	movs	r5, #0
 8004a5e:	f104 0619 	add.w	r6, r4, #25
 8004a62:	e7f5      	b.n	8004a50 <_printf_i+0x230>
 8004a64:	08010c82 	.word	0x08010c82
 8004a68:	08010c93 	.word	0x08010c93

08004a6c <_scanf_float>:
 8004a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a70:	b087      	sub	sp, #28
 8004a72:	9303      	str	r3, [sp, #12]
 8004a74:	688b      	ldr	r3, [r1, #8]
 8004a76:	4617      	mov	r7, r2
 8004a78:	1e5a      	subs	r2, r3, #1
 8004a7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004a7e:	bf85      	ittet	hi
 8004a80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004a84:	195b      	addhi	r3, r3, r5
 8004a86:	2300      	movls	r3, #0
 8004a88:	9302      	strhi	r3, [sp, #8]
 8004a8a:	bf88      	it	hi
 8004a8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004a90:	468b      	mov	fp, r1
 8004a92:	f04f 0500 	mov.w	r5, #0
 8004a96:	bf8c      	ite	hi
 8004a98:	608b      	strhi	r3, [r1, #8]
 8004a9a:	9302      	strls	r3, [sp, #8]
 8004a9c:	680b      	ldr	r3, [r1, #0]
 8004a9e:	4680      	mov	r8, r0
 8004aa0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004aa4:	f84b 3b1c 	str.w	r3, [fp], #28
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	465e      	mov	r6, fp
 8004aac:	46aa      	mov	sl, r5
 8004aae:	46a9      	mov	r9, r5
 8004ab0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004ab4:	9501      	str	r5, [sp, #4]
 8004ab6:	68a2      	ldr	r2, [r4, #8]
 8004ab8:	b152      	cbz	r2, 8004ad0 <_scanf_float+0x64>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b4e      	cmp	r3, #78	; 0x4e
 8004ac0:	d864      	bhi.n	8004b8c <_scanf_float+0x120>
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d83c      	bhi.n	8004b40 <_scanf_float+0xd4>
 8004ac6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004aca:	b2c8      	uxtb	r0, r1
 8004acc:	280e      	cmp	r0, #14
 8004ace:	d93a      	bls.n	8004b46 <_scanf_float+0xda>
 8004ad0:	f1b9 0f00 	cmp.w	r9, #0
 8004ad4:	d003      	beq.n	8004ade <_scanf_float+0x72>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004ae2:	f1ba 0f01 	cmp.w	sl, #1
 8004ae6:	f200 8113 	bhi.w	8004d10 <_scanf_float+0x2a4>
 8004aea:	455e      	cmp	r6, fp
 8004aec:	f200 8105 	bhi.w	8004cfa <_scanf_float+0x28e>
 8004af0:	2501      	movs	r5, #1
 8004af2:	4628      	mov	r0, r5
 8004af4:	b007      	add	sp, #28
 8004af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004afe:	2a0d      	cmp	r2, #13
 8004b00:	d8e6      	bhi.n	8004ad0 <_scanf_float+0x64>
 8004b02:	a101      	add	r1, pc, #4	; (adr r1, 8004b08 <_scanf_float+0x9c>)
 8004b04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004b08:	08004c47 	.word	0x08004c47
 8004b0c:	08004ad1 	.word	0x08004ad1
 8004b10:	08004ad1 	.word	0x08004ad1
 8004b14:	08004ad1 	.word	0x08004ad1
 8004b18:	08004ca7 	.word	0x08004ca7
 8004b1c:	08004c7f 	.word	0x08004c7f
 8004b20:	08004ad1 	.word	0x08004ad1
 8004b24:	08004ad1 	.word	0x08004ad1
 8004b28:	08004c55 	.word	0x08004c55
 8004b2c:	08004ad1 	.word	0x08004ad1
 8004b30:	08004ad1 	.word	0x08004ad1
 8004b34:	08004ad1 	.word	0x08004ad1
 8004b38:	08004ad1 	.word	0x08004ad1
 8004b3c:	08004c0d 	.word	0x08004c0d
 8004b40:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004b44:	e7db      	b.n	8004afe <_scanf_float+0x92>
 8004b46:	290e      	cmp	r1, #14
 8004b48:	d8c2      	bhi.n	8004ad0 <_scanf_float+0x64>
 8004b4a:	a001      	add	r0, pc, #4	; (adr r0, 8004b50 <_scanf_float+0xe4>)
 8004b4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004b50:	08004bff 	.word	0x08004bff
 8004b54:	08004ad1 	.word	0x08004ad1
 8004b58:	08004bff 	.word	0x08004bff
 8004b5c:	08004c93 	.word	0x08004c93
 8004b60:	08004ad1 	.word	0x08004ad1
 8004b64:	08004bad 	.word	0x08004bad
 8004b68:	08004be9 	.word	0x08004be9
 8004b6c:	08004be9 	.word	0x08004be9
 8004b70:	08004be9 	.word	0x08004be9
 8004b74:	08004be9 	.word	0x08004be9
 8004b78:	08004be9 	.word	0x08004be9
 8004b7c:	08004be9 	.word	0x08004be9
 8004b80:	08004be9 	.word	0x08004be9
 8004b84:	08004be9 	.word	0x08004be9
 8004b88:	08004be9 	.word	0x08004be9
 8004b8c:	2b6e      	cmp	r3, #110	; 0x6e
 8004b8e:	d809      	bhi.n	8004ba4 <_scanf_float+0x138>
 8004b90:	2b60      	cmp	r3, #96	; 0x60
 8004b92:	d8b2      	bhi.n	8004afa <_scanf_float+0x8e>
 8004b94:	2b54      	cmp	r3, #84	; 0x54
 8004b96:	d077      	beq.n	8004c88 <_scanf_float+0x21c>
 8004b98:	2b59      	cmp	r3, #89	; 0x59
 8004b9a:	d199      	bne.n	8004ad0 <_scanf_float+0x64>
 8004b9c:	2d07      	cmp	r5, #7
 8004b9e:	d197      	bne.n	8004ad0 <_scanf_float+0x64>
 8004ba0:	2508      	movs	r5, #8
 8004ba2:	e029      	b.n	8004bf8 <_scanf_float+0x18c>
 8004ba4:	2b74      	cmp	r3, #116	; 0x74
 8004ba6:	d06f      	beq.n	8004c88 <_scanf_float+0x21c>
 8004ba8:	2b79      	cmp	r3, #121	; 0x79
 8004baa:	e7f6      	b.n	8004b9a <_scanf_float+0x12e>
 8004bac:	6821      	ldr	r1, [r4, #0]
 8004bae:	05c8      	lsls	r0, r1, #23
 8004bb0:	d51a      	bpl.n	8004be8 <_scanf_float+0x17c>
 8004bb2:	9b02      	ldr	r3, [sp, #8]
 8004bb4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004bb8:	6021      	str	r1, [r4, #0]
 8004bba:	f109 0901 	add.w	r9, r9, #1
 8004bbe:	b11b      	cbz	r3, 8004bc8 <_scanf_float+0x15c>
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	3201      	adds	r2, #1
 8004bc4:	9302      	str	r3, [sp, #8]
 8004bc6:	60a2      	str	r2, [r4, #8]
 8004bc8:	68a3      	ldr	r3, [r4, #8]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	60a3      	str	r3, [r4, #8]
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	6123      	str	r3, [r4, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	607b      	str	r3, [r7, #4]
 8004bdc:	f340 8084 	ble.w	8004ce8 <_scanf_float+0x27c>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	e766      	b.n	8004ab6 <_scanf_float+0x4a>
 8004be8:	eb1a 0f05 	cmn.w	sl, r5
 8004bec:	f47f af70 	bne.w	8004ad0 <_scanf_float+0x64>
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004bf6:	6022      	str	r2, [r4, #0]
 8004bf8:	f806 3b01 	strb.w	r3, [r6], #1
 8004bfc:	e7e4      	b.n	8004bc8 <_scanf_float+0x15c>
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	0610      	lsls	r0, r2, #24
 8004c02:	f57f af65 	bpl.w	8004ad0 <_scanf_float+0x64>
 8004c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c0a:	e7f4      	b.n	8004bf6 <_scanf_float+0x18a>
 8004c0c:	f1ba 0f00 	cmp.w	sl, #0
 8004c10:	d10e      	bne.n	8004c30 <_scanf_float+0x1c4>
 8004c12:	f1b9 0f00 	cmp.w	r9, #0
 8004c16:	d10e      	bne.n	8004c36 <_scanf_float+0x1ca>
 8004c18:	6822      	ldr	r2, [r4, #0]
 8004c1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004c1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004c22:	d108      	bne.n	8004c36 <_scanf_float+0x1ca>
 8004c24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004c28:	f04f 0a01 	mov.w	sl, #1
 8004c2c:	6022      	str	r2, [r4, #0]
 8004c2e:	e7e3      	b.n	8004bf8 <_scanf_float+0x18c>
 8004c30:	f1ba 0f02 	cmp.w	sl, #2
 8004c34:	d055      	beq.n	8004ce2 <_scanf_float+0x276>
 8004c36:	2d01      	cmp	r5, #1
 8004c38:	d002      	beq.n	8004c40 <_scanf_float+0x1d4>
 8004c3a:	2d04      	cmp	r5, #4
 8004c3c:	f47f af48 	bne.w	8004ad0 <_scanf_float+0x64>
 8004c40:	3501      	adds	r5, #1
 8004c42:	b2ed      	uxtb	r5, r5
 8004c44:	e7d8      	b.n	8004bf8 <_scanf_float+0x18c>
 8004c46:	f1ba 0f01 	cmp.w	sl, #1
 8004c4a:	f47f af41 	bne.w	8004ad0 <_scanf_float+0x64>
 8004c4e:	f04f 0a02 	mov.w	sl, #2
 8004c52:	e7d1      	b.n	8004bf8 <_scanf_float+0x18c>
 8004c54:	b97d      	cbnz	r5, 8004c76 <_scanf_float+0x20a>
 8004c56:	f1b9 0f00 	cmp.w	r9, #0
 8004c5a:	f47f af3c 	bne.w	8004ad6 <_scanf_float+0x6a>
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004c64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004c68:	f47f af39 	bne.w	8004ade <_scanf_float+0x72>
 8004c6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004c70:	2501      	movs	r5, #1
 8004c72:	6022      	str	r2, [r4, #0]
 8004c74:	e7c0      	b.n	8004bf8 <_scanf_float+0x18c>
 8004c76:	2d03      	cmp	r5, #3
 8004c78:	d0e2      	beq.n	8004c40 <_scanf_float+0x1d4>
 8004c7a:	2d05      	cmp	r5, #5
 8004c7c:	e7de      	b.n	8004c3c <_scanf_float+0x1d0>
 8004c7e:	2d02      	cmp	r5, #2
 8004c80:	f47f af26 	bne.w	8004ad0 <_scanf_float+0x64>
 8004c84:	2503      	movs	r5, #3
 8004c86:	e7b7      	b.n	8004bf8 <_scanf_float+0x18c>
 8004c88:	2d06      	cmp	r5, #6
 8004c8a:	f47f af21 	bne.w	8004ad0 <_scanf_float+0x64>
 8004c8e:	2507      	movs	r5, #7
 8004c90:	e7b2      	b.n	8004bf8 <_scanf_float+0x18c>
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	0591      	lsls	r1, r2, #22
 8004c96:	f57f af1b 	bpl.w	8004ad0 <_scanf_float+0x64>
 8004c9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004c9e:	6022      	str	r2, [r4, #0]
 8004ca0:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ca4:	e7a8      	b.n	8004bf8 <_scanf_float+0x18c>
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004cac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004cb0:	d006      	beq.n	8004cc0 <_scanf_float+0x254>
 8004cb2:	0550      	lsls	r0, r2, #21
 8004cb4:	f57f af0c 	bpl.w	8004ad0 <_scanf_float+0x64>
 8004cb8:	f1b9 0f00 	cmp.w	r9, #0
 8004cbc:	f43f af0f 	beq.w	8004ade <_scanf_float+0x72>
 8004cc0:	0591      	lsls	r1, r2, #22
 8004cc2:	bf58      	it	pl
 8004cc4:	9901      	ldrpl	r1, [sp, #4]
 8004cc6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004cca:	bf58      	it	pl
 8004ccc:	eba9 0101 	subpl.w	r1, r9, r1
 8004cd0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004cd4:	f04f 0900 	mov.w	r9, #0
 8004cd8:	bf58      	it	pl
 8004cda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004cde:	6022      	str	r2, [r4, #0]
 8004ce0:	e78a      	b.n	8004bf8 <_scanf_float+0x18c>
 8004ce2:	f04f 0a03 	mov.w	sl, #3
 8004ce6:	e787      	b.n	8004bf8 <_scanf_float+0x18c>
 8004ce8:	4639      	mov	r1, r7
 8004cea:	4640      	mov	r0, r8
 8004cec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004cf0:	4798      	blx	r3
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	f43f aedf 	beq.w	8004ab6 <_scanf_float+0x4a>
 8004cf8:	e6ea      	b.n	8004ad0 <_scanf_float+0x64>
 8004cfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cfe:	463a      	mov	r2, r7
 8004d00:	4640      	mov	r0, r8
 8004d02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004d06:	4798      	blx	r3
 8004d08:	6923      	ldr	r3, [r4, #16]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	6123      	str	r3, [r4, #16]
 8004d0e:	e6ec      	b.n	8004aea <_scanf_float+0x7e>
 8004d10:	1e6b      	subs	r3, r5, #1
 8004d12:	2b06      	cmp	r3, #6
 8004d14:	d825      	bhi.n	8004d62 <_scanf_float+0x2f6>
 8004d16:	2d02      	cmp	r5, #2
 8004d18:	d836      	bhi.n	8004d88 <_scanf_float+0x31c>
 8004d1a:	455e      	cmp	r6, fp
 8004d1c:	f67f aee8 	bls.w	8004af0 <_scanf_float+0x84>
 8004d20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d24:	463a      	mov	r2, r7
 8004d26:	4640      	mov	r0, r8
 8004d28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004d2c:	4798      	blx	r3
 8004d2e:	6923      	ldr	r3, [r4, #16]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	6123      	str	r3, [r4, #16]
 8004d34:	e7f1      	b.n	8004d1a <_scanf_float+0x2ae>
 8004d36:	9802      	ldr	r0, [sp, #8]
 8004d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004d40:	463a      	mov	r2, r7
 8004d42:	9002      	str	r0, [sp, #8]
 8004d44:	4640      	mov	r0, r8
 8004d46:	4798      	blx	r3
 8004d48:	6923      	ldr	r3, [r4, #16]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	6123      	str	r3, [r4, #16]
 8004d4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d52:	fa5f fa8a 	uxtb.w	sl, sl
 8004d56:	f1ba 0f02 	cmp.w	sl, #2
 8004d5a:	d1ec      	bne.n	8004d36 <_scanf_float+0x2ca>
 8004d5c:	3d03      	subs	r5, #3
 8004d5e:	b2ed      	uxtb	r5, r5
 8004d60:	1b76      	subs	r6, r6, r5
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	05da      	lsls	r2, r3, #23
 8004d66:	d52f      	bpl.n	8004dc8 <_scanf_float+0x35c>
 8004d68:	055b      	lsls	r3, r3, #21
 8004d6a:	d510      	bpl.n	8004d8e <_scanf_float+0x322>
 8004d6c:	455e      	cmp	r6, fp
 8004d6e:	f67f aebf 	bls.w	8004af0 <_scanf_float+0x84>
 8004d72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d76:	463a      	mov	r2, r7
 8004d78:	4640      	mov	r0, r8
 8004d7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004d7e:	4798      	blx	r3
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	6123      	str	r3, [r4, #16]
 8004d86:	e7f1      	b.n	8004d6c <_scanf_float+0x300>
 8004d88:	46aa      	mov	sl, r5
 8004d8a:	9602      	str	r6, [sp, #8]
 8004d8c:	e7df      	b.n	8004d4e <_scanf_float+0x2e2>
 8004d8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004d92:	6923      	ldr	r3, [r4, #16]
 8004d94:	2965      	cmp	r1, #101	; 0x65
 8004d96:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004d9a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004d9e:	6123      	str	r3, [r4, #16]
 8004da0:	d00c      	beq.n	8004dbc <_scanf_float+0x350>
 8004da2:	2945      	cmp	r1, #69	; 0x45
 8004da4:	d00a      	beq.n	8004dbc <_scanf_float+0x350>
 8004da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004daa:	463a      	mov	r2, r7
 8004dac:	4640      	mov	r0, r8
 8004dae:	4798      	blx	r3
 8004db0:	6923      	ldr	r3, [r4, #16]
 8004db2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	1eb5      	subs	r5, r6, #2
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	463a      	mov	r2, r7
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dc4:	4798      	blx	r3
 8004dc6:	462e      	mov	r6, r5
 8004dc8:	6825      	ldr	r5, [r4, #0]
 8004dca:	f015 0510 	ands.w	r5, r5, #16
 8004dce:	d155      	bne.n	8004e7c <_scanf_float+0x410>
 8004dd0:	7035      	strb	r5, [r6, #0]
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ddc:	d11b      	bne.n	8004e16 <_scanf_float+0x3aa>
 8004dde:	9b01      	ldr	r3, [sp, #4]
 8004de0:	454b      	cmp	r3, r9
 8004de2:	eba3 0209 	sub.w	r2, r3, r9
 8004de6:	d123      	bne.n	8004e30 <_scanf_float+0x3c4>
 8004de8:	2200      	movs	r2, #0
 8004dea:	4659      	mov	r1, fp
 8004dec:	4640      	mov	r0, r8
 8004dee:	f000 feaf 	bl	8005b50 <_strtod_r>
 8004df2:	6822      	ldr	r2, [r4, #0]
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	f012 0f02 	tst.w	r2, #2
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	460f      	mov	r7, r1
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	d021      	beq.n	8004e46 <_scanf_float+0x3da>
 8004e02:	1d1a      	adds	r2, r3, #4
 8004e04:	9903      	ldr	r1, [sp, #12]
 8004e06:	600a      	str	r2, [r1, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	e9c3 6700 	strd	r6, r7, [r3]
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60e3      	str	r3, [r4, #12]
 8004e14:	e66d      	b.n	8004af2 <_scanf_float+0x86>
 8004e16:	9b04      	ldr	r3, [sp, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0e5      	beq.n	8004de8 <_scanf_float+0x37c>
 8004e1c:	9905      	ldr	r1, [sp, #20]
 8004e1e:	230a      	movs	r3, #10
 8004e20:	462a      	mov	r2, r5
 8004e22:	4640      	mov	r0, r8
 8004e24:	3101      	adds	r1, #1
 8004e26:	f000 ff15 	bl	8005c54 <_strtol_r>
 8004e2a:	9b04      	ldr	r3, [sp, #16]
 8004e2c:	9e05      	ldr	r6, [sp, #20]
 8004e2e:	1ac2      	subs	r2, r0, r3
 8004e30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004e34:	429e      	cmp	r6, r3
 8004e36:	bf28      	it	cs
 8004e38:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	4910      	ldr	r1, [pc, #64]	; (8004e80 <_scanf_float+0x414>)
 8004e40:	f000 f85a 	bl	8004ef8 <siprintf>
 8004e44:	e7d0      	b.n	8004de8 <_scanf_float+0x37c>
 8004e46:	f012 0f04 	tst.w	r2, #4
 8004e4a:	f103 0204 	add.w	r2, r3, #4
 8004e4e:	d1d9      	bne.n	8004e04 <_scanf_float+0x398>
 8004e50:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004e54:	f8cc 2000 	str.w	r2, [ip]
 8004e58:	f8d3 8000 	ldr.w	r8, [r3]
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	f7fb fe40 	bl	8000ae4 <__aeabi_dcmpun>
 8004e64:	b128      	cbz	r0, 8004e72 <_scanf_float+0x406>
 8004e66:	4807      	ldr	r0, [pc, #28]	; (8004e84 <_scanf_float+0x418>)
 8004e68:	f000 f80e 	bl	8004e88 <nanf>
 8004e6c:	f8c8 0000 	str.w	r0, [r8]
 8004e70:	e7cd      	b.n	8004e0e <_scanf_float+0x3a2>
 8004e72:	4630      	mov	r0, r6
 8004e74:	4639      	mov	r1, r7
 8004e76:	f7fb fe93 	bl	8000ba0 <__aeabi_d2f>
 8004e7a:	e7f7      	b.n	8004e6c <_scanf_float+0x400>
 8004e7c:	2500      	movs	r5, #0
 8004e7e:	e638      	b.n	8004af2 <_scanf_float+0x86>
 8004e80:	08010ca4 	.word	0x08010ca4
 8004e84:	080110b0 	.word	0x080110b0

08004e88 <nanf>:
 8004e88:	4800      	ldr	r0, [pc, #0]	; (8004e8c <nanf+0x4>)
 8004e8a:	4770      	bx	lr
 8004e8c:	7fc00000 	.word	0x7fc00000

08004e90 <sniprintf>:
 8004e90:	b40c      	push	{r2, r3}
 8004e92:	b530      	push	{r4, r5, lr}
 8004e94:	4b17      	ldr	r3, [pc, #92]	; (8004ef4 <sniprintf+0x64>)
 8004e96:	1e0c      	subs	r4, r1, #0
 8004e98:	681d      	ldr	r5, [r3, #0]
 8004e9a:	b09d      	sub	sp, #116	; 0x74
 8004e9c:	da08      	bge.n	8004eb0 <sniprintf+0x20>
 8004e9e:	238b      	movs	r3, #139	; 0x8b
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ea4:	602b      	str	r3, [r5, #0]
 8004ea6:	b01d      	add	sp, #116	; 0x74
 8004ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004eac:	b002      	add	sp, #8
 8004eae:	4770      	bx	lr
 8004eb0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004eb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004eb8:	bf0c      	ite	eq
 8004eba:	4623      	moveq	r3, r4
 8004ebc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004ec0:	9304      	str	r3, [sp, #16]
 8004ec2:	9307      	str	r3, [sp, #28]
 8004ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ec8:	9002      	str	r0, [sp, #8]
 8004eca:	9006      	str	r0, [sp, #24]
 8004ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	ab21      	add	r3, sp, #132	; 0x84
 8004ed4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004ed6:	a902      	add	r1, sp, #8
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	f002 fefb 	bl	8007cd4 <_svfiprintf_r>
 8004ede:	1c43      	adds	r3, r0, #1
 8004ee0:	bfbc      	itt	lt
 8004ee2:	238b      	movlt	r3, #139	; 0x8b
 8004ee4:	602b      	strlt	r3, [r5, #0]
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	d0dd      	beq.n	8004ea6 <sniprintf+0x16>
 8004eea:	2200      	movs	r2, #0
 8004eec:	9b02      	ldr	r3, [sp, #8]
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e7d9      	b.n	8004ea6 <sniprintf+0x16>
 8004ef2:	bf00      	nop
 8004ef4:	20000034 	.word	0x20000034

08004ef8 <siprintf>:
 8004ef8:	b40e      	push	{r1, r2, r3}
 8004efa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004efe:	b500      	push	{lr}
 8004f00:	b09c      	sub	sp, #112	; 0x70
 8004f02:	ab1d      	add	r3, sp, #116	; 0x74
 8004f04:	9002      	str	r0, [sp, #8]
 8004f06:	9006      	str	r0, [sp, #24]
 8004f08:	9107      	str	r1, [sp, #28]
 8004f0a:	9104      	str	r1, [sp, #16]
 8004f0c:	4808      	ldr	r0, [pc, #32]	; (8004f30 <siprintf+0x38>)
 8004f0e:	4909      	ldr	r1, [pc, #36]	; (8004f34 <siprintf+0x3c>)
 8004f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f14:	9105      	str	r1, [sp, #20]
 8004f16:	6800      	ldr	r0, [r0, #0]
 8004f18:	a902      	add	r1, sp, #8
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	f002 feda 	bl	8007cd4 <_svfiprintf_r>
 8004f20:	2200      	movs	r2, #0
 8004f22:	9b02      	ldr	r3, [sp, #8]
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	b01c      	add	sp, #112	; 0x70
 8004f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f2c:	b003      	add	sp, #12
 8004f2e:	4770      	bx	lr
 8004f30:	20000034 	.word	0x20000034
 8004f34:	ffff0208 	.word	0xffff0208

08004f38 <sulp>:
 8004f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3c:	460f      	mov	r7, r1
 8004f3e:	4690      	mov	r8, r2
 8004f40:	f002 fc34 	bl	80077ac <__ulp>
 8004f44:	4604      	mov	r4, r0
 8004f46:	460d      	mov	r5, r1
 8004f48:	f1b8 0f00 	cmp.w	r8, #0
 8004f4c:	d011      	beq.n	8004f72 <sulp+0x3a>
 8004f4e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004f52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dd0b      	ble.n	8004f72 <sulp+0x3a>
 8004f5a:	2400      	movs	r4, #0
 8004f5c:	051b      	lsls	r3, r3, #20
 8004f5e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004f62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004f66:	4622      	mov	r2, r4
 8004f68:	462b      	mov	r3, r5
 8004f6a:	f7fb fb21 	bl	80005b0 <__aeabi_dmul>
 8004f6e:	4604      	mov	r4, r0
 8004f70:	460d      	mov	r5, r1
 8004f72:	4620      	mov	r0, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f7a:	0000      	movs	r0, r0
 8004f7c:	0000      	movs	r0, r0
	...

08004f80 <_strtod_l>:
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	469b      	mov	fp, r3
 8004f86:	2300      	movs	r3, #0
 8004f88:	b09f      	sub	sp, #124	; 0x7c
 8004f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f8c:	4b9e      	ldr	r3, [pc, #632]	; (8005208 <_strtod_l+0x288>)
 8004f8e:	4682      	mov	sl, r0
 8004f90:	681f      	ldr	r7, [r3, #0]
 8004f92:	460e      	mov	r6, r1
 8004f94:	4638      	mov	r0, r7
 8004f96:	9215      	str	r2, [sp, #84]	; 0x54
 8004f98:	f7fb f946 	bl	8000228 <strlen>
 8004f9c:	f04f 0800 	mov.w	r8, #0
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	f04f 0900 	mov.w	r9, #0
 8004fa6:	9619      	str	r6, [sp, #100]	; 0x64
 8004fa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004faa:	781a      	ldrb	r2, [r3, #0]
 8004fac:	2a2b      	cmp	r2, #43	; 0x2b
 8004fae:	d04c      	beq.n	800504a <_strtod_l+0xca>
 8004fb0:	d83a      	bhi.n	8005028 <_strtod_l+0xa8>
 8004fb2:	2a0d      	cmp	r2, #13
 8004fb4:	d833      	bhi.n	800501e <_strtod_l+0x9e>
 8004fb6:	2a08      	cmp	r2, #8
 8004fb8:	d833      	bhi.n	8005022 <_strtod_l+0xa2>
 8004fba:	2a00      	cmp	r2, #0
 8004fbc:	d03d      	beq.n	800503a <_strtod_l+0xba>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8004fc2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004fc4:	782b      	ldrb	r3, [r5, #0]
 8004fc6:	2b30      	cmp	r3, #48	; 0x30
 8004fc8:	f040 80aa 	bne.w	8005120 <_strtod_l+0x1a0>
 8004fcc:	786b      	ldrb	r3, [r5, #1]
 8004fce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004fd2:	2b58      	cmp	r3, #88	; 0x58
 8004fd4:	d166      	bne.n	80050a4 <_strtod_l+0x124>
 8004fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd8:	4650      	mov	r0, sl
 8004fda:	9301      	str	r3, [sp, #4]
 8004fdc:	ab1a      	add	r3, sp, #104	; 0x68
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	4a8a      	ldr	r2, [pc, #552]	; (800520c <_strtod_l+0x28c>)
 8004fe2:	f8cd b008 	str.w	fp, [sp, #8]
 8004fe6:	ab1b      	add	r3, sp, #108	; 0x6c
 8004fe8:	a919      	add	r1, sp, #100	; 0x64
 8004fea:	f001 fd37 	bl	8006a5c <__gethex>
 8004fee:	f010 0607 	ands.w	r6, r0, #7
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	d005      	beq.n	8005002 <_strtod_l+0x82>
 8004ff6:	2e06      	cmp	r6, #6
 8004ff8:	d129      	bne.n	800504e <_strtod_l+0xce>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	3501      	adds	r5, #1
 8004ffe:	9519      	str	r5, [sp, #100]	; 0x64
 8005000:	930a      	str	r3, [sp, #40]	; 0x28
 8005002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005004:	2b00      	cmp	r3, #0
 8005006:	f040 858a 	bne.w	8005b1e <_strtod_l+0xb9e>
 800500a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800500c:	b1d3      	cbz	r3, 8005044 <_strtod_l+0xc4>
 800500e:	4642      	mov	r2, r8
 8005010:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005014:	4610      	mov	r0, r2
 8005016:	4619      	mov	r1, r3
 8005018:	b01f      	add	sp, #124	; 0x7c
 800501a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501e:	2a20      	cmp	r2, #32
 8005020:	d1cd      	bne.n	8004fbe <_strtod_l+0x3e>
 8005022:	3301      	adds	r3, #1
 8005024:	9319      	str	r3, [sp, #100]	; 0x64
 8005026:	e7bf      	b.n	8004fa8 <_strtod_l+0x28>
 8005028:	2a2d      	cmp	r2, #45	; 0x2d
 800502a:	d1c8      	bne.n	8004fbe <_strtod_l+0x3e>
 800502c:	2201      	movs	r2, #1
 800502e:	920a      	str	r2, [sp, #40]	; 0x28
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	9219      	str	r2, [sp, #100]	; 0x64
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1c3      	bne.n	8004fc2 <_strtod_l+0x42>
 800503a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800503c:	9619      	str	r6, [sp, #100]	; 0x64
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 856b 	bne.w	8005b1a <_strtod_l+0xb9a>
 8005044:	4642      	mov	r2, r8
 8005046:	464b      	mov	r3, r9
 8005048:	e7e4      	b.n	8005014 <_strtod_l+0x94>
 800504a:	2200      	movs	r2, #0
 800504c:	e7ef      	b.n	800502e <_strtod_l+0xae>
 800504e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005050:	b13a      	cbz	r2, 8005062 <_strtod_l+0xe2>
 8005052:	2135      	movs	r1, #53	; 0x35
 8005054:	a81c      	add	r0, sp, #112	; 0x70
 8005056:	f002 fcad 	bl	80079b4 <__copybits>
 800505a:	4650      	mov	r0, sl
 800505c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800505e:	f002 f875 	bl	800714c <_Bfree>
 8005062:	3e01      	subs	r6, #1
 8005064:	2e04      	cmp	r6, #4
 8005066:	d806      	bhi.n	8005076 <_strtod_l+0xf6>
 8005068:	e8df f006 	tbb	[pc, r6]
 800506c:	1714030a 	.word	0x1714030a
 8005070:	0a          	.byte	0x0a
 8005071:	00          	.byte	0x00
 8005072:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005076:	0721      	lsls	r1, r4, #28
 8005078:	d5c3      	bpl.n	8005002 <_strtod_l+0x82>
 800507a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800507e:	e7c0      	b.n	8005002 <_strtod_l+0x82>
 8005080:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005082:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005086:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800508a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800508e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005092:	e7f0      	b.n	8005076 <_strtod_l+0xf6>
 8005094:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005210 <_strtod_l+0x290>
 8005098:	e7ed      	b.n	8005076 <_strtod_l+0xf6>
 800509a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800509e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80050a2:	e7e8      	b.n	8005076 <_strtod_l+0xf6>
 80050a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	9219      	str	r2, [sp, #100]	; 0x64
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	2b30      	cmp	r3, #48	; 0x30
 80050ae:	d0f9      	beq.n	80050a4 <_strtod_l+0x124>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0a6      	beq.n	8005002 <_strtod_l+0x82>
 80050b4:	2301      	movs	r3, #1
 80050b6:	9307      	str	r3, [sp, #28]
 80050b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050ba:	220a      	movs	r2, #10
 80050bc:	9308      	str	r3, [sp, #32]
 80050be:	2300      	movs	r3, #0
 80050c0:	469b      	mov	fp, r3
 80050c2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80050c6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80050c8:	7805      	ldrb	r5, [r0, #0]
 80050ca:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80050ce:	b2d9      	uxtb	r1, r3
 80050d0:	2909      	cmp	r1, #9
 80050d2:	d927      	bls.n	8005124 <_strtod_l+0x1a4>
 80050d4:	4622      	mov	r2, r4
 80050d6:	4639      	mov	r1, r7
 80050d8:	f002 ff12 	bl	8007f00 <strncmp>
 80050dc:	2800      	cmp	r0, #0
 80050de:	d033      	beq.n	8005148 <_strtod_l+0x1c8>
 80050e0:	2000      	movs	r0, #0
 80050e2:	462a      	mov	r2, r5
 80050e4:	465c      	mov	r4, fp
 80050e6:	4603      	mov	r3, r0
 80050e8:	9004      	str	r0, [sp, #16]
 80050ea:	2a65      	cmp	r2, #101	; 0x65
 80050ec:	d001      	beq.n	80050f2 <_strtod_l+0x172>
 80050ee:	2a45      	cmp	r2, #69	; 0x45
 80050f0:	d114      	bne.n	800511c <_strtod_l+0x19c>
 80050f2:	b91c      	cbnz	r4, 80050fc <_strtod_l+0x17c>
 80050f4:	9a07      	ldr	r2, [sp, #28]
 80050f6:	4302      	orrs	r2, r0
 80050f8:	d09f      	beq.n	800503a <_strtod_l+0xba>
 80050fa:	2400      	movs	r4, #0
 80050fc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80050fe:	1c72      	adds	r2, r6, #1
 8005100:	9219      	str	r2, [sp, #100]	; 0x64
 8005102:	7872      	ldrb	r2, [r6, #1]
 8005104:	2a2b      	cmp	r2, #43	; 0x2b
 8005106:	d079      	beq.n	80051fc <_strtod_l+0x27c>
 8005108:	2a2d      	cmp	r2, #45	; 0x2d
 800510a:	f000 8083 	beq.w	8005214 <_strtod_l+0x294>
 800510e:	2700      	movs	r7, #0
 8005110:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005114:	2909      	cmp	r1, #9
 8005116:	f240 8083 	bls.w	8005220 <_strtod_l+0x2a0>
 800511a:	9619      	str	r6, [sp, #100]	; 0x64
 800511c:	2500      	movs	r5, #0
 800511e:	e09f      	b.n	8005260 <_strtod_l+0x2e0>
 8005120:	2300      	movs	r3, #0
 8005122:	e7c8      	b.n	80050b6 <_strtod_l+0x136>
 8005124:	f1bb 0f08 	cmp.w	fp, #8
 8005128:	bfd5      	itete	le
 800512a:	9906      	ldrle	r1, [sp, #24]
 800512c:	9905      	ldrgt	r1, [sp, #20]
 800512e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005132:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005136:	f100 0001 	add.w	r0, r0, #1
 800513a:	bfd4      	ite	le
 800513c:	9306      	strle	r3, [sp, #24]
 800513e:	9305      	strgt	r3, [sp, #20]
 8005140:	f10b 0b01 	add.w	fp, fp, #1
 8005144:	9019      	str	r0, [sp, #100]	; 0x64
 8005146:	e7be      	b.n	80050c6 <_strtod_l+0x146>
 8005148:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800514a:	191a      	adds	r2, r3, r4
 800514c:	9219      	str	r2, [sp, #100]	; 0x64
 800514e:	5d1a      	ldrb	r2, [r3, r4]
 8005150:	f1bb 0f00 	cmp.w	fp, #0
 8005154:	d036      	beq.n	80051c4 <_strtod_l+0x244>
 8005156:	465c      	mov	r4, fp
 8005158:	9004      	str	r0, [sp, #16]
 800515a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800515e:	2b09      	cmp	r3, #9
 8005160:	d912      	bls.n	8005188 <_strtod_l+0x208>
 8005162:	2301      	movs	r3, #1
 8005164:	e7c1      	b.n	80050ea <_strtod_l+0x16a>
 8005166:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005168:	3001      	adds	r0, #1
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	9219      	str	r2, [sp, #100]	; 0x64
 800516e:	785a      	ldrb	r2, [r3, #1]
 8005170:	2a30      	cmp	r2, #48	; 0x30
 8005172:	d0f8      	beq.n	8005166 <_strtod_l+0x1e6>
 8005174:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005178:	2b08      	cmp	r3, #8
 800517a:	f200 84d5 	bhi.w	8005b28 <_strtod_l+0xba8>
 800517e:	9004      	str	r0, [sp, #16]
 8005180:	2000      	movs	r0, #0
 8005182:	4604      	mov	r4, r0
 8005184:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005186:	9308      	str	r3, [sp, #32]
 8005188:	3a30      	subs	r2, #48	; 0x30
 800518a:	f100 0301 	add.w	r3, r0, #1
 800518e:	d013      	beq.n	80051b8 <_strtod_l+0x238>
 8005190:	9904      	ldr	r1, [sp, #16]
 8005192:	1905      	adds	r5, r0, r4
 8005194:	4419      	add	r1, r3
 8005196:	9104      	str	r1, [sp, #16]
 8005198:	4623      	mov	r3, r4
 800519a:	210a      	movs	r1, #10
 800519c:	42ab      	cmp	r3, r5
 800519e:	d113      	bne.n	80051c8 <_strtod_l+0x248>
 80051a0:	1823      	adds	r3, r4, r0
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	f104 0401 	add.w	r4, r4, #1
 80051a8:	4404      	add	r4, r0
 80051aa:	dc1b      	bgt.n	80051e4 <_strtod_l+0x264>
 80051ac:	230a      	movs	r3, #10
 80051ae:	9906      	ldr	r1, [sp, #24]
 80051b0:	fb03 2301 	mla	r3, r3, r1, r2
 80051b4:	9306      	str	r3, [sp, #24]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80051ba:	4618      	mov	r0, r3
 80051bc:	1c51      	adds	r1, r2, #1
 80051be:	9119      	str	r1, [sp, #100]	; 0x64
 80051c0:	7852      	ldrb	r2, [r2, #1]
 80051c2:	e7ca      	b.n	800515a <_strtod_l+0x1da>
 80051c4:	4658      	mov	r0, fp
 80051c6:	e7d3      	b.n	8005170 <_strtod_l+0x1f0>
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	dc04      	bgt.n	80051d6 <_strtod_l+0x256>
 80051cc:	9f06      	ldr	r7, [sp, #24]
 80051ce:	434f      	muls	r7, r1
 80051d0:	9706      	str	r7, [sp, #24]
 80051d2:	3301      	adds	r3, #1
 80051d4:	e7e2      	b.n	800519c <_strtod_l+0x21c>
 80051d6:	1c5f      	adds	r7, r3, #1
 80051d8:	2f10      	cmp	r7, #16
 80051da:	bfde      	ittt	le
 80051dc:	9f05      	ldrle	r7, [sp, #20]
 80051de:	434f      	mulle	r7, r1
 80051e0:	9705      	strle	r7, [sp, #20]
 80051e2:	e7f6      	b.n	80051d2 <_strtod_l+0x252>
 80051e4:	2c10      	cmp	r4, #16
 80051e6:	bfdf      	itttt	le
 80051e8:	230a      	movle	r3, #10
 80051ea:	9905      	ldrle	r1, [sp, #20]
 80051ec:	fb03 2301 	mlale	r3, r3, r1, r2
 80051f0:	9305      	strle	r3, [sp, #20]
 80051f2:	e7e0      	b.n	80051b6 <_strtod_l+0x236>
 80051f4:	2300      	movs	r3, #0
 80051f6:	9304      	str	r3, [sp, #16]
 80051f8:	2301      	movs	r3, #1
 80051fa:	e77b      	b.n	80050f4 <_strtod_l+0x174>
 80051fc:	2700      	movs	r7, #0
 80051fe:	1cb2      	adds	r2, r6, #2
 8005200:	9219      	str	r2, [sp, #100]	; 0x64
 8005202:	78b2      	ldrb	r2, [r6, #2]
 8005204:	e784      	b.n	8005110 <_strtod_l+0x190>
 8005206:	bf00      	nop
 8005208:	08010ef8 	.word	0x08010ef8
 800520c:	08010cac 	.word	0x08010cac
 8005210:	7ff00000 	.word	0x7ff00000
 8005214:	2701      	movs	r7, #1
 8005216:	e7f2      	b.n	80051fe <_strtod_l+0x27e>
 8005218:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800521a:	1c51      	adds	r1, r2, #1
 800521c:	9119      	str	r1, [sp, #100]	; 0x64
 800521e:	7852      	ldrb	r2, [r2, #1]
 8005220:	2a30      	cmp	r2, #48	; 0x30
 8005222:	d0f9      	beq.n	8005218 <_strtod_l+0x298>
 8005224:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005228:	2908      	cmp	r1, #8
 800522a:	f63f af77 	bhi.w	800511c <_strtod_l+0x19c>
 800522e:	f04f 0e0a 	mov.w	lr, #10
 8005232:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005236:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005238:	9209      	str	r2, [sp, #36]	; 0x24
 800523a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800523c:	1c51      	adds	r1, r2, #1
 800523e:	9119      	str	r1, [sp, #100]	; 0x64
 8005240:	7852      	ldrb	r2, [r2, #1]
 8005242:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005246:	2d09      	cmp	r5, #9
 8005248:	d935      	bls.n	80052b6 <_strtod_l+0x336>
 800524a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800524c:	1b49      	subs	r1, r1, r5
 800524e:	2908      	cmp	r1, #8
 8005250:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005254:	dc02      	bgt.n	800525c <_strtod_l+0x2dc>
 8005256:	4565      	cmp	r5, ip
 8005258:	bfa8      	it	ge
 800525a:	4665      	movge	r5, ip
 800525c:	b107      	cbz	r7, 8005260 <_strtod_l+0x2e0>
 800525e:	426d      	negs	r5, r5
 8005260:	2c00      	cmp	r4, #0
 8005262:	d14c      	bne.n	80052fe <_strtod_l+0x37e>
 8005264:	9907      	ldr	r1, [sp, #28]
 8005266:	4301      	orrs	r1, r0
 8005268:	f47f aecb 	bne.w	8005002 <_strtod_l+0x82>
 800526c:	2b00      	cmp	r3, #0
 800526e:	f47f aee4 	bne.w	800503a <_strtod_l+0xba>
 8005272:	2a69      	cmp	r2, #105	; 0x69
 8005274:	d026      	beq.n	80052c4 <_strtod_l+0x344>
 8005276:	dc23      	bgt.n	80052c0 <_strtod_l+0x340>
 8005278:	2a49      	cmp	r2, #73	; 0x49
 800527a:	d023      	beq.n	80052c4 <_strtod_l+0x344>
 800527c:	2a4e      	cmp	r2, #78	; 0x4e
 800527e:	f47f aedc 	bne.w	800503a <_strtod_l+0xba>
 8005282:	499d      	ldr	r1, [pc, #628]	; (80054f8 <_strtod_l+0x578>)
 8005284:	a819      	add	r0, sp, #100	; 0x64
 8005286:	f001 fe37 	bl	8006ef8 <__match>
 800528a:	2800      	cmp	r0, #0
 800528c:	f43f aed5 	beq.w	800503a <_strtod_l+0xba>
 8005290:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b28      	cmp	r3, #40	; 0x28
 8005296:	d12c      	bne.n	80052f2 <_strtod_l+0x372>
 8005298:	4998      	ldr	r1, [pc, #608]	; (80054fc <_strtod_l+0x57c>)
 800529a:	aa1c      	add	r2, sp, #112	; 0x70
 800529c:	a819      	add	r0, sp, #100	; 0x64
 800529e:	f001 fe3f 	bl	8006f20 <__hexnan>
 80052a2:	2805      	cmp	r0, #5
 80052a4:	d125      	bne.n	80052f2 <_strtod_l+0x372>
 80052a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80052a8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80052ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80052b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80052b4:	e6a5      	b.n	8005002 <_strtod_l+0x82>
 80052b6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80052ba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80052be:	e7bc      	b.n	800523a <_strtod_l+0x2ba>
 80052c0:	2a6e      	cmp	r2, #110	; 0x6e
 80052c2:	e7dc      	b.n	800527e <_strtod_l+0x2fe>
 80052c4:	498e      	ldr	r1, [pc, #568]	; (8005500 <_strtod_l+0x580>)
 80052c6:	a819      	add	r0, sp, #100	; 0x64
 80052c8:	f001 fe16 	bl	8006ef8 <__match>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f43f aeb4 	beq.w	800503a <_strtod_l+0xba>
 80052d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052d4:	498b      	ldr	r1, [pc, #556]	; (8005504 <_strtod_l+0x584>)
 80052d6:	3b01      	subs	r3, #1
 80052d8:	a819      	add	r0, sp, #100	; 0x64
 80052da:	9319      	str	r3, [sp, #100]	; 0x64
 80052dc:	f001 fe0c 	bl	8006ef8 <__match>
 80052e0:	b910      	cbnz	r0, 80052e8 <_strtod_l+0x368>
 80052e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052e4:	3301      	adds	r3, #1
 80052e6:	9319      	str	r3, [sp, #100]	; 0x64
 80052e8:	f04f 0800 	mov.w	r8, #0
 80052ec:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005508 <_strtod_l+0x588>
 80052f0:	e687      	b.n	8005002 <_strtod_l+0x82>
 80052f2:	4886      	ldr	r0, [pc, #536]	; (800550c <_strtod_l+0x58c>)
 80052f4:	f002 fdee 	bl	8007ed4 <nan>
 80052f8:	4680      	mov	r8, r0
 80052fa:	4689      	mov	r9, r1
 80052fc:	e681      	b.n	8005002 <_strtod_l+0x82>
 80052fe:	9b04      	ldr	r3, [sp, #16]
 8005300:	f1bb 0f00 	cmp.w	fp, #0
 8005304:	bf08      	it	eq
 8005306:	46a3      	moveq	fp, r4
 8005308:	1aeb      	subs	r3, r5, r3
 800530a:	2c10      	cmp	r4, #16
 800530c:	9806      	ldr	r0, [sp, #24]
 800530e:	4626      	mov	r6, r4
 8005310:	9307      	str	r3, [sp, #28]
 8005312:	bfa8      	it	ge
 8005314:	2610      	movge	r6, #16
 8005316:	f7fb f8d1 	bl	80004bc <__aeabi_ui2d>
 800531a:	2c09      	cmp	r4, #9
 800531c:	4680      	mov	r8, r0
 800531e:	4689      	mov	r9, r1
 8005320:	dd13      	ble.n	800534a <_strtod_l+0x3ca>
 8005322:	4b7b      	ldr	r3, [pc, #492]	; (8005510 <_strtod_l+0x590>)
 8005324:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005328:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800532c:	f7fb f940 	bl	80005b0 <__aeabi_dmul>
 8005330:	4680      	mov	r8, r0
 8005332:	9805      	ldr	r0, [sp, #20]
 8005334:	4689      	mov	r9, r1
 8005336:	f7fb f8c1 	bl	80004bc <__aeabi_ui2d>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4640      	mov	r0, r8
 8005340:	4649      	mov	r1, r9
 8005342:	f7fa ff7f 	bl	8000244 <__adddf3>
 8005346:	4680      	mov	r8, r0
 8005348:	4689      	mov	r9, r1
 800534a:	2c0f      	cmp	r4, #15
 800534c:	dc36      	bgt.n	80053bc <_strtod_l+0x43c>
 800534e:	9b07      	ldr	r3, [sp, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	f43f ae56 	beq.w	8005002 <_strtod_l+0x82>
 8005356:	dd22      	ble.n	800539e <_strtod_l+0x41e>
 8005358:	2b16      	cmp	r3, #22
 800535a:	dc09      	bgt.n	8005370 <_strtod_l+0x3f0>
 800535c:	496c      	ldr	r1, [pc, #432]	; (8005510 <_strtod_l+0x590>)
 800535e:	4642      	mov	r2, r8
 8005360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005364:	464b      	mov	r3, r9
 8005366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800536a:	f7fb f921 	bl	80005b0 <__aeabi_dmul>
 800536e:	e7c3      	b.n	80052f8 <_strtod_l+0x378>
 8005370:	9a07      	ldr	r2, [sp, #28]
 8005372:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005376:	4293      	cmp	r3, r2
 8005378:	db20      	blt.n	80053bc <_strtod_l+0x43c>
 800537a:	4d65      	ldr	r5, [pc, #404]	; (8005510 <_strtod_l+0x590>)
 800537c:	f1c4 040f 	rsb	r4, r4, #15
 8005380:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005384:	4642      	mov	r2, r8
 8005386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800538a:	464b      	mov	r3, r9
 800538c:	f7fb f910 	bl	80005b0 <__aeabi_dmul>
 8005390:	9b07      	ldr	r3, [sp, #28]
 8005392:	1b1c      	subs	r4, r3, r4
 8005394:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800539c:	e7e5      	b.n	800536a <_strtod_l+0x3ea>
 800539e:	9b07      	ldr	r3, [sp, #28]
 80053a0:	3316      	adds	r3, #22
 80053a2:	db0b      	blt.n	80053bc <_strtod_l+0x43c>
 80053a4:	9b04      	ldr	r3, [sp, #16]
 80053a6:	4640      	mov	r0, r8
 80053a8:	1b5d      	subs	r5, r3, r5
 80053aa:	4b59      	ldr	r3, [pc, #356]	; (8005510 <_strtod_l+0x590>)
 80053ac:	4649      	mov	r1, r9
 80053ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80053b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053b6:	f7fb fa25 	bl	8000804 <__aeabi_ddiv>
 80053ba:	e79d      	b.n	80052f8 <_strtod_l+0x378>
 80053bc:	9b07      	ldr	r3, [sp, #28]
 80053be:	1ba6      	subs	r6, r4, r6
 80053c0:	441e      	add	r6, r3
 80053c2:	2e00      	cmp	r6, #0
 80053c4:	dd74      	ble.n	80054b0 <_strtod_l+0x530>
 80053c6:	f016 030f 	ands.w	r3, r6, #15
 80053ca:	d00a      	beq.n	80053e2 <_strtod_l+0x462>
 80053cc:	4950      	ldr	r1, [pc, #320]	; (8005510 <_strtod_l+0x590>)
 80053ce:	4642      	mov	r2, r8
 80053d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80053d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053d8:	464b      	mov	r3, r9
 80053da:	f7fb f8e9 	bl	80005b0 <__aeabi_dmul>
 80053de:	4680      	mov	r8, r0
 80053e0:	4689      	mov	r9, r1
 80053e2:	f036 060f 	bics.w	r6, r6, #15
 80053e6:	d052      	beq.n	800548e <_strtod_l+0x50e>
 80053e8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80053ec:	dd27      	ble.n	800543e <_strtod_l+0x4be>
 80053ee:	f04f 0b00 	mov.w	fp, #0
 80053f2:	f8cd b010 	str.w	fp, [sp, #16]
 80053f6:	f8cd b020 	str.w	fp, [sp, #32]
 80053fa:	f8cd b018 	str.w	fp, [sp, #24]
 80053fe:	2322      	movs	r3, #34	; 0x22
 8005400:	f04f 0800 	mov.w	r8, #0
 8005404:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005508 <_strtod_l+0x588>
 8005408:	f8ca 3000 	str.w	r3, [sl]
 800540c:	9b08      	ldr	r3, [sp, #32]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f43f adf7 	beq.w	8005002 <_strtod_l+0x82>
 8005414:	4650      	mov	r0, sl
 8005416:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005418:	f001 fe98 	bl	800714c <_Bfree>
 800541c:	4650      	mov	r0, sl
 800541e:	9906      	ldr	r1, [sp, #24]
 8005420:	f001 fe94 	bl	800714c <_Bfree>
 8005424:	4650      	mov	r0, sl
 8005426:	9904      	ldr	r1, [sp, #16]
 8005428:	f001 fe90 	bl	800714c <_Bfree>
 800542c:	4650      	mov	r0, sl
 800542e:	9908      	ldr	r1, [sp, #32]
 8005430:	f001 fe8c 	bl	800714c <_Bfree>
 8005434:	4659      	mov	r1, fp
 8005436:	4650      	mov	r0, sl
 8005438:	f001 fe88 	bl	800714c <_Bfree>
 800543c:	e5e1      	b.n	8005002 <_strtod_l+0x82>
 800543e:	4b35      	ldr	r3, [pc, #212]	; (8005514 <_strtod_l+0x594>)
 8005440:	4640      	mov	r0, r8
 8005442:	9305      	str	r3, [sp, #20]
 8005444:	2300      	movs	r3, #0
 8005446:	4649      	mov	r1, r9
 8005448:	461f      	mov	r7, r3
 800544a:	1136      	asrs	r6, r6, #4
 800544c:	2e01      	cmp	r6, #1
 800544e:	dc21      	bgt.n	8005494 <_strtod_l+0x514>
 8005450:	b10b      	cbz	r3, 8005456 <_strtod_l+0x4d6>
 8005452:	4680      	mov	r8, r0
 8005454:	4689      	mov	r9, r1
 8005456:	4b2f      	ldr	r3, [pc, #188]	; (8005514 <_strtod_l+0x594>)
 8005458:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800545c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005460:	4642      	mov	r2, r8
 8005462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005466:	464b      	mov	r3, r9
 8005468:	f7fb f8a2 	bl	80005b0 <__aeabi_dmul>
 800546c:	4b26      	ldr	r3, [pc, #152]	; (8005508 <_strtod_l+0x588>)
 800546e:	460a      	mov	r2, r1
 8005470:	400b      	ands	r3, r1
 8005472:	4929      	ldr	r1, [pc, #164]	; (8005518 <_strtod_l+0x598>)
 8005474:	4680      	mov	r8, r0
 8005476:	428b      	cmp	r3, r1
 8005478:	d8b9      	bhi.n	80053ee <_strtod_l+0x46e>
 800547a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800547e:	428b      	cmp	r3, r1
 8005480:	bf86      	itte	hi
 8005482:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005486:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800551c <_strtod_l+0x59c>
 800548a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800548e:	2300      	movs	r3, #0
 8005490:	9305      	str	r3, [sp, #20]
 8005492:	e07f      	b.n	8005594 <_strtod_l+0x614>
 8005494:	07f2      	lsls	r2, r6, #31
 8005496:	d505      	bpl.n	80054a4 <_strtod_l+0x524>
 8005498:	9b05      	ldr	r3, [sp, #20]
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f887 	bl	80005b0 <__aeabi_dmul>
 80054a2:	2301      	movs	r3, #1
 80054a4:	9a05      	ldr	r2, [sp, #20]
 80054a6:	3701      	adds	r7, #1
 80054a8:	3208      	adds	r2, #8
 80054aa:	1076      	asrs	r6, r6, #1
 80054ac:	9205      	str	r2, [sp, #20]
 80054ae:	e7cd      	b.n	800544c <_strtod_l+0x4cc>
 80054b0:	d0ed      	beq.n	800548e <_strtod_l+0x50e>
 80054b2:	4276      	negs	r6, r6
 80054b4:	f016 020f 	ands.w	r2, r6, #15
 80054b8:	d00a      	beq.n	80054d0 <_strtod_l+0x550>
 80054ba:	4b15      	ldr	r3, [pc, #84]	; (8005510 <_strtod_l+0x590>)
 80054bc:	4640      	mov	r0, r8
 80054be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054c2:	4649      	mov	r1, r9
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fb f99c 	bl	8000804 <__aeabi_ddiv>
 80054cc:	4680      	mov	r8, r0
 80054ce:	4689      	mov	r9, r1
 80054d0:	1136      	asrs	r6, r6, #4
 80054d2:	d0dc      	beq.n	800548e <_strtod_l+0x50e>
 80054d4:	2e1f      	cmp	r6, #31
 80054d6:	dd23      	ble.n	8005520 <_strtod_l+0x5a0>
 80054d8:	f04f 0b00 	mov.w	fp, #0
 80054dc:	f8cd b010 	str.w	fp, [sp, #16]
 80054e0:	f8cd b020 	str.w	fp, [sp, #32]
 80054e4:	f8cd b018 	str.w	fp, [sp, #24]
 80054e8:	2322      	movs	r3, #34	; 0x22
 80054ea:	f04f 0800 	mov.w	r8, #0
 80054ee:	f04f 0900 	mov.w	r9, #0
 80054f2:	f8ca 3000 	str.w	r3, [sl]
 80054f6:	e789      	b.n	800540c <_strtod_l+0x48c>
 80054f8:	08010c7d 	.word	0x08010c7d
 80054fc:	08010cc0 	.word	0x08010cc0
 8005500:	08010c75 	.word	0x08010c75
 8005504:	08010e04 	.word	0x08010e04
 8005508:	7ff00000 	.word	0x7ff00000
 800550c:	080110b0 	.word	0x080110b0
 8005510:	08010f90 	.word	0x08010f90
 8005514:	08010f68 	.word	0x08010f68
 8005518:	7ca00000 	.word	0x7ca00000
 800551c:	7fefffff 	.word	0x7fefffff
 8005520:	f016 0310 	ands.w	r3, r6, #16
 8005524:	bf18      	it	ne
 8005526:	236a      	movne	r3, #106	; 0x6a
 8005528:	4640      	mov	r0, r8
 800552a:	9305      	str	r3, [sp, #20]
 800552c:	4649      	mov	r1, r9
 800552e:	2300      	movs	r3, #0
 8005530:	4fb0      	ldr	r7, [pc, #704]	; (80057f4 <_strtod_l+0x874>)
 8005532:	07f2      	lsls	r2, r6, #31
 8005534:	d504      	bpl.n	8005540 <_strtod_l+0x5c0>
 8005536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800553a:	f7fb f839 	bl	80005b0 <__aeabi_dmul>
 800553e:	2301      	movs	r3, #1
 8005540:	1076      	asrs	r6, r6, #1
 8005542:	f107 0708 	add.w	r7, r7, #8
 8005546:	d1f4      	bne.n	8005532 <_strtod_l+0x5b2>
 8005548:	b10b      	cbz	r3, 800554e <_strtod_l+0x5ce>
 800554a:	4680      	mov	r8, r0
 800554c:	4689      	mov	r9, r1
 800554e:	9b05      	ldr	r3, [sp, #20]
 8005550:	b1c3      	cbz	r3, 8005584 <_strtod_l+0x604>
 8005552:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005556:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800555a:	2b00      	cmp	r3, #0
 800555c:	4649      	mov	r1, r9
 800555e:	dd11      	ble.n	8005584 <_strtod_l+0x604>
 8005560:	2b1f      	cmp	r3, #31
 8005562:	f340 8127 	ble.w	80057b4 <_strtod_l+0x834>
 8005566:	2b34      	cmp	r3, #52	; 0x34
 8005568:	bfd8      	it	le
 800556a:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800556e:	f04f 0800 	mov.w	r8, #0
 8005572:	bfcf      	iteee	gt
 8005574:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005578:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800557c:	fa03 f202 	lslle.w	r2, r3, r2
 8005580:	ea02 0901 	andle.w	r9, r2, r1
 8005584:	2200      	movs	r2, #0
 8005586:	2300      	movs	r3, #0
 8005588:	4640      	mov	r0, r8
 800558a:	4649      	mov	r1, r9
 800558c:	f7fb fa78 	bl	8000a80 <__aeabi_dcmpeq>
 8005590:	2800      	cmp	r0, #0
 8005592:	d1a1      	bne.n	80054d8 <_strtod_l+0x558>
 8005594:	9b06      	ldr	r3, [sp, #24]
 8005596:	465a      	mov	r2, fp
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4650      	mov	r0, sl
 800559c:	4623      	mov	r3, r4
 800559e:	9908      	ldr	r1, [sp, #32]
 80055a0:	f001 fe3c 	bl	800721c <__s2b>
 80055a4:	9008      	str	r0, [sp, #32]
 80055a6:	2800      	cmp	r0, #0
 80055a8:	f43f af21 	beq.w	80053ee <_strtod_l+0x46e>
 80055ac:	9b04      	ldr	r3, [sp, #16]
 80055ae:	f04f 0b00 	mov.w	fp, #0
 80055b2:	1b5d      	subs	r5, r3, r5
 80055b4:	9b07      	ldr	r3, [sp, #28]
 80055b6:	f8cd b010 	str.w	fp, [sp, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfb4      	ite	lt
 80055be:	462b      	movlt	r3, r5
 80055c0:	2300      	movge	r3, #0
 80055c2:	930e      	str	r3, [sp, #56]	; 0x38
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80055ca:	9314      	str	r3, [sp, #80]	; 0x50
 80055cc:	9b08      	ldr	r3, [sp, #32]
 80055ce:	4650      	mov	r0, sl
 80055d0:	6859      	ldr	r1, [r3, #4]
 80055d2:	f001 fd7b 	bl	80070cc <_Balloc>
 80055d6:	9006      	str	r0, [sp, #24]
 80055d8:	2800      	cmp	r0, #0
 80055da:	f43f af10 	beq.w	80053fe <_strtod_l+0x47e>
 80055de:	9b08      	ldr	r3, [sp, #32]
 80055e0:	300c      	adds	r0, #12
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	f103 010c 	add.w	r1, r3, #12
 80055e8:	3202      	adds	r2, #2
 80055ea:	0092      	lsls	r2, r2, #2
 80055ec:	f001 fd60 	bl	80070b0 <memcpy>
 80055f0:	ab1c      	add	r3, sp, #112	; 0x70
 80055f2:	9301      	str	r3, [sp, #4]
 80055f4:	ab1b      	add	r3, sp, #108	; 0x6c
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	4642      	mov	r2, r8
 80055fa:	464b      	mov	r3, r9
 80055fc:	4650      	mov	r0, sl
 80055fe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005602:	f002 f94d 	bl	80078a0 <__d2b>
 8005606:	901a      	str	r0, [sp, #104]	; 0x68
 8005608:	2800      	cmp	r0, #0
 800560a:	f43f aef8 	beq.w	80053fe <_strtod_l+0x47e>
 800560e:	2101      	movs	r1, #1
 8005610:	4650      	mov	r0, sl
 8005612:	f001 fe9b 	bl	800734c <__i2b>
 8005616:	4603      	mov	r3, r0
 8005618:	9004      	str	r0, [sp, #16]
 800561a:	2800      	cmp	r0, #0
 800561c:	f43f aeef 	beq.w	80053fe <_strtod_l+0x47e>
 8005620:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005622:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005624:	2d00      	cmp	r5, #0
 8005626:	bfab      	itete	ge
 8005628:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800562a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800562c:	18ee      	addge	r6, r5, r3
 800562e:	1b5c      	sublt	r4, r3, r5
 8005630:	9b05      	ldr	r3, [sp, #20]
 8005632:	bfa8      	it	ge
 8005634:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005636:	eba5 0503 	sub.w	r5, r5, r3
 800563a:	4415      	add	r5, r2
 800563c:	4b6e      	ldr	r3, [pc, #440]	; (80057f8 <_strtod_l+0x878>)
 800563e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005642:	bfb8      	it	lt
 8005644:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005646:	429d      	cmp	r5, r3
 8005648:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800564c:	f280 80c4 	bge.w	80057d8 <_strtod_l+0x858>
 8005650:	1b5b      	subs	r3, r3, r5
 8005652:	2b1f      	cmp	r3, #31
 8005654:	f04f 0701 	mov.w	r7, #1
 8005658:	eba2 0203 	sub.w	r2, r2, r3
 800565c:	f300 80b1 	bgt.w	80057c2 <_strtod_l+0x842>
 8005660:	2500      	movs	r5, #0
 8005662:	fa07 f303 	lsl.w	r3, r7, r3
 8005666:	930f      	str	r3, [sp, #60]	; 0x3c
 8005668:	18b7      	adds	r7, r6, r2
 800566a:	9b05      	ldr	r3, [sp, #20]
 800566c:	42be      	cmp	r6, r7
 800566e:	4414      	add	r4, r2
 8005670:	441c      	add	r4, r3
 8005672:	4633      	mov	r3, r6
 8005674:	bfa8      	it	ge
 8005676:	463b      	movge	r3, r7
 8005678:	42a3      	cmp	r3, r4
 800567a:	bfa8      	it	ge
 800567c:	4623      	movge	r3, r4
 800567e:	2b00      	cmp	r3, #0
 8005680:	bfc2      	ittt	gt
 8005682:	1aff      	subgt	r7, r7, r3
 8005684:	1ae4      	subgt	r4, r4, r3
 8005686:	1af6      	subgt	r6, r6, r3
 8005688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800568a:	2b00      	cmp	r3, #0
 800568c:	dd17      	ble.n	80056be <_strtod_l+0x73e>
 800568e:	461a      	mov	r2, r3
 8005690:	4650      	mov	r0, sl
 8005692:	9904      	ldr	r1, [sp, #16]
 8005694:	f001 ff18 	bl	80074c8 <__pow5mult>
 8005698:	9004      	str	r0, [sp, #16]
 800569a:	2800      	cmp	r0, #0
 800569c:	f43f aeaf 	beq.w	80053fe <_strtod_l+0x47e>
 80056a0:	4601      	mov	r1, r0
 80056a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80056a4:	4650      	mov	r0, sl
 80056a6:	f001 fe67 	bl	8007378 <__multiply>
 80056aa:	9009      	str	r0, [sp, #36]	; 0x24
 80056ac:	2800      	cmp	r0, #0
 80056ae:	f43f aea6 	beq.w	80053fe <_strtod_l+0x47e>
 80056b2:	4650      	mov	r0, sl
 80056b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056b6:	f001 fd49 	bl	800714c <_Bfree>
 80056ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056bc:	931a      	str	r3, [sp, #104]	; 0x68
 80056be:	2f00      	cmp	r7, #0
 80056c0:	f300 808e 	bgt.w	80057e0 <_strtod_l+0x860>
 80056c4:	9b07      	ldr	r3, [sp, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	dd08      	ble.n	80056dc <_strtod_l+0x75c>
 80056ca:	4650      	mov	r0, sl
 80056cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80056ce:	9906      	ldr	r1, [sp, #24]
 80056d0:	f001 fefa 	bl	80074c8 <__pow5mult>
 80056d4:	9006      	str	r0, [sp, #24]
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f43f ae91 	beq.w	80053fe <_strtod_l+0x47e>
 80056dc:	2c00      	cmp	r4, #0
 80056de:	dd08      	ble.n	80056f2 <_strtod_l+0x772>
 80056e0:	4622      	mov	r2, r4
 80056e2:	4650      	mov	r0, sl
 80056e4:	9906      	ldr	r1, [sp, #24]
 80056e6:	f001 ff49 	bl	800757c <__lshift>
 80056ea:	9006      	str	r0, [sp, #24]
 80056ec:	2800      	cmp	r0, #0
 80056ee:	f43f ae86 	beq.w	80053fe <_strtod_l+0x47e>
 80056f2:	2e00      	cmp	r6, #0
 80056f4:	dd08      	ble.n	8005708 <_strtod_l+0x788>
 80056f6:	4632      	mov	r2, r6
 80056f8:	4650      	mov	r0, sl
 80056fa:	9904      	ldr	r1, [sp, #16]
 80056fc:	f001 ff3e 	bl	800757c <__lshift>
 8005700:	9004      	str	r0, [sp, #16]
 8005702:	2800      	cmp	r0, #0
 8005704:	f43f ae7b 	beq.w	80053fe <_strtod_l+0x47e>
 8005708:	4650      	mov	r0, sl
 800570a:	9a06      	ldr	r2, [sp, #24]
 800570c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800570e:	f001 ffc1 	bl	8007694 <__mdiff>
 8005712:	4683      	mov	fp, r0
 8005714:	2800      	cmp	r0, #0
 8005716:	f43f ae72 	beq.w	80053fe <_strtod_l+0x47e>
 800571a:	2400      	movs	r4, #0
 800571c:	68c3      	ldr	r3, [r0, #12]
 800571e:	9904      	ldr	r1, [sp, #16]
 8005720:	60c4      	str	r4, [r0, #12]
 8005722:	930b      	str	r3, [sp, #44]	; 0x2c
 8005724:	f001 ff9a 	bl	800765c <__mcmp>
 8005728:	42a0      	cmp	r0, r4
 800572a:	da6b      	bge.n	8005804 <_strtod_l+0x884>
 800572c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800572e:	ea53 0308 	orrs.w	r3, r3, r8
 8005732:	f040 8091 	bne.w	8005858 <_strtod_l+0x8d8>
 8005736:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800573a:	2b00      	cmp	r3, #0
 800573c:	f040 808c 	bne.w	8005858 <_strtod_l+0x8d8>
 8005740:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005744:	0d1b      	lsrs	r3, r3, #20
 8005746:	051b      	lsls	r3, r3, #20
 8005748:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800574c:	f240 8084 	bls.w	8005858 <_strtod_l+0x8d8>
 8005750:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005754:	b91b      	cbnz	r3, 800575e <_strtod_l+0x7de>
 8005756:	f8db 3010 	ldr.w	r3, [fp, #16]
 800575a:	2b01      	cmp	r3, #1
 800575c:	dd7c      	ble.n	8005858 <_strtod_l+0x8d8>
 800575e:	4659      	mov	r1, fp
 8005760:	2201      	movs	r2, #1
 8005762:	4650      	mov	r0, sl
 8005764:	f001 ff0a 	bl	800757c <__lshift>
 8005768:	9904      	ldr	r1, [sp, #16]
 800576a:	4683      	mov	fp, r0
 800576c:	f001 ff76 	bl	800765c <__mcmp>
 8005770:	2800      	cmp	r0, #0
 8005772:	dd71      	ble.n	8005858 <_strtod_l+0x8d8>
 8005774:	9905      	ldr	r1, [sp, #20]
 8005776:	464b      	mov	r3, r9
 8005778:	4a20      	ldr	r2, [pc, #128]	; (80057fc <_strtod_l+0x87c>)
 800577a:	2900      	cmp	r1, #0
 800577c:	f000 808c 	beq.w	8005898 <_strtod_l+0x918>
 8005780:	ea02 0109 	and.w	r1, r2, r9
 8005784:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005788:	f300 8086 	bgt.w	8005898 <_strtod_l+0x918>
 800578c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005790:	f77f aeaa 	ble.w	80054e8 <_strtod_l+0x568>
 8005794:	4640      	mov	r0, r8
 8005796:	4649      	mov	r1, r9
 8005798:	4b19      	ldr	r3, [pc, #100]	; (8005800 <_strtod_l+0x880>)
 800579a:	2200      	movs	r2, #0
 800579c:	f7fa ff08 	bl	80005b0 <__aeabi_dmul>
 80057a0:	460b      	mov	r3, r1
 80057a2:	4303      	orrs	r3, r0
 80057a4:	bf08      	it	eq
 80057a6:	2322      	moveq	r3, #34	; 0x22
 80057a8:	4680      	mov	r8, r0
 80057aa:	4689      	mov	r9, r1
 80057ac:	bf08      	it	eq
 80057ae:	f8ca 3000 	streq.w	r3, [sl]
 80057b2:	e62f      	b.n	8005414 <_strtod_l+0x494>
 80057b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	ea03 0808 	and.w	r8, r3, r8
 80057c0:	e6e0      	b.n	8005584 <_strtod_l+0x604>
 80057c2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80057c6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80057ca:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80057ce:	35e2      	adds	r5, #226	; 0xe2
 80057d0:	fa07 f505 	lsl.w	r5, r7, r5
 80057d4:	970f      	str	r7, [sp, #60]	; 0x3c
 80057d6:	e747      	b.n	8005668 <_strtod_l+0x6e8>
 80057d8:	2301      	movs	r3, #1
 80057da:	2500      	movs	r5, #0
 80057dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80057de:	e743      	b.n	8005668 <_strtod_l+0x6e8>
 80057e0:	463a      	mov	r2, r7
 80057e2:	4650      	mov	r0, sl
 80057e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80057e6:	f001 fec9 	bl	800757c <__lshift>
 80057ea:	901a      	str	r0, [sp, #104]	; 0x68
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f47f af69 	bne.w	80056c4 <_strtod_l+0x744>
 80057f2:	e604      	b.n	80053fe <_strtod_l+0x47e>
 80057f4:	08010cd8 	.word	0x08010cd8
 80057f8:	fffffc02 	.word	0xfffffc02
 80057fc:	7ff00000 	.word	0x7ff00000
 8005800:	39500000 	.word	0x39500000
 8005804:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005808:	d165      	bne.n	80058d6 <_strtod_l+0x956>
 800580a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800580c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005810:	b35a      	cbz	r2, 800586a <_strtod_l+0x8ea>
 8005812:	4a99      	ldr	r2, [pc, #612]	; (8005a78 <_strtod_l+0xaf8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d12b      	bne.n	8005870 <_strtod_l+0x8f0>
 8005818:	9b05      	ldr	r3, [sp, #20]
 800581a:	4641      	mov	r1, r8
 800581c:	b303      	cbz	r3, 8005860 <_strtod_l+0x8e0>
 800581e:	464a      	mov	r2, r9
 8005820:	4b96      	ldr	r3, [pc, #600]	; (8005a7c <_strtod_l+0xafc>)
 8005822:	4013      	ands	r3, r2
 8005824:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800582c:	d81b      	bhi.n	8005866 <_strtod_l+0x8e6>
 800582e:	0d1b      	lsrs	r3, r3, #20
 8005830:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	4299      	cmp	r1, r3
 800583a:	d119      	bne.n	8005870 <_strtod_l+0x8f0>
 800583c:	4b90      	ldr	r3, [pc, #576]	; (8005a80 <_strtod_l+0xb00>)
 800583e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005840:	429a      	cmp	r2, r3
 8005842:	d102      	bne.n	800584a <_strtod_l+0x8ca>
 8005844:	3101      	adds	r1, #1
 8005846:	f43f adda 	beq.w	80053fe <_strtod_l+0x47e>
 800584a:	f04f 0800 	mov.w	r8, #0
 800584e:	4b8b      	ldr	r3, [pc, #556]	; (8005a7c <_strtod_l+0xafc>)
 8005850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005852:	401a      	ands	r2, r3
 8005854:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005858:	9b05      	ldr	r3, [sp, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d19a      	bne.n	8005794 <_strtod_l+0x814>
 800585e:	e5d9      	b.n	8005414 <_strtod_l+0x494>
 8005860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005864:	e7e8      	b.n	8005838 <_strtod_l+0x8b8>
 8005866:	4613      	mov	r3, r2
 8005868:	e7e6      	b.n	8005838 <_strtod_l+0x8b8>
 800586a:	ea53 0308 	orrs.w	r3, r3, r8
 800586e:	d081      	beq.n	8005774 <_strtod_l+0x7f4>
 8005870:	b1e5      	cbz	r5, 80058ac <_strtod_l+0x92c>
 8005872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005874:	421d      	tst	r5, r3
 8005876:	d0ef      	beq.n	8005858 <_strtod_l+0x8d8>
 8005878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800587a:	4640      	mov	r0, r8
 800587c:	4649      	mov	r1, r9
 800587e:	9a05      	ldr	r2, [sp, #20]
 8005880:	b1c3      	cbz	r3, 80058b4 <_strtod_l+0x934>
 8005882:	f7ff fb59 	bl	8004f38 <sulp>
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800588e:	f7fa fcd9 	bl	8000244 <__adddf3>
 8005892:	4680      	mov	r8, r0
 8005894:	4689      	mov	r9, r1
 8005896:	e7df      	b.n	8005858 <_strtod_l+0x8d8>
 8005898:	4013      	ands	r3, r2
 800589a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800589e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80058a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80058a6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80058aa:	e7d5      	b.n	8005858 <_strtod_l+0x8d8>
 80058ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058ae:	ea13 0f08 	tst.w	r3, r8
 80058b2:	e7e0      	b.n	8005876 <_strtod_l+0x8f6>
 80058b4:	f7ff fb40 	bl	8004f38 <sulp>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058c0:	f7fa fcbe 	bl	8000240 <__aeabi_dsub>
 80058c4:	2200      	movs	r2, #0
 80058c6:	2300      	movs	r3, #0
 80058c8:	4680      	mov	r8, r0
 80058ca:	4689      	mov	r9, r1
 80058cc:	f7fb f8d8 	bl	8000a80 <__aeabi_dcmpeq>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d0c1      	beq.n	8005858 <_strtod_l+0x8d8>
 80058d4:	e608      	b.n	80054e8 <_strtod_l+0x568>
 80058d6:	4658      	mov	r0, fp
 80058d8:	9904      	ldr	r1, [sp, #16]
 80058da:	f002 f83d 	bl	8007958 <__ratio>
 80058de:	2200      	movs	r2, #0
 80058e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058e4:	4606      	mov	r6, r0
 80058e6:	460f      	mov	r7, r1
 80058e8:	f7fb f8de 	bl	8000aa8 <__aeabi_dcmple>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d070      	beq.n	80059d2 <_strtod_l+0xa52>
 80058f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d042      	beq.n	800597c <_strtod_l+0x9fc>
 80058f6:	2600      	movs	r6, #0
 80058f8:	4f62      	ldr	r7, [pc, #392]	; (8005a84 <_strtod_l+0xb04>)
 80058fa:	4d62      	ldr	r5, [pc, #392]	; (8005a84 <_strtod_l+0xb04>)
 80058fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005902:	0d1b      	lsrs	r3, r3, #20
 8005904:	051b      	lsls	r3, r3, #20
 8005906:	930f      	str	r3, [sp, #60]	; 0x3c
 8005908:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800590a:	4b5f      	ldr	r3, [pc, #380]	; (8005a88 <_strtod_l+0xb08>)
 800590c:	429a      	cmp	r2, r3
 800590e:	f040 80c3 	bne.w	8005a98 <_strtod_l+0xb18>
 8005912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005914:	4640      	mov	r0, r8
 8005916:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800591a:	4649      	mov	r1, r9
 800591c:	f001 ff46 	bl	80077ac <__ulp>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4630      	mov	r0, r6
 8005926:	4639      	mov	r1, r7
 8005928:	f7fa fe42 	bl	80005b0 <__aeabi_dmul>
 800592c:	4642      	mov	r2, r8
 800592e:	464b      	mov	r3, r9
 8005930:	f7fa fc88 	bl	8000244 <__adddf3>
 8005934:	460b      	mov	r3, r1
 8005936:	4951      	ldr	r1, [pc, #324]	; (8005a7c <_strtod_l+0xafc>)
 8005938:	4a54      	ldr	r2, [pc, #336]	; (8005a8c <_strtod_l+0xb0c>)
 800593a:	4019      	ands	r1, r3
 800593c:	4291      	cmp	r1, r2
 800593e:	4680      	mov	r8, r0
 8005940:	d95d      	bls.n	80059fe <_strtod_l+0xa7e>
 8005942:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005944:	4b4e      	ldr	r3, [pc, #312]	; (8005a80 <_strtod_l+0xb00>)
 8005946:	429a      	cmp	r2, r3
 8005948:	d103      	bne.n	8005952 <_strtod_l+0x9d2>
 800594a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800594c:	3301      	adds	r3, #1
 800594e:	f43f ad56 	beq.w	80053fe <_strtod_l+0x47e>
 8005952:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005956:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005a80 <_strtod_l+0xb00>
 800595a:	4650      	mov	r0, sl
 800595c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800595e:	f001 fbf5 	bl	800714c <_Bfree>
 8005962:	4650      	mov	r0, sl
 8005964:	9906      	ldr	r1, [sp, #24]
 8005966:	f001 fbf1 	bl	800714c <_Bfree>
 800596a:	4650      	mov	r0, sl
 800596c:	9904      	ldr	r1, [sp, #16]
 800596e:	f001 fbed 	bl	800714c <_Bfree>
 8005972:	4659      	mov	r1, fp
 8005974:	4650      	mov	r0, sl
 8005976:	f001 fbe9 	bl	800714c <_Bfree>
 800597a:	e627      	b.n	80055cc <_strtod_l+0x64c>
 800597c:	f1b8 0f00 	cmp.w	r8, #0
 8005980:	d119      	bne.n	80059b6 <_strtod_l+0xa36>
 8005982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005988:	b9e3      	cbnz	r3, 80059c4 <_strtod_l+0xa44>
 800598a:	2200      	movs	r2, #0
 800598c:	4630      	mov	r0, r6
 800598e:	4639      	mov	r1, r7
 8005990:	4b3c      	ldr	r3, [pc, #240]	; (8005a84 <_strtod_l+0xb04>)
 8005992:	f7fb f87f 	bl	8000a94 <__aeabi_dcmplt>
 8005996:	b9c8      	cbnz	r0, 80059cc <_strtod_l+0xa4c>
 8005998:	2200      	movs	r2, #0
 800599a:	4630      	mov	r0, r6
 800599c:	4639      	mov	r1, r7
 800599e:	4b3c      	ldr	r3, [pc, #240]	; (8005a90 <_strtod_l+0xb10>)
 80059a0:	f7fa fe06 	bl	80005b0 <__aeabi_dmul>
 80059a4:	4604      	mov	r4, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80059ac:	9416      	str	r4, [sp, #88]	; 0x58
 80059ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80059b0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80059b4:	e7a2      	b.n	80058fc <_strtod_l+0x97c>
 80059b6:	f1b8 0f01 	cmp.w	r8, #1
 80059ba:	d103      	bne.n	80059c4 <_strtod_l+0xa44>
 80059bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f43f ad92 	beq.w	80054e8 <_strtod_l+0x568>
 80059c4:	2600      	movs	r6, #0
 80059c6:	2400      	movs	r4, #0
 80059c8:	4f32      	ldr	r7, [pc, #200]	; (8005a94 <_strtod_l+0xb14>)
 80059ca:	e796      	b.n	80058fa <_strtod_l+0x97a>
 80059cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80059ce:	4d30      	ldr	r5, [pc, #192]	; (8005a90 <_strtod_l+0xb10>)
 80059d0:	e7ea      	b.n	80059a8 <_strtod_l+0xa28>
 80059d2:	4b2f      	ldr	r3, [pc, #188]	; (8005a90 <_strtod_l+0xb10>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	4630      	mov	r0, r6
 80059d8:	4639      	mov	r1, r7
 80059da:	f7fa fde9 	bl	80005b0 <__aeabi_dmul>
 80059de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	b933      	cbnz	r3, 80059f4 <_strtod_l+0xa74>
 80059e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059ea:	9010      	str	r0, [sp, #64]	; 0x40
 80059ec:	9311      	str	r3, [sp, #68]	; 0x44
 80059ee:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80059f2:	e783      	b.n	80058fc <_strtod_l+0x97c>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80059fc:	e7f7      	b.n	80059ee <_strtod_l+0xa6e>
 80059fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005a02:	9b05      	ldr	r3, [sp, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1a8      	bne.n	800595a <_strtod_l+0x9da>
 8005a08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a0e:	0d1b      	lsrs	r3, r3, #20
 8005a10:	051b      	lsls	r3, r3, #20
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d1a1      	bne.n	800595a <_strtod_l+0x9da>
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fb fb95 	bl	8001148 <__aeabi_d2lz>
 8005a1e:	f7fa fd99 	bl	8000554 <__aeabi_l2d>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fa fc09 	bl	8000240 <__aeabi_dsub>
 8005a2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a34:	ea43 0308 	orr.w	r3, r3, r8
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	460d      	mov	r5, r1
 8005a3e:	d066      	beq.n	8005b0e <_strtod_l+0xb8e>
 8005a40:	a309      	add	r3, pc, #36	; (adr r3, 8005a68 <_strtod_l+0xae8>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	f7fb f825 	bl	8000a94 <__aeabi_dcmplt>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	f47f ace2 	bne.w	8005414 <_strtod_l+0x494>
 8005a50:	a307      	add	r3, pc, #28	; (adr r3, 8005a70 <_strtod_l+0xaf0>)
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	4620      	mov	r0, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	f7fb f839 	bl	8000ad0 <__aeabi_dcmpgt>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	f43f af7b 	beq.w	800595a <_strtod_l+0x9da>
 8005a64:	e4d6      	b.n	8005414 <_strtod_l+0x494>
 8005a66:	bf00      	nop
 8005a68:	94a03595 	.word	0x94a03595
 8005a6c:	3fdfffff 	.word	0x3fdfffff
 8005a70:	35afe535 	.word	0x35afe535
 8005a74:	3fe00000 	.word	0x3fe00000
 8005a78:	000fffff 	.word	0x000fffff
 8005a7c:	7ff00000 	.word	0x7ff00000
 8005a80:	7fefffff 	.word	0x7fefffff
 8005a84:	3ff00000 	.word	0x3ff00000
 8005a88:	7fe00000 	.word	0x7fe00000
 8005a8c:	7c9fffff 	.word	0x7c9fffff
 8005a90:	3fe00000 	.word	0x3fe00000
 8005a94:	bff00000 	.word	0xbff00000
 8005a98:	9b05      	ldr	r3, [sp, #20]
 8005a9a:	b313      	cbz	r3, 8005ae2 <_strtod_l+0xb62>
 8005a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005aa2:	d81e      	bhi.n	8005ae2 <_strtod_l+0xb62>
 8005aa4:	a326      	add	r3, pc, #152	; (adr r3, 8005b40 <_strtod_l+0xbc0>)
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	4620      	mov	r0, r4
 8005aac:	4629      	mov	r1, r5
 8005aae:	f7fa fffb 	bl	8000aa8 <__aeabi_dcmple>
 8005ab2:	b190      	cbz	r0, 8005ada <_strtod_l+0xb5a>
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f7fb f852 	bl	8000b60 <__aeabi_d2uiz>
 8005abc:	2801      	cmp	r0, #1
 8005abe:	bf38      	it	cc
 8005ac0:	2001      	movcc	r0, #1
 8005ac2:	f7fa fcfb 	bl	80004bc <__aeabi_ui2d>
 8005ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac8:	4604      	mov	r4, r0
 8005aca:	460d      	mov	r5, r1
 8005acc:	b9d3      	cbnz	r3, 8005b04 <_strtod_l+0xb84>
 8005ace:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ad2:	9012      	str	r0, [sp, #72]	; 0x48
 8005ad4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ad6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005ada:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005adc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005ae0:	1a9f      	subs	r7, r3, r2
 8005ae2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ae6:	f001 fe61 	bl	80077ac <__ulp>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4630      	mov	r0, r6
 8005af0:	4639      	mov	r1, r7
 8005af2:	f7fa fd5d 	bl	80005b0 <__aeabi_dmul>
 8005af6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005afa:	f7fa fba3 	bl	8000244 <__adddf3>
 8005afe:	4680      	mov	r8, r0
 8005b00:	4689      	mov	r9, r1
 8005b02:	e77e      	b.n	8005a02 <_strtod_l+0xa82>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005b0c:	e7e3      	b.n	8005ad6 <_strtod_l+0xb56>
 8005b0e:	a30e      	add	r3, pc, #56	; (adr r3, 8005b48 <_strtod_l+0xbc8>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa ffbe 	bl	8000a94 <__aeabi_dcmplt>
 8005b18:	e7a1      	b.n	8005a5e <_strtod_l+0xade>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	f7ff ba71 	b.w	800500a <_strtod_l+0x8a>
 8005b28:	2a65      	cmp	r2, #101	; 0x65
 8005b2a:	f43f ab63 	beq.w	80051f4 <_strtod_l+0x274>
 8005b2e:	2a45      	cmp	r2, #69	; 0x45
 8005b30:	f43f ab60 	beq.w	80051f4 <_strtod_l+0x274>
 8005b34:	2301      	movs	r3, #1
 8005b36:	f7ff bb95 	b.w	8005264 <_strtod_l+0x2e4>
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w
 8005b40:	ffc00000 	.word	0xffc00000
 8005b44:	41dfffff 	.word	0x41dfffff
 8005b48:	94a03595 	.word	0x94a03595
 8005b4c:	3fcfffff 	.word	0x3fcfffff

08005b50 <_strtod_r>:
 8005b50:	4b01      	ldr	r3, [pc, #4]	; (8005b58 <_strtod_r+0x8>)
 8005b52:	f7ff ba15 	b.w	8004f80 <_strtod_l>
 8005b56:	bf00      	nop
 8005b58:	2000009c 	.word	0x2000009c

08005b5c <_strtol_l.constprop.0>:
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b62:	4680      	mov	r8, r0
 8005b64:	d001      	beq.n	8005b6a <_strtol_l.constprop.0+0xe>
 8005b66:	2b24      	cmp	r3, #36	; 0x24
 8005b68:	d906      	bls.n	8005b78 <_strtol_l.constprop.0+0x1c>
 8005b6a:	f7fe faed 	bl	8004148 <__errno>
 8005b6e:	2316      	movs	r3, #22
 8005b70:	6003      	str	r3, [r0, #0]
 8005b72:	2000      	movs	r0, #0
 8005b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b78:	460d      	mov	r5, r1
 8005b7a:	4f35      	ldr	r7, [pc, #212]	; (8005c50 <_strtol_l.constprop.0+0xf4>)
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b82:	5de6      	ldrb	r6, [r4, r7]
 8005b84:	f016 0608 	ands.w	r6, r6, #8
 8005b88:	d1f8      	bne.n	8005b7c <_strtol_l.constprop.0+0x20>
 8005b8a:	2c2d      	cmp	r4, #45	; 0x2d
 8005b8c:	d12f      	bne.n	8005bee <_strtol_l.constprop.0+0x92>
 8005b8e:	2601      	movs	r6, #1
 8005b90:	782c      	ldrb	r4, [r5, #0]
 8005b92:	1c85      	adds	r5, r0, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d057      	beq.n	8005c48 <_strtol_l.constprop.0+0xec>
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d109      	bne.n	8005bb0 <_strtol_l.constprop.0+0x54>
 8005b9c:	2c30      	cmp	r4, #48	; 0x30
 8005b9e:	d107      	bne.n	8005bb0 <_strtol_l.constprop.0+0x54>
 8005ba0:	7828      	ldrb	r0, [r5, #0]
 8005ba2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005ba6:	2858      	cmp	r0, #88	; 0x58
 8005ba8:	d149      	bne.n	8005c3e <_strtol_l.constprop.0+0xe2>
 8005baa:	2310      	movs	r3, #16
 8005bac:	786c      	ldrb	r4, [r5, #1]
 8005bae:	3502      	adds	r5, #2
 8005bb0:	2700      	movs	r7, #0
 8005bb2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005bb6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005bba:	fbbe f9f3 	udiv	r9, lr, r3
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	fb03 ea19 	mls	sl, r3, r9, lr
 8005bc4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005bc8:	f1bc 0f09 	cmp.w	ip, #9
 8005bcc:	d814      	bhi.n	8005bf8 <_strtol_l.constprop.0+0x9c>
 8005bce:	4664      	mov	r4, ip
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	dd22      	ble.n	8005c1a <_strtol_l.constprop.0+0xbe>
 8005bd4:	2f00      	cmp	r7, #0
 8005bd6:	db1d      	blt.n	8005c14 <_strtol_l.constprop.0+0xb8>
 8005bd8:	4581      	cmp	r9, r0
 8005bda:	d31b      	bcc.n	8005c14 <_strtol_l.constprop.0+0xb8>
 8005bdc:	d101      	bne.n	8005be2 <_strtol_l.constprop.0+0x86>
 8005bde:	45a2      	cmp	sl, r4
 8005be0:	db18      	blt.n	8005c14 <_strtol_l.constprop.0+0xb8>
 8005be2:	2701      	movs	r7, #1
 8005be4:	fb00 4003 	mla	r0, r0, r3, r4
 8005be8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bec:	e7ea      	b.n	8005bc4 <_strtol_l.constprop.0+0x68>
 8005bee:	2c2b      	cmp	r4, #43	; 0x2b
 8005bf0:	bf04      	itt	eq
 8005bf2:	782c      	ldrbeq	r4, [r5, #0]
 8005bf4:	1c85      	addeq	r5, r0, #2
 8005bf6:	e7cd      	b.n	8005b94 <_strtol_l.constprop.0+0x38>
 8005bf8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005bfc:	f1bc 0f19 	cmp.w	ip, #25
 8005c00:	d801      	bhi.n	8005c06 <_strtol_l.constprop.0+0xaa>
 8005c02:	3c37      	subs	r4, #55	; 0x37
 8005c04:	e7e4      	b.n	8005bd0 <_strtol_l.constprop.0+0x74>
 8005c06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005c0a:	f1bc 0f19 	cmp.w	ip, #25
 8005c0e:	d804      	bhi.n	8005c1a <_strtol_l.constprop.0+0xbe>
 8005c10:	3c57      	subs	r4, #87	; 0x57
 8005c12:	e7dd      	b.n	8005bd0 <_strtol_l.constprop.0+0x74>
 8005c14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c18:	e7e6      	b.n	8005be8 <_strtol_l.constprop.0+0x8c>
 8005c1a:	2f00      	cmp	r7, #0
 8005c1c:	da07      	bge.n	8005c2e <_strtol_l.constprop.0+0xd2>
 8005c1e:	2322      	movs	r3, #34	; 0x22
 8005c20:	4670      	mov	r0, lr
 8005c22:	f8c8 3000 	str.w	r3, [r8]
 8005c26:	2a00      	cmp	r2, #0
 8005c28:	d0a4      	beq.n	8005b74 <_strtol_l.constprop.0+0x18>
 8005c2a:	1e69      	subs	r1, r5, #1
 8005c2c:	e005      	b.n	8005c3a <_strtol_l.constprop.0+0xde>
 8005c2e:	b106      	cbz	r6, 8005c32 <_strtol_l.constprop.0+0xd6>
 8005c30:	4240      	negs	r0, r0
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d09e      	beq.n	8005b74 <_strtol_l.constprop.0+0x18>
 8005c36:	2f00      	cmp	r7, #0
 8005c38:	d1f7      	bne.n	8005c2a <_strtol_l.constprop.0+0xce>
 8005c3a:	6011      	str	r1, [r2, #0]
 8005c3c:	e79a      	b.n	8005b74 <_strtol_l.constprop.0+0x18>
 8005c3e:	2430      	movs	r4, #48	; 0x30
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1b5      	bne.n	8005bb0 <_strtol_l.constprop.0+0x54>
 8005c44:	2308      	movs	r3, #8
 8005c46:	e7b3      	b.n	8005bb0 <_strtol_l.constprop.0+0x54>
 8005c48:	2c30      	cmp	r4, #48	; 0x30
 8005c4a:	d0a9      	beq.n	8005ba0 <_strtol_l.constprop.0+0x44>
 8005c4c:	230a      	movs	r3, #10
 8005c4e:	e7af      	b.n	8005bb0 <_strtol_l.constprop.0+0x54>
 8005c50:	08010d01 	.word	0x08010d01

08005c54 <_strtol_r>:
 8005c54:	f7ff bf82 	b.w	8005b5c <_strtol_l.constprop.0>

08005c58 <_vsiprintf_r>:
 8005c58:	b500      	push	{lr}
 8005c5a:	b09b      	sub	sp, #108	; 0x6c
 8005c5c:	9100      	str	r1, [sp, #0]
 8005c5e:	9104      	str	r1, [sp, #16]
 8005c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c64:	9105      	str	r1, [sp, #20]
 8005c66:	9102      	str	r1, [sp, #8]
 8005c68:	4905      	ldr	r1, [pc, #20]	; (8005c80 <_vsiprintf_r+0x28>)
 8005c6a:	9103      	str	r1, [sp, #12]
 8005c6c:	4669      	mov	r1, sp
 8005c6e:	f002 f831 	bl	8007cd4 <_svfiprintf_r>
 8005c72:	2200      	movs	r2, #0
 8005c74:	9b00      	ldr	r3, [sp, #0]
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	b01b      	add	sp, #108	; 0x6c
 8005c7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c7e:	bf00      	nop
 8005c80:	ffff0208 	.word	0xffff0208

08005c84 <vsiprintf>:
 8005c84:	4613      	mov	r3, r2
 8005c86:	460a      	mov	r2, r1
 8005c88:	4601      	mov	r1, r0
 8005c8a:	4802      	ldr	r0, [pc, #8]	; (8005c94 <vsiprintf+0x10>)
 8005c8c:	6800      	ldr	r0, [r0, #0]
 8005c8e:	f7ff bfe3 	b.w	8005c58 <_vsiprintf_r>
 8005c92:	bf00      	nop
 8005c94:	20000034 	.word	0x20000034

08005c98 <quorem>:
 8005c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9c:	6903      	ldr	r3, [r0, #16]
 8005c9e:	690c      	ldr	r4, [r1, #16]
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	42a3      	cmp	r3, r4
 8005ca4:	f2c0 8082 	blt.w	8005dac <quorem+0x114>
 8005ca8:	3c01      	subs	r4, #1
 8005caa:	f100 0514 	add.w	r5, r0, #20
 8005cae:	f101 0814 	add.w	r8, r1, #20
 8005cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cd0:	d331      	bcc.n	8005d36 <quorem+0x9e>
 8005cd2:	f04f 0e00 	mov.w	lr, #0
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	46ac      	mov	ip, r5
 8005cda:	46f2      	mov	sl, lr
 8005cdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ce0:	b293      	uxth	r3, r2
 8005ce2:	fb06 e303 	mla	r3, r6, r3, lr
 8005ce6:	0c12      	lsrs	r2, r2, #16
 8005ce8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	fb06 e202 	mla	r2, r6, r2, lr
 8005cf2:	ebaa 0303 	sub.w	r3, sl, r3
 8005cf6:	f8dc a000 	ldr.w	sl, [ip]
 8005cfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cfe:	fa1f fa8a 	uxth.w	sl, sl
 8005d02:	4453      	add	r3, sl
 8005d04:	f8dc a000 	ldr.w	sl, [ip]
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d18:	4581      	cmp	r9, r0
 8005d1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d1e:	f84c 3b04 	str.w	r3, [ip], #4
 8005d22:	d2db      	bcs.n	8005cdc <quorem+0x44>
 8005d24:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d28:	b92b      	cbnz	r3, 8005d36 <quorem+0x9e>
 8005d2a:	9b01      	ldr	r3, [sp, #4]
 8005d2c:	3b04      	subs	r3, #4
 8005d2e:	429d      	cmp	r5, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	d32f      	bcc.n	8005d94 <quorem+0xfc>
 8005d34:	613c      	str	r4, [r7, #16]
 8005d36:	4638      	mov	r0, r7
 8005d38:	f001 fc90 	bl	800765c <__mcmp>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	db25      	blt.n	8005d8c <quorem+0xf4>
 8005d40:	4628      	mov	r0, r5
 8005d42:	f04f 0c00 	mov.w	ip, #0
 8005d46:	3601      	adds	r6, #1
 8005d48:	f858 1b04 	ldr.w	r1, [r8], #4
 8005d4c:	f8d0 e000 	ldr.w	lr, [r0]
 8005d50:	b28b      	uxth	r3, r1
 8005d52:	ebac 0303 	sub.w	r3, ip, r3
 8005d56:	fa1f f28e 	uxth.w	r2, lr
 8005d5a:	4413      	add	r3, r2
 8005d5c:	0c0a      	lsrs	r2, r1, #16
 8005d5e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d6c:	45c1      	cmp	r9, r8
 8005d6e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d72:	f840 3b04 	str.w	r3, [r0], #4
 8005d76:	d2e7      	bcs.n	8005d48 <quorem+0xb0>
 8005d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d80:	b922      	cbnz	r2, 8005d8c <quorem+0xf4>
 8005d82:	3b04      	subs	r3, #4
 8005d84:	429d      	cmp	r5, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	d30a      	bcc.n	8005da0 <quorem+0x108>
 8005d8a:	613c      	str	r4, [r7, #16]
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	b003      	add	sp, #12
 8005d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	3b04      	subs	r3, #4
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	d1cb      	bne.n	8005d34 <quorem+0x9c>
 8005d9c:	3c01      	subs	r4, #1
 8005d9e:	e7c6      	b.n	8005d2e <quorem+0x96>
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	3b04      	subs	r3, #4
 8005da4:	2a00      	cmp	r2, #0
 8005da6:	d1f0      	bne.n	8005d8a <quorem+0xf2>
 8005da8:	3c01      	subs	r4, #1
 8005daa:	e7eb      	b.n	8005d84 <quorem+0xec>
 8005dac:	2000      	movs	r0, #0
 8005dae:	e7ee      	b.n	8005d8e <quorem+0xf6>

08005db0 <_dtoa_r>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	4616      	mov	r6, r2
 8005db6:	461f      	mov	r7, r3
 8005db8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005dba:	b099      	sub	sp, #100	; 0x64
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005dc2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005dc6:	b974      	cbnz	r4, 8005de6 <_dtoa_r+0x36>
 8005dc8:	2010      	movs	r0, #16
 8005dca:	f001 f949 	bl	8007060 <malloc>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	6268      	str	r0, [r5, #36]	; 0x24
 8005dd2:	b920      	cbnz	r0, 8005dde <_dtoa_r+0x2e>
 8005dd4:	21ea      	movs	r1, #234	; 0xea
 8005dd6:	4ba8      	ldr	r3, [pc, #672]	; (8006078 <_dtoa_r+0x2c8>)
 8005dd8:	48a8      	ldr	r0, [pc, #672]	; (800607c <_dtoa_r+0x2cc>)
 8005dda:	f002 f8b3 	bl	8007f44 <__assert_func>
 8005dde:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005de2:	6004      	str	r4, [r0, #0]
 8005de4:	60c4      	str	r4, [r0, #12]
 8005de6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	b151      	cbz	r1, 8005e02 <_dtoa_r+0x52>
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	2301      	movs	r3, #1
 8005df0:	4093      	lsls	r3, r2
 8005df2:	604a      	str	r2, [r1, #4]
 8005df4:	608b      	str	r3, [r1, #8]
 8005df6:	4628      	mov	r0, r5
 8005df8:	f001 f9a8 	bl	800714c <_Bfree>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	1e3b      	subs	r3, r7, #0
 8005e04:	bfaf      	iteee	ge
 8005e06:	2300      	movge	r3, #0
 8005e08:	2201      	movlt	r2, #1
 8005e0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e0e:	9305      	strlt	r3, [sp, #20]
 8005e10:	bfa8      	it	ge
 8005e12:	f8c8 3000 	strge.w	r3, [r8]
 8005e16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005e1a:	4b99      	ldr	r3, [pc, #612]	; (8006080 <_dtoa_r+0x2d0>)
 8005e1c:	bfb8      	it	lt
 8005e1e:	f8c8 2000 	strlt.w	r2, [r8]
 8005e22:	ea33 0309 	bics.w	r3, r3, r9
 8005e26:	d119      	bne.n	8005e5c <_dtoa_r+0xac>
 8005e28:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e34:	4333      	orrs	r3, r6
 8005e36:	f000 857f 	beq.w	8006938 <_dtoa_r+0xb88>
 8005e3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e3c:	b953      	cbnz	r3, 8005e54 <_dtoa_r+0xa4>
 8005e3e:	4b91      	ldr	r3, [pc, #580]	; (8006084 <_dtoa_r+0x2d4>)
 8005e40:	e022      	b.n	8005e88 <_dtoa_r+0xd8>
 8005e42:	4b91      	ldr	r3, [pc, #580]	; (8006088 <_dtoa_r+0x2d8>)
 8005e44:	9303      	str	r3, [sp, #12]
 8005e46:	3308      	adds	r3, #8
 8005e48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	9803      	ldr	r0, [sp, #12]
 8005e4e:	b019      	add	sp, #100	; 0x64
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	4b8b      	ldr	r3, [pc, #556]	; (8006084 <_dtoa_r+0x2d4>)
 8005e56:	9303      	str	r3, [sp, #12]
 8005e58:	3303      	adds	r3, #3
 8005e5a:	e7f5      	b.n	8005e48 <_dtoa_r+0x98>
 8005e5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005e64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f7fa fe08 	bl	8000a80 <__aeabi_dcmpeq>
 8005e70:	4680      	mov	r8, r0
 8005e72:	b158      	cbz	r0, 8005e8c <_dtoa_r+0xdc>
 8005e74:	2301      	movs	r3, #1
 8005e76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8558 	beq.w	8006932 <_dtoa_r+0xb82>
 8005e82:	4882      	ldr	r0, [pc, #520]	; (800608c <_dtoa_r+0x2dc>)
 8005e84:	6018      	str	r0, [r3, #0]
 8005e86:	1e43      	subs	r3, r0, #1
 8005e88:	9303      	str	r3, [sp, #12]
 8005e8a:	e7df      	b.n	8005e4c <_dtoa_r+0x9c>
 8005e8c:	ab16      	add	r3, sp, #88	; 0x58
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	ab17      	add	r3, sp, #92	; 0x5c
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	4628      	mov	r0, r5
 8005e96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e9a:	f001 fd01 	bl	80078a0 <__d2b>
 8005e9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005ea2:	4683      	mov	fp, r0
 8005ea4:	2c00      	cmp	r4, #0
 8005ea6:	d07f      	beq.n	8005fa8 <_dtoa_r+0x1f8>
 8005ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005eb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eb6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005eba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005ebe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4b72      	ldr	r3, [pc, #456]	; (8006090 <_dtoa_r+0x2e0>)
 8005ec6:	f7fa f9bb 	bl	8000240 <__aeabi_dsub>
 8005eca:	a365      	add	r3, pc, #404	; (adr r3, 8006060 <_dtoa_r+0x2b0>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa fb6e 	bl	80005b0 <__aeabi_dmul>
 8005ed4:	a364      	add	r3, pc, #400	; (adr r3, 8006068 <_dtoa_r+0x2b8>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa f9b3 	bl	8000244 <__adddf3>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	460f      	mov	r7, r1
 8005ee4:	f7fa fafa 	bl	80004dc <__aeabi_i2d>
 8005ee8:	a361      	add	r3, pc, #388	; (adr r3, 8006070 <_dtoa_r+0x2c0>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fb5f 	bl	80005b0 <__aeabi_dmul>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	4639      	mov	r1, r7
 8005efa:	f7fa f9a3 	bl	8000244 <__adddf3>
 8005efe:	4606      	mov	r6, r0
 8005f00:	460f      	mov	r7, r1
 8005f02:	f7fa fe05 	bl	8000b10 <__aeabi_d2iz>
 8005f06:	2200      	movs	r2, #0
 8005f08:	4682      	mov	sl, r0
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa fdc0 	bl	8000a94 <__aeabi_dcmplt>
 8005f14:	b148      	cbz	r0, 8005f2a <_dtoa_r+0x17a>
 8005f16:	4650      	mov	r0, sl
 8005f18:	f7fa fae0 	bl	80004dc <__aeabi_i2d>
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	f7fa fdae 	bl	8000a80 <__aeabi_dcmpeq>
 8005f24:	b908      	cbnz	r0, 8005f2a <_dtoa_r+0x17a>
 8005f26:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f2a:	f1ba 0f16 	cmp.w	sl, #22
 8005f2e:	d858      	bhi.n	8005fe2 <_dtoa_r+0x232>
 8005f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f34:	4b57      	ldr	r3, [pc, #348]	; (8006094 <_dtoa_r+0x2e4>)
 8005f36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f7fa fda9 	bl	8000a94 <__aeabi_dcmplt>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d04f      	beq.n	8005fe6 <_dtoa_r+0x236>
 8005f46:	2300      	movs	r3, #0
 8005f48:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f50:	1b1c      	subs	r4, r3, r4
 8005f52:	1e63      	subs	r3, r4, #1
 8005f54:	9309      	str	r3, [sp, #36]	; 0x24
 8005f56:	bf49      	itett	mi
 8005f58:	f1c4 0301 	rsbmi	r3, r4, #1
 8005f5c:	2300      	movpl	r3, #0
 8005f5e:	9306      	strmi	r3, [sp, #24]
 8005f60:	2300      	movmi	r3, #0
 8005f62:	bf54      	ite	pl
 8005f64:	9306      	strpl	r3, [sp, #24]
 8005f66:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005f68:	f1ba 0f00 	cmp.w	sl, #0
 8005f6c:	db3d      	blt.n	8005fea <_dtoa_r+0x23a>
 8005f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f70:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005f74:	4453      	add	r3, sl
 8005f76:	9309      	str	r3, [sp, #36]	; 0x24
 8005f78:	2300      	movs	r3, #0
 8005f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	f200 808c 	bhi.w	800609c <_dtoa_r+0x2ec>
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	bfc4      	itt	gt
 8005f88:	3b04      	subgt	r3, #4
 8005f8a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005f8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f8e:	bfc8      	it	gt
 8005f90:	2400      	movgt	r4, #0
 8005f92:	f1a3 0302 	sub.w	r3, r3, #2
 8005f96:	bfd8      	it	le
 8005f98:	2401      	movle	r4, #1
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	f200 808a 	bhi.w	80060b4 <_dtoa_r+0x304>
 8005fa0:	e8df f003 	tbb	[pc, r3]
 8005fa4:	5b4d4f2d 	.word	0x5b4d4f2d
 8005fa8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005fac:	441c      	add	r4, r3
 8005fae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	bfc3      	ittte	gt
 8005fb6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005fbe:	fa09 f303 	lslgt.w	r3, r9, r3
 8005fc2:	f1c3 0320 	rsble	r3, r3, #32
 8005fc6:	bfc6      	itte	gt
 8005fc8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fcc:	4318      	orrgt	r0, r3
 8005fce:	fa06 f003 	lslle.w	r0, r6, r3
 8005fd2:	f7fa fa73 	bl	80004bc <__aeabi_ui2d>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005fdc:	3c01      	subs	r4, #1
 8005fde:	9313      	str	r3, [sp, #76]	; 0x4c
 8005fe0:	e76f      	b.n	8005ec2 <_dtoa_r+0x112>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e7b2      	b.n	8005f4c <_dtoa_r+0x19c>
 8005fe6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005fe8:	e7b1      	b.n	8005f4e <_dtoa_r+0x19e>
 8005fea:	9b06      	ldr	r3, [sp, #24]
 8005fec:	eba3 030a 	sub.w	r3, r3, sl
 8005ff0:	9306      	str	r3, [sp, #24]
 8005ff2:	f1ca 0300 	rsb	r3, sl, #0
 8005ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	930e      	str	r3, [sp, #56]	; 0x38
 8005ffc:	e7be      	b.n	8005f7c <_dtoa_r+0x1cc>
 8005ffe:	2300      	movs	r3, #0
 8006000:	930b      	str	r3, [sp, #44]	; 0x2c
 8006002:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006004:	2b00      	cmp	r3, #0
 8006006:	dc58      	bgt.n	80060ba <_dtoa_r+0x30a>
 8006008:	f04f 0901 	mov.w	r9, #1
 800600c:	464b      	mov	r3, r9
 800600e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006012:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006016:	2200      	movs	r2, #0
 8006018:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800601a:	6042      	str	r2, [r0, #4]
 800601c:	2204      	movs	r2, #4
 800601e:	f102 0614 	add.w	r6, r2, #20
 8006022:	429e      	cmp	r6, r3
 8006024:	6841      	ldr	r1, [r0, #4]
 8006026:	d94e      	bls.n	80060c6 <_dtoa_r+0x316>
 8006028:	4628      	mov	r0, r5
 800602a:	f001 f84f 	bl	80070cc <_Balloc>
 800602e:	9003      	str	r0, [sp, #12]
 8006030:	2800      	cmp	r0, #0
 8006032:	d14c      	bne.n	80060ce <_dtoa_r+0x31e>
 8006034:	4602      	mov	r2, r0
 8006036:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800603a:	4b17      	ldr	r3, [pc, #92]	; (8006098 <_dtoa_r+0x2e8>)
 800603c:	e6cc      	b.n	8005dd8 <_dtoa_r+0x28>
 800603e:	2301      	movs	r3, #1
 8006040:	e7de      	b.n	8006000 <_dtoa_r+0x250>
 8006042:	2300      	movs	r3, #0
 8006044:	930b      	str	r3, [sp, #44]	; 0x2c
 8006046:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006048:	eb0a 0903 	add.w	r9, sl, r3
 800604c:	f109 0301 	add.w	r3, r9, #1
 8006050:	2b01      	cmp	r3, #1
 8006052:	9308      	str	r3, [sp, #32]
 8006054:	bfb8      	it	lt
 8006056:	2301      	movlt	r3, #1
 8006058:	e7dd      	b.n	8006016 <_dtoa_r+0x266>
 800605a:	2301      	movs	r3, #1
 800605c:	e7f2      	b.n	8006044 <_dtoa_r+0x294>
 800605e:	bf00      	nop
 8006060:	636f4361 	.word	0x636f4361
 8006064:	3fd287a7 	.word	0x3fd287a7
 8006068:	8b60c8b3 	.word	0x8b60c8b3
 800606c:	3fc68a28 	.word	0x3fc68a28
 8006070:	509f79fb 	.word	0x509f79fb
 8006074:	3fd34413 	.word	0x3fd34413
 8006078:	08010e0e 	.word	0x08010e0e
 800607c:	08010e25 	.word	0x08010e25
 8006080:	7ff00000 	.word	0x7ff00000
 8006084:	08010e0a 	.word	0x08010e0a
 8006088:	08010e01 	.word	0x08010e01
 800608c:	08010c81 	.word	0x08010c81
 8006090:	3ff80000 	.word	0x3ff80000
 8006094:	08010f90 	.word	0x08010f90
 8006098:	08010e80 	.word	0x08010e80
 800609c:	2401      	movs	r4, #1
 800609e:	2300      	movs	r3, #0
 80060a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80060a2:	9322      	str	r3, [sp, #136]	; 0x88
 80060a4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80060a8:	2200      	movs	r2, #0
 80060aa:	2312      	movs	r3, #18
 80060ac:	f8cd 9020 	str.w	r9, [sp, #32]
 80060b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80060b2:	e7b0      	b.n	8006016 <_dtoa_r+0x266>
 80060b4:	2301      	movs	r3, #1
 80060b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b8:	e7f4      	b.n	80060a4 <_dtoa_r+0x2f4>
 80060ba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80060be:	464b      	mov	r3, r9
 80060c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80060c4:	e7a7      	b.n	8006016 <_dtoa_r+0x266>
 80060c6:	3101      	adds	r1, #1
 80060c8:	6041      	str	r1, [r0, #4]
 80060ca:	0052      	lsls	r2, r2, #1
 80060cc:	e7a7      	b.n	800601e <_dtoa_r+0x26e>
 80060ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060d0:	9a03      	ldr	r2, [sp, #12]
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	9b08      	ldr	r3, [sp, #32]
 80060d6:	2b0e      	cmp	r3, #14
 80060d8:	f200 80a8 	bhi.w	800622c <_dtoa_r+0x47c>
 80060dc:	2c00      	cmp	r4, #0
 80060de:	f000 80a5 	beq.w	800622c <_dtoa_r+0x47c>
 80060e2:	f1ba 0f00 	cmp.w	sl, #0
 80060e6:	dd34      	ble.n	8006152 <_dtoa_r+0x3a2>
 80060e8:	4a9a      	ldr	r2, [pc, #616]	; (8006354 <_dtoa_r+0x5a4>)
 80060ea:	f00a 030f 	and.w	r3, sl, #15
 80060ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060f2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80060f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060fe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006102:	d016      	beq.n	8006132 <_dtoa_r+0x382>
 8006104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006108:	4b93      	ldr	r3, [pc, #588]	; (8006358 <_dtoa_r+0x5a8>)
 800610a:	2703      	movs	r7, #3
 800610c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006110:	f7fa fb78 	bl	8000804 <__aeabi_ddiv>
 8006114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006118:	f004 040f 	and.w	r4, r4, #15
 800611c:	4e8e      	ldr	r6, [pc, #568]	; (8006358 <_dtoa_r+0x5a8>)
 800611e:	b954      	cbnz	r4, 8006136 <_dtoa_r+0x386>
 8006120:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006128:	f7fa fb6c 	bl	8000804 <__aeabi_ddiv>
 800612c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006130:	e029      	b.n	8006186 <_dtoa_r+0x3d6>
 8006132:	2702      	movs	r7, #2
 8006134:	e7f2      	b.n	800611c <_dtoa_r+0x36c>
 8006136:	07e1      	lsls	r1, r4, #31
 8006138:	d508      	bpl.n	800614c <_dtoa_r+0x39c>
 800613a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800613e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006142:	f7fa fa35 	bl	80005b0 <__aeabi_dmul>
 8006146:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800614a:	3701      	adds	r7, #1
 800614c:	1064      	asrs	r4, r4, #1
 800614e:	3608      	adds	r6, #8
 8006150:	e7e5      	b.n	800611e <_dtoa_r+0x36e>
 8006152:	f000 80a5 	beq.w	80062a0 <_dtoa_r+0x4f0>
 8006156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800615a:	f1ca 0400 	rsb	r4, sl, #0
 800615e:	4b7d      	ldr	r3, [pc, #500]	; (8006354 <_dtoa_r+0x5a4>)
 8006160:	f004 020f 	and.w	r2, r4, #15
 8006164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f7fa fa20 	bl	80005b0 <__aeabi_dmul>
 8006170:	2702      	movs	r7, #2
 8006172:	2300      	movs	r3, #0
 8006174:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006178:	4e77      	ldr	r6, [pc, #476]	; (8006358 <_dtoa_r+0x5a8>)
 800617a:	1124      	asrs	r4, r4, #4
 800617c:	2c00      	cmp	r4, #0
 800617e:	f040 8084 	bne.w	800628a <_dtoa_r+0x4da>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1d2      	bne.n	800612c <_dtoa_r+0x37c>
 8006186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 808b 	beq.w	80062a4 <_dtoa_r+0x4f4>
 800618e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006192:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006196:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800619a:	2200      	movs	r2, #0
 800619c:	4b6f      	ldr	r3, [pc, #444]	; (800635c <_dtoa_r+0x5ac>)
 800619e:	f7fa fc79 	bl	8000a94 <__aeabi_dcmplt>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d07e      	beq.n	80062a4 <_dtoa_r+0x4f4>
 80061a6:	9b08      	ldr	r3, [sp, #32]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d07b      	beq.n	80062a4 <_dtoa_r+0x4f4>
 80061ac:	f1b9 0f00 	cmp.w	r9, #0
 80061b0:	dd38      	ble.n	8006224 <_dtoa_r+0x474>
 80061b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061b6:	2200      	movs	r2, #0
 80061b8:	4b69      	ldr	r3, [pc, #420]	; (8006360 <_dtoa_r+0x5b0>)
 80061ba:	f7fa f9f9 	bl	80005b0 <__aeabi_dmul>
 80061be:	464c      	mov	r4, r9
 80061c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061c4:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80061c8:	3701      	adds	r7, #1
 80061ca:	4638      	mov	r0, r7
 80061cc:	f7fa f986 	bl	80004dc <__aeabi_i2d>
 80061d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061d4:	f7fa f9ec 	bl	80005b0 <__aeabi_dmul>
 80061d8:	2200      	movs	r2, #0
 80061da:	4b62      	ldr	r3, [pc, #392]	; (8006364 <_dtoa_r+0x5b4>)
 80061dc:	f7fa f832 	bl	8000244 <__adddf3>
 80061e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80061e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061e8:	9611      	str	r6, [sp, #68]	; 0x44
 80061ea:	2c00      	cmp	r4, #0
 80061ec:	d15d      	bne.n	80062aa <_dtoa_r+0x4fa>
 80061ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f2:	2200      	movs	r2, #0
 80061f4:	4b5c      	ldr	r3, [pc, #368]	; (8006368 <_dtoa_r+0x5b8>)
 80061f6:	f7fa f823 	bl	8000240 <__aeabi_dsub>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006202:	4633      	mov	r3, r6
 8006204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006206:	f7fa fc63 	bl	8000ad0 <__aeabi_dcmpgt>
 800620a:	2800      	cmp	r0, #0
 800620c:	f040 829c 	bne.w	8006748 <_dtoa_r+0x998>
 8006210:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006214:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006216:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800621a:	f7fa fc3b 	bl	8000a94 <__aeabi_dcmplt>
 800621e:	2800      	cmp	r0, #0
 8006220:	f040 8290 	bne.w	8006744 <_dtoa_r+0x994>
 8006224:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006228:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800622c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800622e:	2b00      	cmp	r3, #0
 8006230:	f2c0 8152 	blt.w	80064d8 <_dtoa_r+0x728>
 8006234:	f1ba 0f0e 	cmp.w	sl, #14
 8006238:	f300 814e 	bgt.w	80064d8 <_dtoa_r+0x728>
 800623c:	4b45      	ldr	r3, [pc, #276]	; (8006354 <_dtoa_r+0x5a4>)
 800623e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006242:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006246:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800624a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800624c:	2b00      	cmp	r3, #0
 800624e:	f280 80db 	bge.w	8006408 <_dtoa_r+0x658>
 8006252:	9b08      	ldr	r3, [sp, #32]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f300 80d7 	bgt.w	8006408 <_dtoa_r+0x658>
 800625a:	f040 8272 	bne.w	8006742 <_dtoa_r+0x992>
 800625e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006262:	2200      	movs	r2, #0
 8006264:	4b40      	ldr	r3, [pc, #256]	; (8006368 <_dtoa_r+0x5b8>)
 8006266:	f7fa f9a3 	bl	80005b0 <__aeabi_dmul>
 800626a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800626e:	f7fa fc25 	bl	8000abc <__aeabi_dcmpge>
 8006272:	9c08      	ldr	r4, [sp, #32]
 8006274:	4626      	mov	r6, r4
 8006276:	2800      	cmp	r0, #0
 8006278:	f040 8248 	bne.w	800670c <_dtoa_r+0x95c>
 800627c:	2331      	movs	r3, #49	; 0x31
 800627e:	9f03      	ldr	r7, [sp, #12]
 8006280:	f10a 0a01 	add.w	sl, sl, #1
 8006284:	f807 3b01 	strb.w	r3, [r7], #1
 8006288:	e244      	b.n	8006714 <_dtoa_r+0x964>
 800628a:	07e2      	lsls	r2, r4, #31
 800628c:	d505      	bpl.n	800629a <_dtoa_r+0x4ea>
 800628e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006292:	f7fa f98d 	bl	80005b0 <__aeabi_dmul>
 8006296:	2301      	movs	r3, #1
 8006298:	3701      	adds	r7, #1
 800629a:	1064      	asrs	r4, r4, #1
 800629c:	3608      	adds	r6, #8
 800629e:	e76d      	b.n	800617c <_dtoa_r+0x3cc>
 80062a0:	2702      	movs	r7, #2
 80062a2:	e770      	b.n	8006186 <_dtoa_r+0x3d6>
 80062a4:	46d0      	mov	r8, sl
 80062a6:	9c08      	ldr	r4, [sp, #32]
 80062a8:	e78f      	b.n	80061ca <_dtoa_r+0x41a>
 80062aa:	9903      	ldr	r1, [sp, #12]
 80062ac:	4b29      	ldr	r3, [pc, #164]	; (8006354 <_dtoa_r+0x5a4>)
 80062ae:	4421      	add	r1, r4
 80062b0:	9112      	str	r1, [sp, #72]	; 0x48
 80062b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80062bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062c0:	2900      	cmp	r1, #0
 80062c2:	d055      	beq.n	8006370 <_dtoa_r+0x5c0>
 80062c4:	2000      	movs	r0, #0
 80062c6:	4929      	ldr	r1, [pc, #164]	; (800636c <_dtoa_r+0x5bc>)
 80062c8:	f7fa fa9c 	bl	8000804 <__aeabi_ddiv>
 80062cc:	463b      	mov	r3, r7
 80062ce:	4632      	mov	r2, r6
 80062d0:	f7f9 ffb6 	bl	8000240 <__aeabi_dsub>
 80062d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062d8:	9f03      	ldr	r7, [sp, #12]
 80062da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062de:	f7fa fc17 	bl	8000b10 <__aeabi_d2iz>
 80062e2:	4604      	mov	r4, r0
 80062e4:	f7fa f8fa 	bl	80004dc <__aeabi_i2d>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f0:	f7f9 ffa6 	bl	8000240 <__aeabi_dsub>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	3430      	adds	r4, #48	; 0x30
 80062fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006302:	f807 4b01 	strb.w	r4, [r7], #1
 8006306:	f7fa fbc5 	bl	8000a94 <__aeabi_dcmplt>
 800630a:	2800      	cmp	r0, #0
 800630c:	d174      	bne.n	80063f8 <_dtoa_r+0x648>
 800630e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006312:	2000      	movs	r0, #0
 8006314:	4911      	ldr	r1, [pc, #68]	; (800635c <_dtoa_r+0x5ac>)
 8006316:	f7f9 ff93 	bl	8000240 <__aeabi_dsub>
 800631a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800631e:	f7fa fbb9 	bl	8000a94 <__aeabi_dcmplt>
 8006322:	2800      	cmp	r0, #0
 8006324:	f040 80b7 	bne.w	8006496 <_dtoa_r+0x6e6>
 8006328:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800632a:	429f      	cmp	r7, r3
 800632c:	f43f af7a 	beq.w	8006224 <_dtoa_r+0x474>
 8006330:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006334:	2200      	movs	r2, #0
 8006336:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <_dtoa_r+0x5b0>)
 8006338:	f7fa f93a 	bl	80005b0 <__aeabi_dmul>
 800633c:	2200      	movs	r2, #0
 800633e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006346:	4b06      	ldr	r3, [pc, #24]	; (8006360 <_dtoa_r+0x5b0>)
 8006348:	f7fa f932 	bl	80005b0 <__aeabi_dmul>
 800634c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006350:	e7c3      	b.n	80062da <_dtoa_r+0x52a>
 8006352:	bf00      	nop
 8006354:	08010f90 	.word	0x08010f90
 8006358:	08010f68 	.word	0x08010f68
 800635c:	3ff00000 	.word	0x3ff00000
 8006360:	40240000 	.word	0x40240000
 8006364:	401c0000 	.word	0x401c0000
 8006368:	40140000 	.word	0x40140000
 800636c:	3fe00000 	.word	0x3fe00000
 8006370:	4630      	mov	r0, r6
 8006372:	4639      	mov	r1, r7
 8006374:	f7fa f91c 	bl	80005b0 <__aeabi_dmul>
 8006378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800637a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800637e:	9c03      	ldr	r4, [sp, #12]
 8006380:	9314      	str	r3, [sp, #80]	; 0x50
 8006382:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006386:	f7fa fbc3 	bl	8000b10 <__aeabi_d2iz>
 800638a:	9015      	str	r0, [sp, #84]	; 0x54
 800638c:	f7fa f8a6 	bl	80004dc <__aeabi_i2d>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006398:	f7f9 ff52 	bl	8000240 <__aeabi_dsub>
 800639c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800639e:	4606      	mov	r6, r0
 80063a0:	3330      	adds	r3, #48	; 0x30
 80063a2:	f804 3b01 	strb.w	r3, [r4], #1
 80063a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063a8:	460f      	mov	r7, r1
 80063aa:	429c      	cmp	r4, r3
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	d124      	bne.n	80063fc <_dtoa_r+0x64c>
 80063b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063b6:	4bb0      	ldr	r3, [pc, #704]	; (8006678 <_dtoa_r+0x8c8>)
 80063b8:	f7f9 ff44 	bl	8000244 <__adddf3>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4630      	mov	r0, r6
 80063c2:	4639      	mov	r1, r7
 80063c4:	f7fa fb84 	bl	8000ad0 <__aeabi_dcmpgt>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d163      	bne.n	8006494 <_dtoa_r+0x6e4>
 80063cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063d0:	2000      	movs	r0, #0
 80063d2:	49a9      	ldr	r1, [pc, #676]	; (8006678 <_dtoa_r+0x8c8>)
 80063d4:	f7f9 ff34 	bl	8000240 <__aeabi_dsub>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4630      	mov	r0, r6
 80063de:	4639      	mov	r1, r7
 80063e0:	f7fa fb58 	bl	8000a94 <__aeabi_dcmplt>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	f43f af1d 	beq.w	8006224 <_dtoa_r+0x474>
 80063ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80063ec:	1e7b      	subs	r3, r7, #1
 80063ee:	9314      	str	r3, [sp, #80]	; 0x50
 80063f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80063f4:	2b30      	cmp	r3, #48	; 0x30
 80063f6:	d0f8      	beq.n	80063ea <_dtoa_r+0x63a>
 80063f8:	46c2      	mov	sl, r8
 80063fa:	e03b      	b.n	8006474 <_dtoa_r+0x6c4>
 80063fc:	4b9f      	ldr	r3, [pc, #636]	; (800667c <_dtoa_r+0x8cc>)
 80063fe:	f7fa f8d7 	bl	80005b0 <__aeabi_dmul>
 8006402:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006406:	e7bc      	b.n	8006382 <_dtoa_r+0x5d2>
 8006408:	9f03      	ldr	r7, [sp, #12]
 800640a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800640e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006412:	4640      	mov	r0, r8
 8006414:	4649      	mov	r1, r9
 8006416:	f7fa f9f5 	bl	8000804 <__aeabi_ddiv>
 800641a:	f7fa fb79 	bl	8000b10 <__aeabi_d2iz>
 800641e:	4604      	mov	r4, r0
 8006420:	f7fa f85c 	bl	80004dc <__aeabi_i2d>
 8006424:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006428:	f7fa f8c2 	bl	80005b0 <__aeabi_dmul>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7f9 ff04 	bl	8000240 <__aeabi_dsub>
 8006438:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800643c:	f807 6b01 	strb.w	r6, [r7], #1
 8006440:	9e03      	ldr	r6, [sp, #12]
 8006442:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006446:	1bbe      	subs	r6, r7, r6
 8006448:	45b4      	cmp	ip, r6
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	d136      	bne.n	80064be <_dtoa_r+0x70e>
 8006450:	f7f9 fef8 	bl	8000244 <__adddf3>
 8006454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006458:	4680      	mov	r8, r0
 800645a:	4689      	mov	r9, r1
 800645c:	f7fa fb38 	bl	8000ad0 <__aeabi_dcmpgt>
 8006460:	bb58      	cbnz	r0, 80064ba <_dtoa_r+0x70a>
 8006462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006466:	4640      	mov	r0, r8
 8006468:	4649      	mov	r1, r9
 800646a:	f7fa fb09 	bl	8000a80 <__aeabi_dcmpeq>
 800646e:	b108      	cbz	r0, 8006474 <_dtoa_r+0x6c4>
 8006470:	07e1      	lsls	r1, r4, #31
 8006472:	d422      	bmi.n	80064ba <_dtoa_r+0x70a>
 8006474:	4628      	mov	r0, r5
 8006476:	4659      	mov	r1, fp
 8006478:	f000 fe68 	bl	800714c <_Bfree>
 800647c:	2300      	movs	r3, #0
 800647e:	703b      	strb	r3, [r7, #0]
 8006480:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006482:	f10a 0001 	add.w	r0, sl, #1
 8006486:	6018      	str	r0, [r3, #0]
 8006488:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800648a:	2b00      	cmp	r3, #0
 800648c:	f43f acde 	beq.w	8005e4c <_dtoa_r+0x9c>
 8006490:	601f      	str	r7, [r3, #0]
 8006492:	e4db      	b.n	8005e4c <_dtoa_r+0x9c>
 8006494:	4627      	mov	r7, r4
 8006496:	463b      	mov	r3, r7
 8006498:	461f      	mov	r7, r3
 800649a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800649e:	2a39      	cmp	r2, #57	; 0x39
 80064a0:	d107      	bne.n	80064b2 <_dtoa_r+0x702>
 80064a2:	9a03      	ldr	r2, [sp, #12]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d1f7      	bne.n	8006498 <_dtoa_r+0x6e8>
 80064a8:	2230      	movs	r2, #48	; 0x30
 80064aa:	9903      	ldr	r1, [sp, #12]
 80064ac:	f108 0801 	add.w	r8, r8, #1
 80064b0:	700a      	strb	r2, [r1, #0]
 80064b2:	781a      	ldrb	r2, [r3, #0]
 80064b4:	3201      	adds	r2, #1
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	e79e      	b.n	80063f8 <_dtoa_r+0x648>
 80064ba:	46d0      	mov	r8, sl
 80064bc:	e7eb      	b.n	8006496 <_dtoa_r+0x6e6>
 80064be:	2200      	movs	r2, #0
 80064c0:	4b6e      	ldr	r3, [pc, #440]	; (800667c <_dtoa_r+0x8cc>)
 80064c2:	f7fa f875 	bl	80005b0 <__aeabi_dmul>
 80064c6:	2200      	movs	r2, #0
 80064c8:	2300      	movs	r3, #0
 80064ca:	4680      	mov	r8, r0
 80064cc:	4689      	mov	r9, r1
 80064ce:	f7fa fad7 	bl	8000a80 <__aeabi_dcmpeq>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d09b      	beq.n	800640e <_dtoa_r+0x65e>
 80064d6:	e7cd      	b.n	8006474 <_dtoa_r+0x6c4>
 80064d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064da:	2a00      	cmp	r2, #0
 80064dc:	f000 80d0 	beq.w	8006680 <_dtoa_r+0x8d0>
 80064e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80064e2:	2a01      	cmp	r2, #1
 80064e4:	f300 80ae 	bgt.w	8006644 <_dtoa_r+0x894>
 80064e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	f000 80a6 	beq.w	800663c <_dtoa_r+0x88c>
 80064f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064f6:	9f06      	ldr	r7, [sp, #24]
 80064f8:	9a06      	ldr	r2, [sp, #24]
 80064fa:	2101      	movs	r1, #1
 80064fc:	441a      	add	r2, r3
 80064fe:	9206      	str	r2, [sp, #24]
 8006500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006502:	4628      	mov	r0, r5
 8006504:	441a      	add	r2, r3
 8006506:	9209      	str	r2, [sp, #36]	; 0x24
 8006508:	f000 ff20 	bl	800734c <__i2b>
 800650c:	4606      	mov	r6, r0
 800650e:	2f00      	cmp	r7, #0
 8006510:	dd0c      	ble.n	800652c <_dtoa_r+0x77c>
 8006512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	dd09      	ble.n	800652c <_dtoa_r+0x77c>
 8006518:	42bb      	cmp	r3, r7
 800651a:	bfa8      	it	ge
 800651c:	463b      	movge	r3, r7
 800651e:	9a06      	ldr	r2, [sp, #24]
 8006520:	1aff      	subs	r7, r7, r3
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	9206      	str	r2, [sp, #24]
 8006526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	9309      	str	r3, [sp, #36]	; 0x24
 800652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652e:	b1f3      	cbz	r3, 800656e <_dtoa_r+0x7be>
 8006530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80a8 	beq.w	8006688 <_dtoa_r+0x8d8>
 8006538:	2c00      	cmp	r4, #0
 800653a:	dd10      	ble.n	800655e <_dtoa_r+0x7ae>
 800653c:	4631      	mov	r1, r6
 800653e:	4622      	mov	r2, r4
 8006540:	4628      	mov	r0, r5
 8006542:	f000 ffc1 	bl	80074c8 <__pow5mult>
 8006546:	465a      	mov	r2, fp
 8006548:	4601      	mov	r1, r0
 800654a:	4606      	mov	r6, r0
 800654c:	4628      	mov	r0, r5
 800654e:	f000 ff13 	bl	8007378 <__multiply>
 8006552:	4680      	mov	r8, r0
 8006554:	4659      	mov	r1, fp
 8006556:	4628      	mov	r0, r5
 8006558:	f000 fdf8 	bl	800714c <_Bfree>
 800655c:	46c3      	mov	fp, r8
 800655e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006560:	1b1a      	subs	r2, r3, r4
 8006562:	d004      	beq.n	800656e <_dtoa_r+0x7be>
 8006564:	4659      	mov	r1, fp
 8006566:	4628      	mov	r0, r5
 8006568:	f000 ffae 	bl	80074c8 <__pow5mult>
 800656c:	4683      	mov	fp, r0
 800656e:	2101      	movs	r1, #1
 8006570:	4628      	mov	r0, r5
 8006572:	f000 feeb 	bl	800734c <__i2b>
 8006576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006578:	4604      	mov	r4, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	f340 8086 	ble.w	800668c <_dtoa_r+0x8dc>
 8006580:	461a      	mov	r2, r3
 8006582:	4601      	mov	r1, r0
 8006584:	4628      	mov	r0, r5
 8006586:	f000 ff9f 	bl	80074c8 <__pow5mult>
 800658a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800658c:	4604      	mov	r4, r0
 800658e:	2b01      	cmp	r3, #1
 8006590:	dd7f      	ble.n	8006692 <_dtoa_r+0x8e2>
 8006592:	f04f 0800 	mov.w	r8, #0
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800659c:	6918      	ldr	r0, [r3, #16]
 800659e:	f000 fe87 	bl	80072b0 <__hi0bits>
 80065a2:	f1c0 0020 	rsb	r0, r0, #32
 80065a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a8:	4418      	add	r0, r3
 80065aa:	f010 001f 	ands.w	r0, r0, #31
 80065ae:	f000 8092 	beq.w	80066d6 <_dtoa_r+0x926>
 80065b2:	f1c0 0320 	rsb	r3, r0, #32
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	f340 808a 	ble.w	80066d0 <_dtoa_r+0x920>
 80065bc:	f1c0 001c 	rsb	r0, r0, #28
 80065c0:	9b06      	ldr	r3, [sp, #24]
 80065c2:	4407      	add	r7, r0
 80065c4:	4403      	add	r3, r0
 80065c6:	9306      	str	r3, [sp, #24]
 80065c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ca:	4403      	add	r3, r0
 80065cc:	9309      	str	r3, [sp, #36]	; 0x24
 80065ce:	9b06      	ldr	r3, [sp, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	dd05      	ble.n	80065e0 <_dtoa_r+0x830>
 80065d4:	4659      	mov	r1, fp
 80065d6:	461a      	mov	r2, r3
 80065d8:	4628      	mov	r0, r5
 80065da:	f000 ffcf 	bl	800757c <__lshift>
 80065de:	4683      	mov	fp, r0
 80065e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dd05      	ble.n	80065f2 <_dtoa_r+0x842>
 80065e6:	4621      	mov	r1, r4
 80065e8:	461a      	mov	r2, r3
 80065ea:	4628      	mov	r0, r5
 80065ec:	f000 ffc6 	bl	800757c <__lshift>
 80065f0:	4604      	mov	r4, r0
 80065f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d070      	beq.n	80066da <_dtoa_r+0x92a>
 80065f8:	4621      	mov	r1, r4
 80065fa:	4658      	mov	r0, fp
 80065fc:	f001 f82e 	bl	800765c <__mcmp>
 8006600:	2800      	cmp	r0, #0
 8006602:	da6a      	bge.n	80066da <_dtoa_r+0x92a>
 8006604:	2300      	movs	r3, #0
 8006606:	4659      	mov	r1, fp
 8006608:	220a      	movs	r2, #10
 800660a:	4628      	mov	r0, r5
 800660c:	f000 fdc0 	bl	8007190 <__multadd>
 8006610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006612:	4683      	mov	fp, r0
 8006614:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 8194 	beq.w	8006946 <_dtoa_r+0xb96>
 800661e:	4631      	mov	r1, r6
 8006620:	2300      	movs	r3, #0
 8006622:	220a      	movs	r2, #10
 8006624:	4628      	mov	r0, r5
 8006626:	f000 fdb3 	bl	8007190 <__multadd>
 800662a:	f1b9 0f00 	cmp.w	r9, #0
 800662e:	4606      	mov	r6, r0
 8006630:	f300 8093 	bgt.w	800675a <_dtoa_r+0x9aa>
 8006634:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006636:	2b02      	cmp	r3, #2
 8006638:	dc57      	bgt.n	80066ea <_dtoa_r+0x93a>
 800663a:	e08e      	b.n	800675a <_dtoa_r+0x9aa>
 800663c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800663e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006642:	e757      	b.n	80064f4 <_dtoa_r+0x744>
 8006644:	9b08      	ldr	r3, [sp, #32]
 8006646:	1e5c      	subs	r4, r3, #1
 8006648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664a:	42a3      	cmp	r3, r4
 800664c:	bfb7      	itett	lt
 800664e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006650:	1b1c      	subge	r4, r3, r4
 8006652:	1ae2      	sublt	r2, r4, r3
 8006654:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006656:	bfbe      	ittt	lt
 8006658:	940a      	strlt	r4, [sp, #40]	; 0x28
 800665a:	189b      	addlt	r3, r3, r2
 800665c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800665e:	9b08      	ldr	r3, [sp, #32]
 8006660:	bfb8      	it	lt
 8006662:	2400      	movlt	r4, #0
 8006664:	2b00      	cmp	r3, #0
 8006666:	bfbb      	ittet	lt
 8006668:	9b06      	ldrlt	r3, [sp, #24]
 800666a:	9a08      	ldrlt	r2, [sp, #32]
 800666c:	9f06      	ldrge	r7, [sp, #24]
 800666e:	1a9f      	sublt	r7, r3, r2
 8006670:	bfac      	ite	ge
 8006672:	9b08      	ldrge	r3, [sp, #32]
 8006674:	2300      	movlt	r3, #0
 8006676:	e73f      	b.n	80064f8 <_dtoa_r+0x748>
 8006678:	3fe00000 	.word	0x3fe00000
 800667c:	40240000 	.word	0x40240000
 8006680:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006682:	9f06      	ldr	r7, [sp, #24]
 8006684:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006686:	e742      	b.n	800650e <_dtoa_r+0x75e>
 8006688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800668a:	e76b      	b.n	8006564 <_dtoa_r+0x7b4>
 800668c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800668e:	2b01      	cmp	r3, #1
 8006690:	dc19      	bgt.n	80066c6 <_dtoa_r+0x916>
 8006692:	9b04      	ldr	r3, [sp, #16]
 8006694:	b9bb      	cbnz	r3, 80066c6 <_dtoa_r+0x916>
 8006696:	9b05      	ldr	r3, [sp, #20]
 8006698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800669c:	b99b      	cbnz	r3, 80066c6 <_dtoa_r+0x916>
 800669e:	9b05      	ldr	r3, [sp, #20]
 80066a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066a4:	0d1b      	lsrs	r3, r3, #20
 80066a6:	051b      	lsls	r3, r3, #20
 80066a8:	b183      	cbz	r3, 80066cc <_dtoa_r+0x91c>
 80066aa:	f04f 0801 	mov.w	r8, #1
 80066ae:	9b06      	ldr	r3, [sp, #24]
 80066b0:	3301      	adds	r3, #1
 80066b2:	9306      	str	r3, [sp, #24]
 80066b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b6:	3301      	adds	r3, #1
 80066b8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f47f af6a 	bne.w	8006596 <_dtoa_r+0x7e6>
 80066c2:	2001      	movs	r0, #1
 80066c4:	e76f      	b.n	80065a6 <_dtoa_r+0x7f6>
 80066c6:	f04f 0800 	mov.w	r8, #0
 80066ca:	e7f6      	b.n	80066ba <_dtoa_r+0x90a>
 80066cc:	4698      	mov	r8, r3
 80066ce:	e7f4      	b.n	80066ba <_dtoa_r+0x90a>
 80066d0:	f43f af7d 	beq.w	80065ce <_dtoa_r+0x81e>
 80066d4:	4618      	mov	r0, r3
 80066d6:	301c      	adds	r0, #28
 80066d8:	e772      	b.n	80065c0 <_dtoa_r+0x810>
 80066da:	9b08      	ldr	r3, [sp, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	dc36      	bgt.n	800674e <_dtoa_r+0x99e>
 80066e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	dd33      	ble.n	800674e <_dtoa_r+0x99e>
 80066e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066ea:	f1b9 0f00 	cmp.w	r9, #0
 80066ee:	d10d      	bne.n	800670c <_dtoa_r+0x95c>
 80066f0:	4621      	mov	r1, r4
 80066f2:	464b      	mov	r3, r9
 80066f4:	2205      	movs	r2, #5
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 fd4a 	bl	8007190 <__multadd>
 80066fc:	4601      	mov	r1, r0
 80066fe:	4604      	mov	r4, r0
 8006700:	4658      	mov	r0, fp
 8006702:	f000 ffab 	bl	800765c <__mcmp>
 8006706:	2800      	cmp	r0, #0
 8006708:	f73f adb8 	bgt.w	800627c <_dtoa_r+0x4cc>
 800670c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800670e:	9f03      	ldr	r7, [sp, #12]
 8006710:	ea6f 0a03 	mvn.w	sl, r3
 8006714:	f04f 0800 	mov.w	r8, #0
 8006718:	4621      	mov	r1, r4
 800671a:	4628      	mov	r0, r5
 800671c:	f000 fd16 	bl	800714c <_Bfree>
 8006720:	2e00      	cmp	r6, #0
 8006722:	f43f aea7 	beq.w	8006474 <_dtoa_r+0x6c4>
 8006726:	f1b8 0f00 	cmp.w	r8, #0
 800672a:	d005      	beq.n	8006738 <_dtoa_r+0x988>
 800672c:	45b0      	cmp	r8, r6
 800672e:	d003      	beq.n	8006738 <_dtoa_r+0x988>
 8006730:	4641      	mov	r1, r8
 8006732:	4628      	mov	r0, r5
 8006734:	f000 fd0a 	bl	800714c <_Bfree>
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	f000 fd06 	bl	800714c <_Bfree>
 8006740:	e698      	b.n	8006474 <_dtoa_r+0x6c4>
 8006742:	2400      	movs	r4, #0
 8006744:	4626      	mov	r6, r4
 8006746:	e7e1      	b.n	800670c <_dtoa_r+0x95c>
 8006748:	46c2      	mov	sl, r8
 800674a:	4626      	mov	r6, r4
 800674c:	e596      	b.n	800627c <_dtoa_r+0x4cc>
 800674e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80fd 	beq.w	8006954 <_dtoa_r+0xba4>
 800675a:	2f00      	cmp	r7, #0
 800675c:	dd05      	ble.n	800676a <_dtoa_r+0x9ba>
 800675e:	4631      	mov	r1, r6
 8006760:	463a      	mov	r2, r7
 8006762:	4628      	mov	r0, r5
 8006764:	f000 ff0a 	bl	800757c <__lshift>
 8006768:	4606      	mov	r6, r0
 800676a:	f1b8 0f00 	cmp.w	r8, #0
 800676e:	d05c      	beq.n	800682a <_dtoa_r+0xa7a>
 8006770:	4628      	mov	r0, r5
 8006772:	6871      	ldr	r1, [r6, #4]
 8006774:	f000 fcaa 	bl	80070cc <_Balloc>
 8006778:	4607      	mov	r7, r0
 800677a:	b928      	cbnz	r0, 8006788 <_dtoa_r+0x9d8>
 800677c:	4602      	mov	r2, r0
 800677e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006782:	4b7f      	ldr	r3, [pc, #508]	; (8006980 <_dtoa_r+0xbd0>)
 8006784:	f7ff bb28 	b.w	8005dd8 <_dtoa_r+0x28>
 8006788:	6932      	ldr	r2, [r6, #16]
 800678a:	f106 010c 	add.w	r1, r6, #12
 800678e:	3202      	adds	r2, #2
 8006790:	0092      	lsls	r2, r2, #2
 8006792:	300c      	adds	r0, #12
 8006794:	f000 fc8c 	bl	80070b0 <memcpy>
 8006798:	2201      	movs	r2, #1
 800679a:	4639      	mov	r1, r7
 800679c:	4628      	mov	r0, r5
 800679e:	f000 feed 	bl	800757c <__lshift>
 80067a2:	46b0      	mov	r8, r6
 80067a4:	4606      	mov	r6, r0
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	3301      	adds	r3, #1
 80067aa:	9308      	str	r3, [sp, #32]
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	444b      	add	r3, r9
 80067b0:	930a      	str	r3, [sp, #40]	; 0x28
 80067b2:	9b04      	ldr	r3, [sp, #16]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	9309      	str	r3, [sp, #36]	; 0x24
 80067ba:	9b08      	ldr	r3, [sp, #32]
 80067bc:	4621      	mov	r1, r4
 80067be:	3b01      	subs	r3, #1
 80067c0:	4658      	mov	r0, fp
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	f7ff fa68 	bl	8005c98 <quorem>
 80067c8:	4603      	mov	r3, r0
 80067ca:	4641      	mov	r1, r8
 80067cc:	3330      	adds	r3, #48	; 0x30
 80067ce:	9006      	str	r0, [sp, #24]
 80067d0:	4658      	mov	r0, fp
 80067d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80067d4:	f000 ff42 	bl	800765c <__mcmp>
 80067d8:	4632      	mov	r2, r6
 80067da:	4681      	mov	r9, r0
 80067dc:	4621      	mov	r1, r4
 80067de:	4628      	mov	r0, r5
 80067e0:	f000 ff58 	bl	8007694 <__mdiff>
 80067e4:	68c2      	ldr	r2, [r0, #12]
 80067e6:	4607      	mov	r7, r0
 80067e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ea:	bb02      	cbnz	r2, 800682e <_dtoa_r+0xa7e>
 80067ec:	4601      	mov	r1, r0
 80067ee:	4658      	mov	r0, fp
 80067f0:	f000 ff34 	bl	800765c <__mcmp>
 80067f4:	4602      	mov	r2, r0
 80067f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067f8:	4639      	mov	r1, r7
 80067fa:	4628      	mov	r0, r5
 80067fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006800:	f000 fca4 	bl	800714c <_Bfree>
 8006804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006808:	9f08      	ldr	r7, [sp, #32]
 800680a:	ea43 0102 	orr.w	r1, r3, r2
 800680e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006810:	430b      	orrs	r3, r1
 8006812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006814:	d10d      	bne.n	8006832 <_dtoa_r+0xa82>
 8006816:	2b39      	cmp	r3, #57	; 0x39
 8006818:	d029      	beq.n	800686e <_dtoa_r+0xabe>
 800681a:	f1b9 0f00 	cmp.w	r9, #0
 800681e:	dd01      	ble.n	8006824 <_dtoa_r+0xa74>
 8006820:	9b06      	ldr	r3, [sp, #24]
 8006822:	3331      	adds	r3, #49	; 0x31
 8006824:	9a04      	ldr	r2, [sp, #16]
 8006826:	7013      	strb	r3, [r2, #0]
 8006828:	e776      	b.n	8006718 <_dtoa_r+0x968>
 800682a:	4630      	mov	r0, r6
 800682c:	e7b9      	b.n	80067a2 <_dtoa_r+0x9f2>
 800682e:	2201      	movs	r2, #1
 8006830:	e7e2      	b.n	80067f8 <_dtoa_r+0xa48>
 8006832:	f1b9 0f00 	cmp.w	r9, #0
 8006836:	db06      	blt.n	8006846 <_dtoa_r+0xa96>
 8006838:	9922      	ldr	r1, [sp, #136]	; 0x88
 800683a:	ea41 0909 	orr.w	r9, r1, r9
 800683e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006840:	ea59 0101 	orrs.w	r1, r9, r1
 8006844:	d120      	bne.n	8006888 <_dtoa_r+0xad8>
 8006846:	2a00      	cmp	r2, #0
 8006848:	ddec      	ble.n	8006824 <_dtoa_r+0xa74>
 800684a:	4659      	mov	r1, fp
 800684c:	2201      	movs	r2, #1
 800684e:	4628      	mov	r0, r5
 8006850:	9308      	str	r3, [sp, #32]
 8006852:	f000 fe93 	bl	800757c <__lshift>
 8006856:	4621      	mov	r1, r4
 8006858:	4683      	mov	fp, r0
 800685a:	f000 feff 	bl	800765c <__mcmp>
 800685e:	2800      	cmp	r0, #0
 8006860:	9b08      	ldr	r3, [sp, #32]
 8006862:	dc02      	bgt.n	800686a <_dtoa_r+0xaba>
 8006864:	d1de      	bne.n	8006824 <_dtoa_r+0xa74>
 8006866:	07da      	lsls	r2, r3, #31
 8006868:	d5dc      	bpl.n	8006824 <_dtoa_r+0xa74>
 800686a:	2b39      	cmp	r3, #57	; 0x39
 800686c:	d1d8      	bne.n	8006820 <_dtoa_r+0xa70>
 800686e:	2339      	movs	r3, #57	; 0x39
 8006870:	9a04      	ldr	r2, [sp, #16]
 8006872:	7013      	strb	r3, [r2, #0]
 8006874:	463b      	mov	r3, r7
 8006876:	461f      	mov	r7, r3
 8006878:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800687c:	3b01      	subs	r3, #1
 800687e:	2a39      	cmp	r2, #57	; 0x39
 8006880:	d050      	beq.n	8006924 <_dtoa_r+0xb74>
 8006882:	3201      	adds	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	e747      	b.n	8006718 <_dtoa_r+0x968>
 8006888:	2a00      	cmp	r2, #0
 800688a:	dd03      	ble.n	8006894 <_dtoa_r+0xae4>
 800688c:	2b39      	cmp	r3, #57	; 0x39
 800688e:	d0ee      	beq.n	800686e <_dtoa_r+0xabe>
 8006890:	3301      	adds	r3, #1
 8006892:	e7c7      	b.n	8006824 <_dtoa_r+0xa74>
 8006894:	9a08      	ldr	r2, [sp, #32]
 8006896:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006898:	f802 3c01 	strb.w	r3, [r2, #-1]
 800689c:	428a      	cmp	r2, r1
 800689e:	d02a      	beq.n	80068f6 <_dtoa_r+0xb46>
 80068a0:	4659      	mov	r1, fp
 80068a2:	2300      	movs	r3, #0
 80068a4:	220a      	movs	r2, #10
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 fc72 	bl	8007190 <__multadd>
 80068ac:	45b0      	cmp	r8, r6
 80068ae:	4683      	mov	fp, r0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	f04f 020a 	mov.w	r2, #10
 80068b8:	4641      	mov	r1, r8
 80068ba:	4628      	mov	r0, r5
 80068bc:	d107      	bne.n	80068ce <_dtoa_r+0xb1e>
 80068be:	f000 fc67 	bl	8007190 <__multadd>
 80068c2:	4680      	mov	r8, r0
 80068c4:	4606      	mov	r6, r0
 80068c6:	9b08      	ldr	r3, [sp, #32]
 80068c8:	3301      	adds	r3, #1
 80068ca:	9308      	str	r3, [sp, #32]
 80068cc:	e775      	b.n	80067ba <_dtoa_r+0xa0a>
 80068ce:	f000 fc5f 	bl	8007190 <__multadd>
 80068d2:	4631      	mov	r1, r6
 80068d4:	4680      	mov	r8, r0
 80068d6:	2300      	movs	r3, #0
 80068d8:	220a      	movs	r2, #10
 80068da:	4628      	mov	r0, r5
 80068dc:	f000 fc58 	bl	8007190 <__multadd>
 80068e0:	4606      	mov	r6, r0
 80068e2:	e7f0      	b.n	80068c6 <_dtoa_r+0xb16>
 80068e4:	f1b9 0f00 	cmp.w	r9, #0
 80068e8:	bfcc      	ite	gt
 80068ea:	464f      	movgt	r7, r9
 80068ec:	2701      	movle	r7, #1
 80068ee:	f04f 0800 	mov.w	r8, #0
 80068f2:	9a03      	ldr	r2, [sp, #12]
 80068f4:	4417      	add	r7, r2
 80068f6:	4659      	mov	r1, fp
 80068f8:	2201      	movs	r2, #1
 80068fa:	4628      	mov	r0, r5
 80068fc:	9308      	str	r3, [sp, #32]
 80068fe:	f000 fe3d 	bl	800757c <__lshift>
 8006902:	4621      	mov	r1, r4
 8006904:	4683      	mov	fp, r0
 8006906:	f000 fea9 	bl	800765c <__mcmp>
 800690a:	2800      	cmp	r0, #0
 800690c:	dcb2      	bgt.n	8006874 <_dtoa_r+0xac4>
 800690e:	d102      	bne.n	8006916 <_dtoa_r+0xb66>
 8006910:	9b08      	ldr	r3, [sp, #32]
 8006912:	07db      	lsls	r3, r3, #31
 8006914:	d4ae      	bmi.n	8006874 <_dtoa_r+0xac4>
 8006916:	463b      	mov	r3, r7
 8006918:	461f      	mov	r7, r3
 800691a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800691e:	2a30      	cmp	r2, #48	; 0x30
 8006920:	d0fa      	beq.n	8006918 <_dtoa_r+0xb68>
 8006922:	e6f9      	b.n	8006718 <_dtoa_r+0x968>
 8006924:	9a03      	ldr	r2, [sp, #12]
 8006926:	429a      	cmp	r2, r3
 8006928:	d1a5      	bne.n	8006876 <_dtoa_r+0xac6>
 800692a:	2331      	movs	r3, #49	; 0x31
 800692c:	f10a 0a01 	add.w	sl, sl, #1
 8006930:	e779      	b.n	8006826 <_dtoa_r+0xa76>
 8006932:	4b14      	ldr	r3, [pc, #80]	; (8006984 <_dtoa_r+0xbd4>)
 8006934:	f7ff baa8 	b.w	8005e88 <_dtoa_r+0xd8>
 8006938:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800693a:	2b00      	cmp	r3, #0
 800693c:	f47f aa81 	bne.w	8005e42 <_dtoa_r+0x92>
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <_dtoa_r+0xbd8>)
 8006942:	f7ff baa1 	b.w	8005e88 <_dtoa_r+0xd8>
 8006946:	f1b9 0f00 	cmp.w	r9, #0
 800694a:	dc03      	bgt.n	8006954 <_dtoa_r+0xba4>
 800694c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800694e:	2b02      	cmp	r3, #2
 8006950:	f73f aecb 	bgt.w	80066ea <_dtoa_r+0x93a>
 8006954:	9f03      	ldr	r7, [sp, #12]
 8006956:	4621      	mov	r1, r4
 8006958:	4658      	mov	r0, fp
 800695a:	f7ff f99d 	bl	8005c98 <quorem>
 800695e:	9a03      	ldr	r2, [sp, #12]
 8006960:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006964:	f807 3b01 	strb.w	r3, [r7], #1
 8006968:	1aba      	subs	r2, r7, r2
 800696a:	4591      	cmp	r9, r2
 800696c:	ddba      	ble.n	80068e4 <_dtoa_r+0xb34>
 800696e:	4659      	mov	r1, fp
 8006970:	2300      	movs	r3, #0
 8006972:	220a      	movs	r2, #10
 8006974:	4628      	mov	r0, r5
 8006976:	f000 fc0b 	bl	8007190 <__multadd>
 800697a:	4683      	mov	fp, r0
 800697c:	e7eb      	b.n	8006956 <_dtoa_r+0xba6>
 800697e:	bf00      	nop
 8006980:	08010e80 	.word	0x08010e80
 8006984:	08010c80 	.word	0x08010c80
 8006988:	08010e01 	.word	0x08010e01

0800698c <rshift>:
 800698c:	6903      	ldr	r3, [r0, #16]
 800698e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006992:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006996:	f100 0414 	add.w	r4, r0, #20
 800699a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800699e:	dd46      	ble.n	8006a2e <rshift+0xa2>
 80069a0:	f011 011f 	ands.w	r1, r1, #31
 80069a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80069a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80069ac:	d10c      	bne.n	80069c8 <rshift+0x3c>
 80069ae:	4629      	mov	r1, r5
 80069b0:	f100 0710 	add.w	r7, r0, #16
 80069b4:	42b1      	cmp	r1, r6
 80069b6:	d335      	bcc.n	8006a24 <rshift+0x98>
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	1eea      	subs	r2, r5, #3
 80069be:	4296      	cmp	r6, r2
 80069c0:	bf38      	it	cc
 80069c2:	2300      	movcc	r3, #0
 80069c4:	4423      	add	r3, r4
 80069c6:	e015      	b.n	80069f4 <rshift+0x68>
 80069c8:	46a1      	mov	r9, r4
 80069ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80069ce:	f1c1 0820 	rsb	r8, r1, #32
 80069d2:	40cf      	lsrs	r7, r1
 80069d4:	f105 0e04 	add.w	lr, r5, #4
 80069d8:	4576      	cmp	r6, lr
 80069da:	46f4      	mov	ip, lr
 80069dc:	d816      	bhi.n	8006a0c <rshift+0x80>
 80069de:	1a9a      	subs	r2, r3, r2
 80069e0:	0092      	lsls	r2, r2, #2
 80069e2:	3a04      	subs	r2, #4
 80069e4:	3501      	adds	r5, #1
 80069e6:	42ae      	cmp	r6, r5
 80069e8:	bf38      	it	cc
 80069ea:	2200      	movcc	r2, #0
 80069ec:	18a3      	adds	r3, r4, r2
 80069ee:	50a7      	str	r7, [r4, r2]
 80069f0:	b107      	cbz	r7, 80069f4 <rshift+0x68>
 80069f2:	3304      	adds	r3, #4
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	eba3 0204 	sub.w	r2, r3, r4
 80069fa:	bf08      	it	eq
 80069fc:	2300      	moveq	r3, #0
 80069fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006a02:	6102      	str	r2, [r0, #16]
 8006a04:	bf08      	it	eq
 8006a06:	6143      	streq	r3, [r0, #20]
 8006a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a0c:	f8dc c000 	ldr.w	ip, [ip]
 8006a10:	fa0c fc08 	lsl.w	ip, ip, r8
 8006a14:	ea4c 0707 	orr.w	r7, ip, r7
 8006a18:	f849 7b04 	str.w	r7, [r9], #4
 8006a1c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006a20:	40cf      	lsrs	r7, r1
 8006a22:	e7d9      	b.n	80069d8 <rshift+0x4c>
 8006a24:	f851 cb04 	ldr.w	ip, [r1], #4
 8006a28:	f847 cf04 	str.w	ip, [r7, #4]!
 8006a2c:	e7c2      	b.n	80069b4 <rshift+0x28>
 8006a2e:	4623      	mov	r3, r4
 8006a30:	e7e0      	b.n	80069f4 <rshift+0x68>

08006a32 <__hexdig_fun>:
 8006a32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	d802      	bhi.n	8006a40 <__hexdig_fun+0xe>
 8006a3a:	3820      	subs	r0, #32
 8006a3c:	b2c0      	uxtb	r0, r0
 8006a3e:	4770      	bx	lr
 8006a40:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	d801      	bhi.n	8006a4c <__hexdig_fun+0x1a>
 8006a48:	3847      	subs	r0, #71	; 0x47
 8006a4a:	e7f7      	b.n	8006a3c <__hexdig_fun+0xa>
 8006a4c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006a50:	2b05      	cmp	r3, #5
 8006a52:	d801      	bhi.n	8006a58 <__hexdig_fun+0x26>
 8006a54:	3827      	subs	r0, #39	; 0x27
 8006a56:	e7f1      	b.n	8006a3c <__hexdig_fun+0xa>
 8006a58:	2000      	movs	r0, #0
 8006a5a:	4770      	bx	lr

08006a5c <__gethex>:
 8006a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a60:	b08b      	sub	sp, #44	; 0x2c
 8006a62:	9305      	str	r3, [sp, #20]
 8006a64:	4bb2      	ldr	r3, [pc, #712]	; (8006d30 <__gethex+0x2d4>)
 8006a66:	9002      	str	r0, [sp, #8]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	468b      	mov	fp, r1
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	4690      	mov	r8, r2
 8006a70:	9303      	str	r3, [sp, #12]
 8006a72:	f7f9 fbd9 	bl	8000228 <strlen>
 8006a76:	4682      	mov	sl, r0
 8006a78:	9b03      	ldr	r3, [sp, #12]
 8006a7a:	f8db 2000 	ldr.w	r2, [fp]
 8006a7e:	4403      	add	r3, r0
 8006a80:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006a84:	9306      	str	r3, [sp, #24]
 8006a86:	1c93      	adds	r3, r2, #2
 8006a88:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006a8c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006a90:	32fe      	adds	r2, #254	; 0xfe
 8006a92:	18d1      	adds	r1, r2, r3
 8006a94:	461f      	mov	r7, r3
 8006a96:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006a9a:	9101      	str	r1, [sp, #4]
 8006a9c:	2830      	cmp	r0, #48	; 0x30
 8006a9e:	d0f8      	beq.n	8006a92 <__gethex+0x36>
 8006aa0:	f7ff ffc7 	bl	8006a32 <__hexdig_fun>
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d13a      	bne.n	8006b20 <__gethex+0xc4>
 8006aaa:	4652      	mov	r2, sl
 8006aac:	4638      	mov	r0, r7
 8006aae:	9903      	ldr	r1, [sp, #12]
 8006ab0:	f001 fa26 	bl	8007f00 <strncmp>
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d166      	bne.n	8006b88 <__gethex+0x12c>
 8006aba:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006abe:	eb07 060a 	add.w	r6, r7, sl
 8006ac2:	f7ff ffb6 	bl	8006a32 <__hexdig_fun>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d060      	beq.n	8006b8c <__gethex+0x130>
 8006aca:	4633      	mov	r3, r6
 8006acc:	7818      	ldrb	r0, [r3, #0]
 8006ace:	461f      	mov	r7, r3
 8006ad0:	2830      	cmp	r0, #48	; 0x30
 8006ad2:	f103 0301 	add.w	r3, r3, #1
 8006ad6:	d0f9      	beq.n	8006acc <__gethex+0x70>
 8006ad8:	f7ff ffab 	bl	8006a32 <__hexdig_fun>
 8006adc:	2301      	movs	r3, #1
 8006ade:	fab0 f480 	clz	r4, r0
 8006ae2:	4635      	mov	r5, r6
 8006ae4:	0964      	lsrs	r4, r4, #5
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	463a      	mov	r2, r7
 8006aea:	4616      	mov	r6, r2
 8006aec:	7830      	ldrb	r0, [r6, #0]
 8006aee:	3201      	adds	r2, #1
 8006af0:	f7ff ff9f 	bl	8006a32 <__hexdig_fun>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d1f8      	bne.n	8006aea <__gethex+0x8e>
 8006af8:	4652      	mov	r2, sl
 8006afa:	4630      	mov	r0, r6
 8006afc:	9903      	ldr	r1, [sp, #12]
 8006afe:	f001 f9ff 	bl	8007f00 <strncmp>
 8006b02:	b980      	cbnz	r0, 8006b26 <__gethex+0xca>
 8006b04:	b94d      	cbnz	r5, 8006b1a <__gethex+0xbe>
 8006b06:	eb06 050a 	add.w	r5, r6, sl
 8006b0a:	462a      	mov	r2, r5
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	7830      	ldrb	r0, [r6, #0]
 8006b10:	3201      	adds	r2, #1
 8006b12:	f7ff ff8e 	bl	8006a32 <__hexdig_fun>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d1f8      	bne.n	8006b0c <__gethex+0xb0>
 8006b1a:	1bad      	subs	r5, r5, r6
 8006b1c:	00ad      	lsls	r5, r5, #2
 8006b1e:	e004      	b.n	8006b2a <__gethex+0xce>
 8006b20:	2400      	movs	r4, #0
 8006b22:	4625      	mov	r5, r4
 8006b24:	e7e0      	b.n	8006ae8 <__gethex+0x8c>
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	d1f7      	bne.n	8006b1a <__gethex+0xbe>
 8006b2a:	7833      	ldrb	r3, [r6, #0]
 8006b2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b30:	2b50      	cmp	r3, #80	; 0x50
 8006b32:	d139      	bne.n	8006ba8 <__gethex+0x14c>
 8006b34:	7873      	ldrb	r3, [r6, #1]
 8006b36:	2b2b      	cmp	r3, #43	; 0x2b
 8006b38:	d02a      	beq.n	8006b90 <__gethex+0x134>
 8006b3a:	2b2d      	cmp	r3, #45	; 0x2d
 8006b3c:	d02c      	beq.n	8006b98 <__gethex+0x13c>
 8006b3e:	f04f 0900 	mov.w	r9, #0
 8006b42:	1c71      	adds	r1, r6, #1
 8006b44:	7808      	ldrb	r0, [r1, #0]
 8006b46:	f7ff ff74 	bl	8006a32 <__hexdig_fun>
 8006b4a:	1e43      	subs	r3, r0, #1
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b18      	cmp	r3, #24
 8006b50:	d82a      	bhi.n	8006ba8 <__gethex+0x14c>
 8006b52:	f1a0 0210 	sub.w	r2, r0, #16
 8006b56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006b5a:	f7ff ff6a 	bl	8006a32 <__hexdig_fun>
 8006b5e:	1e43      	subs	r3, r0, #1
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b18      	cmp	r3, #24
 8006b64:	d91b      	bls.n	8006b9e <__gethex+0x142>
 8006b66:	f1b9 0f00 	cmp.w	r9, #0
 8006b6a:	d000      	beq.n	8006b6e <__gethex+0x112>
 8006b6c:	4252      	negs	r2, r2
 8006b6e:	4415      	add	r5, r2
 8006b70:	f8cb 1000 	str.w	r1, [fp]
 8006b74:	b1d4      	cbz	r4, 8006bac <__gethex+0x150>
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bf14      	ite	ne
 8006b7c:	2700      	movne	r7, #0
 8006b7e:	2706      	moveq	r7, #6
 8006b80:	4638      	mov	r0, r7
 8006b82:	b00b      	add	sp, #44	; 0x2c
 8006b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b88:	463e      	mov	r6, r7
 8006b8a:	4625      	mov	r5, r4
 8006b8c:	2401      	movs	r4, #1
 8006b8e:	e7cc      	b.n	8006b2a <__gethex+0xce>
 8006b90:	f04f 0900 	mov.w	r9, #0
 8006b94:	1cb1      	adds	r1, r6, #2
 8006b96:	e7d5      	b.n	8006b44 <__gethex+0xe8>
 8006b98:	f04f 0901 	mov.w	r9, #1
 8006b9c:	e7fa      	b.n	8006b94 <__gethex+0x138>
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	fb03 0202 	mla	r2, r3, r2, r0
 8006ba4:	3a10      	subs	r2, #16
 8006ba6:	e7d6      	b.n	8006b56 <__gethex+0xfa>
 8006ba8:	4631      	mov	r1, r6
 8006baa:	e7e1      	b.n	8006b70 <__gethex+0x114>
 8006bac:	4621      	mov	r1, r4
 8006bae:	1bf3      	subs	r3, r6, r7
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	2b07      	cmp	r3, #7
 8006bb4:	dc0a      	bgt.n	8006bcc <__gethex+0x170>
 8006bb6:	9802      	ldr	r0, [sp, #8]
 8006bb8:	f000 fa88 	bl	80070cc <_Balloc>
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	b940      	cbnz	r0, 8006bd2 <__gethex+0x176>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	21de      	movs	r1, #222	; 0xde
 8006bc4:	4b5b      	ldr	r3, [pc, #364]	; (8006d34 <__gethex+0x2d8>)
 8006bc6:	485c      	ldr	r0, [pc, #368]	; (8006d38 <__gethex+0x2dc>)
 8006bc8:	f001 f9bc 	bl	8007f44 <__assert_func>
 8006bcc:	3101      	adds	r1, #1
 8006bce:	105b      	asrs	r3, r3, #1
 8006bd0:	e7ef      	b.n	8006bb2 <__gethex+0x156>
 8006bd2:	f04f 0b00 	mov.w	fp, #0
 8006bd6:	f100 0914 	add.w	r9, r0, #20
 8006bda:	f1ca 0301 	rsb	r3, sl, #1
 8006bde:	f8cd 9010 	str.w	r9, [sp, #16]
 8006be2:	f8cd b004 	str.w	fp, [sp, #4]
 8006be6:	9308      	str	r3, [sp, #32]
 8006be8:	42b7      	cmp	r7, r6
 8006bea:	d33f      	bcc.n	8006c6c <__gethex+0x210>
 8006bec:	9f04      	ldr	r7, [sp, #16]
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	f847 3b04 	str.w	r3, [r7], #4
 8006bf4:	eba7 0709 	sub.w	r7, r7, r9
 8006bf8:	10bf      	asrs	r7, r7, #2
 8006bfa:	6127      	str	r7, [r4, #16]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fb57 	bl	80072b0 <__hi0bits>
 8006c02:	017f      	lsls	r7, r7, #5
 8006c04:	f8d8 6000 	ldr.w	r6, [r8]
 8006c08:	1a3f      	subs	r7, r7, r0
 8006c0a:	42b7      	cmp	r7, r6
 8006c0c:	dd62      	ble.n	8006cd4 <__gethex+0x278>
 8006c0e:	1bbf      	subs	r7, r7, r6
 8006c10:	4639      	mov	r1, r7
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fef1 	bl	80079fa <__any_on>
 8006c18:	4682      	mov	sl, r0
 8006c1a:	b1a8      	cbz	r0, 8006c48 <__gethex+0x1ec>
 8006c1c:	f04f 0a01 	mov.w	sl, #1
 8006c20:	1e7b      	subs	r3, r7, #1
 8006c22:	1159      	asrs	r1, r3, #5
 8006c24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006c28:	f003 021f 	and.w	r2, r3, #31
 8006c2c:	fa0a f202 	lsl.w	r2, sl, r2
 8006c30:	420a      	tst	r2, r1
 8006c32:	d009      	beq.n	8006c48 <__gethex+0x1ec>
 8006c34:	4553      	cmp	r3, sl
 8006c36:	dd05      	ble.n	8006c44 <__gethex+0x1e8>
 8006c38:	4620      	mov	r0, r4
 8006c3a:	1eb9      	subs	r1, r7, #2
 8006c3c:	f000 fedd 	bl	80079fa <__any_on>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d144      	bne.n	8006cce <__gethex+0x272>
 8006c44:	f04f 0a02 	mov.w	sl, #2
 8006c48:	4639      	mov	r1, r7
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f7ff fe9e 	bl	800698c <rshift>
 8006c50:	443d      	add	r5, r7
 8006c52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c56:	42ab      	cmp	r3, r5
 8006c58:	da4a      	bge.n	8006cf0 <__gethex+0x294>
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	9802      	ldr	r0, [sp, #8]
 8006c5e:	f000 fa75 	bl	800714c <_Bfree>
 8006c62:	2300      	movs	r3, #0
 8006c64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c66:	27a3      	movs	r7, #163	; 0xa3
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e789      	b.n	8006b80 <__gethex+0x124>
 8006c6c:	1e73      	subs	r3, r6, #1
 8006c6e:	9a06      	ldr	r2, [sp, #24]
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d019      	beq.n	8006cae <__gethex+0x252>
 8006c7a:	f1bb 0f20 	cmp.w	fp, #32
 8006c7e:	d107      	bne.n	8006c90 <__gethex+0x234>
 8006c80:	9b04      	ldr	r3, [sp, #16]
 8006c82:	9a01      	ldr	r2, [sp, #4]
 8006c84:	f843 2b04 	str.w	r2, [r3], #4
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	469b      	mov	fp, r3
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006c94:	f7ff fecd 	bl	8006a32 <__hexdig_fun>
 8006c98:	9b01      	ldr	r3, [sp, #4]
 8006c9a:	f000 000f 	and.w	r0, r0, #15
 8006c9e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006ca2:	4303      	orrs	r3, r0
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	f10b 0b04 	add.w	fp, fp, #4
 8006caa:	9b07      	ldr	r3, [sp, #28]
 8006cac:	e00d      	b.n	8006cca <__gethex+0x26e>
 8006cae:	9a08      	ldr	r2, [sp, #32]
 8006cb0:	1e73      	subs	r3, r6, #1
 8006cb2:	4413      	add	r3, r2
 8006cb4:	42bb      	cmp	r3, r7
 8006cb6:	d3e0      	bcc.n	8006c7a <__gethex+0x21e>
 8006cb8:	4618      	mov	r0, r3
 8006cba:	4652      	mov	r2, sl
 8006cbc:	9903      	ldr	r1, [sp, #12]
 8006cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc0:	f001 f91e 	bl	8007f00 <strncmp>
 8006cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d1d7      	bne.n	8006c7a <__gethex+0x21e>
 8006cca:	461e      	mov	r6, r3
 8006ccc:	e78c      	b.n	8006be8 <__gethex+0x18c>
 8006cce:	f04f 0a03 	mov.w	sl, #3
 8006cd2:	e7b9      	b.n	8006c48 <__gethex+0x1ec>
 8006cd4:	da09      	bge.n	8006cea <__gethex+0x28e>
 8006cd6:	1bf7      	subs	r7, r6, r7
 8006cd8:	4621      	mov	r1, r4
 8006cda:	463a      	mov	r2, r7
 8006cdc:	9802      	ldr	r0, [sp, #8]
 8006cde:	f000 fc4d 	bl	800757c <__lshift>
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	1bed      	subs	r5, r5, r7
 8006ce6:	f100 0914 	add.w	r9, r0, #20
 8006cea:	f04f 0a00 	mov.w	sl, #0
 8006cee:	e7b0      	b.n	8006c52 <__gethex+0x1f6>
 8006cf0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006cf4:	42a8      	cmp	r0, r5
 8006cf6:	dd72      	ble.n	8006dde <__gethex+0x382>
 8006cf8:	1b45      	subs	r5, r0, r5
 8006cfa:	42ae      	cmp	r6, r5
 8006cfc:	dc35      	bgt.n	8006d6a <__gethex+0x30e>
 8006cfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d029      	beq.n	8006d5a <__gethex+0x2fe>
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d02b      	beq.n	8006d62 <__gethex+0x306>
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d11c      	bne.n	8006d48 <__gethex+0x2ec>
 8006d0e:	42ae      	cmp	r6, r5
 8006d10:	d11a      	bne.n	8006d48 <__gethex+0x2ec>
 8006d12:	2e01      	cmp	r6, #1
 8006d14:	d112      	bne.n	8006d3c <__gethex+0x2e0>
 8006d16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006d1a:	9a05      	ldr	r2, [sp, #20]
 8006d1c:	2762      	movs	r7, #98	; 0x62
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	2301      	movs	r3, #1
 8006d22:	6123      	str	r3, [r4, #16]
 8006d24:	f8c9 3000 	str.w	r3, [r9]
 8006d28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d2a:	601c      	str	r4, [r3, #0]
 8006d2c:	e728      	b.n	8006b80 <__gethex+0x124>
 8006d2e:	bf00      	nop
 8006d30:	08010ef8 	.word	0x08010ef8
 8006d34:	08010e80 	.word	0x08010e80
 8006d38:	08010e91 	.word	0x08010e91
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	1e71      	subs	r1, r6, #1
 8006d40:	f000 fe5b 	bl	80079fa <__any_on>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d1e6      	bne.n	8006d16 <__gethex+0x2ba>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	9802      	ldr	r0, [sp, #8]
 8006d4c:	f000 f9fe 	bl	800714c <_Bfree>
 8006d50:	2300      	movs	r3, #0
 8006d52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d54:	2750      	movs	r7, #80	; 0x50
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	e712      	b.n	8006b80 <__gethex+0x124>
 8006d5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1f3      	bne.n	8006d48 <__gethex+0x2ec>
 8006d60:	e7d9      	b.n	8006d16 <__gethex+0x2ba>
 8006d62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1d6      	bne.n	8006d16 <__gethex+0x2ba>
 8006d68:	e7ee      	b.n	8006d48 <__gethex+0x2ec>
 8006d6a:	1e6f      	subs	r7, r5, #1
 8006d6c:	f1ba 0f00 	cmp.w	sl, #0
 8006d70:	d132      	bne.n	8006dd8 <__gethex+0x37c>
 8006d72:	b127      	cbz	r7, 8006d7e <__gethex+0x322>
 8006d74:	4639      	mov	r1, r7
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 fe3f 	bl	80079fa <__any_on>
 8006d7c:	4682      	mov	sl, r0
 8006d7e:	2101      	movs	r1, #1
 8006d80:	117b      	asrs	r3, r7, #5
 8006d82:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006d86:	f007 071f 	and.w	r7, r7, #31
 8006d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8006d8e:	421f      	tst	r7, r3
 8006d90:	f04f 0702 	mov.w	r7, #2
 8006d94:	4629      	mov	r1, r5
 8006d96:	4620      	mov	r0, r4
 8006d98:	bf18      	it	ne
 8006d9a:	f04a 0a02 	orrne.w	sl, sl, #2
 8006d9e:	1b76      	subs	r6, r6, r5
 8006da0:	f7ff fdf4 	bl	800698c <rshift>
 8006da4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006da8:	f1ba 0f00 	cmp.w	sl, #0
 8006dac:	d048      	beq.n	8006e40 <__gethex+0x3e4>
 8006dae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d015      	beq.n	8006de2 <__gethex+0x386>
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d017      	beq.n	8006dea <__gethex+0x38e>
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d109      	bne.n	8006dd2 <__gethex+0x376>
 8006dbe:	f01a 0f02 	tst.w	sl, #2
 8006dc2:	d006      	beq.n	8006dd2 <__gethex+0x376>
 8006dc4:	f8d9 0000 	ldr.w	r0, [r9]
 8006dc8:	ea4a 0a00 	orr.w	sl, sl, r0
 8006dcc:	f01a 0f01 	tst.w	sl, #1
 8006dd0:	d10e      	bne.n	8006df0 <__gethex+0x394>
 8006dd2:	f047 0710 	orr.w	r7, r7, #16
 8006dd6:	e033      	b.n	8006e40 <__gethex+0x3e4>
 8006dd8:	f04f 0a01 	mov.w	sl, #1
 8006ddc:	e7cf      	b.n	8006d7e <__gethex+0x322>
 8006dde:	2701      	movs	r7, #1
 8006de0:	e7e2      	b.n	8006da8 <__gethex+0x34c>
 8006de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006de4:	f1c3 0301 	rsb	r3, r3, #1
 8006de8:	9315      	str	r3, [sp, #84]	; 0x54
 8006dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f0      	beq.n	8006dd2 <__gethex+0x376>
 8006df0:	f04f 0c00 	mov.w	ip, #0
 8006df4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006df8:	f104 0314 	add.w	r3, r4, #20
 8006dfc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006e00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006e0e:	d01c      	beq.n	8006e4a <__gethex+0x3ee>
 8006e10:	3201      	adds	r2, #1
 8006e12:	6002      	str	r2, [r0, #0]
 8006e14:	2f02      	cmp	r7, #2
 8006e16:	f104 0314 	add.w	r3, r4, #20
 8006e1a:	d13d      	bne.n	8006e98 <__gethex+0x43c>
 8006e1c:	f8d8 2000 	ldr.w	r2, [r8]
 8006e20:	3a01      	subs	r2, #1
 8006e22:	42b2      	cmp	r2, r6
 8006e24:	d10a      	bne.n	8006e3c <__gethex+0x3e0>
 8006e26:	2201      	movs	r2, #1
 8006e28:	1171      	asrs	r1, r6, #5
 8006e2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e2e:	f006 061f 	and.w	r6, r6, #31
 8006e32:	fa02 f606 	lsl.w	r6, r2, r6
 8006e36:	421e      	tst	r6, r3
 8006e38:	bf18      	it	ne
 8006e3a:	4617      	movne	r7, r2
 8006e3c:	f047 0720 	orr.w	r7, r7, #32
 8006e40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e42:	601c      	str	r4, [r3, #0]
 8006e44:	9b05      	ldr	r3, [sp, #20]
 8006e46:	601d      	str	r5, [r3, #0]
 8006e48:	e69a      	b.n	8006b80 <__gethex+0x124>
 8006e4a:	4299      	cmp	r1, r3
 8006e4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006e50:	d8d8      	bhi.n	8006e04 <__gethex+0x3a8>
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	459b      	cmp	fp, r3
 8006e56:	db17      	blt.n	8006e88 <__gethex+0x42c>
 8006e58:	6861      	ldr	r1, [r4, #4]
 8006e5a:	9802      	ldr	r0, [sp, #8]
 8006e5c:	3101      	adds	r1, #1
 8006e5e:	f000 f935 	bl	80070cc <_Balloc>
 8006e62:	4681      	mov	r9, r0
 8006e64:	b918      	cbnz	r0, 8006e6e <__gethex+0x412>
 8006e66:	4602      	mov	r2, r0
 8006e68:	2184      	movs	r1, #132	; 0x84
 8006e6a:	4b19      	ldr	r3, [pc, #100]	; (8006ed0 <__gethex+0x474>)
 8006e6c:	e6ab      	b.n	8006bc6 <__gethex+0x16a>
 8006e6e:	6922      	ldr	r2, [r4, #16]
 8006e70:	f104 010c 	add.w	r1, r4, #12
 8006e74:	3202      	adds	r2, #2
 8006e76:	0092      	lsls	r2, r2, #2
 8006e78:	300c      	adds	r0, #12
 8006e7a:	f000 f919 	bl	80070b0 <memcpy>
 8006e7e:	4621      	mov	r1, r4
 8006e80:	9802      	ldr	r0, [sp, #8]
 8006e82:	f000 f963 	bl	800714c <_Bfree>
 8006e86:	464c      	mov	r4, r9
 8006e88:	6923      	ldr	r3, [r4, #16]
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	6122      	str	r2, [r4, #16]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e94:	615a      	str	r2, [r3, #20]
 8006e96:	e7bd      	b.n	8006e14 <__gethex+0x3b8>
 8006e98:	6922      	ldr	r2, [r4, #16]
 8006e9a:	455a      	cmp	r2, fp
 8006e9c:	dd0b      	ble.n	8006eb6 <__gethex+0x45a>
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7ff fd73 	bl	800698c <rshift>
 8006ea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006eaa:	3501      	adds	r5, #1
 8006eac:	42ab      	cmp	r3, r5
 8006eae:	f6ff aed4 	blt.w	8006c5a <__gethex+0x1fe>
 8006eb2:	2701      	movs	r7, #1
 8006eb4:	e7c2      	b.n	8006e3c <__gethex+0x3e0>
 8006eb6:	f016 061f 	ands.w	r6, r6, #31
 8006eba:	d0fa      	beq.n	8006eb2 <__gethex+0x456>
 8006ebc:	4453      	add	r3, sl
 8006ebe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006ec2:	f000 f9f5 	bl	80072b0 <__hi0bits>
 8006ec6:	f1c6 0620 	rsb	r6, r6, #32
 8006eca:	42b0      	cmp	r0, r6
 8006ecc:	dbe7      	blt.n	8006e9e <__gethex+0x442>
 8006ece:	e7f0      	b.n	8006eb2 <__gethex+0x456>
 8006ed0:	08010e80 	.word	0x08010e80

08006ed4 <L_shift>:
 8006ed4:	f1c2 0208 	rsb	r2, r2, #8
 8006ed8:	0092      	lsls	r2, r2, #2
 8006eda:	b570      	push	{r4, r5, r6, lr}
 8006edc:	f1c2 0620 	rsb	r6, r2, #32
 8006ee0:	6843      	ldr	r3, [r0, #4]
 8006ee2:	6804      	ldr	r4, [r0, #0]
 8006ee4:	fa03 f506 	lsl.w	r5, r3, r6
 8006ee8:	432c      	orrs	r4, r5
 8006eea:	40d3      	lsrs	r3, r2
 8006eec:	6004      	str	r4, [r0, #0]
 8006eee:	f840 3f04 	str.w	r3, [r0, #4]!
 8006ef2:	4288      	cmp	r0, r1
 8006ef4:	d3f4      	bcc.n	8006ee0 <L_shift+0xc>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}

08006ef8 <__match>:
 8006ef8:	b530      	push	{r4, r5, lr}
 8006efa:	6803      	ldr	r3, [r0, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f02:	b914      	cbnz	r4, 8006f0a <__match+0x12>
 8006f04:	6003      	str	r3, [r0, #0]
 8006f06:	2001      	movs	r0, #1
 8006f08:	bd30      	pop	{r4, r5, pc}
 8006f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006f12:	2d19      	cmp	r5, #25
 8006f14:	bf98      	it	ls
 8006f16:	3220      	addls	r2, #32
 8006f18:	42a2      	cmp	r2, r4
 8006f1a:	d0f0      	beq.n	8006efe <__match+0x6>
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e7f3      	b.n	8006f08 <__match+0x10>

08006f20 <__hexnan>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	2500      	movs	r5, #0
 8006f26:	680b      	ldr	r3, [r1, #0]
 8006f28:	4682      	mov	sl, r0
 8006f2a:	115e      	asrs	r6, r3, #5
 8006f2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006f30:	f013 031f 	ands.w	r3, r3, #31
 8006f34:	bf18      	it	ne
 8006f36:	3604      	addne	r6, #4
 8006f38:	1f37      	subs	r7, r6, #4
 8006f3a:	46b9      	mov	r9, r7
 8006f3c:	463c      	mov	r4, r7
 8006f3e:	46ab      	mov	fp, r5
 8006f40:	b087      	sub	sp, #28
 8006f42:	4690      	mov	r8, r2
 8006f44:	6802      	ldr	r2, [r0, #0]
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	f846 5c04 	str.w	r5, [r6, #-4]
 8006f4c:	9502      	str	r5, [sp, #8]
 8006f4e:	7851      	ldrb	r1, [r2, #1]
 8006f50:	1c53      	adds	r3, r2, #1
 8006f52:	9303      	str	r3, [sp, #12]
 8006f54:	b341      	cbz	r1, 8006fa8 <__hexnan+0x88>
 8006f56:	4608      	mov	r0, r1
 8006f58:	9205      	str	r2, [sp, #20]
 8006f5a:	9104      	str	r1, [sp, #16]
 8006f5c:	f7ff fd69 	bl	8006a32 <__hexdig_fun>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d14f      	bne.n	8007004 <__hexnan+0xe4>
 8006f64:	9904      	ldr	r1, [sp, #16]
 8006f66:	9a05      	ldr	r2, [sp, #20]
 8006f68:	2920      	cmp	r1, #32
 8006f6a:	d818      	bhi.n	8006f9e <__hexnan+0x7e>
 8006f6c:	9b02      	ldr	r3, [sp, #8]
 8006f6e:	459b      	cmp	fp, r3
 8006f70:	dd13      	ble.n	8006f9a <__hexnan+0x7a>
 8006f72:	454c      	cmp	r4, r9
 8006f74:	d206      	bcs.n	8006f84 <__hexnan+0x64>
 8006f76:	2d07      	cmp	r5, #7
 8006f78:	dc04      	bgt.n	8006f84 <__hexnan+0x64>
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f7ff ffa8 	bl	8006ed4 <L_shift>
 8006f84:	4544      	cmp	r4, r8
 8006f86:	d950      	bls.n	800702a <__hexnan+0x10a>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f1a4 0904 	sub.w	r9, r4, #4
 8006f8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f92:	461d      	mov	r5, r3
 8006f94:	464c      	mov	r4, r9
 8006f96:	f8cd b008 	str.w	fp, [sp, #8]
 8006f9a:	9a03      	ldr	r2, [sp, #12]
 8006f9c:	e7d7      	b.n	8006f4e <__hexnan+0x2e>
 8006f9e:	2929      	cmp	r1, #41	; 0x29
 8006fa0:	d156      	bne.n	8007050 <__hexnan+0x130>
 8006fa2:	3202      	adds	r2, #2
 8006fa4:	f8ca 2000 	str.w	r2, [sl]
 8006fa8:	f1bb 0f00 	cmp.w	fp, #0
 8006fac:	d050      	beq.n	8007050 <__hexnan+0x130>
 8006fae:	454c      	cmp	r4, r9
 8006fb0:	d206      	bcs.n	8006fc0 <__hexnan+0xa0>
 8006fb2:	2d07      	cmp	r5, #7
 8006fb4:	dc04      	bgt.n	8006fc0 <__hexnan+0xa0>
 8006fb6:	462a      	mov	r2, r5
 8006fb8:	4649      	mov	r1, r9
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f7ff ff8a 	bl	8006ed4 <L_shift>
 8006fc0:	4544      	cmp	r4, r8
 8006fc2:	d934      	bls.n	800702e <__hexnan+0x10e>
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	f1a8 0204 	sub.w	r2, r8, #4
 8006fca:	f853 1b04 	ldr.w	r1, [r3], #4
 8006fce:	429f      	cmp	r7, r3
 8006fd0:	f842 1f04 	str.w	r1, [r2, #4]!
 8006fd4:	d2f9      	bcs.n	8006fca <__hexnan+0xaa>
 8006fd6:	1b3b      	subs	r3, r7, r4
 8006fd8:	f023 0303 	bic.w	r3, r3, #3
 8006fdc:	3304      	adds	r3, #4
 8006fde:	3401      	adds	r4, #1
 8006fe0:	3e03      	subs	r6, #3
 8006fe2:	42b4      	cmp	r4, r6
 8006fe4:	bf88      	it	hi
 8006fe6:	2304      	movhi	r3, #4
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4443      	add	r3, r8
 8006fec:	f843 2b04 	str.w	r2, [r3], #4
 8006ff0:	429f      	cmp	r7, r3
 8006ff2:	d2fb      	bcs.n	8006fec <__hexnan+0xcc>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	b91b      	cbnz	r3, 8007000 <__hexnan+0xe0>
 8006ff8:	4547      	cmp	r7, r8
 8006ffa:	d127      	bne.n	800704c <__hexnan+0x12c>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	2005      	movs	r0, #5
 8007002:	e026      	b.n	8007052 <__hexnan+0x132>
 8007004:	3501      	adds	r5, #1
 8007006:	2d08      	cmp	r5, #8
 8007008:	f10b 0b01 	add.w	fp, fp, #1
 800700c:	dd06      	ble.n	800701c <__hexnan+0xfc>
 800700e:	4544      	cmp	r4, r8
 8007010:	d9c3      	bls.n	8006f9a <__hexnan+0x7a>
 8007012:	2300      	movs	r3, #0
 8007014:	2501      	movs	r5, #1
 8007016:	f844 3c04 	str.w	r3, [r4, #-4]
 800701a:	3c04      	subs	r4, #4
 800701c:	6822      	ldr	r2, [r4, #0]
 800701e:	f000 000f 	and.w	r0, r0, #15
 8007022:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007026:	6022      	str	r2, [r4, #0]
 8007028:	e7b7      	b.n	8006f9a <__hexnan+0x7a>
 800702a:	2508      	movs	r5, #8
 800702c:	e7b5      	b.n	8006f9a <__hexnan+0x7a>
 800702e:	9b01      	ldr	r3, [sp, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0df      	beq.n	8006ff4 <__hexnan+0xd4>
 8007034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007038:	f1c3 0320 	rsb	r3, r3, #32
 800703c:	fa22 f303 	lsr.w	r3, r2, r3
 8007040:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007044:	401a      	ands	r2, r3
 8007046:	f846 2c04 	str.w	r2, [r6, #-4]
 800704a:	e7d3      	b.n	8006ff4 <__hexnan+0xd4>
 800704c:	3f04      	subs	r7, #4
 800704e:	e7d1      	b.n	8006ff4 <__hexnan+0xd4>
 8007050:	2004      	movs	r0, #4
 8007052:	b007      	add	sp, #28
 8007054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007058 <_localeconv_r>:
 8007058:	4800      	ldr	r0, [pc, #0]	; (800705c <_localeconv_r+0x4>)
 800705a:	4770      	bx	lr
 800705c:	2000018c 	.word	0x2000018c

08007060 <malloc>:
 8007060:	4b02      	ldr	r3, [pc, #8]	; (800706c <malloc+0xc>)
 8007062:	4601      	mov	r1, r0
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	f000 bd65 	b.w	8007b34 <_malloc_r>
 800706a:	bf00      	nop
 800706c:	20000034 	.word	0x20000034

08007070 <__ascii_mbtowc>:
 8007070:	b082      	sub	sp, #8
 8007072:	b901      	cbnz	r1, 8007076 <__ascii_mbtowc+0x6>
 8007074:	a901      	add	r1, sp, #4
 8007076:	b142      	cbz	r2, 800708a <__ascii_mbtowc+0x1a>
 8007078:	b14b      	cbz	r3, 800708e <__ascii_mbtowc+0x1e>
 800707a:	7813      	ldrb	r3, [r2, #0]
 800707c:	600b      	str	r3, [r1, #0]
 800707e:	7812      	ldrb	r2, [r2, #0]
 8007080:	1e10      	subs	r0, r2, #0
 8007082:	bf18      	it	ne
 8007084:	2001      	movne	r0, #1
 8007086:	b002      	add	sp, #8
 8007088:	4770      	bx	lr
 800708a:	4610      	mov	r0, r2
 800708c:	e7fb      	b.n	8007086 <__ascii_mbtowc+0x16>
 800708e:	f06f 0001 	mvn.w	r0, #1
 8007092:	e7f8      	b.n	8007086 <__ascii_mbtowc+0x16>

08007094 <memchr>:
 8007094:	4603      	mov	r3, r0
 8007096:	b510      	push	{r4, lr}
 8007098:	b2c9      	uxtb	r1, r1
 800709a:	4402      	add	r2, r0
 800709c:	4293      	cmp	r3, r2
 800709e:	4618      	mov	r0, r3
 80070a0:	d101      	bne.n	80070a6 <memchr+0x12>
 80070a2:	2000      	movs	r0, #0
 80070a4:	e003      	b.n	80070ae <memchr+0x1a>
 80070a6:	7804      	ldrb	r4, [r0, #0]
 80070a8:	3301      	adds	r3, #1
 80070aa:	428c      	cmp	r4, r1
 80070ac:	d1f6      	bne.n	800709c <memchr+0x8>
 80070ae:	bd10      	pop	{r4, pc}

080070b0 <memcpy>:
 80070b0:	440a      	add	r2, r1
 80070b2:	4291      	cmp	r1, r2
 80070b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80070b8:	d100      	bne.n	80070bc <memcpy+0xc>
 80070ba:	4770      	bx	lr
 80070bc:	b510      	push	{r4, lr}
 80070be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c2:	4291      	cmp	r1, r2
 80070c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070c8:	d1f9      	bne.n	80070be <memcpy+0xe>
 80070ca:	bd10      	pop	{r4, pc}

080070cc <_Balloc>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	b976      	cbnz	r6, 80070f4 <_Balloc+0x28>
 80070d6:	2010      	movs	r0, #16
 80070d8:	f7ff ffc2 	bl	8007060 <malloc>
 80070dc:	4602      	mov	r2, r0
 80070de:	6260      	str	r0, [r4, #36]	; 0x24
 80070e0:	b920      	cbnz	r0, 80070ec <_Balloc+0x20>
 80070e2:	2166      	movs	r1, #102	; 0x66
 80070e4:	4b17      	ldr	r3, [pc, #92]	; (8007144 <_Balloc+0x78>)
 80070e6:	4818      	ldr	r0, [pc, #96]	; (8007148 <_Balloc+0x7c>)
 80070e8:	f000 ff2c 	bl	8007f44 <__assert_func>
 80070ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070f0:	6006      	str	r6, [r0, #0]
 80070f2:	60c6      	str	r6, [r0, #12]
 80070f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070f6:	68f3      	ldr	r3, [r6, #12]
 80070f8:	b183      	cbz	r3, 800711c <_Balloc+0x50>
 80070fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007102:	b9b8      	cbnz	r0, 8007134 <_Balloc+0x68>
 8007104:	2101      	movs	r1, #1
 8007106:	fa01 f605 	lsl.w	r6, r1, r5
 800710a:	1d72      	adds	r2, r6, #5
 800710c:	4620      	mov	r0, r4
 800710e:	0092      	lsls	r2, r2, #2
 8007110:	f000 fc94 	bl	8007a3c <_calloc_r>
 8007114:	b160      	cbz	r0, 8007130 <_Balloc+0x64>
 8007116:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800711a:	e00e      	b.n	800713a <_Balloc+0x6e>
 800711c:	2221      	movs	r2, #33	; 0x21
 800711e:	2104      	movs	r1, #4
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fc8b 	bl	8007a3c <_calloc_r>
 8007126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007128:	60f0      	str	r0, [r6, #12]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e4      	bne.n	80070fa <_Balloc+0x2e>
 8007130:	2000      	movs	r0, #0
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	6802      	ldr	r2, [r0, #0]
 8007136:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800713a:	2300      	movs	r3, #0
 800713c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007140:	e7f7      	b.n	8007132 <_Balloc+0x66>
 8007142:	bf00      	nop
 8007144:	08010e0e 	.word	0x08010e0e
 8007148:	08010f0c 	.word	0x08010f0c

0800714c <_Bfree>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007150:	4605      	mov	r5, r0
 8007152:	460c      	mov	r4, r1
 8007154:	b976      	cbnz	r6, 8007174 <_Bfree+0x28>
 8007156:	2010      	movs	r0, #16
 8007158:	f7ff ff82 	bl	8007060 <malloc>
 800715c:	4602      	mov	r2, r0
 800715e:	6268      	str	r0, [r5, #36]	; 0x24
 8007160:	b920      	cbnz	r0, 800716c <_Bfree+0x20>
 8007162:	218a      	movs	r1, #138	; 0x8a
 8007164:	4b08      	ldr	r3, [pc, #32]	; (8007188 <_Bfree+0x3c>)
 8007166:	4809      	ldr	r0, [pc, #36]	; (800718c <_Bfree+0x40>)
 8007168:	f000 feec 	bl	8007f44 <__assert_func>
 800716c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007170:	6006      	str	r6, [r0, #0]
 8007172:	60c6      	str	r6, [r0, #12]
 8007174:	b13c      	cbz	r4, 8007186 <_Bfree+0x3a>
 8007176:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007178:	6862      	ldr	r2, [r4, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007180:	6021      	str	r1, [r4, #0]
 8007182:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	08010e0e 	.word	0x08010e0e
 800718c:	08010f0c 	.word	0x08010f0c

08007190 <__multadd>:
 8007190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007194:	4607      	mov	r7, r0
 8007196:	460c      	mov	r4, r1
 8007198:	461e      	mov	r6, r3
 800719a:	2000      	movs	r0, #0
 800719c:	690d      	ldr	r5, [r1, #16]
 800719e:	f101 0c14 	add.w	ip, r1, #20
 80071a2:	f8dc 3000 	ldr.w	r3, [ip]
 80071a6:	3001      	adds	r0, #1
 80071a8:	b299      	uxth	r1, r3
 80071aa:	fb02 6101 	mla	r1, r2, r1, r6
 80071ae:	0c1e      	lsrs	r6, r3, #16
 80071b0:	0c0b      	lsrs	r3, r1, #16
 80071b2:	fb02 3306 	mla	r3, r2, r6, r3
 80071b6:	b289      	uxth	r1, r1
 80071b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071bc:	4285      	cmp	r5, r0
 80071be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071c2:	f84c 1b04 	str.w	r1, [ip], #4
 80071c6:	dcec      	bgt.n	80071a2 <__multadd+0x12>
 80071c8:	b30e      	cbz	r6, 800720e <__multadd+0x7e>
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	42ab      	cmp	r3, r5
 80071ce:	dc19      	bgt.n	8007204 <__multadd+0x74>
 80071d0:	6861      	ldr	r1, [r4, #4]
 80071d2:	4638      	mov	r0, r7
 80071d4:	3101      	adds	r1, #1
 80071d6:	f7ff ff79 	bl	80070cc <_Balloc>
 80071da:	4680      	mov	r8, r0
 80071dc:	b928      	cbnz	r0, 80071ea <__multadd+0x5a>
 80071de:	4602      	mov	r2, r0
 80071e0:	21b5      	movs	r1, #181	; 0xb5
 80071e2:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <__multadd+0x84>)
 80071e4:	480c      	ldr	r0, [pc, #48]	; (8007218 <__multadd+0x88>)
 80071e6:	f000 fead 	bl	8007f44 <__assert_func>
 80071ea:	6922      	ldr	r2, [r4, #16]
 80071ec:	f104 010c 	add.w	r1, r4, #12
 80071f0:	3202      	adds	r2, #2
 80071f2:	0092      	lsls	r2, r2, #2
 80071f4:	300c      	adds	r0, #12
 80071f6:	f7ff ff5b 	bl	80070b0 <memcpy>
 80071fa:	4621      	mov	r1, r4
 80071fc:	4638      	mov	r0, r7
 80071fe:	f7ff ffa5 	bl	800714c <_Bfree>
 8007202:	4644      	mov	r4, r8
 8007204:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007208:	3501      	adds	r5, #1
 800720a:	615e      	str	r6, [r3, #20]
 800720c:	6125      	str	r5, [r4, #16]
 800720e:	4620      	mov	r0, r4
 8007210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007214:	08010e80 	.word	0x08010e80
 8007218:	08010f0c 	.word	0x08010f0c

0800721c <__s2b>:
 800721c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007220:	4615      	mov	r5, r2
 8007222:	2209      	movs	r2, #9
 8007224:	461f      	mov	r7, r3
 8007226:	3308      	adds	r3, #8
 8007228:	460c      	mov	r4, r1
 800722a:	fb93 f3f2 	sdiv	r3, r3, r2
 800722e:	4606      	mov	r6, r0
 8007230:	2201      	movs	r2, #1
 8007232:	2100      	movs	r1, #0
 8007234:	429a      	cmp	r2, r3
 8007236:	db09      	blt.n	800724c <__s2b+0x30>
 8007238:	4630      	mov	r0, r6
 800723a:	f7ff ff47 	bl	80070cc <_Balloc>
 800723e:	b940      	cbnz	r0, 8007252 <__s2b+0x36>
 8007240:	4602      	mov	r2, r0
 8007242:	21ce      	movs	r1, #206	; 0xce
 8007244:	4b18      	ldr	r3, [pc, #96]	; (80072a8 <__s2b+0x8c>)
 8007246:	4819      	ldr	r0, [pc, #100]	; (80072ac <__s2b+0x90>)
 8007248:	f000 fe7c 	bl	8007f44 <__assert_func>
 800724c:	0052      	lsls	r2, r2, #1
 800724e:	3101      	adds	r1, #1
 8007250:	e7f0      	b.n	8007234 <__s2b+0x18>
 8007252:	9b08      	ldr	r3, [sp, #32]
 8007254:	2d09      	cmp	r5, #9
 8007256:	6143      	str	r3, [r0, #20]
 8007258:	f04f 0301 	mov.w	r3, #1
 800725c:	6103      	str	r3, [r0, #16]
 800725e:	dd16      	ble.n	800728e <__s2b+0x72>
 8007260:	f104 0909 	add.w	r9, r4, #9
 8007264:	46c8      	mov	r8, r9
 8007266:	442c      	add	r4, r5
 8007268:	f818 3b01 	ldrb.w	r3, [r8], #1
 800726c:	4601      	mov	r1, r0
 800726e:	220a      	movs	r2, #10
 8007270:	4630      	mov	r0, r6
 8007272:	3b30      	subs	r3, #48	; 0x30
 8007274:	f7ff ff8c 	bl	8007190 <__multadd>
 8007278:	45a0      	cmp	r8, r4
 800727a:	d1f5      	bne.n	8007268 <__s2b+0x4c>
 800727c:	f1a5 0408 	sub.w	r4, r5, #8
 8007280:	444c      	add	r4, r9
 8007282:	1b2d      	subs	r5, r5, r4
 8007284:	1963      	adds	r3, r4, r5
 8007286:	42bb      	cmp	r3, r7
 8007288:	db04      	blt.n	8007294 <__s2b+0x78>
 800728a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800728e:	2509      	movs	r5, #9
 8007290:	340a      	adds	r4, #10
 8007292:	e7f6      	b.n	8007282 <__s2b+0x66>
 8007294:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007298:	4601      	mov	r1, r0
 800729a:	220a      	movs	r2, #10
 800729c:	4630      	mov	r0, r6
 800729e:	3b30      	subs	r3, #48	; 0x30
 80072a0:	f7ff ff76 	bl	8007190 <__multadd>
 80072a4:	e7ee      	b.n	8007284 <__s2b+0x68>
 80072a6:	bf00      	nop
 80072a8:	08010e80 	.word	0x08010e80
 80072ac:	08010f0c 	.word	0x08010f0c

080072b0 <__hi0bits>:
 80072b0:	0c02      	lsrs	r2, r0, #16
 80072b2:	0412      	lsls	r2, r2, #16
 80072b4:	4603      	mov	r3, r0
 80072b6:	b9ca      	cbnz	r2, 80072ec <__hi0bits+0x3c>
 80072b8:	0403      	lsls	r3, r0, #16
 80072ba:	2010      	movs	r0, #16
 80072bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072c0:	bf04      	itt	eq
 80072c2:	021b      	lsleq	r3, r3, #8
 80072c4:	3008      	addeq	r0, #8
 80072c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072ca:	bf04      	itt	eq
 80072cc:	011b      	lsleq	r3, r3, #4
 80072ce:	3004      	addeq	r0, #4
 80072d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072d4:	bf04      	itt	eq
 80072d6:	009b      	lsleq	r3, r3, #2
 80072d8:	3002      	addeq	r0, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	db05      	blt.n	80072ea <__hi0bits+0x3a>
 80072de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80072e2:	f100 0001 	add.w	r0, r0, #1
 80072e6:	bf08      	it	eq
 80072e8:	2020      	moveq	r0, #32
 80072ea:	4770      	bx	lr
 80072ec:	2000      	movs	r0, #0
 80072ee:	e7e5      	b.n	80072bc <__hi0bits+0xc>

080072f0 <__lo0bits>:
 80072f0:	6803      	ldr	r3, [r0, #0]
 80072f2:	4602      	mov	r2, r0
 80072f4:	f013 0007 	ands.w	r0, r3, #7
 80072f8:	d00b      	beq.n	8007312 <__lo0bits+0x22>
 80072fa:	07d9      	lsls	r1, r3, #31
 80072fc:	d421      	bmi.n	8007342 <__lo0bits+0x52>
 80072fe:	0798      	lsls	r0, r3, #30
 8007300:	bf49      	itett	mi
 8007302:	085b      	lsrmi	r3, r3, #1
 8007304:	089b      	lsrpl	r3, r3, #2
 8007306:	2001      	movmi	r0, #1
 8007308:	6013      	strmi	r3, [r2, #0]
 800730a:	bf5c      	itt	pl
 800730c:	2002      	movpl	r0, #2
 800730e:	6013      	strpl	r3, [r2, #0]
 8007310:	4770      	bx	lr
 8007312:	b299      	uxth	r1, r3
 8007314:	b909      	cbnz	r1, 800731a <__lo0bits+0x2a>
 8007316:	2010      	movs	r0, #16
 8007318:	0c1b      	lsrs	r3, r3, #16
 800731a:	b2d9      	uxtb	r1, r3
 800731c:	b909      	cbnz	r1, 8007322 <__lo0bits+0x32>
 800731e:	3008      	adds	r0, #8
 8007320:	0a1b      	lsrs	r3, r3, #8
 8007322:	0719      	lsls	r1, r3, #28
 8007324:	bf04      	itt	eq
 8007326:	091b      	lsreq	r3, r3, #4
 8007328:	3004      	addeq	r0, #4
 800732a:	0799      	lsls	r1, r3, #30
 800732c:	bf04      	itt	eq
 800732e:	089b      	lsreq	r3, r3, #2
 8007330:	3002      	addeq	r0, #2
 8007332:	07d9      	lsls	r1, r3, #31
 8007334:	d403      	bmi.n	800733e <__lo0bits+0x4e>
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	f100 0001 	add.w	r0, r0, #1
 800733c:	d003      	beq.n	8007346 <__lo0bits+0x56>
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	4770      	bx	lr
 8007342:	2000      	movs	r0, #0
 8007344:	4770      	bx	lr
 8007346:	2020      	movs	r0, #32
 8007348:	4770      	bx	lr
	...

0800734c <__i2b>:
 800734c:	b510      	push	{r4, lr}
 800734e:	460c      	mov	r4, r1
 8007350:	2101      	movs	r1, #1
 8007352:	f7ff febb 	bl	80070cc <_Balloc>
 8007356:	4602      	mov	r2, r0
 8007358:	b928      	cbnz	r0, 8007366 <__i2b+0x1a>
 800735a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800735e:	4b04      	ldr	r3, [pc, #16]	; (8007370 <__i2b+0x24>)
 8007360:	4804      	ldr	r0, [pc, #16]	; (8007374 <__i2b+0x28>)
 8007362:	f000 fdef 	bl	8007f44 <__assert_func>
 8007366:	2301      	movs	r3, #1
 8007368:	6144      	str	r4, [r0, #20]
 800736a:	6103      	str	r3, [r0, #16]
 800736c:	bd10      	pop	{r4, pc}
 800736e:	bf00      	nop
 8007370:	08010e80 	.word	0x08010e80
 8007374:	08010f0c 	.word	0x08010f0c

08007378 <__multiply>:
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	4691      	mov	r9, r2
 800737e:	690a      	ldr	r2, [r1, #16]
 8007380:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007384:	460c      	mov	r4, r1
 8007386:	429a      	cmp	r2, r3
 8007388:	bfbe      	ittt	lt
 800738a:	460b      	movlt	r3, r1
 800738c:	464c      	movlt	r4, r9
 800738e:	4699      	movlt	r9, r3
 8007390:	6927      	ldr	r7, [r4, #16]
 8007392:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007396:	68a3      	ldr	r3, [r4, #8]
 8007398:	6861      	ldr	r1, [r4, #4]
 800739a:	eb07 060a 	add.w	r6, r7, sl
 800739e:	42b3      	cmp	r3, r6
 80073a0:	b085      	sub	sp, #20
 80073a2:	bfb8      	it	lt
 80073a4:	3101      	addlt	r1, #1
 80073a6:	f7ff fe91 	bl	80070cc <_Balloc>
 80073aa:	b930      	cbnz	r0, 80073ba <__multiply+0x42>
 80073ac:	4602      	mov	r2, r0
 80073ae:	f240 115d 	movw	r1, #349	; 0x15d
 80073b2:	4b43      	ldr	r3, [pc, #268]	; (80074c0 <__multiply+0x148>)
 80073b4:	4843      	ldr	r0, [pc, #268]	; (80074c4 <__multiply+0x14c>)
 80073b6:	f000 fdc5 	bl	8007f44 <__assert_func>
 80073ba:	f100 0514 	add.w	r5, r0, #20
 80073be:	462b      	mov	r3, r5
 80073c0:	2200      	movs	r2, #0
 80073c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073c6:	4543      	cmp	r3, r8
 80073c8:	d321      	bcc.n	800740e <__multiply+0x96>
 80073ca:	f104 0314 	add.w	r3, r4, #20
 80073ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073d2:	f109 0314 	add.w	r3, r9, #20
 80073d6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073da:	9202      	str	r2, [sp, #8]
 80073dc:	1b3a      	subs	r2, r7, r4
 80073de:	3a15      	subs	r2, #21
 80073e0:	f022 0203 	bic.w	r2, r2, #3
 80073e4:	3204      	adds	r2, #4
 80073e6:	f104 0115 	add.w	r1, r4, #21
 80073ea:	428f      	cmp	r7, r1
 80073ec:	bf38      	it	cc
 80073ee:	2204      	movcc	r2, #4
 80073f0:	9201      	str	r2, [sp, #4]
 80073f2:	9a02      	ldr	r2, [sp, #8]
 80073f4:	9303      	str	r3, [sp, #12]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d80c      	bhi.n	8007414 <__multiply+0x9c>
 80073fa:	2e00      	cmp	r6, #0
 80073fc:	dd03      	ble.n	8007406 <__multiply+0x8e>
 80073fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007402:	2b00      	cmp	r3, #0
 8007404:	d059      	beq.n	80074ba <__multiply+0x142>
 8007406:	6106      	str	r6, [r0, #16]
 8007408:	b005      	add	sp, #20
 800740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740e:	f843 2b04 	str.w	r2, [r3], #4
 8007412:	e7d8      	b.n	80073c6 <__multiply+0x4e>
 8007414:	f8b3 a000 	ldrh.w	sl, [r3]
 8007418:	f1ba 0f00 	cmp.w	sl, #0
 800741c:	d023      	beq.n	8007466 <__multiply+0xee>
 800741e:	46a9      	mov	r9, r5
 8007420:	f04f 0c00 	mov.w	ip, #0
 8007424:	f104 0e14 	add.w	lr, r4, #20
 8007428:	f85e 2b04 	ldr.w	r2, [lr], #4
 800742c:	f8d9 1000 	ldr.w	r1, [r9]
 8007430:	fa1f fb82 	uxth.w	fp, r2
 8007434:	b289      	uxth	r1, r1
 8007436:	fb0a 110b 	mla	r1, sl, fp, r1
 800743a:	4461      	add	r1, ip
 800743c:	f8d9 c000 	ldr.w	ip, [r9]
 8007440:	0c12      	lsrs	r2, r2, #16
 8007442:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007446:	fb0a c202 	mla	r2, sl, r2, ip
 800744a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800744e:	b289      	uxth	r1, r1
 8007450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007454:	4577      	cmp	r7, lr
 8007456:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800745a:	f849 1b04 	str.w	r1, [r9], #4
 800745e:	d8e3      	bhi.n	8007428 <__multiply+0xb0>
 8007460:	9a01      	ldr	r2, [sp, #4]
 8007462:	f845 c002 	str.w	ip, [r5, r2]
 8007466:	9a03      	ldr	r2, [sp, #12]
 8007468:	3304      	adds	r3, #4
 800746a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800746e:	f1b9 0f00 	cmp.w	r9, #0
 8007472:	d020      	beq.n	80074b6 <__multiply+0x13e>
 8007474:	46ae      	mov	lr, r5
 8007476:	f04f 0a00 	mov.w	sl, #0
 800747a:	6829      	ldr	r1, [r5, #0]
 800747c:	f104 0c14 	add.w	ip, r4, #20
 8007480:	f8bc b000 	ldrh.w	fp, [ip]
 8007484:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007488:	b289      	uxth	r1, r1
 800748a:	fb09 220b 	mla	r2, r9, fp, r2
 800748e:	4492      	add	sl, r2
 8007490:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007494:	f84e 1b04 	str.w	r1, [lr], #4
 8007498:	f85c 2b04 	ldr.w	r2, [ip], #4
 800749c:	f8be 1000 	ldrh.w	r1, [lr]
 80074a0:	0c12      	lsrs	r2, r2, #16
 80074a2:	fb09 1102 	mla	r1, r9, r2, r1
 80074a6:	4567      	cmp	r7, ip
 80074a8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074b0:	d8e6      	bhi.n	8007480 <__multiply+0x108>
 80074b2:	9a01      	ldr	r2, [sp, #4]
 80074b4:	50a9      	str	r1, [r5, r2]
 80074b6:	3504      	adds	r5, #4
 80074b8:	e79b      	b.n	80073f2 <__multiply+0x7a>
 80074ba:	3e01      	subs	r6, #1
 80074bc:	e79d      	b.n	80073fa <__multiply+0x82>
 80074be:	bf00      	nop
 80074c0:	08010e80 	.word	0x08010e80
 80074c4:	08010f0c 	.word	0x08010f0c

080074c8 <__pow5mult>:
 80074c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074cc:	4615      	mov	r5, r2
 80074ce:	f012 0203 	ands.w	r2, r2, #3
 80074d2:	4606      	mov	r6, r0
 80074d4:	460f      	mov	r7, r1
 80074d6:	d007      	beq.n	80074e8 <__pow5mult+0x20>
 80074d8:	4c25      	ldr	r4, [pc, #148]	; (8007570 <__pow5mult+0xa8>)
 80074da:	3a01      	subs	r2, #1
 80074dc:	2300      	movs	r3, #0
 80074de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074e2:	f7ff fe55 	bl	8007190 <__multadd>
 80074e6:	4607      	mov	r7, r0
 80074e8:	10ad      	asrs	r5, r5, #2
 80074ea:	d03d      	beq.n	8007568 <__pow5mult+0xa0>
 80074ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074ee:	b97c      	cbnz	r4, 8007510 <__pow5mult+0x48>
 80074f0:	2010      	movs	r0, #16
 80074f2:	f7ff fdb5 	bl	8007060 <malloc>
 80074f6:	4602      	mov	r2, r0
 80074f8:	6270      	str	r0, [r6, #36]	; 0x24
 80074fa:	b928      	cbnz	r0, 8007508 <__pow5mult+0x40>
 80074fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007500:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <__pow5mult+0xac>)
 8007502:	481d      	ldr	r0, [pc, #116]	; (8007578 <__pow5mult+0xb0>)
 8007504:	f000 fd1e 	bl	8007f44 <__assert_func>
 8007508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800750c:	6004      	str	r4, [r0, #0]
 800750e:	60c4      	str	r4, [r0, #12]
 8007510:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007518:	b94c      	cbnz	r4, 800752e <__pow5mult+0x66>
 800751a:	f240 2171 	movw	r1, #625	; 0x271
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff ff14 	bl	800734c <__i2b>
 8007524:	2300      	movs	r3, #0
 8007526:	4604      	mov	r4, r0
 8007528:	f8c8 0008 	str.w	r0, [r8, #8]
 800752c:	6003      	str	r3, [r0, #0]
 800752e:	f04f 0900 	mov.w	r9, #0
 8007532:	07eb      	lsls	r3, r5, #31
 8007534:	d50a      	bpl.n	800754c <__pow5mult+0x84>
 8007536:	4639      	mov	r1, r7
 8007538:	4622      	mov	r2, r4
 800753a:	4630      	mov	r0, r6
 800753c:	f7ff ff1c 	bl	8007378 <__multiply>
 8007540:	4680      	mov	r8, r0
 8007542:	4639      	mov	r1, r7
 8007544:	4630      	mov	r0, r6
 8007546:	f7ff fe01 	bl	800714c <_Bfree>
 800754a:	4647      	mov	r7, r8
 800754c:	106d      	asrs	r5, r5, #1
 800754e:	d00b      	beq.n	8007568 <__pow5mult+0xa0>
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	b938      	cbnz	r0, 8007564 <__pow5mult+0x9c>
 8007554:	4622      	mov	r2, r4
 8007556:	4621      	mov	r1, r4
 8007558:	4630      	mov	r0, r6
 800755a:	f7ff ff0d 	bl	8007378 <__multiply>
 800755e:	6020      	str	r0, [r4, #0]
 8007560:	f8c0 9000 	str.w	r9, [r0]
 8007564:	4604      	mov	r4, r0
 8007566:	e7e4      	b.n	8007532 <__pow5mult+0x6a>
 8007568:	4638      	mov	r0, r7
 800756a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756e:	bf00      	nop
 8007570:	08011058 	.word	0x08011058
 8007574:	08010e0e 	.word	0x08010e0e
 8007578:	08010f0c 	.word	0x08010f0c

0800757c <__lshift>:
 800757c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007580:	460c      	mov	r4, r1
 8007582:	4607      	mov	r7, r0
 8007584:	4691      	mov	r9, r2
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	6849      	ldr	r1, [r1, #4]
 800758a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800758e:	68a3      	ldr	r3, [r4, #8]
 8007590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007594:	f108 0601 	add.w	r6, r8, #1
 8007598:	42b3      	cmp	r3, r6
 800759a:	db0b      	blt.n	80075b4 <__lshift+0x38>
 800759c:	4638      	mov	r0, r7
 800759e:	f7ff fd95 	bl	80070cc <_Balloc>
 80075a2:	4605      	mov	r5, r0
 80075a4:	b948      	cbnz	r0, 80075ba <__lshift+0x3e>
 80075a6:	4602      	mov	r2, r0
 80075a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075ac:	4b29      	ldr	r3, [pc, #164]	; (8007654 <__lshift+0xd8>)
 80075ae:	482a      	ldr	r0, [pc, #168]	; (8007658 <__lshift+0xdc>)
 80075b0:	f000 fcc8 	bl	8007f44 <__assert_func>
 80075b4:	3101      	adds	r1, #1
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	e7ee      	b.n	8007598 <__lshift+0x1c>
 80075ba:	2300      	movs	r3, #0
 80075bc:	f100 0114 	add.w	r1, r0, #20
 80075c0:	f100 0210 	add.w	r2, r0, #16
 80075c4:	4618      	mov	r0, r3
 80075c6:	4553      	cmp	r3, sl
 80075c8:	db37      	blt.n	800763a <__lshift+0xbe>
 80075ca:	6920      	ldr	r0, [r4, #16]
 80075cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075d0:	f104 0314 	add.w	r3, r4, #20
 80075d4:	f019 091f 	ands.w	r9, r9, #31
 80075d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80075e0:	d02f      	beq.n	8007642 <__lshift+0xc6>
 80075e2:	468a      	mov	sl, r1
 80075e4:	f04f 0c00 	mov.w	ip, #0
 80075e8:	f1c9 0e20 	rsb	lr, r9, #32
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	fa02 f209 	lsl.w	r2, r2, r9
 80075f2:	ea42 020c 	orr.w	r2, r2, ip
 80075f6:	f84a 2b04 	str.w	r2, [sl], #4
 80075fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80075fe:	4298      	cmp	r0, r3
 8007600:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007604:	d8f2      	bhi.n	80075ec <__lshift+0x70>
 8007606:	1b03      	subs	r3, r0, r4
 8007608:	3b15      	subs	r3, #21
 800760a:	f023 0303 	bic.w	r3, r3, #3
 800760e:	3304      	adds	r3, #4
 8007610:	f104 0215 	add.w	r2, r4, #21
 8007614:	4290      	cmp	r0, r2
 8007616:	bf38      	it	cc
 8007618:	2304      	movcc	r3, #4
 800761a:	f841 c003 	str.w	ip, [r1, r3]
 800761e:	f1bc 0f00 	cmp.w	ip, #0
 8007622:	d001      	beq.n	8007628 <__lshift+0xac>
 8007624:	f108 0602 	add.w	r6, r8, #2
 8007628:	3e01      	subs	r6, #1
 800762a:	4638      	mov	r0, r7
 800762c:	4621      	mov	r1, r4
 800762e:	612e      	str	r6, [r5, #16]
 8007630:	f7ff fd8c 	bl	800714c <_Bfree>
 8007634:	4628      	mov	r0, r5
 8007636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763a:	f842 0f04 	str.w	r0, [r2, #4]!
 800763e:	3301      	adds	r3, #1
 8007640:	e7c1      	b.n	80075c6 <__lshift+0x4a>
 8007642:	3904      	subs	r1, #4
 8007644:	f853 2b04 	ldr.w	r2, [r3], #4
 8007648:	4298      	cmp	r0, r3
 800764a:	f841 2f04 	str.w	r2, [r1, #4]!
 800764e:	d8f9      	bhi.n	8007644 <__lshift+0xc8>
 8007650:	e7ea      	b.n	8007628 <__lshift+0xac>
 8007652:	bf00      	nop
 8007654:	08010e80 	.word	0x08010e80
 8007658:	08010f0c 	.word	0x08010f0c

0800765c <__mcmp>:
 800765c:	4603      	mov	r3, r0
 800765e:	690a      	ldr	r2, [r1, #16]
 8007660:	6900      	ldr	r0, [r0, #16]
 8007662:	b530      	push	{r4, r5, lr}
 8007664:	1a80      	subs	r0, r0, r2
 8007666:	d10d      	bne.n	8007684 <__mcmp+0x28>
 8007668:	3314      	adds	r3, #20
 800766a:	3114      	adds	r1, #20
 800766c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007670:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007674:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007678:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800767c:	4295      	cmp	r5, r2
 800767e:	d002      	beq.n	8007686 <__mcmp+0x2a>
 8007680:	d304      	bcc.n	800768c <__mcmp+0x30>
 8007682:	2001      	movs	r0, #1
 8007684:	bd30      	pop	{r4, r5, pc}
 8007686:	42a3      	cmp	r3, r4
 8007688:	d3f4      	bcc.n	8007674 <__mcmp+0x18>
 800768a:	e7fb      	b.n	8007684 <__mcmp+0x28>
 800768c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007690:	e7f8      	b.n	8007684 <__mcmp+0x28>
	...

08007694 <__mdiff>:
 8007694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007698:	460d      	mov	r5, r1
 800769a:	4607      	mov	r7, r0
 800769c:	4611      	mov	r1, r2
 800769e:	4628      	mov	r0, r5
 80076a0:	4614      	mov	r4, r2
 80076a2:	f7ff ffdb 	bl	800765c <__mcmp>
 80076a6:	1e06      	subs	r6, r0, #0
 80076a8:	d111      	bne.n	80076ce <__mdiff+0x3a>
 80076aa:	4631      	mov	r1, r6
 80076ac:	4638      	mov	r0, r7
 80076ae:	f7ff fd0d 	bl	80070cc <_Balloc>
 80076b2:	4602      	mov	r2, r0
 80076b4:	b928      	cbnz	r0, 80076c2 <__mdiff+0x2e>
 80076b6:	f240 2132 	movw	r1, #562	; 0x232
 80076ba:	4b3a      	ldr	r3, [pc, #232]	; (80077a4 <__mdiff+0x110>)
 80076bc:	483a      	ldr	r0, [pc, #232]	; (80077a8 <__mdiff+0x114>)
 80076be:	f000 fc41 	bl	8007f44 <__assert_func>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80076c8:	4610      	mov	r0, r2
 80076ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ce:	bfa4      	itt	ge
 80076d0:	4623      	movge	r3, r4
 80076d2:	462c      	movge	r4, r5
 80076d4:	4638      	mov	r0, r7
 80076d6:	6861      	ldr	r1, [r4, #4]
 80076d8:	bfa6      	itte	ge
 80076da:	461d      	movge	r5, r3
 80076dc:	2600      	movge	r6, #0
 80076de:	2601      	movlt	r6, #1
 80076e0:	f7ff fcf4 	bl	80070cc <_Balloc>
 80076e4:	4602      	mov	r2, r0
 80076e6:	b918      	cbnz	r0, 80076f0 <__mdiff+0x5c>
 80076e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80076ec:	4b2d      	ldr	r3, [pc, #180]	; (80077a4 <__mdiff+0x110>)
 80076ee:	e7e5      	b.n	80076bc <__mdiff+0x28>
 80076f0:	f102 0814 	add.w	r8, r2, #20
 80076f4:	46c2      	mov	sl, r8
 80076f6:	f04f 0c00 	mov.w	ip, #0
 80076fa:	6927      	ldr	r7, [r4, #16]
 80076fc:	60c6      	str	r6, [r0, #12]
 80076fe:	692e      	ldr	r6, [r5, #16]
 8007700:	f104 0014 	add.w	r0, r4, #20
 8007704:	f105 0914 	add.w	r9, r5, #20
 8007708:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800770c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007710:	3410      	adds	r4, #16
 8007712:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007716:	f859 3b04 	ldr.w	r3, [r9], #4
 800771a:	fa1f f18b 	uxth.w	r1, fp
 800771e:	448c      	add	ip, r1
 8007720:	b299      	uxth	r1, r3
 8007722:	0c1b      	lsrs	r3, r3, #16
 8007724:	ebac 0101 	sub.w	r1, ip, r1
 8007728:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800772c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007730:	b289      	uxth	r1, r1
 8007732:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007736:	454e      	cmp	r6, r9
 8007738:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800773c:	f84a 3b04 	str.w	r3, [sl], #4
 8007740:	d8e7      	bhi.n	8007712 <__mdiff+0x7e>
 8007742:	1b73      	subs	r3, r6, r5
 8007744:	3b15      	subs	r3, #21
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	3515      	adds	r5, #21
 800774c:	3304      	adds	r3, #4
 800774e:	42ae      	cmp	r6, r5
 8007750:	bf38      	it	cc
 8007752:	2304      	movcc	r3, #4
 8007754:	4418      	add	r0, r3
 8007756:	4443      	add	r3, r8
 8007758:	461e      	mov	r6, r3
 800775a:	4605      	mov	r5, r0
 800775c:	4575      	cmp	r5, lr
 800775e:	d30e      	bcc.n	800777e <__mdiff+0xea>
 8007760:	f10e 0103 	add.w	r1, lr, #3
 8007764:	1a09      	subs	r1, r1, r0
 8007766:	f021 0103 	bic.w	r1, r1, #3
 800776a:	3803      	subs	r0, #3
 800776c:	4586      	cmp	lr, r0
 800776e:	bf38      	it	cc
 8007770:	2100      	movcc	r1, #0
 8007772:	4419      	add	r1, r3
 8007774:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007778:	b18b      	cbz	r3, 800779e <__mdiff+0x10a>
 800777a:	6117      	str	r7, [r2, #16]
 800777c:	e7a4      	b.n	80076c8 <__mdiff+0x34>
 800777e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007782:	fa1f f188 	uxth.w	r1, r8
 8007786:	4461      	add	r1, ip
 8007788:	140c      	asrs	r4, r1, #16
 800778a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800778e:	b289      	uxth	r1, r1
 8007790:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007794:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007798:	f846 1b04 	str.w	r1, [r6], #4
 800779c:	e7de      	b.n	800775c <__mdiff+0xc8>
 800779e:	3f01      	subs	r7, #1
 80077a0:	e7e8      	b.n	8007774 <__mdiff+0xe0>
 80077a2:	bf00      	nop
 80077a4:	08010e80 	.word	0x08010e80
 80077a8:	08010f0c 	.word	0x08010f0c

080077ac <__ulp>:
 80077ac:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <__ulp+0x48>)
 80077ae:	400b      	ands	r3, r1
 80077b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd02      	ble.n	80077be <__ulp+0x12>
 80077b8:	2000      	movs	r0, #0
 80077ba:	4619      	mov	r1, r3
 80077bc:	4770      	bx	lr
 80077be:	425b      	negs	r3, r3
 80077c0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80077c4:	f04f 0000 	mov.w	r0, #0
 80077c8:	f04f 0100 	mov.w	r1, #0
 80077cc:	ea4f 5223 	mov.w	r2, r3, asr #20
 80077d0:	da04      	bge.n	80077dc <__ulp+0x30>
 80077d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80077d6:	fa43 f102 	asr.w	r1, r3, r2
 80077da:	4770      	bx	lr
 80077dc:	f1a2 0314 	sub.w	r3, r2, #20
 80077e0:	2b1e      	cmp	r3, #30
 80077e2:	bfd6      	itet	le
 80077e4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80077e8:	2301      	movgt	r3, #1
 80077ea:	fa22 f303 	lsrle.w	r3, r2, r3
 80077ee:	4618      	mov	r0, r3
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	7ff00000 	.word	0x7ff00000

080077f8 <__b2d>:
 80077f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077fc:	6907      	ldr	r7, [r0, #16]
 80077fe:	f100 0914 	add.w	r9, r0, #20
 8007802:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007806:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800780a:	f1a7 0804 	sub.w	r8, r7, #4
 800780e:	4630      	mov	r0, r6
 8007810:	f7ff fd4e 	bl	80072b0 <__hi0bits>
 8007814:	f1c0 0320 	rsb	r3, r0, #32
 8007818:	280a      	cmp	r0, #10
 800781a:	600b      	str	r3, [r1, #0]
 800781c:	491f      	ldr	r1, [pc, #124]	; (800789c <__b2d+0xa4>)
 800781e:	dc17      	bgt.n	8007850 <__b2d+0x58>
 8007820:	45c1      	cmp	r9, r8
 8007822:	bf28      	it	cs
 8007824:	2200      	movcs	r2, #0
 8007826:	f1c0 0c0b 	rsb	ip, r0, #11
 800782a:	fa26 f30c 	lsr.w	r3, r6, ip
 800782e:	bf38      	it	cc
 8007830:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007834:	ea43 0501 	orr.w	r5, r3, r1
 8007838:	f100 0315 	add.w	r3, r0, #21
 800783c:	fa06 f303 	lsl.w	r3, r6, r3
 8007840:	fa22 f20c 	lsr.w	r2, r2, ip
 8007844:	ea43 0402 	orr.w	r4, r3, r2
 8007848:	4620      	mov	r0, r4
 800784a:	4629      	mov	r1, r5
 800784c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007850:	45c1      	cmp	r9, r8
 8007852:	bf2e      	itee	cs
 8007854:	2200      	movcs	r2, #0
 8007856:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800785a:	f1a7 0808 	subcc.w	r8, r7, #8
 800785e:	f1b0 030b 	subs.w	r3, r0, #11
 8007862:	d016      	beq.n	8007892 <__b2d+0x9a>
 8007864:	f1c3 0720 	rsb	r7, r3, #32
 8007868:	fa22 f107 	lsr.w	r1, r2, r7
 800786c:	45c8      	cmp	r8, r9
 800786e:	fa06 f603 	lsl.w	r6, r6, r3
 8007872:	ea46 0601 	orr.w	r6, r6, r1
 8007876:	bf94      	ite	ls
 8007878:	2100      	movls	r1, #0
 800787a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800787e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007882:	fa02 f003 	lsl.w	r0, r2, r3
 8007886:	40f9      	lsrs	r1, r7
 8007888:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800788c:	ea40 0401 	orr.w	r4, r0, r1
 8007890:	e7da      	b.n	8007848 <__b2d+0x50>
 8007892:	4614      	mov	r4, r2
 8007894:	ea46 0501 	orr.w	r5, r6, r1
 8007898:	e7d6      	b.n	8007848 <__b2d+0x50>
 800789a:	bf00      	nop
 800789c:	3ff00000 	.word	0x3ff00000

080078a0 <__d2b>:
 80078a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078a4:	2101      	movs	r1, #1
 80078a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80078aa:	4690      	mov	r8, r2
 80078ac:	461d      	mov	r5, r3
 80078ae:	f7ff fc0d 	bl	80070cc <_Balloc>
 80078b2:	4604      	mov	r4, r0
 80078b4:	b930      	cbnz	r0, 80078c4 <__d2b+0x24>
 80078b6:	4602      	mov	r2, r0
 80078b8:	f240 310a 	movw	r1, #778	; 0x30a
 80078bc:	4b24      	ldr	r3, [pc, #144]	; (8007950 <__d2b+0xb0>)
 80078be:	4825      	ldr	r0, [pc, #148]	; (8007954 <__d2b+0xb4>)
 80078c0:	f000 fb40 	bl	8007f44 <__assert_func>
 80078c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80078c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80078cc:	bb2d      	cbnz	r5, 800791a <__d2b+0x7a>
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	f1b8 0300 	subs.w	r3, r8, #0
 80078d4:	d026      	beq.n	8007924 <__d2b+0x84>
 80078d6:	4668      	mov	r0, sp
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	f7ff fd09 	bl	80072f0 <__lo0bits>
 80078de:	9900      	ldr	r1, [sp, #0]
 80078e0:	b1f0      	cbz	r0, 8007920 <__d2b+0x80>
 80078e2:	9a01      	ldr	r2, [sp, #4]
 80078e4:	f1c0 0320 	rsb	r3, r0, #32
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	430b      	orrs	r3, r1
 80078ee:	40c2      	lsrs	r2, r0
 80078f0:	6163      	str	r3, [r4, #20]
 80078f2:	9201      	str	r2, [sp, #4]
 80078f4:	9b01      	ldr	r3, [sp, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	bf14      	ite	ne
 80078fa:	2102      	movne	r1, #2
 80078fc:	2101      	moveq	r1, #1
 80078fe:	61a3      	str	r3, [r4, #24]
 8007900:	6121      	str	r1, [r4, #16]
 8007902:	b1c5      	cbz	r5, 8007936 <__d2b+0x96>
 8007904:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007908:	4405      	add	r5, r0
 800790a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800790e:	603d      	str	r5, [r7, #0]
 8007910:	6030      	str	r0, [r6, #0]
 8007912:	4620      	mov	r0, r4
 8007914:	b002      	add	sp, #8
 8007916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800791e:	e7d6      	b.n	80078ce <__d2b+0x2e>
 8007920:	6161      	str	r1, [r4, #20]
 8007922:	e7e7      	b.n	80078f4 <__d2b+0x54>
 8007924:	a801      	add	r0, sp, #4
 8007926:	f7ff fce3 	bl	80072f0 <__lo0bits>
 800792a:	2101      	movs	r1, #1
 800792c:	9b01      	ldr	r3, [sp, #4]
 800792e:	6121      	str	r1, [r4, #16]
 8007930:	6163      	str	r3, [r4, #20]
 8007932:	3020      	adds	r0, #32
 8007934:	e7e5      	b.n	8007902 <__d2b+0x62>
 8007936:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800793a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800793e:	6038      	str	r0, [r7, #0]
 8007940:	6918      	ldr	r0, [r3, #16]
 8007942:	f7ff fcb5 	bl	80072b0 <__hi0bits>
 8007946:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800794a:	6031      	str	r1, [r6, #0]
 800794c:	e7e1      	b.n	8007912 <__d2b+0x72>
 800794e:	bf00      	nop
 8007950:	08010e80 	.word	0x08010e80
 8007954:	08010f0c 	.word	0x08010f0c

08007958 <__ratio>:
 8007958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	4688      	mov	r8, r1
 800795e:	4669      	mov	r1, sp
 8007960:	4681      	mov	r9, r0
 8007962:	f7ff ff49 	bl	80077f8 <__b2d>
 8007966:	460f      	mov	r7, r1
 8007968:	4604      	mov	r4, r0
 800796a:	460d      	mov	r5, r1
 800796c:	4640      	mov	r0, r8
 800796e:	a901      	add	r1, sp, #4
 8007970:	f7ff ff42 	bl	80077f8 <__b2d>
 8007974:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007978:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800797c:	468b      	mov	fp, r1
 800797e:	eba3 0c02 	sub.w	ip, r3, r2
 8007982:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007986:	1a9b      	subs	r3, r3, r2
 8007988:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800798c:	2b00      	cmp	r3, #0
 800798e:	bfd5      	itete	le
 8007990:	460a      	movle	r2, r1
 8007992:	462a      	movgt	r2, r5
 8007994:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007998:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800799c:	bfd8      	it	le
 800799e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80079a2:	465b      	mov	r3, fp
 80079a4:	4602      	mov	r2, r0
 80079a6:	4639      	mov	r1, r7
 80079a8:	4620      	mov	r0, r4
 80079aa:	f7f8 ff2b 	bl	8000804 <__aeabi_ddiv>
 80079ae:	b003      	add	sp, #12
 80079b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079b4 <__copybits>:
 80079b4:	3901      	subs	r1, #1
 80079b6:	b570      	push	{r4, r5, r6, lr}
 80079b8:	1149      	asrs	r1, r1, #5
 80079ba:	6914      	ldr	r4, [r2, #16]
 80079bc:	3101      	adds	r1, #1
 80079be:	f102 0314 	add.w	r3, r2, #20
 80079c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80079c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80079ca:	1f05      	subs	r5, r0, #4
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	d30c      	bcc.n	80079ea <__copybits+0x36>
 80079d0:	1aa3      	subs	r3, r4, r2
 80079d2:	3b11      	subs	r3, #17
 80079d4:	f023 0303 	bic.w	r3, r3, #3
 80079d8:	3211      	adds	r2, #17
 80079da:	42a2      	cmp	r2, r4
 80079dc:	bf88      	it	hi
 80079de:	2300      	movhi	r3, #0
 80079e0:	4418      	add	r0, r3
 80079e2:	2300      	movs	r3, #0
 80079e4:	4288      	cmp	r0, r1
 80079e6:	d305      	bcc.n	80079f4 <__copybits+0x40>
 80079e8:	bd70      	pop	{r4, r5, r6, pc}
 80079ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80079ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80079f2:	e7eb      	b.n	80079cc <__copybits+0x18>
 80079f4:	f840 3b04 	str.w	r3, [r0], #4
 80079f8:	e7f4      	b.n	80079e4 <__copybits+0x30>

080079fa <__any_on>:
 80079fa:	f100 0214 	add.w	r2, r0, #20
 80079fe:	6900      	ldr	r0, [r0, #16]
 8007a00:	114b      	asrs	r3, r1, #5
 8007a02:	4298      	cmp	r0, r3
 8007a04:	b510      	push	{r4, lr}
 8007a06:	db11      	blt.n	8007a2c <__any_on+0x32>
 8007a08:	dd0a      	ble.n	8007a20 <__any_on+0x26>
 8007a0a:	f011 011f 	ands.w	r1, r1, #31
 8007a0e:	d007      	beq.n	8007a20 <__any_on+0x26>
 8007a10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a14:	fa24 f001 	lsr.w	r0, r4, r1
 8007a18:	fa00 f101 	lsl.w	r1, r0, r1
 8007a1c:	428c      	cmp	r4, r1
 8007a1e:	d10b      	bne.n	8007a38 <__any_on+0x3e>
 8007a20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d803      	bhi.n	8007a30 <__any_on+0x36>
 8007a28:	2000      	movs	r0, #0
 8007a2a:	bd10      	pop	{r4, pc}
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	e7f7      	b.n	8007a20 <__any_on+0x26>
 8007a30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a34:	2900      	cmp	r1, #0
 8007a36:	d0f5      	beq.n	8007a24 <__any_on+0x2a>
 8007a38:	2001      	movs	r0, #1
 8007a3a:	e7f6      	b.n	8007a2a <__any_on+0x30>

08007a3c <_calloc_r>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	fba1 5402 	umull	r5, r4, r1, r2
 8007a42:	b934      	cbnz	r4, 8007a52 <_calloc_r+0x16>
 8007a44:	4629      	mov	r1, r5
 8007a46:	f000 f875 	bl	8007b34 <_malloc_r>
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	b928      	cbnz	r0, 8007a5a <_calloc_r+0x1e>
 8007a4e:	4630      	mov	r0, r6
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	220c      	movs	r2, #12
 8007a54:	2600      	movs	r6, #0
 8007a56:	6002      	str	r2, [r0, #0]
 8007a58:	e7f9      	b.n	8007a4e <_calloc_r+0x12>
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	f7fc fb9d 	bl	800419c <memset>
 8007a62:	e7f4      	b.n	8007a4e <_calloc_r+0x12>

08007a64 <_free_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4605      	mov	r5, r0
 8007a68:	2900      	cmp	r1, #0
 8007a6a:	d040      	beq.n	8007aee <_free_r+0x8a>
 8007a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a70:	1f0c      	subs	r4, r1, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bfb8      	it	lt
 8007a76:	18e4      	addlt	r4, r4, r3
 8007a78:	f000 faae 	bl	8007fd8 <__malloc_lock>
 8007a7c:	4a1c      	ldr	r2, [pc, #112]	; (8007af0 <_free_r+0x8c>)
 8007a7e:	6813      	ldr	r3, [r2, #0]
 8007a80:	b933      	cbnz	r3, 8007a90 <_free_r+0x2c>
 8007a82:	6063      	str	r3, [r4, #4]
 8007a84:	6014      	str	r4, [r2, #0]
 8007a86:	4628      	mov	r0, r5
 8007a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a8c:	f000 baaa 	b.w	8007fe4 <__malloc_unlock>
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	d908      	bls.n	8007aa6 <_free_r+0x42>
 8007a94:	6820      	ldr	r0, [r4, #0]
 8007a96:	1821      	adds	r1, r4, r0
 8007a98:	428b      	cmp	r3, r1
 8007a9a:	bf01      	itttt	eq
 8007a9c:	6819      	ldreq	r1, [r3, #0]
 8007a9e:	685b      	ldreq	r3, [r3, #4]
 8007aa0:	1809      	addeq	r1, r1, r0
 8007aa2:	6021      	streq	r1, [r4, #0]
 8007aa4:	e7ed      	b.n	8007a82 <_free_r+0x1e>
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	b10b      	cbz	r3, 8007ab0 <_free_r+0x4c>
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	d9fa      	bls.n	8007aa6 <_free_r+0x42>
 8007ab0:	6811      	ldr	r1, [r2, #0]
 8007ab2:	1850      	adds	r0, r2, r1
 8007ab4:	42a0      	cmp	r0, r4
 8007ab6:	d10b      	bne.n	8007ad0 <_free_r+0x6c>
 8007ab8:	6820      	ldr	r0, [r4, #0]
 8007aba:	4401      	add	r1, r0
 8007abc:	1850      	adds	r0, r2, r1
 8007abe:	4283      	cmp	r3, r0
 8007ac0:	6011      	str	r1, [r2, #0]
 8007ac2:	d1e0      	bne.n	8007a86 <_free_r+0x22>
 8007ac4:	6818      	ldr	r0, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4401      	add	r1, r0
 8007aca:	6011      	str	r1, [r2, #0]
 8007acc:	6053      	str	r3, [r2, #4]
 8007ace:	e7da      	b.n	8007a86 <_free_r+0x22>
 8007ad0:	d902      	bls.n	8007ad8 <_free_r+0x74>
 8007ad2:	230c      	movs	r3, #12
 8007ad4:	602b      	str	r3, [r5, #0]
 8007ad6:	e7d6      	b.n	8007a86 <_free_r+0x22>
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	1821      	adds	r1, r4, r0
 8007adc:	428b      	cmp	r3, r1
 8007ade:	bf01      	itttt	eq
 8007ae0:	6819      	ldreq	r1, [r3, #0]
 8007ae2:	685b      	ldreq	r3, [r3, #4]
 8007ae4:	1809      	addeq	r1, r1, r0
 8007ae6:	6021      	streq	r1, [r4, #0]
 8007ae8:	6063      	str	r3, [r4, #4]
 8007aea:	6054      	str	r4, [r2, #4]
 8007aec:	e7cb      	b.n	8007a86 <_free_r+0x22>
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	20000468 	.word	0x20000468

08007af4 <sbrk_aligned>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4e0e      	ldr	r6, [pc, #56]	; (8007b30 <sbrk_aligned+0x3c>)
 8007af8:	460c      	mov	r4, r1
 8007afa:	6831      	ldr	r1, [r6, #0]
 8007afc:	4605      	mov	r5, r0
 8007afe:	b911      	cbnz	r1, 8007b06 <sbrk_aligned+0x12>
 8007b00:	f000 f9ee 	bl	8007ee0 <_sbrk_r>
 8007b04:	6030      	str	r0, [r6, #0]
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 f9e9 	bl	8007ee0 <_sbrk_r>
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	d00a      	beq.n	8007b28 <sbrk_aligned+0x34>
 8007b12:	1cc4      	adds	r4, r0, #3
 8007b14:	f024 0403 	bic.w	r4, r4, #3
 8007b18:	42a0      	cmp	r0, r4
 8007b1a:	d007      	beq.n	8007b2c <sbrk_aligned+0x38>
 8007b1c:	1a21      	subs	r1, r4, r0
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 f9de 	bl	8007ee0 <_sbrk_r>
 8007b24:	3001      	adds	r0, #1
 8007b26:	d101      	bne.n	8007b2c <sbrk_aligned+0x38>
 8007b28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	2000046c 	.word	0x2000046c

08007b34 <_malloc_r>:
 8007b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b38:	1ccd      	adds	r5, r1, #3
 8007b3a:	f025 0503 	bic.w	r5, r5, #3
 8007b3e:	3508      	adds	r5, #8
 8007b40:	2d0c      	cmp	r5, #12
 8007b42:	bf38      	it	cc
 8007b44:	250c      	movcc	r5, #12
 8007b46:	2d00      	cmp	r5, #0
 8007b48:	4607      	mov	r7, r0
 8007b4a:	db01      	blt.n	8007b50 <_malloc_r+0x1c>
 8007b4c:	42a9      	cmp	r1, r5
 8007b4e:	d905      	bls.n	8007b5c <_malloc_r+0x28>
 8007b50:	230c      	movs	r3, #12
 8007b52:	2600      	movs	r6, #0
 8007b54:	603b      	str	r3, [r7, #0]
 8007b56:	4630      	mov	r0, r6
 8007b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b5c:	4e2e      	ldr	r6, [pc, #184]	; (8007c18 <_malloc_r+0xe4>)
 8007b5e:	f000 fa3b 	bl	8007fd8 <__malloc_lock>
 8007b62:	6833      	ldr	r3, [r6, #0]
 8007b64:	461c      	mov	r4, r3
 8007b66:	bb34      	cbnz	r4, 8007bb6 <_malloc_r+0x82>
 8007b68:	4629      	mov	r1, r5
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	f7ff ffc2 	bl	8007af4 <sbrk_aligned>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	4604      	mov	r4, r0
 8007b74:	d14d      	bne.n	8007c12 <_malloc_r+0xde>
 8007b76:	6834      	ldr	r4, [r6, #0]
 8007b78:	4626      	mov	r6, r4
 8007b7a:	2e00      	cmp	r6, #0
 8007b7c:	d140      	bne.n	8007c00 <_malloc_r+0xcc>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	4631      	mov	r1, r6
 8007b82:	4638      	mov	r0, r7
 8007b84:	eb04 0803 	add.w	r8, r4, r3
 8007b88:	f000 f9aa 	bl	8007ee0 <_sbrk_r>
 8007b8c:	4580      	cmp	r8, r0
 8007b8e:	d13a      	bne.n	8007c06 <_malloc_r+0xd2>
 8007b90:	6821      	ldr	r1, [r4, #0]
 8007b92:	3503      	adds	r5, #3
 8007b94:	1a6d      	subs	r5, r5, r1
 8007b96:	f025 0503 	bic.w	r5, r5, #3
 8007b9a:	3508      	adds	r5, #8
 8007b9c:	2d0c      	cmp	r5, #12
 8007b9e:	bf38      	it	cc
 8007ba0:	250c      	movcc	r5, #12
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	f7ff ffa5 	bl	8007af4 <sbrk_aligned>
 8007baa:	3001      	adds	r0, #1
 8007bac:	d02b      	beq.n	8007c06 <_malloc_r+0xd2>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	442b      	add	r3, r5
 8007bb2:	6023      	str	r3, [r4, #0]
 8007bb4:	e00e      	b.n	8007bd4 <_malloc_r+0xa0>
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	1b52      	subs	r2, r2, r5
 8007bba:	d41e      	bmi.n	8007bfa <_malloc_r+0xc6>
 8007bbc:	2a0b      	cmp	r2, #11
 8007bbe:	d916      	bls.n	8007bee <_malloc_r+0xba>
 8007bc0:	1961      	adds	r1, r4, r5
 8007bc2:	42a3      	cmp	r3, r4
 8007bc4:	6025      	str	r5, [r4, #0]
 8007bc6:	bf18      	it	ne
 8007bc8:	6059      	strne	r1, [r3, #4]
 8007bca:	6863      	ldr	r3, [r4, #4]
 8007bcc:	bf08      	it	eq
 8007bce:	6031      	streq	r1, [r6, #0]
 8007bd0:	5162      	str	r2, [r4, r5]
 8007bd2:	604b      	str	r3, [r1, #4]
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f104 060b 	add.w	r6, r4, #11
 8007bda:	f000 fa03 	bl	8007fe4 <__malloc_unlock>
 8007bde:	f026 0607 	bic.w	r6, r6, #7
 8007be2:	1d23      	adds	r3, r4, #4
 8007be4:	1af2      	subs	r2, r6, r3
 8007be6:	d0b6      	beq.n	8007b56 <_malloc_r+0x22>
 8007be8:	1b9b      	subs	r3, r3, r6
 8007bea:	50a3      	str	r3, [r4, r2]
 8007bec:	e7b3      	b.n	8007b56 <_malloc_r+0x22>
 8007bee:	6862      	ldr	r2, [r4, #4]
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	bf0c      	ite	eq
 8007bf4:	6032      	streq	r2, [r6, #0]
 8007bf6:	605a      	strne	r2, [r3, #4]
 8007bf8:	e7ec      	b.n	8007bd4 <_malloc_r+0xa0>
 8007bfa:	4623      	mov	r3, r4
 8007bfc:	6864      	ldr	r4, [r4, #4]
 8007bfe:	e7b2      	b.n	8007b66 <_malloc_r+0x32>
 8007c00:	4634      	mov	r4, r6
 8007c02:	6876      	ldr	r6, [r6, #4]
 8007c04:	e7b9      	b.n	8007b7a <_malloc_r+0x46>
 8007c06:	230c      	movs	r3, #12
 8007c08:	4638      	mov	r0, r7
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	f000 f9ea 	bl	8007fe4 <__malloc_unlock>
 8007c10:	e7a1      	b.n	8007b56 <_malloc_r+0x22>
 8007c12:	6025      	str	r5, [r4, #0]
 8007c14:	e7de      	b.n	8007bd4 <_malloc_r+0xa0>
 8007c16:	bf00      	nop
 8007c18:	20000468 	.word	0x20000468

08007c1c <__ssputs_r>:
 8007c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c20:	688e      	ldr	r6, [r1, #8]
 8007c22:	4682      	mov	sl, r0
 8007c24:	429e      	cmp	r6, r3
 8007c26:	460c      	mov	r4, r1
 8007c28:	4690      	mov	r8, r2
 8007c2a:	461f      	mov	r7, r3
 8007c2c:	d838      	bhi.n	8007ca0 <__ssputs_r+0x84>
 8007c2e:	898a      	ldrh	r2, [r1, #12]
 8007c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c34:	d032      	beq.n	8007c9c <__ssputs_r+0x80>
 8007c36:	6825      	ldr	r5, [r4, #0]
 8007c38:	6909      	ldr	r1, [r1, #16]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	eba5 0901 	sub.w	r9, r5, r1
 8007c40:	6965      	ldr	r5, [r4, #20]
 8007c42:	444b      	add	r3, r9
 8007c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c4c:	106d      	asrs	r5, r5, #1
 8007c4e:	429d      	cmp	r5, r3
 8007c50:	bf38      	it	cc
 8007c52:	461d      	movcc	r5, r3
 8007c54:	0553      	lsls	r3, r2, #21
 8007c56:	d531      	bpl.n	8007cbc <__ssputs_r+0xa0>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7ff ff6b 	bl	8007b34 <_malloc_r>
 8007c5e:	4606      	mov	r6, r0
 8007c60:	b950      	cbnz	r0, 8007c78 <__ssputs_r+0x5c>
 8007c62:	230c      	movs	r3, #12
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c68:	f8ca 3000 	str.w	r3, [sl]
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c78:	464a      	mov	r2, r9
 8007c7a:	6921      	ldr	r1, [r4, #16]
 8007c7c:	f7ff fa18 	bl	80070b0 <memcpy>
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8a:	81a3      	strh	r3, [r4, #12]
 8007c8c:	6126      	str	r6, [r4, #16]
 8007c8e:	444e      	add	r6, r9
 8007c90:	6026      	str	r6, [r4, #0]
 8007c92:	463e      	mov	r6, r7
 8007c94:	6165      	str	r5, [r4, #20]
 8007c96:	eba5 0509 	sub.w	r5, r5, r9
 8007c9a:	60a5      	str	r5, [r4, #8]
 8007c9c:	42be      	cmp	r6, r7
 8007c9e:	d900      	bls.n	8007ca2 <__ssputs_r+0x86>
 8007ca0:	463e      	mov	r6, r7
 8007ca2:	4632      	mov	r2, r6
 8007ca4:	4641      	mov	r1, r8
 8007ca6:	6820      	ldr	r0, [r4, #0]
 8007ca8:	f000 f97c 	bl	8007fa4 <memmove>
 8007cac:	68a3      	ldr	r3, [r4, #8]
 8007cae:	2000      	movs	r0, #0
 8007cb0:	1b9b      	subs	r3, r3, r6
 8007cb2:	60a3      	str	r3, [r4, #8]
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	4433      	add	r3, r6
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	e7db      	b.n	8007c74 <__ssputs_r+0x58>
 8007cbc:	462a      	mov	r2, r5
 8007cbe:	f000 f997 	bl	8007ff0 <_realloc_r>
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d1e1      	bne.n	8007c8c <__ssputs_r+0x70>
 8007cc8:	4650      	mov	r0, sl
 8007cca:	6921      	ldr	r1, [r4, #16]
 8007ccc:	f7ff feca 	bl	8007a64 <_free_r>
 8007cd0:	e7c7      	b.n	8007c62 <__ssputs_r+0x46>
	...

08007cd4 <_svfiprintf_r>:
 8007cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd8:	4698      	mov	r8, r3
 8007cda:	898b      	ldrh	r3, [r1, #12]
 8007cdc:	4607      	mov	r7, r0
 8007cde:	061b      	lsls	r3, r3, #24
 8007ce0:	460d      	mov	r5, r1
 8007ce2:	4614      	mov	r4, r2
 8007ce4:	b09d      	sub	sp, #116	; 0x74
 8007ce6:	d50e      	bpl.n	8007d06 <_svfiprintf_r+0x32>
 8007ce8:	690b      	ldr	r3, [r1, #16]
 8007cea:	b963      	cbnz	r3, 8007d06 <_svfiprintf_r+0x32>
 8007cec:	2140      	movs	r1, #64	; 0x40
 8007cee:	f7ff ff21 	bl	8007b34 <_malloc_r>
 8007cf2:	6028      	str	r0, [r5, #0]
 8007cf4:	6128      	str	r0, [r5, #16]
 8007cf6:	b920      	cbnz	r0, 8007d02 <_svfiprintf_r+0x2e>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d00:	e0d1      	b.n	8007ea6 <_svfiprintf_r+0x1d2>
 8007d02:	2340      	movs	r3, #64	; 0x40
 8007d04:	616b      	str	r3, [r5, #20]
 8007d06:	2300      	movs	r3, #0
 8007d08:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0a:	2320      	movs	r3, #32
 8007d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d10:	2330      	movs	r3, #48	; 0x30
 8007d12:	f04f 0901 	mov.w	r9, #1
 8007d16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ec0 <_svfiprintf_r+0x1ec>
 8007d1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d22:	4623      	mov	r3, r4
 8007d24:	469a      	mov	sl, r3
 8007d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d2a:	b10a      	cbz	r2, 8007d30 <_svfiprintf_r+0x5c>
 8007d2c:	2a25      	cmp	r2, #37	; 0x25
 8007d2e:	d1f9      	bne.n	8007d24 <_svfiprintf_r+0x50>
 8007d30:	ebba 0b04 	subs.w	fp, sl, r4
 8007d34:	d00b      	beq.n	8007d4e <_svfiprintf_r+0x7a>
 8007d36:	465b      	mov	r3, fp
 8007d38:	4622      	mov	r2, r4
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f7ff ff6d 	bl	8007c1c <__ssputs_r>
 8007d42:	3001      	adds	r0, #1
 8007d44:	f000 80aa 	beq.w	8007e9c <_svfiprintf_r+0x1c8>
 8007d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d4a:	445a      	add	r2, fp
 8007d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 80a2 	beq.w	8007e9c <_svfiprintf_r+0x1c8>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d62:	f10a 0a01 	add.w	sl, sl, #1
 8007d66:	9304      	str	r3, [sp, #16]
 8007d68:	9307      	str	r3, [sp, #28]
 8007d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8007d70:	4654      	mov	r4, sl
 8007d72:	2205      	movs	r2, #5
 8007d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d78:	4851      	ldr	r0, [pc, #324]	; (8007ec0 <_svfiprintf_r+0x1ec>)
 8007d7a:	f7ff f98b 	bl	8007094 <memchr>
 8007d7e:	9a04      	ldr	r2, [sp, #16]
 8007d80:	b9d8      	cbnz	r0, 8007dba <_svfiprintf_r+0xe6>
 8007d82:	06d0      	lsls	r0, r2, #27
 8007d84:	bf44      	itt	mi
 8007d86:	2320      	movmi	r3, #32
 8007d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d8c:	0711      	lsls	r1, r2, #28
 8007d8e:	bf44      	itt	mi
 8007d90:	232b      	movmi	r3, #43	; 0x2b
 8007d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d96:	f89a 3000 	ldrb.w	r3, [sl]
 8007d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d9c:	d015      	beq.n	8007dca <_svfiprintf_r+0xf6>
 8007d9e:	4654      	mov	r4, sl
 8007da0:	2000      	movs	r0, #0
 8007da2:	f04f 0c0a 	mov.w	ip, #10
 8007da6:	9a07      	ldr	r2, [sp, #28]
 8007da8:	4621      	mov	r1, r4
 8007daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dae:	3b30      	subs	r3, #48	; 0x30
 8007db0:	2b09      	cmp	r3, #9
 8007db2:	d94e      	bls.n	8007e52 <_svfiprintf_r+0x17e>
 8007db4:	b1b0      	cbz	r0, 8007de4 <_svfiprintf_r+0x110>
 8007db6:	9207      	str	r2, [sp, #28]
 8007db8:	e014      	b.n	8007de4 <_svfiprintf_r+0x110>
 8007dba:	eba0 0308 	sub.w	r3, r0, r8
 8007dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	46a2      	mov	sl, r4
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	e7d2      	b.n	8007d70 <_svfiprintf_r+0x9c>
 8007dca:	9b03      	ldr	r3, [sp, #12]
 8007dcc:	1d19      	adds	r1, r3, #4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	9103      	str	r1, [sp, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	bfbb      	ittet	lt
 8007dd6:	425b      	neglt	r3, r3
 8007dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007ddc:	9307      	strge	r3, [sp, #28]
 8007dde:	9307      	strlt	r3, [sp, #28]
 8007de0:	bfb8      	it	lt
 8007de2:	9204      	strlt	r2, [sp, #16]
 8007de4:	7823      	ldrb	r3, [r4, #0]
 8007de6:	2b2e      	cmp	r3, #46	; 0x2e
 8007de8:	d10c      	bne.n	8007e04 <_svfiprintf_r+0x130>
 8007dea:	7863      	ldrb	r3, [r4, #1]
 8007dec:	2b2a      	cmp	r3, #42	; 0x2a
 8007dee:	d135      	bne.n	8007e5c <_svfiprintf_r+0x188>
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	3402      	adds	r4, #2
 8007df4:	1d1a      	adds	r2, r3, #4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	9203      	str	r2, [sp, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bfb8      	it	lt
 8007dfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e02:	9305      	str	r3, [sp, #20]
 8007e04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007ec4 <_svfiprintf_r+0x1f0>
 8007e08:	2203      	movs	r2, #3
 8007e0a:	4650      	mov	r0, sl
 8007e0c:	7821      	ldrb	r1, [r4, #0]
 8007e0e:	f7ff f941 	bl	8007094 <memchr>
 8007e12:	b140      	cbz	r0, 8007e26 <_svfiprintf_r+0x152>
 8007e14:	2340      	movs	r3, #64	; 0x40
 8007e16:	eba0 000a 	sub.w	r0, r0, sl
 8007e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e1e:	9b04      	ldr	r3, [sp, #16]
 8007e20:	3401      	adds	r4, #1
 8007e22:	4303      	orrs	r3, r0
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e2a:	2206      	movs	r2, #6
 8007e2c:	4826      	ldr	r0, [pc, #152]	; (8007ec8 <_svfiprintf_r+0x1f4>)
 8007e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e32:	f7ff f92f 	bl	8007094 <memchr>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d038      	beq.n	8007eac <_svfiprintf_r+0x1d8>
 8007e3a:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <_svfiprintf_r+0x1f8>)
 8007e3c:	bb1b      	cbnz	r3, 8007e86 <_svfiprintf_r+0x1b2>
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	3307      	adds	r3, #7
 8007e42:	f023 0307 	bic.w	r3, r3, #7
 8007e46:	3308      	adds	r3, #8
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4c:	4433      	add	r3, r6
 8007e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e50:	e767      	b.n	8007d22 <_svfiprintf_r+0x4e>
 8007e52:	460c      	mov	r4, r1
 8007e54:	2001      	movs	r0, #1
 8007e56:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e5a:	e7a5      	b.n	8007da8 <_svfiprintf_r+0xd4>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f04f 0c0a 	mov.w	ip, #10
 8007e62:	4619      	mov	r1, r3
 8007e64:	3401      	adds	r4, #1
 8007e66:	9305      	str	r3, [sp, #20]
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e6e:	3a30      	subs	r2, #48	; 0x30
 8007e70:	2a09      	cmp	r2, #9
 8007e72:	d903      	bls.n	8007e7c <_svfiprintf_r+0x1a8>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0c5      	beq.n	8007e04 <_svfiprintf_r+0x130>
 8007e78:	9105      	str	r1, [sp, #20]
 8007e7a:	e7c3      	b.n	8007e04 <_svfiprintf_r+0x130>
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	2301      	movs	r3, #1
 8007e80:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e84:	e7f0      	b.n	8007e68 <_svfiprintf_r+0x194>
 8007e86:	ab03      	add	r3, sp, #12
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	462a      	mov	r2, r5
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <_svfiprintf_r+0x1fc>)
 8007e90:	a904      	add	r1, sp, #16
 8007e92:	f7fc fa29 	bl	80042e8 <_printf_float>
 8007e96:	1c42      	adds	r2, r0, #1
 8007e98:	4606      	mov	r6, r0
 8007e9a:	d1d6      	bne.n	8007e4a <_svfiprintf_r+0x176>
 8007e9c:	89ab      	ldrh	r3, [r5, #12]
 8007e9e:	065b      	lsls	r3, r3, #25
 8007ea0:	f53f af2c 	bmi.w	8007cfc <_svfiprintf_r+0x28>
 8007ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ea6:	b01d      	add	sp, #116	; 0x74
 8007ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eac:	ab03      	add	r3, sp, #12
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	462a      	mov	r2, r5
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	4b06      	ldr	r3, [pc, #24]	; (8007ed0 <_svfiprintf_r+0x1fc>)
 8007eb6:	a904      	add	r1, sp, #16
 8007eb8:	f7fc fcb2 	bl	8004820 <_printf_i>
 8007ebc:	e7eb      	b.n	8007e96 <_svfiprintf_r+0x1c2>
 8007ebe:	bf00      	nop
 8007ec0:	08011064 	.word	0x08011064
 8007ec4:	0801106a 	.word	0x0801106a
 8007ec8:	0801106e 	.word	0x0801106e
 8007ecc:	080042e9 	.word	0x080042e9
 8007ed0:	08007c1d 	.word	0x08007c1d

08007ed4 <nan>:
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	4901      	ldr	r1, [pc, #4]	; (8007edc <nan+0x8>)
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	7ff80000 	.word	0x7ff80000

08007ee0 <_sbrk_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4d05      	ldr	r5, [pc, #20]	; (8007efc <_sbrk_r+0x1c>)
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	602b      	str	r3, [r5, #0]
 8007eec:	f7fa f836 	bl	8001f5c <_sbrk>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_sbrk_r+0x1a>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_sbrk_r+0x1a>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20000470 	.word	0x20000470

08007f00 <strncmp>:
 8007f00:	4603      	mov	r3, r0
 8007f02:	b510      	push	{r4, lr}
 8007f04:	b172      	cbz	r2, 8007f24 <strncmp+0x24>
 8007f06:	3901      	subs	r1, #1
 8007f08:	1884      	adds	r4, r0, r2
 8007f0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f12:	4290      	cmp	r0, r2
 8007f14:	d101      	bne.n	8007f1a <strncmp+0x1a>
 8007f16:	42a3      	cmp	r3, r4
 8007f18:	d101      	bne.n	8007f1e <strncmp+0x1e>
 8007f1a:	1a80      	subs	r0, r0, r2
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d1f3      	bne.n	8007f0a <strncmp+0xa>
 8007f22:	e7fa      	b.n	8007f1a <strncmp+0x1a>
 8007f24:	4610      	mov	r0, r2
 8007f26:	e7f9      	b.n	8007f1c <strncmp+0x1c>

08007f28 <__ascii_wctomb>:
 8007f28:	4603      	mov	r3, r0
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	b141      	cbz	r1, 8007f40 <__ascii_wctomb+0x18>
 8007f2e:	2aff      	cmp	r2, #255	; 0xff
 8007f30:	d904      	bls.n	8007f3c <__ascii_wctomb+0x14>
 8007f32:	228a      	movs	r2, #138	; 0x8a
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	4770      	bx	lr
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	700a      	strb	r2, [r1, #0]
 8007f40:	4770      	bx	lr
	...

08007f44 <__assert_func>:
 8007f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f46:	4614      	mov	r4, r2
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <__assert_func+0x2c>)
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68d8      	ldr	r0, [r3, #12]
 8007f52:	b14c      	cbz	r4, 8007f68 <__assert_func+0x24>
 8007f54:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <__assert_func+0x30>)
 8007f56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f5a:	9100      	str	r1, [sp, #0]
 8007f5c:	462b      	mov	r3, r5
 8007f5e:	4906      	ldr	r1, [pc, #24]	; (8007f78 <__assert_func+0x34>)
 8007f60:	f000 f80e 	bl	8007f80 <fiprintf>
 8007f64:	f000 fa8a 	bl	800847c <abort>
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <__assert_func+0x38>)
 8007f6a:	461c      	mov	r4, r3
 8007f6c:	e7f3      	b.n	8007f56 <__assert_func+0x12>
 8007f6e:	bf00      	nop
 8007f70:	20000034 	.word	0x20000034
 8007f74:	08011075 	.word	0x08011075
 8007f78:	08011082 	.word	0x08011082
 8007f7c:	080110b0 	.word	0x080110b0

08007f80 <fiprintf>:
 8007f80:	b40e      	push	{r1, r2, r3}
 8007f82:	b503      	push	{r0, r1, lr}
 8007f84:	4601      	mov	r1, r0
 8007f86:	ab03      	add	r3, sp, #12
 8007f88:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <fiprintf+0x20>)
 8007f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8e:	6800      	ldr	r0, [r0, #0]
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	f000 f883 	bl	800809c <_vfiprintf_r>
 8007f96:	b002      	add	sp, #8
 8007f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f9c:	b003      	add	sp, #12
 8007f9e:	4770      	bx	lr
 8007fa0:	20000034 	.word	0x20000034

08007fa4 <memmove>:
 8007fa4:	4288      	cmp	r0, r1
 8007fa6:	b510      	push	{r4, lr}
 8007fa8:	eb01 0402 	add.w	r4, r1, r2
 8007fac:	d902      	bls.n	8007fb4 <memmove+0x10>
 8007fae:	4284      	cmp	r4, r0
 8007fb0:	4623      	mov	r3, r4
 8007fb2:	d807      	bhi.n	8007fc4 <memmove+0x20>
 8007fb4:	1e43      	subs	r3, r0, #1
 8007fb6:	42a1      	cmp	r1, r4
 8007fb8:	d008      	beq.n	8007fcc <memmove+0x28>
 8007fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fc2:	e7f8      	b.n	8007fb6 <memmove+0x12>
 8007fc4:	4601      	mov	r1, r0
 8007fc6:	4402      	add	r2, r0
 8007fc8:	428a      	cmp	r2, r1
 8007fca:	d100      	bne.n	8007fce <memmove+0x2a>
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fd6:	e7f7      	b.n	8007fc8 <memmove+0x24>

08007fd8 <__malloc_lock>:
 8007fd8:	4801      	ldr	r0, [pc, #4]	; (8007fe0 <__malloc_lock+0x8>)
 8007fda:	f000 bc0b 	b.w	80087f4 <__retarget_lock_acquire_recursive>
 8007fde:	bf00      	nop
 8007fe0:	20000474 	.word	0x20000474

08007fe4 <__malloc_unlock>:
 8007fe4:	4801      	ldr	r0, [pc, #4]	; (8007fec <__malloc_unlock+0x8>)
 8007fe6:	f000 bc06 	b.w	80087f6 <__retarget_lock_release_recursive>
 8007fea:	bf00      	nop
 8007fec:	20000474 	.word	0x20000474

08007ff0 <_realloc_r>:
 8007ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff4:	4680      	mov	r8, r0
 8007ff6:	4614      	mov	r4, r2
 8007ff8:	460e      	mov	r6, r1
 8007ffa:	b921      	cbnz	r1, 8008006 <_realloc_r+0x16>
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008002:	f7ff bd97 	b.w	8007b34 <_malloc_r>
 8008006:	b92a      	cbnz	r2, 8008014 <_realloc_r+0x24>
 8008008:	f7ff fd2c 	bl	8007a64 <_free_r>
 800800c:	4625      	mov	r5, r4
 800800e:	4628      	mov	r0, r5
 8008010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008014:	f000 fc56 	bl	80088c4 <_malloc_usable_size_r>
 8008018:	4284      	cmp	r4, r0
 800801a:	4607      	mov	r7, r0
 800801c:	d802      	bhi.n	8008024 <_realloc_r+0x34>
 800801e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008022:	d812      	bhi.n	800804a <_realloc_r+0x5a>
 8008024:	4621      	mov	r1, r4
 8008026:	4640      	mov	r0, r8
 8008028:	f7ff fd84 	bl	8007b34 <_malloc_r>
 800802c:	4605      	mov	r5, r0
 800802e:	2800      	cmp	r0, #0
 8008030:	d0ed      	beq.n	800800e <_realloc_r+0x1e>
 8008032:	42bc      	cmp	r4, r7
 8008034:	4622      	mov	r2, r4
 8008036:	4631      	mov	r1, r6
 8008038:	bf28      	it	cs
 800803a:	463a      	movcs	r2, r7
 800803c:	f7ff f838 	bl	80070b0 <memcpy>
 8008040:	4631      	mov	r1, r6
 8008042:	4640      	mov	r0, r8
 8008044:	f7ff fd0e 	bl	8007a64 <_free_r>
 8008048:	e7e1      	b.n	800800e <_realloc_r+0x1e>
 800804a:	4635      	mov	r5, r6
 800804c:	e7df      	b.n	800800e <_realloc_r+0x1e>

0800804e <__sfputc_r>:
 800804e:	6893      	ldr	r3, [r2, #8]
 8008050:	b410      	push	{r4}
 8008052:	3b01      	subs	r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	6093      	str	r3, [r2, #8]
 8008058:	da07      	bge.n	800806a <__sfputc_r+0x1c>
 800805a:	6994      	ldr	r4, [r2, #24]
 800805c:	42a3      	cmp	r3, r4
 800805e:	db01      	blt.n	8008064 <__sfputc_r+0x16>
 8008060:	290a      	cmp	r1, #10
 8008062:	d102      	bne.n	800806a <__sfputc_r+0x1c>
 8008064:	bc10      	pop	{r4}
 8008066:	f000 b949 	b.w	80082fc <__swbuf_r>
 800806a:	6813      	ldr	r3, [r2, #0]
 800806c:	1c58      	adds	r0, r3, #1
 800806e:	6010      	str	r0, [r2, #0]
 8008070:	7019      	strb	r1, [r3, #0]
 8008072:	4608      	mov	r0, r1
 8008074:	bc10      	pop	{r4}
 8008076:	4770      	bx	lr

08008078 <__sfputs_r>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	4606      	mov	r6, r0
 800807c:	460f      	mov	r7, r1
 800807e:	4614      	mov	r4, r2
 8008080:	18d5      	adds	r5, r2, r3
 8008082:	42ac      	cmp	r4, r5
 8008084:	d101      	bne.n	800808a <__sfputs_r+0x12>
 8008086:	2000      	movs	r0, #0
 8008088:	e007      	b.n	800809a <__sfputs_r+0x22>
 800808a:	463a      	mov	r2, r7
 800808c:	4630      	mov	r0, r6
 800808e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008092:	f7ff ffdc 	bl	800804e <__sfputc_r>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	d1f3      	bne.n	8008082 <__sfputs_r+0xa>
 800809a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800809c <_vfiprintf_r>:
 800809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a0:	460d      	mov	r5, r1
 80080a2:	4614      	mov	r4, r2
 80080a4:	4698      	mov	r8, r3
 80080a6:	4606      	mov	r6, r0
 80080a8:	b09d      	sub	sp, #116	; 0x74
 80080aa:	b118      	cbz	r0, 80080b4 <_vfiprintf_r+0x18>
 80080ac:	6983      	ldr	r3, [r0, #24]
 80080ae:	b90b      	cbnz	r3, 80080b4 <_vfiprintf_r+0x18>
 80080b0:	f000 fb02 	bl	80086b8 <__sinit>
 80080b4:	4b89      	ldr	r3, [pc, #548]	; (80082dc <_vfiprintf_r+0x240>)
 80080b6:	429d      	cmp	r5, r3
 80080b8:	d11b      	bne.n	80080f2 <_vfiprintf_r+0x56>
 80080ba:	6875      	ldr	r5, [r6, #4]
 80080bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080be:	07d9      	lsls	r1, r3, #31
 80080c0:	d405      	bmi.n	80080ce <_vfiprintf_r+0x32>
 80080c2:	89ab      	ldrh	r3, [r5, #12]
 80080c4:	059a      	lsls	r2, r3, #22
 80080c6:	d402      	bmi.n	80080ce <_vfiprintf_r+0x32>
 80080c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ca:	f000 fb93 	bl	80087f4 <__retarget_lock_acquire_recursive>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	071b      	lsls	r3, r3, #28
 80080d2:	d501      	bpl.n	80080d8 <_vfiprintf_r+0x3c>
 80080d4:	692b      	ldr	r3, [r5, #16]
 80080d6:	b9eb      	cbnz	r3, 8008114 <_vfiprintf_r+0x78>
 80080d8:	4629      	mov	r1, r5
 80080da:	4630      	mov	r0, r6
 80080dc:	f000 f960 	bl	80083a0 <__swsetup_r>
 80080e0:	b1c0      	cbz	r0, 8008114 <_vfiprintf_r+0x78>
 80080e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080e4:	07dc      	lsls	r4, r3, #31
 80080e6:	d50e      	bpl.n	8008106 <_vfiprintf_r+0x6a>
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ec:	b01d      	add	sp, #116	; 0x74
 80080ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f2:	4b7b      	ldr	r3, [pc, #492]	; (80082e0 <_vfiprintf_r+0x244>)
 80080f4:	429d      	cmp	r5, r3
 80080f6:	d101      	bne.n	80080fc <_vfiprintf_r+0x60>
 80080f8:	68b5      	ldr	r5, [r6, #8]
 80080fa:	e7df      	b.n	80080bc <_vfiprintf_r+0x20>
 80080fc:	4b79      	ldr	r3, [pc, #484]	; (80082e4 <_vfiprintf_r+0x248>)
 80080fe:	429d      	cmp	r5, r3
 8008100:	bf08      	it	eq
 8008102:	68f5      	ldreq	r5, [r6, #12]
 8008104:	e7da      	b.n	80080bc <_vfiprintf_r+0x20>
 8008106:	89ab      	ldrh	r3, [r5, #12]
 8008108:	0598      	lsls	r0, r3, #22
 800810a:	d4ed      	bmi.n	80080e8 <_vfiprintf_r+0x4c>
 800810c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800810e:	f000 fb72 	bl	80087f6 <__retarget_lock_release_recursive>
 8008112:	e7e9      	b.n	80080e8 <_vfiprintf_r+0x4c>
 8008114:	2300      	movs	r3, #0
 8008116:	9309      	str	r3, [sp, #36]	; 0x24
 8008118:	2320      	movs	r3, #32
 800811a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800811e:	2330      	movs	r3, #48	; 0x30
 8008120:	f04f 0901 	mov.w	r9, #1
 8008124:	f8cd 800c 	str.w	r8, [sp, #12]
 8008128:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80082e8 <_vfiprintf_r+0x24c>
 800812c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008130:	4623      	mov	r3, r4
 8008132:	469a      	mov	sl, r3
 8008134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008138:	b10a      	cbz	r2, 800813e <_vfiprintf_r+0xa2>
 800813a:	2a25      	cmp	r2, #37	; 0x25
 800813c:	d1f9      	bne.n	8008132 <_vfiprintf_r+0x96>
 800813e:	ebba 0b04 	subs.w	fp, sl, r4
 8008142:	d00b      	beq.n	800815c <_vfiprintf_r+0xc0>
 8008144:	465b      	mov	r3, fp
 8008146:	4622      	mov	r2, r4
 8008148:	4629      	mov	r1, r5
 800814a:	4630      	mov	r0, r6
 800814c:	f7ff ff94 	bl	8008078 <__sfputs_r>
 8008150:	3001      	adds	r0, #1
 8008152:	f000 80aa 	beq.w	80082aa <_vfiprintf_r+0x20e>
 8008156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008158:	445a      	add	r2, fp
 800815a:	9209      	str	r2, [sp, #36]	; 0x24
 800815c:	f89a 3000 	ldrb.w	r3, [sl]
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 80a2 	beq.w	80082aa <_vfiprintf_r+0x20e>
 8008166:	2300      	movs	r3, #0
 8008168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800816c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008170:	f10a 0a01 	add.w	sl, sl, #1
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	9307      	str	r3, [sp, #28]
 8008178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800817c:	931a      	str	r3, [sp, #104]	; 0x68
 800817e:	4654      	mov	r4, sl
 8008180:	2205      	movs	r2, #5
 8008182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008186:	4858      	ldr	r0, [pc, #352]	; (80082e8 <_vfiprintf_r+0x24c>)
 8008188:	f7fe ff84 	bl	8007094 <memchr>
 800818c:	9a04      	ldr	r2, [sp, #16]
 800818e:	b9d8      	cbnz	r0, 80081c8 <_vfiprintf_r+0x12c>
 8008190:	06d1      	lsls	r1, r2, #27
 8008192:	bf44      	itt	mi
 8008194:	2320      	movmi	r3, #32
 8008196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800819a:	0713      	lsls	r3, r2, #28
 800819c:	bf44      	itt	mi
 800819e:	232b      	movmi	r3, #43	; 0x2b
 80081a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081a4:	f89a 3000 	ldrb.w	r3, [sl]
 80081a8:	2b2a      	cmp	r3, #42	; 0x2a
 80081aa:	d015      	beq.n	80081d8 <_vfiprintf_r+0x13c>
 80081ac:	4654      	mov	r4, sl
 80081ae:	2000      	movs	r0, #0
 80081b0:	f04f 0c0a 	mov.w	ip, #10
 80081b4:	9a07      	ldr	r2, [sp, #28]
 80081b6:	4621      	mov	r1, r4
 80081b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081bc:	3b30      	subs	r3, #48	; 0x30
 80081be:	2b09      	cmp	r3, #9
 80081c0:	d94e      	bls.n	8008260 <_vfiprintf_r+0x1c4>
 80081c2:	b1b0      	cbz	r0, 80081f2 <_vfiprintf_r+0x156>
 80081c4:	9207      	str	r2, [sp, #28]
 80081c6:	e014      	b.n	80081f2 <_vfiprintf_r+0x156>
 80081c8:	eba0 0308 	sub.w	r3, r0, r8
 80081cc:	fa09 f303 	lsl.w	r3, r9, r3
 80081d0:	4313      	orrs	r3, r2
 80081d2:	46a2      	mov	sl, r4
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	e7d2      	b.n	800817e <_vfiprintf_r+0xe2>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	1d19      	adds	r1, r3, #4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	9103      	str	r1, [sp, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bfbb      	ittet	lt
 80081e4:	425b      	neglt	r3, r3
 80081e6:	f042 0202 	orrlt.w	r2, r2, #2
 80081ea:	9307      	strge	r3, [sp, #28]
 80081ec:	9307      	strlt	r3, [sp, #28]
 80081ee:	bfb8      	it	lt
 80081f0:	9204      	strlt	r2, [sp, #16]
 80081f2:	7823      	ldrb	r3, [r4, #0]
 80081f4:	2b2e      	cmp	r3, #46	; 0x2e
 80081f6:	d10c      	bne.n	8008212 <_vfiprintf_r+0x176>
 80081f8:	7863      	ldrb	r3, [r4, #1]
 80081fa:	2b2a      	cmp	r3, #42	; 0x2a
 80081fc:	d135      	bne.n	800826a <_vfiprintf_r+0x1ce>
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	3402      	adds	r4, #2
 8008202:	1d1a      	adds	r2, r3, #4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	9203      	str	r2, [sp, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	bfb8      	it	lt
 800820c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008210:	9305      	str	r3, [sp, #20]
 8008212:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80082ec <_vfiprintf_r+0x250>
 8008216:	2203      	movs	r2, #3
 8008218:	4650      	mov	r0, sl
 800821a:	7821      	ldrb	r1, [r4, #0]
 800821c:	f7fe ff3a 	bl	8007094 <memchr>
 8008220:	b140      	cbz	r0, 8008234 <_vfiprintf_r+0x198>
 8008222:	2340      	movs	r3, #64	; 0x40
 8008224:	eba0 000a 	sub.w	r0, r0, sl
 8008228:	fa03 f000 	lsl.w	r0, r3, r0
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	3401      	adds	r4, #1
 8008230:	4303      	orrs	r3, r0
 8008232:	9304      	str	r3, [sp, #16]
 8008234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008238:	2206      	movs	r2, #6
 800823a:	482d      	ldr	r0, [pc, #180]	; (80082f0 <_vfiprintf_r+0x254>)
 800823c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008240:	f7fe ff28 	bl	8007094 <memchr>
 8008244:	2800      	cmp	r0, #0
 8008246:	d03f      	beq.n	80082c8 <_vfiprintf_r+0x22c>
 8008248:	4b2a      	ldr	r3, [pc, #168]	; (80082f4 <_vfiprintf_r+0x258>)
 800824a:	bb1b      	cbnz	r3, 8008294 <_vfiprintf_r+0x1f8>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	3307      	adds	r3, #7
 8008250:	f023 0307 	bic.w	r3, r3, #7
 8008254:	3308      	adds	r3, #8
 8008256:	9303      	str	r3, [sp, #12]
 8008258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825a:	443b      	add	r3, r7
 800825c:	9309      	str	r3, [sp, #36]	; 0x24
 800825e:	e767      	b.n	8008130 <_vfiprintf_r+0x94>
 8008260:	460c      	mov	r4, r1
 8008262:	2001      	movs	r0, #1
 8008264:	fb0c 3202 	mla	r2, ip, r2, r3
 8008268:	e7a5      	b.n	80081b6 <_vfiprintf_r+0x11a>
 800826a:	2300      	movs	r3, #0
 800826c:	f04f 0c0a 	mov.w	ip, #10
 8008270:	4619      	mov	r1, r3
 8008272:	3401      	adds	r4, #1
 8008274:	9305      	str	r3, [sp, #20]
 8008276:	4620      	mov	r0, r4
 8008278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800827c:	3a30      	subs	r2, #48	; 0x30
 800827e:	2a09      	cmp	r2, #9
 8008280:	d903      	bls.n	800828a <_vfiprintf_r+0x1ee>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0c5      	beq.n	8008212 <_vfiprintf_r+0x176>
 8008286:	9105      	str	r1, [sp, #20]
 8008288:	e7c3      	b.n	8008212 <_vfiprintf_r+0x176>
 800828a:	4604      	mov	r4, r0
 800828c:	2301      	movs	r3, #1
 800828e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008292:	e7f0      	b.n	8008276 <_vfiprintf_r+0x1da>
 8008294:	ab03      	add	r3, sp, #12
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	462a      	mov	r2, r5
 800829a:	4630      	mov	r0, r6
 800829c:	4b16      	ldr	r3, [pc, #88]	; (80082f8 <_vfiprintf_r+0x25c>)
 800829e:	a904      	add	r1, sp, #16
 80082a0:	f7fc f822 	bl	80042e8 <_printf_float>
 80082a4:	4607      	mov	r7, r0
 80082a6:	1c78      	adds	r0, r7, #1
 80082a8:	d1d6      	bne.n	8008258 <_vfiprintf_r+0x1bc>
 80082aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ac:	07d9      	lsls	r1, r3, #31
 80082ae:	d405      	bmi.n	80082bc <_vfiprintf_r+0x220>
 80082b0:	89ab      	ldrh	r3, [r5, #12]
 80082b2:	059a      	lsls	r2, r3, #22
 80082b4:	d402      	bmi.n	80082bc <_vfiprintf_r+0x220>
 80082b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082b8:	f000 fa9d 	bl	80087f6 <__retarget_lock_release_recursive>
 80082bc:	89ab      	ldrh	r3, [r5, #12]
 80082be:	065b      	lsls	r3, r3, #25
 80082c0:	f53f af12 	bmi.w	80080e8 <_vfiprintf_r+0x4c>
 80082c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082c6:	e711      	b.n	80080ec <_vfiprintf_r+0x50>
 80082c8:	ab03      	add	r3, sp, #12
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	462a      	mov	r2, r5
 80082ce:	4630      	mov	r0, r6
 80082d0:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <_vfiprintf_r+0x25c>)
 80082d2:	a904      	add	r1, sp, #16
 80082d4:	f7fc faa4 	bl	8004820 <_printf_i>
 80082d8:	e7e4      	b.n	80082a4 <_vfiprintf_r+0x208>
 80082da:	bf00      	nop
 80082dc:	080110d4 	.word	0x080110d4
 80082e0:	080110f4 	.word	0x080110f4
 80082e4:	080110b4 	.word	0x080110b4
 80082e8:	08011064 	.word	0x08011064
 80082ec:	0801106a 	.word	0x0801106a
 80082f0:	0801106e 	.word	0x0801106e
 80082f4:	080042e9 	.word	0x080042e9
 80082f8:	08008079 	.word	0x08008079

080082fc <__swbuf_r>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	460e      	mov	r6, r1
 8008300:	4614      	mov	r4, r2
 8008302:	4605      	mov	r5, r0
 8008304:	b118      	cbz	r0, 800830e <__swbuf_r+0x12>
 8008306:	6983      	ldr	r3, [r0, #24]
 8008308:	b90b      	cbnz	r3, 800830e <__swbuf_r+0x12>
 800830a:	f000 f9d5 	bl	80086b8 <__sinit>
 800830e:	4b21      	ldr	r3, [pc, #132]	; (8008394 <__swbuf_r+0x98>)
 8008310:	429c      	cmp	r4, r3
 8008312:	d12b      	bne.n	800836c <__swbuf_r+0x70>
 8008314:	686c      	ldr	r4, [r5, #4]
 8008316:	69a3      	ldr	r3, [r4, #24]
 8008318:	60a3      	str	r3, [r4, #8]
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	071a      	lsls	r2, r3, #28
 800831e:	d52f      	bpl.n	8008380 <__swbuf_r+0x84>
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	b36b      	cbz	r3, 8008380 <__swbuf_r+0x84>
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	6820      	ldr	r0, [r4, #0]
 8008328:	b2f6      	uxtb	r6, r6
 800832a:	1ac0      	subs	r0, r0, r3
 800832c:	6963      	ldr	r3, [r4, #20]
 800832e:	4637      	mov	r7, r6
 8008330:	4283      	cmp	r3, r0
 8008332:	dc04      	bgt.n	800833e <__swbuf_r+0x42>
 8008334:	4621      	mov	r1, r4
 8008336:	4628      	mov	r0, r5
 8008338:	f000 f92a 	bl	8008590 <_fflush_r>
 800833c:	bb30      	cbnz	r0, 800838c <__swbuf_r+0x90>
 800833e:	68a3      	ldr	r3, [r4, #8]
 8008340:	3001      	adds	r0, #1
 8008342:	3b01      	subs	r3, #1
 8008344:	60a3      	str	r3, [r4, #8]
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	6022      	str	r2, [r4, #0]
 800834c:	701e      	strb	r6, [r3, #0]
 800834e:	6963      	ldr	r3, [r4, #20]
 8008350:	4283      	cmp	r3, r0
 8008352:	d004      	beq.n	800835e <__swbuf_r+0x62>
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	07db      	lsls	r3, r3, #31
 8008358:	d506      	bpl.n	8008368 <__swbuf_r+0x6c>
 800835a:	2e0a      	cmp	r6, #10
 800835c:	d104      	bne.n	8008368 <__swbuf_r+0x6c>
 800835e:	4621      	mov	r1, r4
 8008360:	4628      	mov	r0, r5
 8008362:	f000 f915 	bl	8008590 <_fflush_r>
 8008366:	b988      	cbnz	r0, 800838c <__swbuf_r+0x90>
 8008368:	4638      	mov	r0, r7
 800836a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800836c:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <__swbuf_r+0x9c>)
 800836e:	429c      	cmp	r4, r3
 8008370:	d101      	bne.n	8008376 <__swbuf_r+0x7a>
 8008372:	68ac      	ldr	r4, [r5, #8]
 8008374:	e7cf      	b.n	8008316 <__swbuf_r+0x1a>
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <__swbuf_r+0xa0>)
 8008378:	429c      	cmp	r4, r3
 800837a:	bf08      	it	eq
 800837c:	68ec      	ldreq	r4, [r5, #12]
 800837e:	e7ca      	b.n	8008316 <__swbuf_r+0x1a>
 8008380:	4621      	mov	r1, r4
 8008382:	4628      	mov	r0, r5
 8008384:	f000 f80c 	bl	80083a0 <__swsetup_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	d0cb      	beq.n	8008324 <__swbuf_r+0x28>
 800838c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008390:	e7ea      	b.n	8008368 <__swbuf_r+0x6c>
 8008392:	bf00      	nop
 8008394:	080110d4 	.word	0x080110d4
 8008398:	080110f4 	.word	0x080110f4
 800839c:	080110b4 	.word	0x080110b4

080083a0 <__swsetup_r>:
 80083a0:	4b32      	ldr	r3, [pc, #200]	; (800846c <__swsetup_r+0xcc>)
 80083a2:	b570      	push	{r4, r5, r6, lr}
 80083a4:	681d      	ldr	r5, [r3, #0]
 80083a6:	4606      	mov	r6, r0
 80083a8:	460c      	mov	r4, r1
 80083aa:	b125      	cbz	r5, 80083b6 <__swsetup_r+0x16>
 80083ac:	69ab      	ldr	r3, [r5, #24]
 80083ae:	b913      	cbnz	r3, 80083b6 <__swsetup_r+0x16>
 80083b0:	4628      	mov	r0, r5
 80083b2:	f000 f981 	bl	80086b8 <__sinit>
 80083b6:	4b2e      	ldr	r3, [pc, #184]	; (8008470 <__swsetup_r+0xd0>)
 80083b8:	429c      	cmp	r4, r3
 80083ba:	d10f      	bne.n	80083dc <__swsetup_r+0x3c>
 80083bc:	686c      	ldr	r4, [r5, #4]
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083c4:	0719      	lsls	r1, r3, #28
 80083c6:	d42c      	bmi.n	8008422 <__swsetup_r+0x82>
 80083c8:	06dd      	lsls	r5, r3, #27
 80083ca:	d411      	bmi.n	80083f0 <__swsetup_r+0x50>
 80083cc:	2309      	movs	r3, #9
 80083ce:	6033      	str	r3, [r6, #0]
 80083d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083d8:	81a3      	strh	r3, [r4, #12]
 80083da:	e03e      	b.n	800845a <__swsetup_r+0xba>
 80083dc:	4b25      	ldr	r3, [pc, #148]	; (8008474 <__swsetup_r+0xd4>)
 80083de:	429c      	cmp	r4, r3
 80083e0:	d101      	bne.n	80083e6 <__swsetup_r+0x46>
 80083e2:	68ac      	ldr	r4, [r5, #8]
 80083e4:	e7eb      	b.n	80083be <__swsetup_r+0x1e>
 80083e6:	4b24      	ldr	r3, [pc, #144]	; (8008478 <__swsetup_r+0xd8>)
 80083e8:	429c      	cmp	r4, r3
 80083ea:	bf08      	it	eq
 80083ec:	68ec      	ldreq	r4, [r5, #12]
 80083ee:	e7e6      	b.n	80083be <__swsetup_r+0x1e>
 80083f0:	0758      	lsls	r0, r3, #29
 80083f2:	d512      	bpl.n	800841a <__swsetup_r+0x7a>
 80083f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083f6:	b141      	cbz	r1, 800840a <__swsetup_r+0x6a>
 80083f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083fc:	4299      	cmp	r1, r3
 80083fe:	d002      	beq.n	8008406 <__swsetup_r+0x66>
 8008400:	4630      	mov	r0, r6
 8008402:	f7ff fb2f 	bl	8007a64 <_free_r>
 8008406:	2300      	movs	r3, #0
 8008408:	6363      	str	r3, [r4, #52]	; 0x34
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	2300      	movs	r3, #0
 8008414:	6063      	str	r3, [r4, #4]
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f043 0308 	orr.w	r3, r3, #8
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	b94b      	cbnz	r3, 800843a <__swsetup_r+0x9a>
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800842c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008430:	d003      	beq.n	800843a <__swsetup_r+0x9a>
 8008432:	4621      	mov	r1, r4
 8008434:	4630      	mov	r0, r6
 8008436:	f000 fa05 	bl	8008844 <__smakebuf_r>
 800843a:	89a0      	ldrh	r0, [r4, #12]
 800843c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008440:	f010 0301 	ands.w	r3, r0, #1
 8008444:	d00a      	beq.n	800845c <__swsetup_r+0xbc>
 8008446:	2300      	movs	r3, #0
 8008448:	60a3      	str	r3, [r4, #8]
 800844a:	6963      	ldr	r3, [r4, #20]
 800844c:	425b      	negs	r3, r3
 800844e:	61a3      	str	r3, [r4, #24]
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	b943      	cbnz	r3, 8008466 <__swsetup_r+0xc6>
 8008454:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008458:	d1ba      	bne.n	80083d0 <__swsetup_r+0x30>
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	0781      	lsls	r1, r0, #30
 800845e:	bf58      	it	pl
 8008460:	6963      	ldrpl	r3, [r4, #20]
 8008462:	60a3      	str	r3, [r4, #8]
 8008464:	e7f4      	b.n	8008450 <__swsetup_r+0xb0>
 8008466:	2000      	movs	r0, #0
 8008468:	e7f7      	b.n	800845a <__swsetup_r+0xba>
 800846a:	bf00      	nop
 800846c:	20000034 	.word	0x20000034
 8008470:	080110d4 	.word	0x080110d4
 8008474:	080110f4 	.word	0x080110f4
 8008478:	080110b4 	.word	0x080110b4

0800847c <abort>:
 800847c:	2006      	movs	r0, #6
 800847e:	b508      	push	{r3, lr}
 8008480:	f000 fa50 	bl	8008924 <raise>
 8008484:	2001      	movs	r0, #1
 8008486:	f7f9 fd39 	bl	8001efc <_exit>
	...

0800848c <__sflush_r>:
 800848c:	898a      	ldrh	r2, [r1, #12]
 800848e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008490:	4605      	mov	r5, r0
 8008492:	0710      	lsls	r0, r2, #28
 8008494:	460c      	mov	r4, r1
 8008496:	d457      	bmi.n	8008548 <__sflush_r+0xbc>
 8008498:	684b      	ldr	r3, [r1, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	dc04      	bgt.n	80084a8 <__sflush_r+0x1c>
 800849e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	dc01      	bgt.n	80084a8 <__sflush_r+0x1c>
 80084a4:	2000      	movs	r0, #0
 80084a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084aa:	2e00      	cmp	r6, #0
 80084ac:	d0fa      	beq.n	80084a4 <__sflush_r+0x18>
 80084ae:	2300      	movs	r3, #0
 80084b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084b4:	682f      	ldr	r7, [r5, #0]
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	d032      	beq.n	8008520 <__sflush_r+0x94>
 80084ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	075a      	lsls	r2, r3, #29
 80084c0:	d505      	bpl.n	80084ce <__sflush_r+0x42>
 80084c2:	6863      	ldr	r3, [r4, #4]
 80084c4:	1ac0      	subs	r0, r0, r3
 80084c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084c8:	b10b      	cbz	r3, 80084ce <__sflush_r+0x42>
 80084ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084cc:	1ac0      	subs	r0, r0, r3
 80084ce:	2300      	movs	r3, #0
 80084d0:	4602      	mov	r2, r0
 80084d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084d4:	4628      	mov	r0, r5
 80084d6:	6a21      	ldr	r1, [r4, #32]
 80084d8:	47b0      	blx	r6
 80084da:	1c43      	adds	r3, r0, #1
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	d106      	bne.n	80084ee <__sflush_r+0x62>
 80084e0:	6829      	ldr	r1, [r5, #0]
 80084e2:	291d      	cmp	r1, #29
 80084e4:	d82c      	bhi.n	8008540 <__sflush_r+0xb4>
 80084e6:	4a29      	ldr	r2, [pc, #164]	; (800858c <__sflush_r+0x100>)
 80084e8:	40ca      	lsrs	r2, r1
 80084ea:	07d6      	lsls	r6, r2, #31
 80084ec:	d528      	bpl.n	8008540 <__sflush_r+0xb4>
 80084ee:	2200      	movs	r2, #0
 80084f0:	6062      	str	r2, [r4, #4]
 80084f2:	6922      	ldr	r2, [r4, #16]
 80084f4:	04d9      	lsls	r1, r3, #19
 80084f6:	6022      	str	r2, [r4, #0]
 80084f8:	d504      	bpl.n	8008504 <__sflush_r+0x78>
 80084fa:	1c42      	adds	r2, r0, #1
 80084fc:	d101      	bne.n	8008502 <__sflush_r+0x76>
 80084fe:	682b      	ldr	r3, [r5, #0]
 8008500:	b903      	cbnz	r3, 8008504 <__sflush_r+0x78>
 8008502:	6560      	str	r0, [r4, #84]	; 0x54
 8008504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008506:	602f      	str	r7, [r5, #0]
 8008508:	2900      	cmp	r1, #0
 800850a:	d0cb      	beq.n	80084a4 <__sflush_r+0x18>
 800850c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008510:	4299      	cmp	r1, r3
 8008512:	d002      	beq.n	800851a <__sflush_r+0x8e>
 8008514:	4628      	mov	r0, r5
 8008516:	f7ff faa5 	bl	8007a64 <_free_r>
 800851a:	2000      	movs	r0, #0
 800851c:	6360      	str	r0, [r4, #52]	; 0x34
 800851e:	e7c2      	b.n	80084a6 <__sflush_r+0x1a>
 8008520:	6a21      	ldr	r1, [r4, #32]
 8008522:	2301      	movs	r3, #1
 8008524:	4628      	mov	r0, r5
 8008526:	47b0      	blx	r6
 8008528:	1c41      	adds	r1, r0, #1
 800852a:	d1c7      	bne.n	80084bc <__sflush_r+0x30>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0c4      	beq.n	80084bc <__sflush_r+0x30>
 8008532:	2b1d      	cmp	r3, #29
 8008534:	d001      	beq.n	800853a <__sflush_r+0xae>
 8008536:	2b16      	cmp	r3, #22
 8008538:	d101      	bne.n	800853e <__sflush_r+0xb2>
 800853a:	602f      	str	r7, [r5, #0]
 800853c:	e7b2      	b.n	80084a4 <__sflush_r+0x18>
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008544:	81a3      	strh	r3, [r4, #12]
 8008546:	e7ae      	b.n	80084a6 <__sflush_r+0x1a>
 8008548:	690f      	ldr	r7, [r1, #16]
 800854a:	2f00      	cmp	r7, #0
 800854c:	d0aa      	beq.n	80084a4 <__sflush_r+0x18>
 800854e:	0793      	lsls	r3, r2, #30
 8008550:	bf18      	it	ne
 8008552:	2300      	movne	r3, #0
 8008554:	680e      	ldr	r6, [r1, #0]
 8008556:	bf08      	it	eq
 8008558:	694b      	ldreq	r3, [r1, #20]
 800855a:	1bf6      	subs	r6, r6, r7
 800855c:	600f      	str	r7, [r1, #0]
 800855e:	608b      	str	r3, [r1, #8]
 8008560:	2e00      	cmp	r6, #0
 8008562:	dd9f      	ble.n	80084a4 <__sflush_r+0x18>
 8008564:	4633      	mov	r3, r6
 8008566:	463a      	mov	r2, r7
 8008568:	4628      	mov	r0, r5
 800856a:	6a21      	ldr	r1, [r4, #32]
 800856c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008570:	47e0      	blx	ip
 8008572:	2800      	cmp	r0, #0
 8008574:	dc06      	bgt.n	8008584 <__sflush_r+0xf8>
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800857c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	e790      	b.n	80084a6 <__sflush_r+0x1a>
 8008584:	4407      	add	r7, r0
 8008586:	1a36      	subs	r6, r6, r0
 8008588:	e7ea      	b.n	8008560 <__sflush_r+0xd4>
 800858a:	bf00      	nop
 800858c:	20400001 	.word	0x20400001

08008590 <_fflush_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	690b      	ldr	r3, [r1, #16]
 8008594:	4605      	mov	r5, r0
 8008596:	460c      	mov	r4, r1
 8008598:	b913      	cbnz	r3, 80085a0 <_fflush_r+0x10>
 800859a:	2500      	movs	r5, #0
 800859c:	4628      	mov	r0, r5
 800859e:	bd38      	pop	{r3, r4, r5, pc}
 80085a0:	b118      	cbz	r0, 80085aa <_fflush_r+0x1a>
 80085a2:	6983      	ldr	r3, [r0, #24]
 80085a4:	b90b      	cbnz	r3, 80085aa <_fflush_r+0x1a>
 80085a6:	f000 f887 	bl	80086b8 <__sinit>
 80085aa:	4b14      	ldr	r3, [pc, #80]	; (80085fc <_fflush_r+0x6c>)
 80085ac:	429c      	cmp	r4, r3
 80085ae:	d11b      	bne.n	80085e8 <_fflush_r+0x58>
 80085b0:	686c      	ldr	r4, [r5, #4]
 80085b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0ef      	beq.n	800859a <_fflush_r+0xa>
 80085ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085bc:	07d0      	lsls	r0, r2, #31
 80085be:	d404      	bmi.n	80085ca <_fflush_r+0x3a>
 80085c0:	0599      	lsls	r1, r3, #22
 80085c2:	d402      	bmi.n	80085ca <_fflush_r+0x3a>
 80085c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085c6:	f000 f915 	bl	80087f4 <__retarget_lock_acquire_recursive>
 80085ca:	4628      	mov	r0, r5
 80085cc:	4621      	mov	r1, r4
 80085ce:	f7ff ff5d 	bl	800848c <__sflush_r>
 80085d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085d4:	4605      	mov	r5, r0
 80085d6:	07da      	lsls	r2, r3, #31
 80085d8:	d4e0      	bmi.n	800859c <_fflush_r+0xc>
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	059b      	lsls	r3, r3, #22
 80085de:	d4dd      	bmi.n	800859c <_fflush_r+0xc>
 80085e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085e2:	f000 f908 	bl	80087f6 <__retarget_lock_release_recursive>
 80085e6:	e7d9      	b.n	800859c <_fflush_r+0xc>
 80085e8:	4b05      	ldr	r3, [pc, #20]	; (8008600 <_fflush_r+0x70>)
 80085ea:	429c      	cmp	r4, r3
 80085ec:	d101      	bne.n	80085f2 <_fflush_r+0x62>
 80085ee:	68ac      	ldr	r4, [r5, #8]
 80085f0:	e7df      	b.n	80085b2 <_fflush_r+0x22>
 80085f2:	4b04      	ldr	r3, [pc, #16]	; (8008604 <_fflush_r+0x74>)
 80085f4:	429c      	cmp	r4, r3
 80085f6:	bf08      	it	eq
 80085f8:	68ec      	ldreq	r4, [r5, #12]
 80085fa:	e7da      	b.n	80085b2 <_fflush_r+0x22>
 80085fc:	080110d4 	.word	0x080110d4
 8008600:	080110f4 	.word	0x080110f4
 8008604:	080110b4 	.word	0x080110b4

08008608 <std>:
 8008608:	2300      	movs	r3, #0
 800860a:	b510      	push	{r4, lr}
 800860c:	4604      	mov	r4, r0
 800860e:	e9c0 3300 	strd	r3, r3, [r0]
 8008612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008616:	6083      	str	r3, [r0, #8]
 8008618:	8181      	strh	r1, [r0, #12]
 800861a:	6643      	str	r3, [r0, #100]	; 0x64
 800861c:	81c2      	strh	r2, [r0, #14]
 800861e:	6183      	str	r3, [r0, #24]
 8008620:	4619      	mov	r1, r3
 8008622:	2208      	movs	r2, #8
 8008624:	305c      	adds	r0, #92	; 0x5c
 8008626:	f7fb fdb9 	bl	800419c <memset>
 800862a:	4b05      	ldr	r3, [pc, #20]	; (8008640 <std+0x38>)
 800862c:	6224      	str	r4, [r4, #32]
 800862e:	6263      	str	r3, [r4, #36]	; 0x24
 8008630:	4b04      	ldr	r3, [pc, #16]	; (8008644 <std+0x3c>)
 8008632:	62a3      	str	r3, [r4, #40]	; 0x28
 8008634:	4b04      	ldr	r3, [pc, #16]	; (8008648 <std+0x40>)
 8008636:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008638:	4b04      	ldr	r3, [pc, #16]	; (800864c <std+0x44>)
 800863a:	6323      	str	r3, [r4, #48]	; 0x30
 800863c:	bd10      	pop	{r4, pc}
 800863e:	bf00      	nop
 8008640:	0800895d 	.word	0x0800895d
 8008644:	0800897f 	.word	0x0800897f
 8008648:	080089b7 	.word	0x080089b7
 800864c:	080089db 	.word	0x080089db

08008650 <_cleanup_r>:
 8008650:	4901      	ldr	r1, [pc, #4]	; (8008658 <_cleanup_r+0x8>)
 8008652:	f000 b8af 	b.w	80087b4 <_fwalk_reent>
 8008656:	bf00      	nop
 8008658:	08008591 	.word	0x08008591

0800865c <__sfmoreglue>:
 800865c:	2268      	movs	r2, #104	; 0x68
 800865e:	b570      	push	{r4, r5, r6, lr}
 8008660:	1e4d      	subs	r5, r1, #1
 8008662:	4355      	muls	r5, r2
 8008664:	460e      	mov	r6, r1
 8008666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800866a:	f7ff fa63 	bl	8007b34 <_malloc_r>
 800866e:	4604      	mov	r4, r0
 8008670:	b140      	cbz	r0, 8008684 <__sfmoreglue+0x28>
 8008672:	2100      	movs	r1, #0
 8008674:	e9c0 1600 	strd	r1, r6, [r0]
 8008678:	300c      	adds	r0, #12
 800867a:	60a0      	str	r0, [r4, #8]
 800867c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008680:	f7fb fd8c 	bl	800419c <memset>
 8008684:	4620      	mov	r0, r4
 8008686:	bd70      	pop	{r4, r5, r6, pc}

08008688 <__sfp_lock_acquire>:
 8008688:	4801      	ldr	r0, [pc, #4]	; (8008690 <__sfp_lock_acquire+0x8>)
 800868a:	f000 b8b3 	b.w	80087f4 <__retarget_lock_acquire_recursive>
 800868e:	bf00      	nop
 8008690:	20000475 	.word	0x20000475

08008694 <__sfp_lock_release>:
 8008694:	4801      	ldr	r0, [pc, #4]	; (800869c <__sfp_lock_release+0x8>)
 8008696:	f000 b8ae 	b.w	80087f6 <__retarget_lock_release_recursive>
 800869a:	bf00      	nop
 800869c:	20000475 	.word	0x20000475

080086a0 <__sinit_lock_acquire>:
 80086a0:	4801      	ldr	r0, [pc, #4]	; (80086a8 <__sinit_lock_acquire+0x8>)
 80086a2:	f000 b8a7 	b.w	80087f4 <__retarget_lock_acquire_recursive>
 80086a6:	bf00      	nop
 80086a8:	20000476 	.word	0x20000476

080086ac <__sinit_lock_release>:
 80086ac:	4801      	ldr	r0, [pc, #4]	; (80086b4 <__sinit_lock_release+0x8>)
 80086ae:	f000 b8a2 	b.w	80087f6 <__retarget_lock_release_recursive>
 80086b2:	bf00      	nop
 80086b4:	20000476 	.word	0x20000476

080086b8 <__sinit>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	4604      	mov	r4, r0
 80086bc:	f7ff fff0 	bl	80086a0 <__sinit_lock_acquire>
 80086c0:	69a3      	ldr	r3, [r4, #24]
 80086c2:	b11b      	cbz	r3, 80086cc <__sinit+0x14>
 80086c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c8:	f7ff bff0 	b.w	80086ac <__sinit_lock_release>
 80086cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086d0:	6523      	str	r3, [r4, #80]	; 0x50
 80086d2:	4b13      	ldr	r3, [pc, #76]	; (8008720 <__sinit+0x68>)
 80086d4:	4a13      	ldr	r2, [pc, #76]	; (8008724 <__sinit+0x6c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80086da:	42a3      	cmp	r3, r4
 80086dc:	bf08      	it	eq
 80086de:	2301      	moveq	r3, #1
 80086e0:	4620      	mov	r0, r4
 80086e2:	bf08      	it	eq
 80086e4:	61a3      	streq	r3, [r4, #24]
 80086e6:	f000 f81f 	bl	8008728 <__sfp>
 80086ea:	6060      	str	r0, [r4, #4]
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 f81b 	bl	8008728 <__sfp>
 80086f2:	60a0      	str	r0, [r4, #8]
 80086f4:	4620      	mov	r0, r4
 80086f6:	f000 f817 	bl	8008728 <__sfp>
 80086fa:	2200      	movs	r2, #0
 80086fc:	2104      	movs	r1, #4
 80086fe:	60e0      	str	r0, [r4, #12]
 8008700:	6860      	ldr	r0, [r4, #4]
 8008702:	f7ff ff81 	bl	8008608 <std>
 8008706:	2201      	movs	r2, #1
 8008708:	2109      	movs	r1, #9
 800870a:	68a0      	ldr	r0, [r4, #8]
 800870c:	f7ff ff7c 	bl	8008608 <std>
 8008710:	2202      	movs	r2, #2
 8008712:	2112      	movs	r1, #18
 8008714:	68e0      	ldr	r0, [r4, #12]
 8008716:	f7ff ff77 	bl	8008608 <std>
 800871a:	2301      	movs	r3, #1
 800871c:	61a3      	str	r3, [r4, #24]
 800871e:	e7d1      	b.n	80086c4 <__sinit+0xc>
 8008720:	08010c6c 	.word	0x08010c6c
 8008724:	08008651 	.word	0x08008651

08008728 <__sfp>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	4607      	mov	r7, r0
 800872c:	f7ff ffac 	bl	8008688 <__sfp_lock_acquire>
 8008730:	4b1e      	ldr	r3, [pc, #120]	; (80087ac <__sfp+0x84>)
 8008732:	681e      	ldr	r6, [r3, #0]
 8008734:	69b3      	ldr	r3, [r6, #24]
 8008736:	b913      	cbnz	r3, 800873e <__sfp+0x16>
 8008738:	4630      	mov	r0, r6
 800873a:	f7ff ffbd 	bl	80086b8 <__sinit>
 800873e:	3648      	adds	r6, #72	; 0x48
 8008740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008744:	3b01      	subs	r3, #1
 8008746:	d503      	bpl.n	8008750 <__sfp+0x28>
 8008748:	6833      	ldr	r3, [r6, #0]
 800874a:	b30b      	cbz	r3, 8008790 <__sfp+0x68>
 800874c:	6836      	ldr	r6, [r6, #0]
 800874e:	e7f7      	b.n	8008740 <__sfp+0x18>
 8008750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008754:	b9d5      	cbnz	r5, 800878c <__sfp+0x64>
 8008756:	4b16      	ldr	r3, [pc, #88]	; (80087b0 <__sfp+0x88>)
 8008758:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800875c:	60e3      	str	r3, [r4, #12]
 800875e:	6665      	str	r5, [r4, #100]	; 0x64
 8008760:	f000 f847 	bl	80087f2 <__retarget_lock_init_recursive>
 8008764:	f7ff ff96 	bl	8008694 <__sfp_lock_release>
 8008768:	2208      	movs	r2, #8
 800876a:	4629      	mov	r1, r5
 800876c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008770:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008774:	6025      	str	r5, [r4, #0]
 8008776:	61a5      	str	r5, [r4, #24]
 8008778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800877c:	f7fb fd0e 	bl	800419c <memset>
 8008780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008788:	4620      	mov	r0, r4
 800878a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800878c:	3468      	adds	r4, #104	; 0x68
 800878e:	e7d9      	b.n	8008744 <__sfp+0x1c>
 8008790:	2104      	movs	r1, #4
 8008792:	4638      	mov	r0, r7
 8008794:	f7ff ff62 	bl	800865c <__sfmoreglue>
 8008798:	4604      	mov	r4, r0
 800879a:	6030      	str	r0, [r6, #0]
 800879c:	2800      	cmp	r0, #0
 800879e:	d1d5      	bne.n	800874c <__sfp+0x24>
 80087a0:	f7ff ff78 	bl	8008694 <__sfp_lock_release>
 80087a4:	230c      	movs	r3, #12
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	e7ee      	b.n	8008788 <__sfp+0x60>
 80087aa:	bf00      	nop
 80087ac:	08010c6c 	.word	0x08010c6c
 80087b0:	ffff0001 	.word	0xffff0001

080087b4 <_fwalk_reent>:
 80087b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b8:	4606      	mov	r6, r0
 80087ba:	4688      	mov	r8, r1
 80087bc:	2700      	movs	r7, #0
 80087be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087c6:	f1b9 0901 	subs.w	r9, r9, #1
 80087ca:	d505      	bpl.n	80087d8 <_fwalk_reent+0x24>
 80087cc:	6824      	ldr	r4, [r4, #0]
 80087ce:	2c00      	cmp	r4, #0
 80087d0:	d1f7      	bne.n	80087c2 <_fwalk_reent+0xe>
 80087d2:	4638      	mov	r0, r7
 80087d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087d8:	89ab      	ldrh	r3, [r5, #12]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d907      	bls.n	80087ee <_fwalk_reent+0x3a>
 80087de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087e2:	3301      	adds	r3, #1
 80087e4:	d003      	beq.n	80087ee <_fwalk_reent+0x3a>
 80087e6:	4629      	mov	r1, r5
 80087e8:	4630      	mov	r0, r6
 80087ea:	47c0      	blx	r8
 80087ec:	4307      	orrs	r7, r0
 80087ee:	3568      	adds	r5, #104	; 0x68
 80087f0:	e7e9      	b.n	80087c6 <_fwalk_reent+0x12>

080087f2 <__retarget_lock_init_recursive>:
 80087f2:	4770      	bx	lr

080087f4 <__retarget_lock_acquire_recursive>:
 80087f4:	4770      	bx	lr

080087f6 <__retarget_lock_release_recursive>:
 80087f6:	4770      	bx	lr

080087f8 <__swhatbuf_r>:
 80087f8:	b570      	push	{r4, r5, r6, lr}
 80087fa:	460e      	mov	r6, r1
 80087fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008800:	4614      	mov	r4, r2
 8008802:	2900      	cmp	r1, #0
 8008804:	461d      	mov	r5, r3
 8008806:	b096      	sub	sp, #88	; 0x58
 8008808:	da08      	bge.n	800881c <__swhatbuf_r+0x24>
 800880a:	2200      	movs	r2, #0
 800880c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	061a      	lsls	r2, r3, #24
 8008814:	d410      	bmi.n	8008838 <__swhatbuf_r+0x40>
 8008816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800881a:	e00e      	b.n	800883a <__swhatbuf_r+0x42>
 800881c:	466a      	mov	r2, sp
 800881e:	f000 f903 	bl	8008a28 <_fstat_r>
 8008822:	2800      	cmp	r0, #0
 8008824:	dbf1      	blt.n	800880a <__swhatbuf_r+0x12>
 8008826:	9a01      	ldr	r2, [sp, #4]
 8008828:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800882c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008830:	425a      	negs	r2, r3
 8008832:	415a      	adcs	r2, r3
 8008834:	602a      	str	r2, [r5, #0]
 8008836:	e7ee      	b.n	8008816 <__swhatbuf_r+0x1e>
 8008838:	2340      	movs	r3, #64	; 0x40
 800883a:	2000      	movs	r0, #0
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	b016      	add	sp, #88	; 0x58
 8008840:	bd70      	pop	{r4, r5, r6, pc}
	...

08008844 <__smakebuf_r>:
 8008844:	898b      	ldrh	r3, [r1, #12]
 8008846:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008848:	079d      	lsls	r5, r3, #30
 800884a:	4606      	mov	r6, r0
 800884c:	460c      	mov	r4, r1
 800884e:	d507      	bpl.n	8008860 <__smakebuf_r+0x1c>
 8008850:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	6123      	str	r3, [r4, #16]
 8008858:	2301      	movs	r3, #1
 800885a:	6163      	str	r3, [r4, #20]
 800885c:	b002      	add	sp, #8
 800885e:	bd70      	pop	{r4, r5, r6, pc}
 8008860:	466a      	mov	r2, sp
 8008862:	ab01      	add	r3, sp, #4
 8008864:	f7ff ffc8 	bl	80087f8 <__swhatbuf_r>
 8008868:	9900      	ldr	r1, [sp, #0]
 800886a:	4605      	mov	r5, r0
 800886c:	4630      	mov	r0, r6
 800886e:	f7ff f961 	bl	8007b34 <_malloc_r>
 8008872:	b948      	cbnz	r0, 8008888 <__smakebuf_r+0x44>
 8008874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008878:	059a      	lsls	r2, r3, #22
 800887a:	d4ef      	bmi.n	800885c <__smakebuf_r+0x18>
 800887c:	f023 0303 	bic.w	r3, r3, #3
 8008880:	f043 0302 	orr.w	r3, r3, #2
 8008884:	81a3      	strh	r3, [r4, #12]
 8008886:	e7e3      	b.n	8008850 <__smakebuf_r+0xc>
 8008888:	4b0d      	ldr	r3, [pc, #52]	; (80088c0 <__smakebuf_r+0x7c>)
 800888a:	62b3      	str	r3, [r6, #40]	; 0x28
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	6020      	str	r0, [r4, #0]
 8008890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008894:	81a3      	strh	r3, [r4, #12]
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	6120      	str	r0, [r4, #16]
 800889a:	6163      	str	r3, [r4, #20]
 800889c:	9b01      	ldr	r3, [sp, #4]
 800889e:	b15b      	cbz	r3, 80088b8 <__smakebuf_r+0x74>
 80088a0:	4630      	mov	r0, r6
 80088a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088a6:	f000 f8d1 	bl	8008a4c <_isatty_r>
 80088aa:	b128      	cbz	r0, 80088b8 <__smakebuf_r+0x74>
 80088ac:	89a3      	ldrh	r3, [r4, #12]
 80088ae:	f023 0303 	bic.w	r3, r3, #3
 80088b2:	f043 0301 	orr.w	r3, r3, #1
 80088b6:	81a3      	strh	r3, [r4, #12]
 80088b8:	89a0      	ldrh	r0, [r4, #12]
 80088ba:	4305      	orrs	r5, r0
 80088bc:	81a5      	strh	r5, [r4, #12]
 80088be:	e7cd      	b.n	800885c <__smakebuf_r+0x18>
 80088c0:	08008651 	.word	0x08008651

080088c4 <_malloc_usable_size_r>:
 80088c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c8:	1f18      	subs	r0, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bfbc      	itt	lt
 80088ce:	580b      	ldrlt	r3, [r1, r0]
 80088d0:	18c0      	addlt	r0, r0, r3
 80088d2:	4770      	bx	lr

080088d4 <_raise_r>:
 80088d4:	291f      	cmp	r1, #31
 80088d6:	b538      	push	{r3, r4, r5, lr}
 80088d8:	4604      	mov	r4, r0
 80088da:	460d      	mov	r5, r1
 80088dc:	d904      	bls.n	80088e8 <_raise_r+0x14>
 80088de:	2316      	movs	r3, #22
 80088e0:	6003      	str	r3, [r0, #0]
 80088e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088ea:	b112      	cbz	r2, 80088f2 <_raise_r+0x1e>
 80088ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088f0:	b94b      	cbnz	r3, 8008906 <_raise_r+0x32>
 80088f2:	4620      	mov	r0, r4
 80088f4:	f000 f830 	bl	8008958 <_getpid_r>
 80088f8:	462a      	mov	r2, r5
 80088fa:	4601      	mov	r1, r0
 80088fc:	4620      	mov	r0, r4
 80088fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008902:	f000 b817 	b.w	8008934 <_kill_r>
 8008906:	2b01      	cmp	r3, #1
 8008908:	d00a      	beq.n	8008920 <_raise_r+0x4c>
 800890a:	1c59      	adds	r1, r3, #1
 800890c:	d103      	bne.n	8008916 <_raise_r+0x42>
 800890e:	2316      	movs	r3, #22
 8008910:	6003      	str	r3, [r0, #0]
 8008912:	2001      	movs	r0, #1
 8008914:	e7e7      	b.n	80088e6 <_raise_r+0x12>
 8008916:	2400      	movs	r4, #0
 8008918:	4628      	mov	r0, r5
 800891a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800891e:	4798      	blx	r3
 8008920:	2000      	movs	r0, #0
 8008922:	e7e0      	b.n	80088e6 <_raise_r+0x12>

08008924 <raise>:
 8008924:	4b02      	ldr	r3, [pc, #8]	; (8008930 <raise+0xc>)
 8008926:	4601      	mov	r1, r0
 8008928:	6818      	ldr	r0, [r3, #0]
 800892a:	f7ff bfd3 	b.w	80088d4 <_raise_r>
 800892e:	bf00      	nop
 8008930:	20000034 	.word	0x20000034

08008934 <_kill_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	2300      	movs	r3, #0
 8008938:	4d06      	ldr	r5, [pc, #24]	; (8008954 <_kill_r+0x20>)
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	4611      	mov	r1, r2
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	f7f9 fad1 	bl	8001ee8 <_kill>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	d102      	bne.n	8008950 <_kill_r+0x1c>
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	b103      	cbz	r3, 8008950 <_kill_r+0x1c>
 800894e:	6023      	str	r3, [r4, #0]
 8008950:	bd38      	pop	{r3, r4, r5, pc}
 8008952:	bf00      	nop
 8008954:	20000470 	.word	0x20000470

08008958 <_getpid_r>:
 8008958:	f7f9 bac4 	b.w	8001ee4 <_getpid>

0800895c <__sread>:
 800895c:	b510      	push	{r4, lr}
 800895e:	460c      	mov	r4, r1
 8008960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008964:	f000 f894 	bl	8008a90 <_read_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	bfab      	itete	ge
 800896c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800896e:	89a3      	ldrhlt	r3, [r4, #12]
 8008970:	181b      	addge	r3, r3, r0
 8008972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008976:	bfac      	ite	ge
 8008978:	6563      	strge	r3, [r4, #84]	; 0x54
 800897a:	81a3      	strhlt	r3, [r4, #12]
 800897c:	bd10      	pop	{r4, pc}

0800897e <__swrite>:
 800897e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008982:	461f      	mov	r7, r3
 8008984:	898b      	ldrh	r3, [r1, #12]
 8008986:	4605      	mov	r5, r0
 8008988:	05db      	lsls	r3, r3, #23
 800898a:	460c      	mov	r4, r1
 800898c:	4616      	mov	r6, r2
 800898e:	d505      	bpl.n	800899c <__swrite+0x1e>
 8008990:	2302      	movs	r3, #2
 8008992:	2200      	movs	r2, #0
 8008994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008998:	f000 f868 	bl	8008a6c <_lseek_r>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	4632      	mov	r2, r6
 80089a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	4628      	mov	r0, r5
 80089a8:	463b      	mov	r3, r7
 80089aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089b2:	f000 b817 	b.w	80089e4 <_write_r>

080089b6 <__sseek>:
 80089b6:	b510      	push	{r4, lr}
 80089b8:	460c      	mov	r4, r1
 80089ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089be:	f000 f855 	bl	8008a6c <_lseek_r>
 80089c2:	1c43      	adds	r3, r0, #1
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	bf15      	itete	ne
 80089c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089d2:	81a3      	strheq	r3, [r4, #12]
 80089d4:	bf18      	it	ne
 80089d6:	81a3      	strhne	r3, [r4, #12]
 80089d8:	bd10      	pop	{r4, pc}

080089da <__sclose>:
 80089da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089de:	f000 b813 	b.w	8008a08 <_close_r>
	...

080089e4 <_write_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4604      	mov	r4, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	4611      	mov	r1, r2
 80089ec:	2200      	movs	r2, #0
 80089ee:	4d05      	ldr	r5, [pc, #20]	; (8008a04 <_write_r+0x20>)
 80089f0:	602a      	str	r2, [r5, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	f7f9 fa96 	bl	8001f24 <_write>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_write_r+0x1e>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_write_r+0x1e>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	20000470 	.word	0x20000470

08008a08 <_close_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4d05      	ldr	r5, [pc, #20]	; (8008a24 <_close_r+0x1c>)
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7f9 fa94 	bl	8001f40 <_close>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_close_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_close_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	20000470 	.word	0x20000470

08008a28 <_fstat_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4d06      	ldr	r5, [pc, #24]	; (8008a48 <_fstat_r+0x20>)
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	4611      	mov	r1, r2
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	f7f9 fa87 	bl	8001f48 <_fstat>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	d102      	bne.n	8008a44 <_fstat_r+0x1c>
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	b103      	cbz	r3, 8008a44 <_fstat_r+0x1c>
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	bd38      	pop	{r3, r4, r5, pc}
 8008a46:	bf00      	nop
 8008a48:	20000470 	.word	0x20000470

08008a4c <_isatty_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	2300      	movs	r3, #0
 8008a50:	4d05      	ldr	r5, [pc, #20]	; (8008a68 <_isatty_r+0x1c>)
 8008a52:	4604      	mov	r4, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	602b      	str	r3, [r5, #0]
 8008a58:	f7f9 fa7c 	bl	8001f54 <_isatty>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_isatty_r+0x1a>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_isatty_r+0x1a>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	20000470 	.word	0x20000470

08008a6c <_lseek_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	2200      	movs	r2, #0
 8008a76:	4d05      	ldr	r5, [pc, #20]	; (8008a8c <_lseek_r+0x20>)
 8008a78:	602a      	str	r2, [r5, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f7f9 fa6c 	bl	8001f58 <_lseek>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_lseek_r+0x1e>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_lseek_r+0x1e>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	20000470 	.word	0x20000470

08008a90 <_read_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	4611      	mov	r1, r2
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4d05      	ldr	r5, [pc, #20]	; (8008ab0 <_read_r+0x20>)
 8008a9c:	602a      	str	r2, [r5, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f7f9 fa32 	bl	8001f08 <_read>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_read_r+0x1e>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_read_r+0x1e>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	20000470 	.word	0x20000470

08008ab4 <_init>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	bf00      	nop
 8008ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aba:	bc08      	pop	{r3}
 8008abc:	469e      	mov	lr, r3
 8008abe:	4770      	bx	lr

08008ac0 <_fini>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	bf00      	nop
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr
