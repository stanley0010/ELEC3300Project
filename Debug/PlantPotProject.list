
PlantPotProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008144  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e8  0800a7e8  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7e8  0800a7e8  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7e8  0800a7e8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7e8  0800a7e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a7f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000098  0800a888  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  0800a888  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011976  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002459  00000000  00000000  00031a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00033e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000196e8  00000000  00000000  00034670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010461  00000000  00000000  0004dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009870b  00000000  00000000  0005e1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000f68c4  2**0
                  CONTENTS, READONLY
 19 .debug_loc    0000a7a5  00000000  00000000  000f6914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000033e8  00000000  00000000  001010c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001af4  00000000  00000000  001044a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000098 	.word	0x20000098
 8000200:	00000000 	.word	0x00000000
 8000204:	0800268c 	.word	0x0800268c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000009c 	.word	0x2000009c
 8000220:	0800268c 	.word	0x0800268c

08000224 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8000228:	2348      	movs	r3, #72	; 0x48
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800022a:	2628      	movs	r6, #40	; 0x28
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800022c:	2288      	movs	r2, #136	; 0x88
}

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
	LCD_CmdWrite(command);
 800022e:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8000232:	2501      	movs	r5, #1
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000234:	f04f 08e8 	mov.w	r8, #232	; 0xe8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8000238:	4f91      	ldr	r7, [pc, #580]	; (8000480 <lcdInit+0x25c>)
	HAL_Delay(50);
 800023a:	2032      	movs	r0, #50	; 0x32
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800023c:	703b      	strb	r3, [r7, #0]
  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800023e:	4b91      	ldr	r3, [pc, #580]	; (8000484 <lcdInit+0x260>)
}

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
	LCD_DataWrite(data);
 8000240:	f04f 0783 	mov.w	r7, #131	; 0x83
  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8000244:	701e      	strb	r6, [r3, #0]
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000246:	4b90      	ldr	r3, [pc, #576]	; (8000488 <lcdInit+0x264>)
	LCD_DataWrite(data);
 8000248:	f04f 092c 	mov.w	r9, #44	; 0x2c
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800024c:	701a      	strb	r2, [r3, #0]
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800024e:	4b8f      	ldr	r3, [pc, #572]	; (800048c <lcdInit+0x268>)
	LCD_DataWrite(data);
 8000250:	f04f 0a11 	mov.w	sl, #17
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000254:	f883 8000 	strb.w	r8, [r3]
	LCD_CmdWrite(command);
 8000258:	8025      	strh	r5, [r4, #0]
	HAL_Delay(50);
 800025a:	f000 fe59 	bl	8000f10 <HAL_Delay>
	LCD_CmdWrite(command);
 800025e:	23cf      	movs	r3, #207	; 0xcf
	LCD_DataWrite(data);
 8000260:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 8000262:	8026      	strh	r6, [r4, #0]
 8000264:	8023      	strh	r3, [r4, #0]
	LCD_DataWrite(data);
 8000266:	4b8a      	ldr	r3, [pc, #552]	; (8000490 <lcdInit+0x26c>)
 8000268:	2664      	movs	r6, #100	; 0x64
 800026a:	801a      	strh	r2, [r3, #0]
 800026c:	801f      	strh	r7, [r3, #0]
 800026e:	f04f 0730 	mov.w	r7, #48	; 0x30
 8000272:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8000274:	f04f 07ed 	mov.w	r7, #237	; 0xed
 8000278:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800027a:	f04f 0703 	mov.w	r7, #3
 800027e:	801e      	strh	r6, [r3, #0]
 8000280:	801f      	strh	r7, [r3, #0]
 8000282:	f04f 0712 	mov.w	r7, #18
 8000286:	801f      	strh	r7, [r3, #0]
 8000288:	f04f 0781 	mov.w	r7, #129	; 0x81
 800028c:	801f      	strh	r7, [r3, #0]
 800028e:	f04f 0785 	mov.w	r7, #133	; 0x85
	LCD_CmdWrite(command);
 8000292:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8000296:	801f      	strh	r7, [r3, #0]
 8000298:	f04f 0779 	mov.w	r7, #121	; 0x79
 800029c:	801d      	strh	r5, [r3, #0]
 800029e:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80002a0:	f04f 07cb 	mov.w	r7, #203	; 0xcb
 80002a4:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80002a6:	f04f 0739 	mov.w	r7, #57	; 0x39
 80002aa:	801f      	strh	r7, [r3, #0]
 80002ac:	f04f 0734 	mov.w	r7, #52	; 0x34
 80002b0:	f8a3 9000 	strh.w	r9, [r3]
 80002b4:	f04f 0802 	mov.w	r8, #2
 80002b8:	801a      	strh	r2, [r3, #0]
 80002ba:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80002bc:	f04f 07f7 	mov.w	r7, #247	; 0xf7
	LCD_DataWrite(data);
 80002c0:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 80002c4:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80002c6:	f04f 0720 	mov.w	r7, #32
 80002ca:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80002cc:	f04f 07ea 	mov.w	r7, #234	; 0xea
 80002d0:	8027      	strh	r7, [r4, #0]
 80002d2:	f04f 07c0 	mov.w	r7, #192	; 0xc0
	LCD_DataWrite(data);
 80002d6:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80002d8:	f04f 08c1 	mov.w	r8, #193	; 0xc1
	LCD_DataWrite(data);
 80002dc:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80002de:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80002e0:	f04f 0726 	mov.w	r7, #38	; 0x26
 80002e4:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80002e6:	f8a4 8000 	strh.w	r8, [r4]
 80002ea:	f04f 08c5 	mov.w	r8, #197	; 0xc5
	LCD_DataWrite(data);
 80002ee:	f8a3 a000 	strh.w	sl, [r3]
	LCD_CmdWrite(command);
 80002f2:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 80002f6:	f04f 0835 	mov.w	r8, #53	; 0x35
 80002fa:	f8a3 8000 	strh.w	r8, [r3]
 80002fe:	f04f 083e 	mov.w	r8, #62	; 0x3e
 8000302:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8000306:	f04f 08c7 	mov.w	r8, #199	; 0xc7
 800030a:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 800030e:	f04f 08be 	mov.w	r8, #190	; 0xbe
 8000312:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8000316:	f04f 0836 	mov.w	r8, #54	; 0x36
 800031a:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
 800031e:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8000322:	f04f 0855 	mov.w	r8, #85	; 0x55
  lcdWriteData(lcdPortraitConfig);
 8000326:	4f56      	ldr	r7, [pc, #344]	; (8000480 <lcdInit+0x25c>)
	LCD_DataWrite(data);
 8000328:	210a      	movs	r1, #10
  lcdWriteData(lcdPortraitConfig);
 800032a:	783f      	ldrb	r7, [r7, #0]
	LCD_DataWrite(data);
 800032c:	2007      	movs	r0, #7
 800032e:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8000330:	f8a4 c000 	strh.w	ip, [r4]
	LCD_DataWrite(data);
 8000334:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8000338:	f04f 08b1 	mov.w	r8, #177	; 0xb1
 800033c:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8000340:	f04f 081b 	mov.w	r8, #27
 8000344:	801a      	strh	r2, [r3, #0]
 8000346:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 800034a:	f04f 08f2 	mov.w	r8, #242	; 0xf2
 800034e:	f04f 0726 	mov.w	r7, #38	; 0x26
 8000352:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8000356:	f04f 0808 	mov.w	r8, #8
 800035a:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 800035e:	8027      	strh	r7, [r4, #0]
 8000360:	f04f 07e0 	mov.w	r7, #224	; 0xe0
	LCD_DataWrite(data);
 8000364:	801d      	strh	r5, [r3, #0]
 8000366:	f04f 081a 	mov.w	r8, #26
	LCD_CmdWrite(command);
 800036a:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800036c:	f04f 071f 	mov.w	r7, #31
 8000370:	801f      	strh	r7, [r3, #0]
 8000372:	f8a3 8000 	strh.w	r8, [r3]
 8000376:	f04f 0818 	mov.w	r8, #24
 800037a:	f8a3 8000 	strh.w	r8, [r3]
 800037e:	f04f 080f 	mov.w	r8, #15
 8000382:	8019      	strh	r1, [r3, #0]
 8000384:	f8a3 8000 	strh.w	r8, [r3]
 8000388:	f04f 0806 	mov.w	r8, #6
 800038c:	f8a3 8000 	strh.w	r8, [r3]
 8000390:	f04f 0845 	mov.w	r8, #69	; 0x45
 8000394:	f8a3 8000 	strh.w	r8, [r3]
 8000398:	f04f 0887 	mov.w	r8, #135	; 0x87
 800039c:	f8a3 8000 	strh.w	r8, [r3]
 80003a0:	f04f 0832 	mov.w	r8, #50	; 0x32
 80003a4:	f8a3 8000 	strh.w	r8, [r3]
 80003a8:	f04f 0802 	mov.w	r8, #2
 80003ac:	8019      	strh	r1, [r3, #0]
 80003ae:	f04f 0e05 	mov.w	lr, #5
 80003b2:	8018      	strh	r0, [r3, #0]
 80003b4:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 80003b8:	f04f 08e1 	mov.w	r8, #225	; 0xe1
	LCD_DataWrite(data);
 80003bc:	8018      	strh	r0, [r3, #0]
 80003be:	f8a3 e000 	strh.w	lr, [r3]
 80003c2:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80003c4:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 80003c8:	f04f 0825 	mov.w	r8, #37	; 0x25
 80003cc:	801a      	strh	r2, [r3, #0]
 80003ce:	f04f 0b27 	mov.w	fp, #39	; 0x27
 80003d2:	f8a3 8000 	strh.w	r8, [r3]
 80003d6:	f04f 0810 	mov.w	r8, #16
 80003da:	f8a3 b000 	strh.w	fp, [r3]
 80003de:	f8a3 e000 	strh.w	lr, [r3]
 80003e2:	f8a3 8000 	strh.w	r8, [r3]
 80003e6:	f04f 0809 	mov.w	r8, #9
 80003ea:	f8a3 8000 	strh.w	r8, [r3]
 80003ee:	f04f 0878 	mov.w	r8, #120	; 0x78
 80003f2:	f8a3 c000 	strh.w	ip, [r3]
 80003f6:	f8a3 8000 	strh.w	r8, [r3]
 80003fa:	f04f 084d 	mov.w	r8, #77	; 0x4d
 80003fe:	f8a3 8000 	strh.w	r8, [r3]
 8000402:	f8a3 e000 	strh.w	lr, [r3]
 8000406:	f04f 0818 	mov.w	r8, #24
 800040a:	f04f 0e0d 	mov.w	lr, #13
 800040e:	f8a3 8000 	strh.w	r8, [r3]
 8000412:	f8a3 e000 	strh.w	lr, [r3]
 8000416:	f04f 0e38 	mov.w	lr, #56	; 0x38
 800041a:	f8a3 e000 	strh.w	lr, [r3]
 800041e:	f8a3 c000 	strh.w	ip, [r3]
 8000422:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8000424:	f04f 072a 	mov.w	r7, #42	; 0x2a
 8000428:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800042a:	f04f 07ef 	mov.w	r7, #239	; 0xef
 800042e:	801a      	strh	r2, [r3, #0]
 8000430:	801a      	strh	r2, [r3, #0]
 8000432:	801a      	strh	r2, [r3, #0]
 8000434:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8000436:	f04f 072b 	mov.w	r7, #43	; 0x2b
 800043a:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800043c:	801a      	strh	r2, [r3, #0]
 800043e:	801a      	strh	r2, [r3, #0]
 8000440:	801d      	strh	r5, [r3, #0]
 8000442:	f04f 053f 	mov.w	r5, #63	; 0x3f
 8000446:	801d      	strh	r5, [r3, #0]
	LCD_CmdWrite(command);
 8000448:	f04f 05b7 	mov.w	r5, #183	; 0xb7
 800044c:	8025      	strh	r5, [r4, #0]
	LCD_DataWrite(data);
 800044e:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 8000450:	f04f 00b6 	mov.w	r0, #182	; 0xb6
 8000454:	8020      	strh	r0, [r4, #0]
	LCD_DataWrite(data);
 8000456:	8019      	strh	r1, [r3, #0]
 8000458:	f04f 0182 	mov.w	r1, #130	; 0x82
  HAL_Delay(100);
 800045c:	4630      	mov	r0, r6
	LCD_DataWrite(data);
 800045e:	8019      	strh	r1, [r3, #0]
 8000460:	f8a3 b000 	strh.w	fp, [r3]
 8000464:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 8000466:	f8a4 a000 	strh.w	sl, [r4]
  HAL_Delay(100);
 800046a:	f000 fd51 	bl	8000f10 <HAL_Delay>
	LCD_CmdWrite(command);
 800046e:	2329      	movs	r3, #41	; 0x29
  HAL_Delay(100);
 8000470:	4630      	mov	r0, r6
	LCD_CmdWrite(command);
 8000472:	8023      	strh	r3, [r4, #0]
  HAL_Delay(100);
 8000474:	f000 fd4c 	bl	8000f10 <HAL_Delay>
	LCD_CmdWrite(command);
 8000478:	f8a4 9000 	strh.w	r9, [r4]
}
 800047c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000480:	200001ba 	.word	0x200001ba
 8000484:	200001b8 	.word	0x200001b8
 8000488:	200001bb 	.word	0x200001bb
 800048c:	200001b9 	.word	0x200001b9
 8000490:	60020000 	.word	0x60020000

08000494 <lcdFillRGB>:
{
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
	LCD_CmdWrite(command);
 8000496:	232a      	movs	r3, #42	; 0x2a
 8000498:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
	LCD_DataWrite(data);
 800049c:	f04f 0c00 	mov.w	ip, #0
	LCD_CmdWrite(command);
 80004a0:	262b      	movs	r6, #43	; 0x2b
 80004a2:	252c      	movs	r5, #44	; 0x2c
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80004a4:	4c14      	ldr	r4, [pc, #80]	; (80004f8 <lcdFillRGB+0x64>)
	LCD_DataWrite(data);
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <lcdFillRGB+0x68>)
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80004a8:	8821      	ldrh	r1, [r4, #0]
	LCD_CmdWrite(command);
 80004aa:	f8ae 3000 	strh.w	r3, [lr]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80004ae:	8863      	ldrh	r3, [r4, #2]
 80004b0:	3901      	subs	r1, #1
 80004b2:	3b01      	subs	r3, #1
  lcdWriteData((x1 >> 8) & 0xFF);
 80004b4:	f3c1 2707 	ubfx	r7, r1, #8, #8
  lcdWriteData(x1 & 0xFF);
 80004b8:	b2c9      	uxtb	r1, r1
	LCD_DataWrite(data);
 80004ba:	f8a2 c000 	strh.w	ip, [r2]
 80004be:	f8a2 c000 	strh.w	ip, [r2]
 80004c2:	8017      	strh	r7, [r2, #0]
 80004c4:	8011      	strh	r1, [r2, #0]
  lcdWriteData((y1 >> 8) & 0xFF);
 80004c6:	f3c3 2107 	ubfx	r1, r3, #8, #8
  lcdWriteData(y1 & 0xFF);
 80004ca:	b2db      	uxtb	r3, r3
	LCD_CmdWrite(command);
 80004cc:	f8ae 6000 	strh.w	r6, [lr]
	LCD_DataWrite(data);
 80004d0:	f8a2 c000 	strh.w	ip, [r2]
 80004d4:	f8a2 c000 	strh.w	ip, [r2]
 80004d8:	8011      	strh	r1, [r2, #0]
 80004da:	8013      	strh	r3, [r2, #0]
	LCD_CmdWrite(command);
 80004dc:	f8ae 5000 	strh.w	r5, [lr]
  int dimensions = lcdProperties.width * lcdProperties.height;
 80004e0:	8821      	ldrh	r1, [r4, #0]
 80004e2:	8863      	ldrh	r3, [r4, #2]
 80004e4:	fb03 f101 	mul.w	r1, r3, r1
  while(dimensions--)
 80004e8:	b121      	cbz	r1, 80004f4 <lcdFillRGB+0x60>
 80004ea:	1e4b      	subs	r3, r1, #1
 80004ec:	3b01      	subs	r3, #1
 80004ee:	1c59      	adds	r1, r3, #1
	LCD_DataWrite(data);
 80004f0:	8010      	strh	r0, [r2, #0]
  while(dimensions--)
 80004f2:	d1fb      	bne.n	80004ec <lcdFillRGB+0x58>
}
 80004f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000020 	.word	0x20000020
 80004fc:	60020000 	.word	0x60020000

08000500 <lcdDrawImage>:
{
 8000500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8000504:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80005d4 <lcdDrawImage+0xd4>
{
 8000508:	b085      	sub	sp, #20
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 800050a:	f8b8 e000 	ldrh.w	lr, [r8]
 800050e:	4586      	cmp	lr, r0
 8000510:	d95c      	bls.n	80005cc <lcdDrawImage+0xcc>
 8000512:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 8000516:	428d      	cmp	r5, r1
 8000518:	d958      	bls.n	80005cc <lcdDrawImage+0xcc>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 800051a:	8813      	ldrh	r3, [r2, #0]
 800051c:	4403      	add	r3, r0
 800051e:	4573      	cmp	r3, lr
 8000520:	dc54      	bgt.n	80005cc <lcdDrawImage+0xcc>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8000522:	8853      	ldrh	r3, [r2, #2]
 8000524:	18cc      	adds	r4, r1, r3
 8000526:	42ac      	cmp	r4, r5
 8000528:	dc50      	bgt.n	80005cc <lcdDrawImage+0xcc>
	for (int i = 0; i < pBitmap->ySize; ++i)
 800052a:	2b00      	cmp	r3, #0
 800052c:	d04e      	beq.n	80005cc <lcdDrawImage+0xcc>
 800052e:	2700      	movs	r7, #0
	LCD_CmdWrite(command);
 8000530:	f04f 49c0 	mov.w	r9, #1610612736	; 0x60000000
 8000534:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8000538:	7993      	ldrb	r3, [r2, #6]
	LCD_DataWrite(data);
 800053a:	4c27      	ldr	r4, [pc, #156]	; (80005d8 <lcdDrawImage+0xd8>)
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 800053c:	08db      	lsrs	r3, r3, #3
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	6893      	ldr	r3, [r2, #8]
 8000542:	9300      	str	r3, [sp, #0]
  lcdWriteData((x0 >> 8) & 0xFF);
 8000544:	0a03      	lsrs	r3, r0, #8
 8000546:	9302      	str	r3, [sp, #8]
  lcdWriteData(x0 & 0xFF);
 8000548:	b2c3      	uxtb	r3, r0
 800054a:	9303      	str	r3, [sp, #12]
	LCD_DataWrite(data);
 800054c:	9b02      	ldr	r3, [sp, #8]
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 800054e:	8890      	ldrh	r0, [r2, #4]
	LCD_CmdWrite(command);
 8000550:	f8a9 b000 	strh.w	fp, [r9]
	LCD_DataWrite(data);
 8000554:	8023      	strh	r3, [r4, #0]
 8000556:	9b03      	ldr	r3, [sp, #12]
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8000558:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	LCD_DataWrite(data);
 800055c:	8023      	strh	r3, [r4, #0]
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 800055e:	9b01      	ldr	r3, [sp, #4]
  lcdWriteData((x1 >> 8) & 0xFF);
 8000560:	f3ce 2a07 	ubfx	sl, lr, #8, #8
  lcdWriteData(x1 & 0xFF);
 8000564:	fa5f fe8e 	uxtb.w	lr, lr
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8000568:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 800056c:	fbb0 f5f3 	udiv	r5, r0, r3
 8000570:	9b00      	ldr	r3, [sp, #0]
	LCD_DataWrite(data);
 8000572:	f8a4 a000 	strh.w	sl, [r4]
 8000576:	f8a4 e000 	strh.w	lr, [r4]
	LCD_CmdWrite(command);
 800057a:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
 800057e:	19ce      	adds	r6, r1, r7
 8000580:	f8a9 e000 	strh.w	lr, [r9]
  lcdWriteData((y0 >> 8) & 0xFF);
 8000584:	f3c6 2e07 	ubfx	lr, r6, #8, #8
  lcdWriteData(y0 & 0xFF);
 8000588:	b2f6      	uxtb	r6, r6
	LCD_DataWrite(data);
 800058a:	f8a4 e000 	strh.w	lr, [r4]
 800058e:	8026      	strh	r6, [r4, #0]
  lcdWriteData((y1 >> 8) & 0xFF);
 8000590:	f3cc 2607 	ubfx	r6, ip, #8, #8
	LCD_DataWrite(data);
 8000594:	8026      	strh	r6, [r4, #0]
	LCD_CmdWrite(command);
 8000596:	f04f 062c 	mov.w	r6, #44	; 0x2c
 800059a:	fb07 3000 	mla	r0, r7, r0, r3
  uint32_t i = 0;
 800059e:	2300      	movs	r3, #0
  lcdWriteData(y1 & 0xFF);
 80005a0:	fa5f fc8c 	uxtb.w	ip, ip
	LCD_DataWrite(data);
 80005a4:	f8a4 c000 	strh.w	ip, [r4]
	LCD_CmdWrite(command);
 80005a8:	3802      	subs	r0, #2
 80005aa:	f8a9 6000 	strh.w	r6, [r9]
    lcdWriteData(data[i++]);
 80005ae:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 80005b2:	3301      	adds	r3, #1
  while (i < dataLength);
 80005b4:	429d      	cmp	r5, r3
	LCD_DataWrite(data);
 80005b6:	8026      	strh	r6, [r4, #0]
  while (i < dataLength);
 80005b8:	d8f9      	bhi.n	80005ae <lcdDrawImage+0xae>
	for (int i = 0; i < pBitmap->ySize; ++i)
 80005ba:	8853      	ldrh	r3, [r2, #2]
 80005bc:	3701      	adds	r7, #1
 80005be:	42bb      	cmp	r3, r7
 80005c0:	dd04      	ble.n	80005cc <lcdDrawImage+0xcc>
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 80005c2:	f8b8 e000 	ldrh.w	lr, [r8]
 80005c6:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 80005ca:	e7bf      	b.n	800054c <lcdDrawImage+0x4c>
}
 80005cc:	b005      	add	sp, #20
 80005ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005d2:	bf00      	nop
 80005d4:	20000020 	.word	0x20000020
 80005d8:	60020000 	.word	0x60020000

080005dc <lcdDrawChar>:
{
 80005dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((x >= lcdProperties.width) || 			// Clip right
 80005e0:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8000768 <lcdDrawChar+0x18c>
{
 80005e4:	b08b      	sub	sp, #44	; 0x2c
	if ((x >= lcdProperties.width) || 			// Clip right
 80005e6:	f8b8 4000 	ldrh.w	r4, [r8]
{
 80005ea:	e9cd 0107 	strd	r0, r1, [sp, #28]
	if ((x >= lcdProperties.width) || 			// Clip right
 80005ee:	42a0      	cmp	r0, r4
{
 80005f0:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 80005f4:	9209      	str	r2, [sp, #36]	; 0x24
	if ((x >= lcdProperties.width) || 			// Clip right
 80005f6:	f280 80b3 	bge.w	8000760 <lcdDrawChar+0x184>
 80005fa:	4699      	mov	r9, r3
			(y >= lcdProperties.height) || 		// Clip bottom
 80005fc:	f8b8 3002 	ldrh.w	r3, [r8, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000600:	4299      	cmp	r1, r3
 8000602:	f280 80ad 	bge.w	8000760 <lcdDrawChar+0x184>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000606:	4b59      	ldr	r3, [pc, #356]	; (800076c <lcdDrawChar+0x190>)
 8000608:	689c      	ldr	r4, [r3, #8]
 800060a:	88a3      	ldrh	r3, [r4, #4]
 800060c:	9403      	str	r4, [sp, #12]
			(y >= lcdProperties.height) || 		// Clip bottom
 800060e:	42c3      	cmn	r3, r0
 8000610:	f100 80a6 	bmi.w	8000760 <lcdDrawChar+0x184>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000614:	88e3      	ldrh	r3, [r4, #6]
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000616:	42cb      	cmn	r3, r1
 8000618:	f100 80a2 	bmi.w	8000760 <lcdDrawChar+0x184>
	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 800061c:	f3c3 02c7 	ubfx	r2, r3, #3, #8
 8000620:	9201      	str	r2, [sp, #4]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000622:	2b00      	cmp	r3, #0
 8000624:	f000 809c 	beq.w	8000760 <lcdDrawChar+0x184>
 8000628:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 800062a:	f04f 4bc0 	mov.w	fp, #1610612736	; 0x60000000
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800062e:	4696      	mov	lr, r2
	LCD_DataWrite(data);
 8000630:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8000770 <lcdDrawChar+0x194>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000634:	9202      	str	r2, [sp, #8]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000636:	9a01      	ldr	r2, [sp, #4]
 8000638:	2a00      	cmp	r2, #0
 800063a:	f000 8088 	beq.w	800074e <lcdDrawChar+0x172>
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 800063e:	2000      	movs	r0, #0
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000640:	9a08      	ldr	r2, [sp, #32]
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000642:	9903      	ldr	r1, [sp, #12]
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000644:	4472      	add	r2, lr
 8000646:	b295      	uxth	r5, r2
  lcdWriteData((y0 >> 8) & 0xFF);
 8000648:	f3c2 2e07 	ubfx	lr, r2, #8, #8
  lcdWriteData(y0 & 0xFF);
 800064c:	fa5f fc82 	uxtb.w	ip, r2
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000652:	6809      	ldr	r1, [r1, #0]
 8000654:	3a20      	subs	r2, #32
 8000656:	9205      	str	r2, [sp, #20]
 8000658:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800065c:	9104      	str	r1, [sp, #16]
 800065e:	9206      	str	r2, [sp, #24]
 8000660:	9a02      	ldr	r2, [sp, #8]
 8000662:	9905      	ldr	r1, [sp, #20]
 8000664:	9c06      	ldr	r4, [sp, #24]
 8000666:	fb01 2303 	mla	r3, r1, r3, r2
 800066a:	9a04      	ldr	r2, [sp, #16]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	fb01 2303 	mla	r3, r1, r3, r2
 8000672:	5c1a      	ldrb	r2, [r3, r0]
			for(uint8_t j = 0; j < 8; j++)
 8000674:	00c3      	lsls	r3, r0, #3
 8000676:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800067a:	f104 0108 	add.w	r1, r4, #8
 800067e:	4419      	add	r1, r3
 8000680:	4423      	add	r3, r4
 8000682:	b29b      	uxth	r3, r3
 8000684:	b289      	uxth	r1, r1
 8000686:	e02f      	b.n	80006e8 <lcdDrawChar+0x10c>
				else if (bg != color)
 8000688:	454f      	cmp	r7, r9
 800068a:	d027      	beq.n	80006dc <lcdDrawChar+0x100>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 800068c:	f8b8 4000 	ldrh.w	r4, [r8]
 8000690:	429c      	cmp	r4, r3
 8000692:	d923      	bls.n	80006dc <lcdDrawChar+0x100>
 8000694:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8000698:	42ac      	cmp	r4, r5
 800069a:	d91f      	bls.n	80006dc <lcdDrawChar+0x100>
	LCD_CmdWrite(command);
 800069c:	f04f 062a 	mov.w	r6, #42	; 0x2a
  lcdWriteData((x0 >> 8) & 0xFF);
 80006a0:	0a1c      	lsrs	r4, r3, #8
	LCD_CmdWrite(command);
 80006a2:	f8ab 6000 	strh.w	r6, [fp]
  lcdWriteData(x0 & 0xFF);
 80006a6:	b2de      	uxtb	r6, r3
	LCD_DataWrite(data);
 80006a8:	f8aa 4000 	strh.w	r4, [sl]
 80006ac:	f8aa 6000 	strh.w	r6, [sl]
 80006b0:	f8aa 4000 	strh.w	r4, [sl]
	LCD_CmdWrite(command);
 80006b4:	f04f 042b 	mov.w	r4, #43	; 0x2b
	LCD_DataWrite(data);
 80006b8:	f8aa 6000 	strh.w	r6, [sl]
	LCD_CmdWrite(command);
 80006bc:	f8ab 4000 	strh.w	r4, [fp]
 80006c0:	f04f 042c 	mov.w	r4, #44	; 0x2c
	LCD_DataWrite(data);
 80006c4:	f8aa e000 	strh.w	lr, [sl]
 80006c8:	f8aa c000 	strh.w	ip, [sl]
 80006cc:	f8aa e000 	strh.w	lr, [sl]
 80006d0:	f8aa c000 	strh.w	ip, [sl]
	LCD_CmdWrite(command);
 80006d4:	f8ab 4000 	strh.w	r4, [fp]
	LCD_DataWrite(data);
 80006d8:	f8aa 7000 	strh.w	r7, [sl]
			for(uint8_t j = 0; j < 8; j++)
 80006dc:	3301      	adds	r3, #1
 80006de:	b29b      	uxth	r3, r3
				line <<= 1;
 80006e0:	0052      	lsls	r2, r2, #1
			for(uint8_t j = 0; j < 8; j++)
 80006e2:	4299      	cmp	r1, r3
				line <<= 1;
 80006e4:	b2d2      	uxtb	r2, r2
			for(uint8_t j = 0; j < 8; j++)
 80006e6:	d02b      	beq.n	8000740 <lcdDrawChar+0x164>
				if((line & 0x80) == 0x80)
 80006e8:	0614      	lsls	r4, r2, #24
 80006ea:	d5cd      	bpl.n	8000688 <lcdDrawChar+0xac>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80006ec:	f8b8 4000 	ldrh.w	r4, [r8]
 80006f0:	429c      	cmp	r4, r3
 80006f2:	d9f3      	bls.n	80006dc <lcdDrawChar+0x100>
 80006f4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80006f8:	42ac      	cmp	r4, r5
  lcdWriteData((x0 >> 8) & 0xFF);
 80006fa:	ea4f 2413 	mov.w	r4, r3, lsr #8
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80006fe:	d9ed      	bls.n	80006dc <lcdDrawChar+0x100>
	LCD_CmdWrite(command);
 8000700:	f04f 062a 	mov.w	r6, #42	; 0x2a
 8000704:	f8ab 6000 	strh.w	r6, [fp]
  lcdWriteData(x0 & 0xFF);
 8000708:	b2de      	uxtb	r6, r3
	LCD_DataWrite(data);
 800070a:	f8aa 4000 	strh.w	r4, [sl]
 800070e:	f8aa 6000 	strh.w	r6, [sl]
 8000712:	f8aa 4000 	strh.w	r4, [sl]
	LCD_CmdWrite(command);
 8000716:	f04f 042b 	mov.w	r4, #43	; 0x2b
	LCD_DataWrite(data);
 800071a:	f8aa 6000 	strh.w	r6, [sl]
	LCD_CmdWrite(command);
 800071e:	f8ab 4000 	strh.w	r4, [fp]
 8000722:	f04f 042c 	mov.w	r4, #44	; 0x2c
	LCD_DataWrite(data);
 8000726:	f8aa e000 	strh.w	lr, [sl]
 800072a:	f8aa c000 	strh.w	ip, [sl]
 800072e:	f8aa e000 	strh.w	lr, [sl]
 8000732:	f8aa c000 	strh.w	ip, [sl]
	LCD_CmdWrite(command);
 8000736:	f8ab 4000 	strh.w	r4, [fp]
	LCD_DataWrite(data);
 800073a:	f8aa 9000 	strh.w	r9, [sl]
}
 800073e:	e7cd      	b.n	80006dc <lcdDrawChar+0x100>
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000740:	9a01      	ldr	r2, [sp, #4]
 8000742:	3001      	adds	r0, #1
 8000744:	b2c3      	uxtb	r3, r0
 8000746:	4293      	cmp	r3, r2
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000748:	9b03      	ldr	r3, [sp, #12]
 800074a:	88db      	ldrh	r3, [r3, #6]
		for(uint8_t k = 0; k < fontCoeff; k++)
 800074c:	d388      	bcc.n	8000660 <lcdDrawChar+0x84>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800074e:	9a02      	ldr	r2, [sp, #8]
 8000750:	3201      	adds	r2, #1
 8000752:	fa5f fe82 	uxtb.w	lr, r2
 8000756:	459e      	cmp	lr, r3
 8000758:	f8cd e008 	str.w	lr, [sp, #8]
 800075c:	f4ff af6b 	bcc.w	8000636 <lcdDrawChar+0x5a>
}
 8000760:	b00b      	add	sp, #44	; 0x2c
 8000762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000766:	bf00      	nop
 8000768:	20000020 	.word	0x20000020
 800076c:	20000010 	.word	0x20000010
 8000770:	60020000 	.word	0x60020000

08000774 <lcdPrintf>:
{
 8000774:	b40f      	push	{r0, r1, r2, r3}
 8000776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800077a:	b085      	sub	sp, #20
 800077c:	aa0e      	add	r2, sp, #56	; 0x38
	vsprintf(buf, fmt, lst);
 800077e:	4e2f      	ldr	r6, [pc, #188]	; (800083c <lcdPrintf+0xc8>)
{
 8000780:	f852 1b04 	ldr.w	r1, [r2], #4
	vsprintf(buf, fmt, lst);
 8000784:	4630      	mov	r0, r6
	va_start(lst, fmt);
 8000786:	9203      	str	r2, [sp, #12]
	vsprintf(buf, fmt, lst);
 8000788:	f001 fb1c 	bl	8001dc4 <vsiprintf>
	while (*p)
 800078c:	7832      	ldrb	r2, [r6, #0]
 800078e:	b362      	cbz	r2, 80007ea <lcdPrintf+0x76>
		if (cursorXY.y >= lcdProperties.height)
 8000790:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8000840 <lcdPrintf+0xcc>
				cursorXY.x = 0;
 8000794:	f04f 0900 	mov.w	r9, #0
 8000798:	4d2a      	ldr	r5, [pc, #168]	; (8000844 <lcdPrintf+0xd0>)
		if (cursorXY.y >= lcdProperties.height)
 800079a:	f8ba 8002 	ldrh.w	r8, [sl, #2]
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 800079e:	4f2a      	ldr	r7, [pc, #168]	; (8000848 <lcdPrintf+0xd4>)
 80007a0:	e011      	b.n	80007c6 <lcdPrintf+0x52>
		else if (*p == '\r')
 80007a2:	2a0d      	cmp	r2, #13
 80007a4:	d026      	beq.n	80007f4 <lcdPrintf+0x80>
		else if (*p == '\t')
 80007a6:	2a09      	cmp	r2, #9
 80007a8:	d126      	bne.n	80007f8 <lcdPrintf+0x84>
			cursorXY.x += lcdFont.pFont->Width * 4;
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	882b      	ldrh	r3, [r5, #0]
 80007ae:	8892      	ldrh	r2, [r2, #4]
		if (cursorXY.y >= lcdProperties.height)
 80007b0:	886c      	ldrh	r4, [r5, #2]
			cursorXY.x += lcdFont.pFont->Width * 4;
 80007b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80007b6:	802b      	strh	r3, [r5, #0]
	while (*p)
 80007b8:	f816 2f01 	ldrb.w	r2, [r6, #1]!
		if (cursorXY.y >= lcdProperties.height)
 80007bc:	45a0      	cmp	r8, r4
			cursorXY.y = 0;
 80007be:	bf98      	it	ls
 80007c0:	f8a5 9002 	strhls.w	r9, [r5, #2]
	while (*p)
 80007c4:	b18a      	cbz	r2, 80007ea <lcdPrintf+0x76>
		if (*p == '\n')
 80007c6:	2a0a      	cmp	r2, #10
 80007c8:	d1eb      	bne.n	80007a2 <lcdPrintf+0x2e>
			cursorXY.y += lcdFont.pFont->Height;
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	886b      	ldrh	r3, [r5, #2]
 80007ce:	88d4      	ldrh	r4, [r2, #6]
	while (*p)
 80007d0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
			cursorXY.y += lcdFont.pFont->Height;
 80007d4:	441c      	add	r4, r3
 80007d6:	b2a4      	uxth	r4, r4
		if (cursorXY.y >= lcdProperties.height)
 80007d8:	45a0      	cmp	r8, r4
			cursorXY.y += lcdFont.pFont->Height;
 80007da:	806c      	strh	r4, [r5, #2]
			cursorXY.x = 0;
 80007dc:	f8a5 9000 	strh.w	r9, [r5]
			cursorXY.y = 0;
 80007e0:	bf98      	it	ls
 80007e2:	f8a5 9002 	strhls.w	r9, [r5, #2]
	while (*p)
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d1ed      	bne.n	80007c6 <lcdPrintf+0x52>
}
 80007ea:	b005      	add	sp, #20
 80007ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007f0:	b004      	add	sp, #16
 80007f2:	4770      	bx	lr
		if (cursorXY.y >= lcdProperties.height)
 80007f4:	886c      	ldrh	r4, [r5, #2]
 80007f6:	e7df      	b.n	80007b8 <lcdPrintf+0x44>
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 80007f8:	88bb      	ldrh	r3, [r7, #4]
 80007fa:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80007fe:	f9b5 0000 	ldrsh.w	r0, [r5]
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	883b      	ldrh	r3, [r7, #0]
 8000806:	f8b5 b000 	ldrh.w	fp, [r5]
 800080a:	886c      	ldrh	r4, [r5, #2]
 800080c:	f7ff fee6 	bl	80005dc <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8000810:	68b9      	ldr	r1, [r7, #8]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000812:	7b38      	ldrb	r0, [r7, #12]
			cursorXY.x += lcdFont.pFont->Width;
 8000814:	888a      	ldrh	r2, [r1, #4]
 8000816:	eb0b 0302 	add.w	r3, fp, r2
 800081a:	b29b      	uxth	r3, r3
 800081c:	802b      	strh	r3, [r5, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 800081e:	2800      	cmp	r0, #0
 8000820:	d0ca      	beq.n	80007b8 <lcdPrintf+0x44>
 8000822:	f8ba 0000 	ldrh.w	r0, [sl]
 8000826:	1a82      	subs	r2, r0, r2
 8000828:	4293      	cmp	r3, r2
 800082a:	ddc5      	ble.n	80007b8 <lcdPrintf+0x44>
				cursorXY.y += lcdFont.pFont->Height;
 800082c:	88cb      	ldrh	r3, [r1, #6]
				cursorXY.x = 0;
 800082e:	f8a5 9000 	strh.w	r9, [r5]
				cursorXY.y += lcdFont.pFont->Height;
 8000832:	441c      	add	r4, r3
 8000834:	b2a4      	uxth	r4, r4
 8000836:	806c      	strh	r4, [r5, #2]
				cursorXY.x = 0;
 8000838:	e7be      	b.n	80007b8 <lcdPrintf+0x44>
 800083a:	bf00      	nop
 800083c:	200000b4 	.word	0x200000b4
 8000840:	20000020 	.word	0x20000020
 8000844:	200001b4 	.word	0x200001b4
 8000848:	20000010 	.word	0x20000010

0800084c <lcdSetTextFont>:
	lcdFont.pFont = font;
 800084c:	4b01      	ldr	r3, [pc, #4]	; (8000854 <lcdSetTextFont+0x8>)
 800084e:	6098      	str	r0, [r3, #8]
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000010 	.word	0x20000010

08000858 <lcdSetTextColor>:
	lcdFont.TextColor = c;
 8000858:	4b01      	ldr	r3, [pc, #4]	; (8000860 <lcdSetTextColor+0x8>)
	lcdFont.BackColor = b;
 800085a:	e9c3 0100 	strd	r0, r1, [r3]
}
 800085e:	4770      	bx	lr
 8000860:	20000010 	.word	0x20000010

08000864 <lcdSetOrientation>:
	LCD_CmdWrite(command);
 8000864:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000868:	2136      	movs	r1, #54	; 0x36
	lcdProperties.orientation = value;
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <lcdSetOrientation+0xac>)
{
 800086c:	b570      	push	{r4, r5, r6, lr}
	LCD_CmdWrite(command);
 800086e:	8011      	strh	r1, [r2, #0]
	lcdProperties.orientation = value;
 8000870:	7118      	strb	r0, [r3, #4]
	switch (lcdProperties.orientation)
 8000872:	2803      	cmp	r0, #3
 8000874:	d83e      	bhi.n	80008f4 <lcdSetOrientation+0x90>
 8000876:	e8df f000 	tbb	[pc, r0]
 800087a:	2f3b      	.short	0x2f3b
 800087c:	0223      	.short	0x0223
			break;
 800087e:	f04f 0eef 	mov.w	lr, #239	; 0xef
 8000882:	2500      	movs	r5, #0
 8000884:	243f      	movs	r4, #63	; 0x3f
 8000886:	2601      	movs	r6, #1
			lcdWriteData(lcdLandscapeMirrorConfig);
 8000888:	4a22      	ldr	r2, [pc, #136]	; (8000914 <lcdSetOrientation+0xb0>)
 800088a:	7811      	ldrb	r1, [r2, #0]
	LCD_DataWrite(data);
 800088c:	4a22      	ldr	r2, [pc, #136]	; (8000918 <lcdSetOrientation+0xb4>)
 800088e:	8011      	strh	r1, [r2, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000890:	4a22      	ldr	r2, [pc, #136]	; (800091c <lcdSetOrientation+0xb8>)
 8000892:	601a      	str	r2, [r3, #0]
	LCD_CmdWrite(command);
 8000894:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000898:	232a      	movs	r3, #42	; 0x2a
	LCD_DataWrite(data);
 800089a:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 800089c:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 80008a0:	202c      	movs	r0, #44	; 0x2c
 80008a2:	800b      	strh	r3, [r1, #0]
	LCD_DataWrite(data);
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <lcdSetOrientation+0xb4>)
 80008a6:	801a      	strh	r2, [r3, #0]
 80008a8:	801a      	strh	r2, [r3, #0]
 80008aa:	801e      	strh	r6, [r3, #0]
 80008ac:	801c      	strh	r4, [r3, #0]
	LCD_CmdWrite(command);
 80008ae:	f8a1 c000 	strh.w	ip, [r1]
	LCD_DataWrite(data);
 80008b2:	801a      	strh	r2, [r3, #0]
 80008b4:	801a      	strh	r2, [r3, #0]
 80008b6:	801d      	strh	r5, [r3, #0]
 80008b8:	f8a3 e000 	strh.w	lr, [r3]
	LCD_CmdWrite(command);
 80008bc:	8008      	strh	r0, [r1, #0]
}
 80008be:	bd70      	pop	{r4, r5, r6, pc}
			lcdWriteData(lcdPortraitMirrorConfig);
 80008c0:	4a17      	ldr	r2, [pc, #92]	; (8000920 <lcdSetOrientation+0xbc>)
 80008c2:	7810      	ldrb	r0, [r2, #0]
	LCD_DataWrite(data);
 80008c4:	4914      	ldr	r1, [pc, #80]	; (8000918 <lcdSetOrientation+0xb4>)
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <lcdSetOrientation+0xc0>)
	LCD_DataWrite(data);
 80008c8:	8008      	strh	r0, [r1, #0]
			break;
 80008ca:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 80008ce:	2501      	movs	r5, #1
 80008d0:	24ef      	movs	r4, #239	; 0xef
 80008d2:	2600      	movs	r6, #0
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80008d4:	601a      	str	r2, [r3, #0]
			break;
 80008d6:	e7dd      	b.n	8000894 <lcdSetOrientation+0x30>
			lcdWriteData(lcdLandscapeConfig);
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <lcdSetOrientation+0xc4>)
	LCD_DataWrite(data);
 80008da:	490f      	ldr	r1, [pc, #60]	; (8000918 <lcdSetOrientation+0xb4>)
			lcdWriteData(lcdLandscapeConfig);
 80008dc:	7810      	ldrb	r0, [r2, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <lcdSetOrientation+0xb8>)
	LCD_DataWrite(data);
 80008e0:	8008      	strh	r0, [r1, #0]
			break;
 80008e2:	f04f 0eef 	mov.w	lr, #239	; 0xef
 80008e6:	2500      	movs	r5, #0
 80008e8:	243f      	movs	r4, #63	; 0x3f
 80008ea:	2601      	movs	r6, #1
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80008ec:	601a      	str	r2, [r3, #0]
			break;
 80008ee:	e7d1      	b.n	8000894 <lcdSetOrientation+0x30>
			lcdWriteData(lcdPortraitConfig);
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <lcdSetOrientation+0xc8>)
 80008f2:	e7e6      	b.n	80008c2 <lcdSetOrientation+0x5e>
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80008f4:	881c      	ldrh	r4, [r3, #0]
 80008f6:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 80008fa:	3c01      	subs	r4, #1
 80008fc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
  lcdWriteData((x1 >> 8) & 0xFF);
 8000900:	f3c4 2607 	ubfx	r6, r4, #8, #8
  lcdWriteData((y1 >> 8) & 0xFF);
 8000904:	f3ce 2507 	ubfx	r5, lr, #8, #8
  lcdWriteData(x1 & 0xFF);
 8000908:	b2e4      	uxtb	r4, r4
  lcdWriteData(y1 & 0xFF);
 800090a:	fa5f fe8e 	uxtb.w	lr, lr
 800090e:	e7c1      	b.n	8000894 <lcdSetOrientation+0x30>
 8000910:	20000020 	.word	0x20000020
 8000914:	200001b9 	.word	0x200001b9
 8000918:	60020000 	.word	0x60020000
 800091c:	00f00140 	.word	0x00f00140
 8000920:	200001bb 	.word	0x200001bb
 8000924:	014000f0 	.word	0x014000f0
 8000928:	200001b8 	.word	0x200001b8
 800092c:	200001ba 	.word	0x200001ba

08000930 <lcdSetCursor>:
	LCD_CmdWrite(command);
 8000930:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000934:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
{
 8000938:	b530      	push	{r4, r5, lr}
	LCD_CmdWrite(command);
 800093a:	252b      	movs	r5, #43	; 0x2b
 800093c:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
	cursorXY.x = x;
 8000940:	4c0c      	ldr	r4, [pc, #48]	; (8000974 <lcdSetCursor+0x44>)
	LCD_DataWrite(data);
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <lcdSetCursor+0x48>)
	cursorXY.x = x;
 8000944:	8020      	strh	r0, [r4, #0]
	cursorXY.y = y;
 8000946:	8061      	strh	r1, [r4, #2]
	LCD_CmdWrite(command);
 8000948:	f8a2 c000 	strh.w	ip, [r2]
  lcdWriteData((x0 >> 8) & 0xFF);
 800094c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
  lcdWriteData(x0 & 0xFF);
 8000950:	b2c0      	uxtb	r0, r0
	LCD_DataWrite(data);
 8000952:	f8a3 c000 	strh.w	ip, [r3]
 8000956:	8018      	strh	r0, [r3, #0]
 8000958:	f8a3 c000 	strh.w	ip, [r3]
 800095c:	8018      	strh	r0, [r3, #0]
  lcdWriteData((y0 >> 8) & 0xFF);
 800095e:	0a08      	lsrs	r0, r1, #8
  lcdWriteData(y0 & 0xFF);
 8000960:	b2c9      	uxtb	r1, r1
	LCD_CmdWrite(command);
 8000962:	8015      	strh	r5, [r2, #0]
	LCD_DataWrite(data);
 8000964:	8018      	strh	r0, [r3, #0]
 8000966:	8019      	strh	r1, [r3, #0]
 8000968:	8018      	strh	r0, [r3, #0]
 800096a:	8019      	strh	r1, [r3, #0]
	LCD_CmdWrite(command);
 800096c:	f8a2 e000 	strh.w	lr, [r2]
}
 8000970:	bd30      	pop	{r4, r5, pc}
 8000972:	bf00      	nop
 8000974:	200001b4 	.word	0x200001b4
 8000978:	60020000 	.word	0x60020000

0800097c <lcdGetWidth>:
  return lcdProperties.width;
 800097c:	4b01      	ldr	r3, [pc, #4]	; (8000984 <lcdGetWidth+0x8>)
}
 800097e:	8818      	ldrh	r0, [r3, #0]
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000020 	.word	0x20000020

08000988 <lcdGetHeight>:
  return lcdProperties.height;
 8000988:	4b01      	ldr	r3, [pc, #4]	; (8000990 <lcdGetHeight+0x8>)
}
 800098a:	8858      	ldrh	r0, [r3, #2]
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000020 	.word	0x20000020

08000994 <lcdGetOrientation>:
  return lcdProperties.orientation;
 8000994:	4b01      	ldr	r3, [pc, #4]	; (800099c <lcdGetOrientation+0x8>)
}
 8000996:	7918      	ldrb	r0, [r3, #4]
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000020 	.word	0x20000020

080009a0 <lcdGetTextFont>:
	return lcdFont.pFont;
 80009a0:	4b01      	ldr	r3, [pc, #4]	; (80009a8 <lcdGetTextFont+0x8>)
}
 80009a2:	6898      	ldr	r0, [r3, #8]
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000010 	.word	0x20000010

080009ac <testDrawImage>:
	}

	return HAL_GetTick() - start;
}

unsigned long testDrawImage() {
 80009ac:	b510      	push	{r4, lr}
	unsigned long start;

	lcdFillRGB(COLOR_BLACK);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f7ff fd70 	bl	8000494 <lcdFillRGB>
	start = HAL_GetTick();
 80009b4:	f000 faa6 	bl	8000f04 <HAL_GetTick>
 80009b8:	4604      	mov	r4, r0
	if (lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE
 80009ba:	f7ff ffeb 	bl	8000994 <lcdGetOrientation>
 80009be:	2801      	cmp	r0, #1
 80009c0:	d003      	beq.n	80009ca <testDrawImage+0x1e>
			|| lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE_MIRROR) {
 80009c2:	f7ff ffe7 	bl	8000994 <lcdGetOrientation>
 80009c6:	2803      	cmp	r0, #3
 80009c8:	d10f      	bne.n	80009ea <testDrawImage+0x3e>
		lcdDrawImage((lcdGetWidth() - bmSTLogo.xSize) / 2, 0, &bmSTLogo);
 80009ca:	f7ff ffd7 	bl	800097c <lcdGetWidth>
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <testDrawImage+0x60>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	8813      	ldrh	r3, [r2, #0]
 80009d4:	1ac3      	subs	r3, r0, r3
 80009d6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80009da:	f3c3 004f 	ubfx	r0, r3, #1, #16
 80009de:	f7ff fd8f 	bl	8000500 <lcdDrawImage>
//		lcdDrawImage(0, 0, &bmSTLogo);
	} else {
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
	}
	return HAL_GetTick() - start;
 80009e2:	f000 fa8f 	bl	8000f04 <HAL_GetTick>
}
 80009e6:	1b00      	subs	r0, r0, r4
 80009e8:	bd10      	pop	{r4, pc}
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
 80009ea:	f7ff ffcd 	bl	8000988 <lcdGetHeight>
 80009ee:	4601      	mov	r1, r0
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <testDrawImage+0x60>)
 80009f2:	2000      	movs	r0, #0
 80009f4:	8853      	ldrh	r3, [r2, #2]
 80009f6:	1ac9      	subs	r1, r1, r3
 80009f8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80009fc:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8000a00:	f7ff fd7e 	bl	8000500 <lcdDrawImage>
	return HAL_GetTick() - start;
 8000a04:	f000 fa7e 	bl	8000f04 <HAL_GetTick>
}
 8000a08:	1b00      	subs	r0, r0, r4
 8000a0a:	bd10      	pop	{r4, pc}
 8000a0c:	0800a788 	.word	0x0800a788

08000a10 <demoLCD>:
void demoLCD(int i) {
 8000a10:	b510      	push	{r4, lr}
	lcdSetOrientation(1);
 8000a12:	2001      	movs	r0, #1
 8000a14:	f7ff ff26 	bl	8000864 <lcdSetOrientation>
	lcdSetTextFont(&Font16);
 8000a18:	4810      	ldr	r0, [pc, #64]	; (8000a5c <demoLCD+0x4c>)
 8000a1a:	f7ff ff17 	bl	800084c <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8000a1e:	f7ff ffb3 	bl	8000988 <lcdGetHeight>
 8000a22:	4604      	mov	r4, r0
 8000a24:	f7ff ffbc 	bl	80009a0 <lcdGetTextFont>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	88d9      	ldrh	r1, [r3, #6]
 8000a2c:	3c01      	subs	r4, #1
 8000a2e:	1a61      	subs	r1, r4, r1
 8000a30:	2000      	movs	r0, #0
 8000a32:	b289      	uxth	r1, r1
 8000a34:	f7ff ff7c 	bl	8000930 <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a3e:	f7ff ff0b 	bl	8000858 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testDrawImage());
 8000a42:	f7ff ffb3 	bl	80009ac <testDrawImage>
 8000a46:	4601      	mov	r1, r0
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <demoLCD+0x50>)
 8000a4a:	f7ff fe93 	bl	8000774 <lcdPrintf>
}
 8000a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(2000);
 8000a52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a56:	f000 ba5b 	b.w	8000f10 <HAL_Delay>
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	080036f8 	.word	0x080036f8

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b510      	push	{r4, lr}
 8000a66:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a68:	2220      	movs	r2, #32
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	a80e      	add	r0, sp, #56	; 0x38
 8000a6e:	f001 f98b 	bl	8001d88 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a76:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000a86:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000a8e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a92:	9301      	str	r3, [sp, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a96:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9a:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9e:	f000 fd4d 	bl	800153c <HAL_RCC_OscConfig>
 8000aa2:	b108      	cbz	r0, 8000aa8 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000aa6:	e7fe      	b.n	8000aa6 <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa8:	4601      	mov	r1, r0
 8000aaa:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ab0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	e9cd 4102 	strd	r4, r1, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab8:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aba:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000abc:	f000 ff6a 	bl	8001994 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b108      	cbz	r0, 8000ac8 <SystemClock_Config+0x64>
 8000ac4:	b672      	cpsid	i
	while (1) {
 8000ac6:	e7fe      	b.n	8000ac6 <SystemClock_Config+0x62>
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac8:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aca:	9406      	str	r4, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000acc:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ace:	f001 f801 	bl	8001ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	b108      	cbz	r0, 8000ad8 <SystemClock_Config+0x74>
 8000ad4:	b672      	cpsid	i
	while (1) {
 8000ad6:	e7fe      	b.n	8000ad6 <SystemClock_Config+0x72>
}
 8000ad8:	b016      	add	sp, #88	; 0x58
 8000ada:	bd10      	pop	{r4, pc}

08000adc <main>:
{
 8000adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	2400      	movs	r4, #0
{
 8000ae2:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000ae4:	f000 f9f0 	bl	8000ec8 <HAL_Init>
  SystemClock_Config();
 8000ae8:	f7ff ffbc 	bl	8000a64 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000af0:	e9cd 4407 	strd	r4, r4, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af4:	4b67      	ldr	r3, [pc, #412]	; (8000c94 <main+0x1b8>)
  GPIO_InitStruct.Pin = DIN_Pin;
 8000af6:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b02:	619a      	str	r2, [r3, #24]
 8000b04:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, DOUT_Pin|IRQ_Pin|DCLK_Pin, GPIO_PIN_RESET);
 8000b06:	2119      	movs	r1, #25
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b08:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000b0c:	9200      	str	r2, [sp, #0]
 8000b0e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b10:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, DOUT_Pin|IRQ_Pin|DCLK_Pin, GPIO_PIN_RESET);
 8000b12:	4861      	ldr	r0, [pc, #388]	; (8000c98 <main+0x1bc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b14:	f042 0210 	orr.w	r2, r2, #16
 8000b18:	619a      	str	r2, [r3, #24]
 8000b1a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1c:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	f002 0210 	and.w	r2, r2, #16
 8000b22:	9201      	str	r2, [sp, #4]
 8000b24:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b28:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	f042 0208 	orr.w	r2, r2, #8
 8000b30:	619a      	str	r2, [r3, #24]
 8000b32:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8000b34:	4d59      	ldr	r5, [pc, #356]	; (8000c9c <main+0x1c0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	f002 0208 	and.w	r2, r2, #8
 8000b3a:	9202      	str	r2, [sp, #8]
 8000b3c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	699a      	ldr	r2, [r3, #24]
 8000b40:	f042 0220 	orr.w	r2, r2, #32
 8000b44:	619a      	str	r2, [r3, #24]
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	f002 0220 	and.w	r2, r2, #32
 8000b4c:	9203      	str	r2, [sp, #12]
 8000b4e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	ea42 0209 	orr.w	r2, r2, r9
 8000b56:	619a      	str	r2, [r3, #24]
 8000b58:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, DOUT_Pin|IRQ_Pin|DCLK_Pin, GPIO_PIN_RESET);
 8000b5a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	ea03 0309 	and.w	r3, r3, r9
 8000b60:	9304      	str	r3, [sp, #16]
 8000b62:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, DOUT_Pin|IRQ_Pin|DCLK_Pin, GPIO_PIN_RESET);
 8000b64:	f000 fce6 	bl	8001534 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b68:	4622      	mov	r2, r4
 8000b6a:	f241 0104 	movw	r1, #4100	; 0x1004
 8000b6e:	484c      	ldr	r0, [pc, #304]	; (8000ca0 <main+0x1c4>)
 8000b70:	f000 fce0 	bl	8001534 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000b74:	4632      	mov	r2, r6
 8000b76:	2120      	movs	r1, #32
 8000b78:	484a      	ldr	r0, [pc, #296]	; (8000ca4 <main+0x1c8>)
 8000b7a:	f000 fcdb 	bl	8001534 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000b7e:	4632      	mov	r2, r6
 8000b80:	2102      	movs	r1, #2
 8000b82:	4845      	ldr	r0, [pc, #276]	; (8000c98 <main+0x1bc>)
 8000b84:	f000 fcd6 	bl	8001534 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8000b88:	4843      	ldr	r0, [pc, #268]	; (8000c98 <main+0x1bc>)
 8000b8a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	e9cd 9405 	strd	r9, r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f000 fba7 	bl	80012e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DOUT_Pin|IRQ_Pin|DCLK_Pin|GPIO_PIN_1;
 8000b96:	231b      	movs	r3, #27
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b98:	483f      	ldr	r0, [pc, #252]	; (8000c98 <main+0x1bc>)
 8000b9a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = DOUT_Pin|IRQ_Pin|DCLK_Pin|GPIO_PIN_1;
 8000b9c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	e9cd 6406 	strd	r6, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba2:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba4:	f000 fb9e 	bl	80012e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba8:	483d      	ldr	r0, [pc, #244]	; (8000ca0 <main+0x1c4>)
 8000baa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	e9cd 8605 	strd	r8, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb0:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb4:	f000 fb96 	bl	80012e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_Pin;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	4838      	ldr	r0, [pc, #224]	; (8000ca0 <main+0x1c4>)
 8000bbe:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = CS_Pin;
 8000bc0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f000 fb8d 	bl	80012e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bcc:	4834      	ldr	r0, [pc, #208]	; (8000ca0 <main+0x1c4>)
 8000bce:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	e9cd 9605 	strd	r9, r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd8:	f000 fb84 	bl	80012e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bdc:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	4831      	ldr	r0, [pc, #196]	; (8000ca4 <main+0x1c8>)
 8000be0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000be2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	e9cd 6406 	strd	r6, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f000 fb7b 	bl	80012e4 <HAL_GPIO_Init>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bee:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8000bf2:	61eb      	str	r3, [r5, #28]
  hadc1.Instance = ADC1;
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <main+0x1cc>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf6:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000bfc:	9407      	str	r4, [sp, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bfe:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c00:	732e      	strb	r6, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c02:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c04:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c06:	612e      	str	r6, [r5, #16]
  hadc1.Instance = ADC1;
 8000c08:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0a:	f000 fa57 	bl	80010bc <HAL_ADC_Init>
 8000c0e:	b108      	cbz	r0, 8000c14 <main+0x138>
 8000c10:	b672      	cpsid	i
	while (1) {
 8000c12:	e7fe      	b.n	8000c12 <main+0x136>
  sConfig.Channel = ADC_CHANNEL_9;
 8000c14:	2309      	movs	r3, #9
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c16:	9007      	str	r0, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c18:	a905      	add	r1, sp, #20
 8000c1a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1c:	9606      	str	r6, [sp, #24]
  sConfig.Channel = ADC_CHANNEL_9;
 8000c1e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c20:	f000 f988 	bl	8000f34 <HAL_ADC_ConfigChannel>
 8000c24:	4602      	mov	r2, r0
 8000c26:	bb20      	cbnz	r0, 8000c72 <main+0x196>
  Timing.AddressHoldTime = 15;
 8000c28:	240f      	movs	r4, #15
  Timing.DataSetupTime = 5;
 8000c2a:	2305      	movs	r3, #5
  Timing.AddressHoldTime = 15;
 8000c2c:	9406      	str	r4, [sp, #24]
  Timing.DataSetupTime = 5;
 8000c2e:	9307      	str	r3, [sp, #28]
  Timing.DataLatency = 17;
 8000c30:	2411      	movs	r4, #17
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c32:	2310      	movs	r3, #16
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c34:	f04f 4520 	mov.w	r5, #2684354560	; 0xa0000000
 8000c38:	481c      	ldr	r0, [pc, #112]	; (8000cac <main+0x1d0>)
  Timing.DataLatency = 17;
 8000c3a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c3e:	6143      	str	r3, [r0, #20]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <main+0x1d4>)
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000c42:	a905      	add	r1, sp, #20
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c44:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c48:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c4c:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c50:	e9c0 820a 	strd	r8, r2, [r0, #40]	; 0x28
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c54:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c58:	9208      	str	r2, [sp, #32]
 8000c5a:	920b      	str	r2, [sp, #44]	; 0x2c
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c5c:	6102      	str	r2, [r0, #16]
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000c5e:	6382      	str	r2, [r0, #56]	; 0x38
  Timing.AddressSetupTime = 1;
 8000c60:	9605      	str	r6, [sp, #20]
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c62:	6005      	str	r5, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c64:	6043      	str	r3, [r0, #4]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000c66:	f000 ffb7 	bl	8001bd8 <HAL_SRAM_Init>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	b118      	cbz	r0, 8000c76 <main+0x19a>
 8000c6e:	b672      	cpsid	i
	while (1) {
 8000c70:	e7fe      	b.n	8000c70 <main+0x194>
 8000c72:	b672      	cpsid	i
 8000c74:	e7fe      	b.n	8000c74 <main+0x198>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000c76:	4c0f      	ldr	r4, [pc, #60]	; (8000cb4 <main+0x1d8>)
	LCD_BL_ON();
 8000c78:	4641      	mov	r1, r8
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000c7a:	69e3      	ldr	r3, [r4, #28]
	LCD_BL_ON();
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <main+0x1c4>)
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c82:	61e3      	str	r3, [r4, #28]
	LCD_BL_ON();
 8000c84:	f000 fc56 	bl	8001534 <HAL_GPIO_WritePin>
	lcdInit();
 8000c88:	f7ff facc 	bl	8000224 <lcdInit>
		demoLCD(i);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff febf 	bl	8000a10 <demoLCD>
	while (1) {
 8000c92:	e7fb      	b.n	8000c8c <main+0x1b0>
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40011800 	.word	0x40011800
 8000c9c:	200001bc 	.word	0x200001bc
 8000ca0:	40011400 	.word	0x40011400
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40012400 	.word	0x40012400
 8000cac:	200001ec 	.word	0x200001ec
 8000cb0:	a0000104 	.word	0xa0000104
 8000cb4:	40010000 	.word	0x40010000

08000cb8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_MspInit+0x3c>)
{
 8000cba:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cbc:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc0:	f042 0201 	orr.w	r2, r2, #1
 8000cc4:	619a      	str	r2, [r3, #24]
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	f002 0201 	and.w	r2, r2, #1
 8000ccc:	9200      	str	r2, [sp, #0]
 8000cce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	69da      	ldr	r2, [r3, #28]
 8000cd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cd6:	61da      	str	r2, [r3, #28]
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ce2:	684b      	ldr	r3, [r1, #4]
 8000ce4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ce8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cec:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	b002      	add	sp, #8
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010000 	.word	0x40010000

08000cfc <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	2300      	movs	r3, #0
{
 8000cfe:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC1)
 8000d00:	4a15      	ldr	r2, [pc, #84]	; (8000d58 <HAL_ADC_MspInit+0x5c>)
 8000d02:	6801      	ldr	r1, [r0, #0]
{
 8000d04:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 8000d06:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000d0c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC1)
 8000d10:	d001      	beq.n	8000d16 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d12:	b007      	add	sp, #28
 8000d14:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d16:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d18:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d1e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000d22:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d2a:	619a      	str	r2, [r3, #24]
 8000d2c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d30:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000d34:	9200      	str	r2, [sp, #0]
 8000d36:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	699a      	ldr	r2, [r3, #24]
 8000d3a:	f042 0208 	orr.w	r2, r2, #8
 8000d3e:	619a      	str	r2, [r3, #24]
 8000d40:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f000 fac9 	bl	80012e4 <HAL_GPIO_Init>
}
 8000d52:	b007      	add	sp, #28
 8000d54:	bd30      	pop	{r4, r5, pc}
 8000d56:	bf00      	nop
 8000d58:	40012400 	.word	0x40012400
 8000d5c:	40010c00 	.word	0x40010c00

08000d60 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d60:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000d62:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_SRAM_MspInit+0x58>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000d66:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 8000d68:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d6a:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 8000d6c:	bb12      	cbnz	r2, 8000db4 <HAL_SRAM_MspInit+0x54>
  FSMC_Initialized = 1;
 8000d6e:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d72:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d74:	f64f 7680 	movw	r6, #65408	; 0xff80
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d78:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000d7c:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 8000d80:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d82:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6153      	str	r3, [r2, #20]
 8000d8c:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8e:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d98:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9e:	f000 faa1 	bl	80012e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000da2:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <HAL_SRAM_MspInit+0x60>)
 8000da8:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000dae:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db0:	f000 fa98 	bl	80012e4 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000db4:	b007      	add	sp, #28
 8000db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db8:	20000234 	.word	0x20000234
 8000dbc:	40011800 	.word	0x40011800
 8000dc0:	40011400 	.word	0x40011400

08000dc4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler>
 8000dc6:	bf00      	nop

08000dc8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <HardFault_Handler>
 8000dca:	bf00      	nop

08000dcc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler>
 8000dce:	bf00      	nop

08000dd0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <BusFault_Handler>
 8000dd2:	bf00      	nop

08000dd4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler>
 8000dd6:	bf00      	nop

08000dd8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <DebugMon_Handler>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <PendSV_Handler>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 b882 	b.w	8000eec <HAL_IncTick>

08000de8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	490d      	ldr	r1, [pc, #52]	; (8000e20 <_sbrk+0x38>)
{
 8000dea:	4603      	mov	r3, r0
 8000dec:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dee:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <_sbrk+0x3c>)
 8000df0:	4c0d      	ldr	r4, [pc, #52]	; (8000e28 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000df2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000df6:	b120      	cbz	r0, 8000e02 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df8:	4403      	add	r3, r0
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d807      	bhi.n	8000e0e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000dfe:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000e00:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000e02:	4c0a      	ldr	r4, [pc, #40]	; (8000e2c <_sbrk+0x44>)
 8000e04:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4403      	add	r3, r0
 8000e08:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8000e0a:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000e0c:	d9f7      	bls.n	8000dfe <_sbrk+0x16>
    errno = ENOMEM;
 8000e0e:	f000 ff91 	bl	8001d34 <__errno>
 8000e12:	220c      	movs	r2, #12
 8000e14:	4603      	mov	r3, r0
    return (void *)-1;
 8000e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOMEM;
 8000e1a:	601a      	str	r2, [r3, #0]
}
 8000e1c:	bd10      	pop	{r4, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000238 	.word	0x20000238
 8000e24:	20010000 	.word	0x20010000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	20000250 	.word	0x20000250

08000e30 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	; (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e5a:	f7ff ffe9 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f000 ff6f 	bl	8001d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff fe3b 	bl	8000adc <main>
  bx lr
 8000e66:	4770      	bx	lr
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000e70:	0800a7f0 	.word	0x0800a7f0
  ldr r2, =_sbss
 8000e74:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000e78:	20000250 	.word	0x20000250

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_InitTick+0x3c>)
{
 8000e88:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8a:	7811      	ldrb	r1, [r2, #0]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_InitTick+0x40>)
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	fbb2 f0f3 	udiv	r0, r2, r3
 8000e98:	f000 fa0c 	bl	80012b4 <HAL_SYSTICK_Config>
 8000e9c:	b908      	cbnz	r0, 8000ea2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	2d0f      	cmp	r5, #15
 8000ea0:	d901      	bls.n	8000ea6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000ea2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ea4:	bd38      	pop	{r3, r4, r5, pc}
 8000ea6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	4629      	mov	r1, r5
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb0:	f000 f9c2 	bl	8001238 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_InitTick+0x44>)
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	601d      	str	r5, [r3, #0]
}
 8000eba:	bd38      	pop	{r3, r4, r5, pc}
 8000ebc:	2000002c 	.word	0x2000002c
 8000ec0:	20000028 	.word	0x20000028
 8000ec4:	20000030 	.word	0x20000030

08000ec8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x20>)
{
 8000eca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ece:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	f000 f99d 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	200f      	movs	r0, #15
 8000edc:	f7ff ffd0 	bl	8000e80 <HAL_InitTick>
  HAL_MspInit();
 8000ee0:	f7ff feea 	bl	8000cb8 <HAL_MspInit>
}
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	bd08      	pop	{r3, pc}
 8000ee8:	40022000 	.word	0x40022000

08000eec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_IncTick+0x10>)
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <HAL_IncTick+0x14>)
 8000ef0:	6811      	ldr	r1, [r2, #0]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	440b      	add	r3, r1
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000023c 	.word	0x2000023c
 8000f00:	2000002c 	.word	0x2000002c

08000f04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f04:	4b01      	ldr	r3, [pc, #4]	; (8000f0c <HAL_GetTick+0x8>)
 8000f06:	6818      	ldr	r0, [r3, #0]
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000023c 	.word	0x2000023c

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b538      	push	{r3, r4, r5, lr}
 8000f12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fff6 	bl	8000f04 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f18:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f1a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000f1c:	d002      	beq.n	8000f24 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <HAL_Delay+0x20>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	1b40      	subs	r0, r0, r5
 8000f2a:	42a0      	cmp	r0, r4
 8000f2c:	d3fa      	bcc.n	8000f24 <HAL_Delay+0x14>
  {
  }
}
 8000f2e:	bd38      	pop	{r3, r4, r5, pc}
 8000f30:	2000002c 	.word	0x2000002c

08000f34 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000f34:	2300      	movs	r3, #0
{ 
 8000f36:	b530      	push	{r4, r5, lr}
 8000f38:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000f3a:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f3c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d074      	beq.n	800102e <HAL_ADC_ConfigChannel+0xfa>
 8000f44:	2301      	movs	r3, #1
 8000f46:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f4a:	684b      	ldr	r3, [r1, #4]
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f50:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8000f52:	d932      	bls.n	8000fba <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f54:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8000f5a:	d84e      	bhi.n	8000ffa <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f5c:	f04f 0c1f 	mov.w	ip, #31
 8000f60:	6808      	ldr	r0, [r1, #0]
 8000f62:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000f64:	3b23      	subs	r3, #35	; 0x23
 8000f66:	fa00 fe03 	lsl.w	lr, r0, r3
 8000f6a:	fa0c f303 	lsl.w	r3, ip, r3
 8000f6e:	ea25 0303 	bic.w	r3, r5, r3
 8000f72:	ea43 030e 	orr.w	r3, r3, lr
 8000f76:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f78:	2809      	cmp	r0, #9
 8000f7a:	d930      	bls.n	8000fde <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f7c:	f04f 0c07 	mov.w	ip, #7
 8000f80:	688d      	ldr	r5, [r1, #8]
 8000f82:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000f86:	68e3      	ldr	r3, [r4, #12]
 8000f88:	391e      	subs	r1, #30
 8000f8a:	408d      	lsls	r5, r1
 8000f8c:	fa0c f101 	lsl.w	r1, ip, r1
 8000f90:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f94:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f98:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f9a:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f9c:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f9e:	d844      	bhi.n	800102a <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	; (800105c <HAL_ADC_ConfigChannel+0x128>)
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	d038      	beq.n	8001018 <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 8000fa6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000faa:	f043 0320 	orr.w	r3, r3, #32
 8000fae:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000fb6:	b003      	add	sp, #12
 8000fb8:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fba:	f04f 0c1f 	mov.w	ip, #31
 8000fbe:	6808      	ldr	r0, [r1, #0]
 8000fc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fc4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000fc6:	3b05      	subs	r3, #5
 8000fc8:	fa00 fe03 	lsl.w	lr, r0, r3
 8000fcc:	fa0c f303 	lsl.w	r3, ip, r3
 8000fd0:	ea25 0303 	bic.w	r3, r5, r3
 8000fd4:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fd8:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fda:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fdc:	d8ce      	bhi.n	8000f7c <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fde:	2507      	movs	r5, #7
 8000fe0:	6889      	ldr	r1, [r1, #8]
 8000fe2:	6923      	ldr	r3, [r4, #16]
 8000fe4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000fe8:	4081      	lsls	r1, r0
 8000fea:	fa05 f000 	lsl.w	r0, r5, r0
 8000fee:	ea23 0300 	bic.w	r3, r3, r0
 8000ff2:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff4:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ff6:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ff8:	e7da      	b.n	8000fb0 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ffa:	f04f 0c1f 	mov.w	ip, #31
 8000ffe:	6808      	ldr	r0, [r1, #0]
 8001000:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001002:	3b41      	subs	r3, #65	; 0x41
 8001004:	fa00 fe03 	lsl.w	lr, r0, r3
 8001008:	fa0c f303 	lsl.w	r3, ip, r3
 800100c:	ea25 0303 	bic.w	r3, r5, r3
 8001010:	ea43 030e 	orr.w	r3, r3, lr
 8001014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001016:	e7af      	b.n	8000f78 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001018:	68a3      	ldr	r3, [r4, #8]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	d405      	bmi.n	800102a <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800101e:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001020:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001022:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001026:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001028:	d004      	beq.n	8001034 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102a:	2000      	movs	r0, #0
 800102c:	e7c0      	b.n	8000fb0 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 800102e:	2002      	movs	r0, #2
}
 8001030:	b003      	add	sp, #12
 8001032:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_ADC_ConfigChannel+0x12c>)
 8001036:	490b      	ldr	r1, [pc, #44]	; (8001064 <HAL_ADC_ConfigChannel+0x130>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	fba1 1303 	umull	r1, r3, r1, r3
 800103e:	0c9b      	lsrs	r3, r3, #18
 8001040:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001048:	9b01      	ldr	r3, [sp, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0ed      	beq.n	800102a <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 800104e:	9b01      	ldr	r3, [sp, #4]
 8001050:	3b01      	subs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001054:	9b01      	ldr	r3, [sp, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f9      	bne.n	800104e <HAL_ADC_ConfigChannel+0x11a>
 800105a:	e7e6      	b.n	800102a <HAL_ADC_ConfigChannel+0xf6>
 800105c:	40012400 	.word	0x40012400
 8001060:	20000028 	.word	0x20000028
 8001064:	431bde83 	.word	0x431bde83

08001068 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001068:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800106a:	6803      	ldr	r3, [r0, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	07d4      	lsls	r4, r2, #31
 8001070:	d401      	bmi.n	8001076 <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001072:	2000      	movs	r0, #0
}
 8001074:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001076:	4604      	mov	r4, r0
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001080:	f7ff ff40 	bl	8000f04 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001084:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001086:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	07d9      	lsls	r1, r3, #31
 800108c:	d5f1      	bpl.n	8001072 <ADC_ConversionStop_Disable+0xa>
 800108e:	e002      	b.n	8001096 <ADC_ConversionStop_Disable+0x2e>
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	07db      	lsls	r3, r3, #31
 8001094:	d5ed      	bpl.n	8001072 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001096:	f7ff ff35 	bl	8000f04 <HAL_GetTick>
 800109a:	1b43      	subs	r3, r0, r5
 800109c:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 800109e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010a0:	d9f6      	bls.n	8001090 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	07d2      	lsls	r2, r2, #31
 80010a6:	d5f3      	bpl.n	8001090 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 80010a8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010ac:	f043 0310 	orr.w	r3, r3, #16
 80010b0:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010b4:	4303      	orrs	r3, r0
 80010b6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80010b8:	bd38      	pop	{r3, r4, r5, pc}
 80010ba:	bf00      	nop

080010bc <HAL_ADC_Init>:
  if(hadc == NULL)
 80010bc:	2800      	cmp	r0, #0
 80010be:	d075      	beq.n	80011ac <HAL_ADC_Init+0xf0>
{
 80010c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010c4:	4604      	mov	r4, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d052      	beq.n	8001170 <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff ffcc 	bl	8001068 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010d2:	f013 0310 	ands.w	r3, r3, #16
 80010d6:	d145      	bne.n	8001164 <HAL_ADC_Init+0xa8>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d143      	bne.n	8001164 <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 80010dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010de:	4d4a      	ldr	r5, [pc, #296]	; (8001208 <HAL_ADC_Init+0x14c>)
 80010e0:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80010e6:	f021 0102 	bic.w	r1, r1, #2
 80010ea:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010ee:	42aa      	cmp	r2, r5
    ADC_STATE_CLR_SET(hadc->State,
 80010f0:	62a1      	str	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010f2:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010f4:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010f6:	d053      	beq.n	80011a0 <HAL_ADC_Init+0xe4>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010f8:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010fa:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 80010fe:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001100:	68a5      	ldr	r5, [r4, #8]
 8001102:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001106:	d039      	beq.n	800117c <HAL_ADC_Init+0xc0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001108:	f894 e014 	ldrb.w	lr, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800110c:	2d01      	cmp	r5, #1
 800110e:	bf0c      	ite	eq
 8001110:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8001114:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001118:	f1be 0f01 	cmp.w	lr, #1
 800111c:	d052      	beq.n	80011c4 <HAL_ADC_Init+0x108>
      MODIFY_REG(hadc->Instance->CR1,
 800111e:	6856      	ldr	r6, [r2, #4]
 8001120:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001124:	ea46 060c 	orr.w	r6, r6, ip
 8001128:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800112a:	6897      	ldr	r7, [r2, #8]
 800112c:	4e37      	ldr	r6, [pc, #220]	; (800120c <HAL_ADC_Init+0x150>)
 800112e:	403e      	ands	r6, r7
 8001130:	430e      	orrs	r6, r1
 8001132:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001134:	2d01      	cmp	r5, #1
 8001136:	d02f      	beq.n	8001198 <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 8001138:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800113a:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 800113e:	ea4c 0303 	orr.w	r3, ip, r3
 8001142:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001144:	6892      	ldr	r2, [r2, #8]
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <HAL_ADC_Init+0x154>)
 8001148:	4013      	ands	r3, r2
 800114a:	4299      	cmp	r1, r3
 800114c:	d030      	beq.n	80011b0 <HAL_ADC_Init+0xf4>
      tmp_hal_status = HAL_ERROR;
 800114e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001152:	f023 0312 	bic.w	r3, r3, #18
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800115e:	4303      	orrs	r3, r0
 8001160:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001164:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001166:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800116e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001170:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001172:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001176:	f7ff fdc1 	bl	8000cfc <HAL_ADC_MspInit>
 800117a:	e7a6      	b.n	80010ca <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800117c:	7d27      	ldrb	r7, [r4, #20]
 800117e:	2f01      	cmp	r7, #1
 8001180:	d01f      	beq.n	80011c2 <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CR1,
 8001182:	6853      	ldr	r3, [r2, #4]
 8001184:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800118e:	6895      	ldr	r5, [r2, #8]
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_ADC_Init+0x150>)
 8001192:	402b      	ands	r3, r5
 8001194:	430b      	orrs	r3, r1
 8001196:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001198:	6923      	ldr	r3, [r4, #16]
 800119a:	3b01      	subs	r3, #1
 800119c:	051b      	lsls	r3, r3, #20
 800119e:	e7cb      	b.n	8001138 <HAL_ADC_Init+0x7c>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011a0:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
 80011a4:	bf08      	it	eq
 80011a6:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
 80011aa:	e7a5      	b.n	80010f8 <HAL_ADC_Init+0x3c>
    return HAL_ERROR;
 80011ac:	2001      	movs	r0, #1
}
 80011ae:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 80011b0:	2300      	movs	r3, #0
 80011b2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80011b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011b6:	f023 0303 	bic.w	r3, r3, #3
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80011c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011c2:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011c4:	b1c6      	cbz	r6, 80011f8 <HAL_ADC_Init+0x13c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80011c8:	f046 0620 	orr.w	r6, r6, #32
 80011cc:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011d0:	f046 0601 	orr.w	r6, r6, #1
 80011d4:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 80011d6:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011d8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80011dc:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80011e0:	ea46 060c 	orr.w	r6, r6, ip
 80011e4:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80011e6:	6897      	ldr	r7, [r2, #8]
 80011e8:	4e08      	ldr	r6, [pc, #32]	; (800120c <HAL_ADC_Init+0x150>)
 80011ea:	ea06 0607 	and.w	r6, r6, r7
 80011ee:	ea46 0601 	orr.w	r6, r6, r1
 80011f2:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011f4:	d19e      	bne.n	8001134 <HAL_ADC_Init+0x78>
 80011f6:	e7cf      	b.n	8001198 <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011f8:	69a6      	ldr	r6, [r4, #24]
 80011fa:	3e01      	subs	r6, #1
 80011fc:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 8001200:	f446 6c00 	orr.w	ip, r6, #2048	; 0x800
 8001204:	e7e7      	b.n	80011d6 <HAL_ADC_Init+0x11a>
 8001206:	bf00      	nop
 8001208:	40013c00 	.word	0x40013c00
 800120c:	ffe1f7fd 	.word	0xffe1f7fd
 8001210:	ff1f0efe 	.word	0xff1f0efe

08001214 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001214:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4906      	ldr	r1, [pc, #24]	; (8001234 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800121a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800121e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001230:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b500      	push	{lr}
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001242:	f1c3 0e07 	rsb	lr, r3, #7
 8001246:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124e:	bf28      	it	cs
 8001250:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001254:	f1bc 0f06 	cmp.w	ip, #6
 8001258:	d91b      	bls.n	8001292 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	fa0c fc03 	lsl.w	ip, ip, r3
 8001264:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800126c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001270:	ea21 010c 	bic.w	r1, r1, ip
 8001274:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001276:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800127c:	db0c      	blt.n	8001298 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	0109      	lsls	r1, r1, #4
 8001280:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001284:	b2c9      	uxtb	r1, r1
 8001286:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800128a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800128e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001292:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001294:	4613      	mov	r3, r2
 8001296:	e7e7      	b.n	8001268 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_NVIC_SetPriority+0x78>)
 800129a:	f000 000f 	and.w	r0, r0, #15
 800129e:	0109      	lsls	r1, r1, #4
 80012a0:	b2c9      	uxtb	r1, r1
 80012a2:	4403      	add	r3, r0
 80012a4:	7619      	strb	r1, [r3, #24]
 80012a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	e000ecfc 	.word	0xe000ecfc

080012b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	3801      	subs	r0, #1
 80012b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012ba:	d20f      	bcs.n	80012dc <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c8:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	4c05      	ldr	r4, [pc, #20]	; (80012e0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012cc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80012d6:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d8:	6119      	str	r1, [r3, #16]
 80012da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012dc:	2001      	movs	r0, #1
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e8:	680e      	ldr	r6, [r1, #0]
{
 80012ea:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	f000 80be 	beq.w	800146e <HAL_GPIO_Init+0x18a>
 80012f2:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f4:	4f85      	ldr	r7, [pc, #532]	; (800150c <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 80012f6:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80012f8:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012fa:	4d85      	ldr	r5, [pc, #532]	; (8001510 <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 80012fc:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8001514 <HAL_GPIO_Init+0x230>
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8001302:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001304:	fa36 f403 	lsrs.w	r4, r6, r3
 8001308:	f102 0204 	add.w	r2, r2, #4
 800130c:	f000 80af 	beq.w	800146e <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 8001310:	2401      	movs	r4, #1
 8001312:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8001314:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001318:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 800131c:	d1f1      	bne.n	8001302 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800131e:	684e      	ldr	r6, [r1, #4]
 8001320:	2e12      	cmp	r6, #18
 8001322:	f200 80a7 	bhi.w	8001474 <HAL_GPIO_Init+0x190>
 8001326:	2e12      	cmp	r6, #18
 8001328:	d81a      	bhi.n	8001360 <HAL_GPIO_Init+0x7c>
 800132a:	e8df f006 	tbb	[pc, r6]
 800132e:	c2b0      	.short	0xc2b0
 8001330:	1919d7be 	.word	0x1919d7be
 8001334:	19191919 	.word	0x19191919
 8001338:	19191919 	.word	0x19191919
 800133c:	ba191919 	.word	0xba191919
 8001340:	c5          	.byte	0xc5
 8001341:	00          	.byte	0x00
 8001342:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001518 <HAL_GPIO_Init+0x234>
 8001346:	4576      	cmp	r6, lr
 8001348:	f000 80a1 	beq.w	800148e <HAL_GPIO_Init+0x1aa>
 800134c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001350:	4576      	cmp	r6, lr
 8001352:	f000 809c 	beq.w	800148e <HAL_GPIO_Init+0x1aa>
 8001356:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800135a:	4576      	cmp	r6, lr
 800135c:	f000 8097 	beq.w	800148e <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001360:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001364:	bf9c      	itt	ls
 8001366:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001368:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136a:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800136e:	bf84      	itt	hi
 8001370:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001374:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001378:	f8de 4000 	ldr.w	r4, [lr]
 800137c:	fa0a f90b 	lsl.w	r9, sl, fp
 8001380:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001384:	ea24 040b 	bic.w	r4, r4, fp
 8001388:	ea44 0409 	orr.w	r4, r4, r9
 800138c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001390:	684c      	ldr	r4, [r1, #4]
 8001392:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001396:	f000 8082 	beq.w	800149e <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800139a:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800139e:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a2:	f04e 0e01 	orr.w	lr, lr, #1
 80013a6:	f8c7 e018 	str.w	lr, [r7, #24]
 80013aa:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ae:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b2:	f00e 0e01 	and.w	lr, lr, #1
 80013b6:	f8cd e004 	str.w	lr, [sp, #4]
 80013ba:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80013be:	f023 0e03 	bic.w	lr, r3, #3
 80013c2:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80013c6:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80013ca:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ce:	fa06 f609 	lsl.w	r6, r6, r9
 80013d2:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d6:	f8df b144 	ldr.w	fp, [pc, #324]	; 800151c <HAL_GPIO_Init+0x238>
 80013da:	4558      	cmp	r0, fp
 80013dc:	d01b      	beq.n	8001416 <HAL_GPIO_Init+0x132>
 80013de:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80013e2:	4558      	cmp	r0, fp
 80013e4:	d073      	beq.n	80014ce <HAL_GPIO_Init+0x1ea>
 80013e6:	f8df b138 	ldr.w	fp, [pc, #312]	; 8001520 <HAL_GPIO_Init+0x23c>
 80013ea:	4558      	cmp	r0, fp
 80013ec:	d068      	beq.n	80014c0 <HAL_GPIO_Init+0x1dc>
 80013ee:	f8df b134 	ldr.w	fp, [pc, #308]	; 8001524 <HAL_GPIO_Init+0x240>
 80013f2:	4558      	cmp	r0, fp
 80013f4:	d07c      	beq.n	80014f0 <HAL_GPIO_Init+0x20c>
 80013f6:	f8df b130 	ldr.w	fp, [pc, #304]	; 8001528 <HAL_GPIO_Init+0x244>
 80013fa:	4558      	cmp	r0, fp
 80013fc:	d07f      	beq.n	80014fe <HAL_GPIO_Init+0x21a>
 80013fe:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800152c <HAL_GPIO_Init+0x248>
 8001402:	4558      	cmp	r0, fp
 8001404:	bf0c      	ite	eq
 8001406:	f04f 0b05 	moveq.w	fp, #5
 800140a:	f04f 0b06 	movne.w	fp, #6
 800140e:	fa0b f909 	lsl.w	r9, fp, r9
 8001412:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001416:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800141a:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800141c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001420:	bf14      	ite	ne
 8001422:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001426:	ea26 060c 	biceq.w	r6, r6, ip
 800142a:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800142c:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001432:	bf14      	ite	ne
 8001434:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001438:	ea26 060c 	biceq.w	r6, r6, ip
 800143c:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800143e:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001440:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001444:	bf14      	ite	ne
 8001446:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800144a:	ea26 060c 	biceq.w	r6, r6, ip
 800144e:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001450:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001454:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001456:	d01f      	beq.n	8001498 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001458:	ea44 040c 	orr.w	r4, r4, ip
 800145c:	60ec      	str	r4, [r5, #12]
 800145e:	680e      	ldr	r6, [r1, #0]
	position++;
 8001460:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	fa36 f403 	lsrs.w	r4, r6, r3
 8001466:	f102 0204 	add.w	r2, r2, #4
 800146a:	f47f af51 	bne.w	8001310 <HAL_GPIO_Init+0x2c>
  }
}
 800146e:	b003      	add	sp, #12
 8001470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001474:	4546      	cmp	r6, r8
 8001476:	d00a      	beq.n	800148e <HAL_GPIO_Init+0x1aa>
 8001478:	f67f af63 	bls.w	8001342 <HAL_GPIO_Init+0x5e>
 800147c:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8001530 <HAL_GPIO_Init+0x24c>
 8001480:	4576      	cmp	r6, lr
 8001482:	d004      	beq.n	800148e <HAL_GPIO_Init+0x1aa>
 8001484:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001488:	4576      	cmp	r6, lr
 800148a:	f47f af69 	bne.w	8001360 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800148e:	688e      	ldr	r6, [r1, #8]
 8001490:	bb3e      	cbnz	r6, 80014e2 <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001492:	f04f 0a04 	mov.w	sl, #4
 8001496:	e763      	b.n	8001360 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001498:	ea24 040c 	bic.w	r4, r4, ip
 800149c:	60ec      	str	r4, [r5, #12]
 800149e:	680e      	ldr	r6, [r1, #0]
 80014a0:	e72f      	b.n	8001302 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a2:	68cc      	ldr	r4, [r1, #12]
 80014a4:	f104 0a04 	add.w	sl, r4, #4
          break;
 80014a8:	e75a      	b.n	8001360 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014aa:	68cc      	ldr	r4, [r1, #12]
 80014ac:	f104 0a08 	add.w	sl, r4, #8
          break;
 80014b0:	e756      	b.n	8001360 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b2:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80014b6:	e753      	b.n	8001360 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b8:	68cc      	ldr	r4, [r1, #12]
 80014ba:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80014be:	e74f      	b.n	8001360 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014c0:	f04f 0b02 	mov.w	fp, #2
 80014c4:	fa0b f909 	lsl.w	r9, fp, r9
 80014c8:	ea46 0609 	orr.w	r6, r6, r9
 80014cc:	e7a3      	b.n	8001416 <HAL_GPIO_Init+0x132>
 80014ce:	f04f 0b01 	mov.w	fp, #1
 80014d2:	fa0b f909 	lsl.w	r9, fp, r9
 80014d6:	ea46 0609 	orr.w	r6, r6, r9
 80014da:	e79c      	b.n	8001416 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80014dc:	f04f 0a00 	mov.w	sl, #0
 80014e0:	e73e      	b.n	8001360 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014e2:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e4:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80014e8:	bf0c      	ite	eq
 80014ea:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80014ec:	6144      	strne	r4, [r0, #20]
 80014ee:	e737      	b.n	8001360 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f0:	f04f 0b03 	mov.w	fp, #3
 80014f4:	fa0b f909 	lsl.w	r9, fp, r9
 80014f8:	ea46 0609 	orr.w	r6, r6, r9
 80014fc:	e78b      	b.n	8001416 <HAL_GPIO_Init+0x132>
 80014fe:	f04f 0b04 	mov.w	fp, #4
 8001502:	fa0b f909 	lsl.w	r9, fp, r9
 8001506:	ea46 0609 	orr.w	r6, r6, r9
 800150a:	e784      	b.n	8001416 <HAL_GPIO_Init+0x132>
 800150c:	40021000 	.word	0x40021000
 8001510:	40010400 	.word	0x40010400
 8001514:	10220000 	.word	0x10220000
 8001518:	10120000 	.word	0x10120000
 800151c:	40010800 	.word	0x40010800
 8001520:	40011000 	.word	0x40011000
 8001524:	40011400 	.word	0x40011400
 8001528:	40011800 	.word	0x40011800
 800152c:	40011c00 	.word	0x40011c00
 8001530:	10310000 	.word	0x10310000

08001534 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001534:	b902      	cbnz	r2, 8001538 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001536:	0409      	lsls	r1, r1, #16
 8001538:	6101      	str	r1, [r0, #16]
  }
}
 800153a:	4770      	bx	lr

0800153c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800153c:	2800      	cmp	r0, #0
 800153e:	f000 81b6 	beq.w	80018ae <HAL_RCC_OscConfig+0x372>
{
 8001542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001546:	6803      	ldr	r3, [r0, #0]
 8001548:	4604      	mov	r4, r0
 800154a:	07dd      	lsls	r5, r3, #31
{
 800154c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	d535      	bpl.n	80015bc <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001550:	499a      	ldr	r1, [pc, #616]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 8001552:	684a      	ldr	r2, [r1, #4]
 8001554:	f002 020c 	and.w	r2, r2, #12
 8001558:	2a04      	cmp	r2, #4
 800155a:	f000 80ef 	beq.w	800173c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800155e:	684a      	ldr	r2, [r1, #4]
 8001560:	f002 020c 	and.w	r2, r2, #12
 8001564:	2a08      	cmp	r2, #8
 8001566:	f000 80e5 	beq.w	8001734 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156a:	6863      	ldr	r3, [r4, #4]
 800156c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001570:	d010      	beq.n	8001594 <HAL_RCC_OscConfig+0x58>
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 810c 	beq.w	8001790 <HAL_RCC_OscConfig+0x254>
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800157c:	f000 8182 	beq.w	8001884 <HAL_RCC_OscConfig+0x348>
 8001580:	4b8e      	ldr	r3, [pc, #568]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e004      	b.n	800159e <HAL_RCC_OscConfig+0x62>
 8001594:	4a89      	ldr	r2, [pc, #548]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 8001596:	6813      	ldr	r3, [r2, #0]
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fcb1 	bl	8000f04 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4e86      	ldr	r6, [pc, #536]	; (80017bc <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 80015a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	e005      	b.n	80015b4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fcac 	bl	8000f04 <HAL_GetTick>
 80015ac:	1b40      	subs	r0, r0, r5
 80015ae:	2864      	cmp	r0, #100	; 0x64
 80015b0:	f200 80ea 	bhi.w	8001788 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b4:	6833      	ldr	r3, [r6, #0]
 80015b6:	039a      	lsls	r2, r3, #14
 80015b8:	d5f6      	bpl.n	80015a8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	079f      	lsls	r7, r3, #30
 80015be:	d528      	bpl.n	8001612 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c0:	4a7e      	ldr	r2, [pc, #504]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 80015c2:	6851      	ldr	r1, [r2, #4]
 80015c4:	f011 0f0c 	tst.w	r1, #12
 80015c8:	f000 808d 	beq.w	80016e6 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015cc:	6851      	ldr	r1, [r2, #4]
 80015ce:	f001 010c 	and.w	r1, r1, #12
 80015d2:	2908      	cmp	r1, #8
 80015d4:	f000 8083 	beq.w	80016de <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d8:	6923      	ldr	r3, [r4, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8118 	beq.w	8001810 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	2201      	movs	r2, #1
 80015e2:	4b77      	ldr	r3, [pc, #476]	; (80017c0 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	4e75      	ldr	r6, [pc, #468]	; (80017bc <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 80015e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015e8:	f7ff fc8c 	bl	8000f04 <HAL_GetTick>
 80015ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ee:	e005      	b.n	80015fc <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fc88 	bl	8000f04 <HAL_GetTick>
 80015f4:	1b40      	subs	r0, r0, r5
 80015f6:	2802      	cmp	r0, #2
 80015f8:	f200 80c6 	bhi.w	8001788 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	6833      	ldr	r3, [r6, #0]
 80015fe:	0798      	lsls	r0, r3, #30
 8001600:	d5f6      	bpl.n	80015f0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	6833      	ldr	r3, [r6, #0]
 8001604:	6962      	ldr	r2, [r4, #20]
 8001606:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800160a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800160e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	071a      	lsls	r2, r3, #28
 8001614:	d41f      	bmi.n	8001656 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001616:	075d      	lsls	r5, r3, #29
 8001618:	d542      	bpl.n	80016a0 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161a:	4b68      	ldr	r3, [pc, #416]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	00d0      	lsls	r0, r2, #3
 8001620:	d57d      	bpl.n	800171e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8001622:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4e67      	ldr	r6, [pc, #412]	; (80017c4 <HAL_RCC_OscConfig+0x288>)
 8001626:	6833      	ldr	r3, [r6, #0]
 8001628:	05d9      	lsls	r1, r3, #23
 800162a:	f140 809d 	bpl.w	8001768 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162e:	68e3      	ldr	r3, [r4, #12]
 8001630:	2b01      	cmp	r3, #1
 8001632:	f000 80fe 	beq.w	8001832 <HAL_RCC_OscConfig+0x2f6>
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 80ca 	beq.w	80017d0 <HAL_RCC_OscConfig+0x294>
 800163c:	2b05      	cmp	r3, #5
 800163e:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 8001640:	6a1a      	ldr	r2, [r3, #32]
 8001642:	f000 812c 	beq.w	800189e <HAL_RCC_OscConfig+0x362>
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	621a      	str	r2, [r3, #32]
 800164c:	6a1a      	ldr	r2, [r3, #32]
 800164e:	f022 0204 	bic.w	r2, r2, #4
 8001652:	621a      	str	r2, [r3, #32]
 8001654:	e0f2      	b.n	800183c <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001656:	69a3      	ldr	r3, [r4, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d04f      	beq.n	80016fc <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 800165c:	2201      	movs	r2, #1
 800165e:	4b58      	ldr	r3, [pc, #352]	; (80017c0 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001660:	4e56      	ldr	r6, [pc, #344]	; (80017bc <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8001662:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001666:	f7ff fc4d 	bl	8000f04 <HAL_GetTick>
 800166a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166c:	e005      	b.n	800167a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fc49 	bl	8000f04 <HAL_GetTick>
 8001672:	1b40      	subs	r0, r0, r5
 8001674:	2802      	cmp	r0, #2
 8001676:	f200 8087 	bhi.w	8001788 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800167c:	079b      	lsls	r3, r3, #30
 800167e:	d5f6      	bpl.n	800166e <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001680:	4b51      	ldr	r3, [pc, #324]	; (80017c8 <HAL_RCC_OscConfig+0x28c>)
 8001682:	4a52      	ldr	r2, [pc, #328]	; (80017cc <HAL_RCC_OscConfig+0x290>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	0a5b      	lsrs	r3, r3, #9
 800168c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800168e:	bf00      	nop
  }
  while (Delay --);
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	1e5a      	subs	r2, r3, #1
 8001694:	9201      	str	r2, [sp, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f9      	bne.n	800168e <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	075d      	lsls	r5, r3, #29
 800169e:	d4bc      	bmi.n	800161a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a0:	69e0      	ldr	r0, [r4, #28]
 80016a2:	b1c0      	cbz	r0, 80016d6 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a4:	4d45      	ldr	r5, [pc, #276]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 80016a6:	686b      	ldr	r3, [r5, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	f000 80d8 	beq.w	8001862 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 80016b2:	2200      	movs	r2, #0
 80016b4:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80016b8:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ba:	f000 80fa 	beq.w	80018b2 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 80016be:	f7ff fc21 	bl	8000f04 <HAL_GetTick>
 80016c2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c4:	e004      	b.n	80016d0 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff fc1d 	bl	8000f04 <HAL_GetTick>
 80016ca:	1b00      	subs	r0, r0, r4
 80016cc:	2802      	cmp	r0, #2
 80016ce:	d85b      	bhi.n	8001788 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	019b      	lsls	r3, r3, #6
 80016d4:	d4f7      	bmi.n	80016c6 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 80016d6:	2000      	movs	r0, #0
}
 80016d8:	b002      	add	sp, #8
 80016da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016de:	6852      	ldr	r2, [r2, #4]
 80016e0:	03d6      	lsls	r6, r2, #15
 80016e2:	f53f af79 	bmi.w	80015d8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	4a35      	ldr	r2, [pc, #212]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	0795      	lsls	r5, r2, #30
 80016ec:	d530      	bpl.n	8001750 <HAL_RCC_OscConfig+0x214>
 80016ee:	6922      	ldr	r2, [r4, #16]
 80016f0:	2a01      	cmp	r2, #1
 80016f2:	d02d      	beq.n	8001750 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80016f4:	2001      	movs	r0, #1
}
 80016f6:	b002      	add	sp, #8
 80016f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80016fc:	4a30      	ldr	r2, [pc, #192]	; (80017c0 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fe:	4e2f      	ldr	r6, [pc, #188]	; (80017bc <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8001700:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001704:	f7ff fbfe 	bl	8000f04 <HAL_GetTick>
 8001708:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170a:	e004      	b.n	8001716 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fbfa 	bl	8000f04 <HAL_GetTick>
 8001710:	1b40      	subs	r0, r0, r5
 8001712:	2802      	cmp	r0, #2
 8001714:	d838      	bhi.n	8001788 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001716:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001718:	079f      	lsls	r7, r3, #30
 800171a:	d4f7      	bmi.n	800170c <HAL_RCC_OscConfig+0x1d0>
 800171c:	e7bd      	b.n	800169a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001720:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001726:	61da      	str	r2, [r3, #28]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001732:	e777      	b.n	8001624 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001734:	684a      	ldr	r2, [r1, #4]
 8001736:	03d0      	lsls	r0, r2, #15
 8001738:	f57f af17 	bpl.w	800156a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	0391      	lsls	r1, r2, #14
 8001742:	f57f af3b 	bpl.w	80015bc <HAL_RCC_OscConfig+0x80>
 8001746:	6862      	ldr	r2, [r4, #4]
 8001748:	2a00      	cmp	r2, #0
 800174a:	f47f af37 	bne.w	80015bc <HAL_RCC_OscConfig+0x80>
 800174e:	e7d1      	b.n	80016f4 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	491a      	ldr	r1, [pc, #104]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 8001752:	6960      	ldr	r0, [r4, #20]
 8001754:	680a      	ldr	r2, [r1, #0]
 8001756:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800175a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800175e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001760:	071a      	lsls	r2, r3, #28
 8001762:	f57f af58 	bpl.w	8001616 <HAL_RCC_OscConfig+0xda>
 8001766:	e776      	b.n	8001656 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001768:	6833      	ldr	r3, [r6, #0]
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001770:	f7ff fbc8 	bl	8000f04 <HAL_GetTick>
 8001774:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001776:	6833      	ldr	r3, [r6, #0]
 8001778:	05da      	lsls	r2, r3, #23
 800177a:	f53f af58 	bmi.w	800162e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff fbc1 	bl	8000f04 <HAL_GetTick>
 8001782:	1bc0      	subs	r0, r0, r7
 8001784:	2864      	cmp	r0, #100	; 0x64
 8001786:	d9f6      	bls.n	8001776 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8001788:	2003      	movs	r0, #3
}
 800178a:	b002      	add	sp, #8
 800178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001790:	4d0a      	ldr	r5, [pc, #40]	; (80017bc <HAL_RCC_OscConfig+0x280>)
 8001792:	682b      	ldr	r3, [r5, #0]
 8001794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001798:	602b      	str	r3, [r5, #0]
 800179a:	682b      	ldr	r3, [r5, #0]
 800179c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017a2:	f7ff fbaf 	bl	8000f04 <HAL_GetTick>
 80017a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a8:	e004      	b.n	80017b4 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017aa:	f7ff fbab 	bl	8000f04 <HAL_GetTick>
 80017ae:	1b80      	subs	r0, r0, r6
 80017b0:	2864      	cmp	r0, #100	; 0x64
 80017b2:	d8e9      	bhi.n	8001788 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b4:	682b      	ldr	r3, [r5, #0]
 80017b6:	039b      	lsls	r3, r3, #14
 80017b8:	d4f7      	bmi.n	80017aa <HAL_RCC_OscConfig+0x26e>
 80017ba:	e6fe      	b.n	80015ba <HAL_RCC_OscConfig+0x7e>
 80017bc:	40021000 	.word	0x40021000
 80017c0:	42420000 	.word	0x42420000
 80017c4:	40007000 	.word	0x40007000
 80017c8:	20000028 	.word	0x20000028
 80017cc:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	4e50      	ldr	r6, [pc, #320]	; (8001914 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d6:	6a33      	ldr	r3, [r6, #32]
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	6233      	str	r3, [r6, #32]
 80017de:	6a33      	ldr	r3, [r6, #32]
 80017e0:	f023 0304 	bic.w	r3, r3, #4
 80017e4:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb8d 	bl	8000f04 <HAL_GetTick>
 80017ea:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	e004      	b.n	80017f8 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fb89 	bl	8000f04 <HAL_GetTick>
 80017f2:	1bc0      	subs	r0, r0, r7
 80017f4:	4540      	cmp	r0, r8
 80017f6:	d8c7      	bhi.n	8001788 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	6a33      	ldr	r3, [r6, #32]
 80017fa:	0798      	lsls	r0, r3, #30
 80017fc:	d4f7      	bmi.n	80017ee <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 80017fe:	2d00      	cmp	r5, #0
 8001800:	f43f af4e 	beq.w	80016a0 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001804:	4a43      	ldr	r2, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x3d8>)
 8001806:	69d3      	ldr	r3, [r2, #28]
 8001808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	e747      	b.n	80016a0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001810:	4a41      	ldr	r2, [pc, #260]	; (8001918 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	4e40      	ldr	r6, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8001814:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001816:	f7ff fb75 	bl	8000f04 <HAL_GetTick>
 800181a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181c:	e004      	b.n	8001828 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181e:	f7ff fb71 	bl	8000f04 <HAL_GetTick>
 8001822:	1b40      	subs	r0, r0, r5
 8001824:	2802      	cmp	r0, #2
 8001826:	d8af      	bhi.n	8001788 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001828:	6833      	ldr	r3, [r6, #0]
 800182a:	0799      	lsls	r1, r3, #30
 800182c:	d4f7      	bmi.n	800181e <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	e6ef      	b.n	8001612 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001832:	4a38      	ldr	r2, [pc, #224]	; (8001914 <HAL_RCC_OscConfig+0x3d8>)
 8001834:	6a13      	ldr	r3, [r2, #32]
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800183c:	f7ff fb62 	bl	8000f04 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001844:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001846:	4f33      	ldr	r7, [pc, #204]	; (8001914 <HAL_RCC_OscConfig+0x3d8>)
 8001848:	e004      	b.n	8001854 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff fb5b 	bl	8000f04 <HAL_GetTick>
 800184e:	1b80      	subs	r0, r0, r6
 8001850:	4540      	cmp	r0, r8
 8001852:	d899      	bhi.n	8001788 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	079b      	lsls	r3, r3, #30
 8001858:	d5f7      	bpl.n	800184a <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 800185a:	2d00      	cmp	r5, #0
 800185c:	f43f af20 	beq.w	80016a0 <HAL_RCC_OscConfig+0x164>
 8001860:	e7d0      	b.n	8001804 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001862:	2801      	cmp	r0, #1
 8001864:	f43f af38 	beq.w	80016d8 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8001868:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	6a22      	ldr	r2, [r4, #32]
 800186c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001870:	4291      	cmp	r1, r2
 8001872:	f47f af3f 	bne.w	80016f4 <HAL_RCC_OscConfig+0x1b8>
 8001876:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001878:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800187c:	1a18      	subs	r0, r3, r0
 800187e:	bf18      	it	ne
 8001880:	2001      	movne	r0, #1
 8001882:	e729      	b.n	80016d8 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001888:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e67f      	b.n	800159e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189e:	f042 0204 	orr.w	r2, r2, #4
 80018a2:	621a      	str	r2, [r3, #32]
 80018a4:	6a1a      	ldr	r2, [r3, #32]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	621a      	str	r2, [r3, #32]
 80018ac:	e7c6      	b.n	800183c <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 80018ae:	2001      	movs	r0, #1
}
 80018b0:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80018b2:	f7ff fb27 	bl	8000f04 <HAL_GetTick>
 80018b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	e005      	b.n	80018c6 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fb23 	bl	8000f04 <HAL_GetTick>
 80018be:	1b80      	subs	r0, r0, r6
 80018c0:	2802      	cmp	r0, #2
 80018c2:	f63f af61 	bhi.w	8001788 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c6:	682b      	ldr	r3, [r5, #0]
 80018c8:	0199      	lsls	r1, r3, #6
 80018ca:	d4f6      	bmi.n	80018ba <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018cc:	6a23      	ldr	r3, [r4, #32]
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d4:	686a      	ldr	r2, [r5, #4]
 80018d6:	68a1      	ldr	r1, [r4, #8]
 80018d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80018dc:	430a      	orrs	r2, r1
 80018de:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018e0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e2:	4d0c      	ldr	r5, [pc, #48]	; (8001914 <HAL_RCC_OscConfig+0x3d8>)
 80018e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018e6:	686a      	ldr	r2, [r5, #4]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80018ee:	490a      	ldr	r1, [pc, #40]	; (8001918 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	4313      	orrs	r3, r2
 80018f2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018f4:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80018f6:	f7ff fb05 	bl	8000f04 <HAL_GetTick>
 80018fa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fc:	e005      	b.n	800190a <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff fb01 	bl	8000f04 <HAL_GetTick>
 8001902:	1b00      	subs	r0, r0, r4
 8001904:	2802      	cmp	r0, #2
 8001906:	f63f af3f 	bhi.w	8001788 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190a:	682b      	ldr	r3, [r5, #0]
 800190c:	019a      	lsls	r2, r3, #6
 800190e:	d5f6      	bpl.n	80018fe <HAL_RCC_OscConfig+0x3c2>
 8001910:	e6e1      	b.n	80016d6 <HAL_RCC_OscConfig+0x19a>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	42420000 	.word	0x42420000

0800191c <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800191c:	f240 2c01 	movw	ip, #513	; 0x201
{
 8001920:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001924:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001926:	f10d 0e18 	add.w	lr, sp, #24
 800192a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800192c:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8001930:	4a15      	ldr	r2, [pc, #84]	; (8001988 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001932:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 8001936:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001938:	f003 010c 	and.w	r1, r3, #12
 800193c:	2908      	cmp	r1, #8
 800193e:	d003      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 8001940:	4812      	ldr	r0, [pc, #72]	; (800198c <HAL_RCC_GetSysClockFreq+0x70>)
}
 8001942:	b007      	add	sp, #28
 8001944:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001948:	f3c3 4183 	ubfx	r1, r3, #18, #4
 800194c:	3118      	adds	r1, #24
 800194e:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001950:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001952:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001956:	d50e      	bpl.n	8001976 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001958:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800195a:	4a0c      	ldr	r2, [pc, #48]	; (800198c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800195c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001960:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001964:	3318      	adds	r3, #24
 8001966:	446b      	add	r3, sp
 8001968:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800196c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001970:	b007      	add	sp, #28
 8001972:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_RCC_GetSysClockFreq+0x74>)
 8001978:	fb03 f000 	mul.w	r0, r3, r0
}
 800197c:	b007      	add	sp, #28
 800197e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001982:	bf00      	nop
 8001984:	0800a7a4 	.word	0x0800a7a4
 8001988:	40021000 	.word	0x40021000
 800198c:	007a1200 	.word	0x007a1200
 8001990:	003d0900 	.word	0x003d0900

08001994 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001994:	2800      	cmp	r0, #0
 8001996:	f000 808c 	beq.w	8001ab2 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800199a:	4a49      	ldr	r2, [pc, #292]	; (8001ac0 <HAL_RCC_ClockConfig+0x12c>)
{
 800199c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	4604      	mov	r4, r0
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	428b      	cmp	r3, r1
 80019aa:	460d      	mov	r5, r1
 80019ac:	d20c      	bcs.n	80019c8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	6813      	ldr	r3, [r2, #0]
 80019b0:	f023 0307 	bic.w	r3, r3, #7
 80019b4:	430b      	orrs	r3, r1
 80019b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	428b      	cmp	r3, r1
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80019c2:	2001      	movs	r0, #1
}
 80019c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	0798      	lsls	r0, r3, #30
 80019cc:	d514      	bpl.n	80019f8 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ce:	0759      	lsls	r1, r3, #29
 80019d0:	d504      	bpl.n	80019dc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d2:	493c      	ldr	r1, [pc, #240]	; (8001ac4 <HAL_RCC_ClockConfig+0x130>)
 80019d4:	684a      	ldr	r2, [r1, #4]
 80019d6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80019da:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	071a      	lsls	r2, r3, #28
 80019de:	d504      	bpl.n	80019ea <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e0:	4938      	ldr	r1, [pc, #224]	; (8001ac4 <HAL_RCC_ClockConfig+0x130>)
 80019e2:	684a      	ldr	r2, [r1, #4]
 80019e4:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80019e8:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ea:	4936      	ldr	r1, [pc, #216]	; (8001ac4 <HAL_RCC_ClockConfig+0x130>)
 80019ec:	68a0      	ldr	r0, [r4, #8]
 80019ee:	684a      	ldr	r2, [r1, #4]
 80019f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019f4:	4302      	orrs	r2, r0
 80019f6:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f8:	07df      	lsls	r7, r3, #31
 80019fa:	d520      	bpl.n	8001a3e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fc:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a00:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a04:	d057      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a06:	2a02      	cmp	r2, #2
 8001a08:	d050      	beq.n	8001aac <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	0799      	lsls	r1, r3, #30
 8001a0c:	d5d9      	bpl.n	80019c2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	4e2d      	ldr	r6, [pc, #180]	; (8001ac4 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a14:	6873      	ldr	r3, [r6, #4]
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001a1e:	f7ff fa71 	bl	8000f04 <HAL_GetTick>
 8001a22:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a24:	e004      	b.n	8001a30 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a26:	f7ff fa6d 	bl	8000f04 <HAL_GetTick>
 8001a2a:	1bc0      	subs	r0, r0, r7
 8001a2c:	4540      	cmp	r0, r8
 8001a2e:	d845      	bhi.n	8001abc <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a30:	6873      	ldr	r3, [r6, #4]
 8001a32:	6862      	ldr	r2, [r4, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a3c:	d1f3      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3e:	4a20      	ldr	r2, [pc, #128]	; (8001ac0 <HAL_RCC_ClockConfig+0x12c>)
 8001a40:	6813      	ldr	r3, [r2, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	42ab      	cmp	r3, r5
 8001a48:	d909      	bls.n	8001a5e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	6813      	ldr	r3, [r2, #0]
 8001a4c:	f023 0307 	bic.w	r3, r3, #7
 8001a50:	432b      	orrs	r3, r5
 8001a52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a54:	6813      	ldr	r3, [r2, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	42ab      	cmp	r3, r5
 8001a5c:	d1b1      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	075a      	lsls	r2, r3, #29
 8001a62:	d506      	bpl.n	8001a72 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4917      	ldr	r1, [pc, #92]	; (8001ac4 <HAL_RCC_ClockConfig+0x130>)
 8001a66:	68e0      	ldr	r0, [r4, #12]
 8001a68:	684a      	ldr	r2, [r1, #4]
 8001a6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a6e:	4302      	orrs	r2, r0
 8001a70:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	071b      	lsls	r3, r3, #28
 8001a74:	d507      	bpl.n	8001a86 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a76:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <HAL_RCC_ClockConfig+0x130>)
 8001a78:	6921      	ldr	r1, [r4, #16]
 8001a7a:	6853      	ldr	r3, [r2, #4]
 8001a7c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a80:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a84:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a86:	f7ff ff49 	bl	800191c <HAL_RCC_GetSysClockFreq>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <HAL_RCC_ClockConfig+0x130>)
 8001a8e:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x134>)
 8001a90:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8001a92:	480e      	ldr	r0, [pc, #56]	; (8001acc <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a94:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001a98:	5c89      	ldrb	r1, [r1, r2]
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_RCC_ClockConfig+0x13c>)
 8001a9c:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8001a9e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001aa2:	f7ff f9ed 	bl	8000e80 <HAL_InitTick>
  return HAL_OK;
 8001aa6:	2000      	movs	r0, #0
}
 8001aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aac:	0198      	lsls	r0, r3, #6
 8001aae:	d4ae      	bmi.n	8001a0e <HAL_RCC_ClockConfig+0x7a>
 8001ab0:	e787      	b.n	80019c2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001ab2:	2001      	movs	r0, #1
}
 8001ab4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	039e      	lsls	r6, r3, #14
 8001ab8:	d4a9      	bmi.n	8001a0e <HAL_RCC_ClockConfig+0x7a>
 8001aba:	e782      	b.n	80019c2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8001abc:	2003      	movs	r0, #3
 8001abe:	e781      	b.n	80019c4 <HAL_RCC_ClockConfig+0x30>
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	0800a794 	.word	0x0800a794
 8001acc:	20000030 	.word	0x20000030
 8001ad0:	20000028 	.word	0x20000028

08001ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ada:	6800      	ldr	r0, [r0, #0]
{
 8001adc:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ade:	07c1      	lsls	r1, r0, #31
 8001ae0:	d52c      	bpl.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	00d2      	lsls	r2, r2, #3
 8001ae8:	d53f      	bpl.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aea:	4d39      	ldr	r5, [pc, #228]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8001aec:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	682b      	ldr	r3, [r5, #0]
 8001af0:	05df      	lsls	r7, r3, #23
 8001af2:	d548      	bpl.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001af4:	4d35      	ldr	r5, [pc, #212]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001af6:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001af8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001afc:	d011      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001afe:	6861      	ldr	r1, [r4, #4]
 8001b00:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d00d      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b08:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b0a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b0c:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b0e:	4a31      	ldr	r2, [pc, #196]	; (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b14:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b18:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b1c:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b1e:	07d9      	lsls	r1, r3, #31
 8001b20:	d444      	bmi.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b22:	6861      	ldr	r1, [r4, #4]
 8001b24:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001b26:	6a13      	ldr	r3, [r2, #32]
 8001b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b30:	b11e      	cbz	r6, 8001b3a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b32:	69d3      	ldr	r3, [r2, #28]
 8001b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b3a:	6820      	ldr	r0, [r4, #0]
 8001b3c:	0783      	lsls	r3, r0, #30
 8001b3e:	d506      	bpl.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b40:	4922      	ldr	r1, [pc, #136]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001b42:	68a3      	ldr	r3, [r4, #8]
 8001b44:	684a      	ldr	r2, [r1, #4]
 8001b46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b4e:	f010 0010 	ands.w	r0, r0, #16
 8001b52:	d007      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b54:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b56:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001b58:	6961      	ldr	r1, [r4, #20]
 8001b5a:	6853      	ldr	r3, [r2, #4]
 8001b5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6053      	str	r3, [r2, #4]
}
 8001b64:	b002      	add	sp, #8
 8001b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	4d18      	ldr	r5, [pc, #96]	; (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b72:	61da      	str	r2, [r3, #28]
 8001b74:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8001b76:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	9301      	str	r3, [sp, #4]
 8001b7e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	682b      	ldr	r3, [r5, #0]
 8001b82:	05df      	lsls	r7, r3, #23
 8001b84:	d4b6      	bmi.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b86:	682b      	ldr	r3, [r5, #0]
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f9b9 	bl	8000f04 <HAL_GetTick>
 8001b92:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	05d8      	lsls	r0, r3, #23
 8001b98:	d4ac      	bmi.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7ff f9b3 	bl	8000f04 <HAL_GetTick>
 8001b9e:	1bc3      	subs	r3, r0, r7
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d9f7      	bls.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8001ba4:	2003      	movs	r0, #3
}
 8001ba6:	b002      	add	sp, #8
 8001ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8001bac:	f7ff f9aa 	bl	8000f04 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001bb4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb6:	e004      	b.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f9a4 	bl	8000f04 <HAL_GetTick>
 8001bbc:	1bc0      	subs	r0, r0, r7
 8001bbe:	4540      	cmp	r0, r8
 8001bc0:	d8f0      	bhi.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc2:	6a2b      	ldr	r3, [r5, #32]
 8001bc4:	079a      	lsls	r2, r3, #30
 8001bc6:	d5f7      	bpl.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8001bc8:	e7ab      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	42420000 	.word	0x42420000

08001bd8 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001bd8:	b368      	cbz	r0, 8001c36 <HAL_SRAM_Init+0x5e>
 8001bda:	6983      	ldr	r3, [r0, #24]
{
 8001bdc:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8001bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be2:	4604      	mov	r4, r0
 8001be4:	d029      	beq.n	8001c3a <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8001be6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001bea:	4615      	mov	r5, r2
 8001bec:	460e      	mov	r6, r1
 8001bee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bf2:	b1db      	cbz	r3, 8001c2c <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	f851 0b08 	ldr.w	r0, [r1], #8
 8001bfa:	f000 f821 	bl	8001c40 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8001bfe:	4631      	mov	r1, r6
 8001c00:	68a2      	ldr	r2, [r4, #8]
 8001c02:	6820      	ldr	r0, [r4, #0]
 8001c04:	f000 f852 	bl	8001cac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001c08:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8001c0c:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8001c0e:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8001c10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c12:	f000 f86d 	bl	8001cf0 <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001c16:	6822      	ldr	r2, [r4, #0]
 8001c18:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 8001c1a:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8001c1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001c20:	432b      	orrs	r3, r5
 8001c22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8001c26:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8001c2c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 8001c30:	f7ff f896 	bl	8000d60 <HAL_SRAM_MspInit>
 8001c34:	e7de      	b.n	8001bf4 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 8001c36:	2001      	movs	r0, #1
}
 8001c38:	4770      	bx	lr
    return HAL_ERROR;
 8001c3a:	2001      	movs	r0, #1
}
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}
 8001c3e:	bf00      	nop

08001c40 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8001c40:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 8001c42:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8001c44:	688b      	ldr	r3, [r1, #8]
{
 8001c46:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	bf0c      	ite	eq
 8001c4c:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8001c50:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001c52:	684e      	ldr	r6, [r1, #4]
 8001c54:	680c      	ldr	r4, [r1, #0]
 8001c56:	4333      	orrs	r3, r6
 8001c58:	68ce      	ldr	r6, [r1, #12]
 8001c5a:	4d13      	ldr	r5, [pc, #76]	; (8001ca8 <FSMC_NORSRAM_Init+0x68>)
 8001c5c:	4333      	orrs	r3, r6
 8001c5e:	690e      	ldr	r6, [r1, #16]
 8001c60:	4333      	orrs	r3, r6
 8001c62:	694e      	ldr	r6, [r1, #20]
 8001c64:	4333      	orrs	r3, r6
 8001c66:	69ce      	ldr	r6, [r1, #28]
 8001c68:	4333      	orrs	r3, r6
 8001c6a:	6a0e      	ldr	r6, [r1, #32]
 8001c6c:	4333      	orrs	r3, r6
 8001c6e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8001c70:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8001c72:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8001c76:	f026 0601 	bic.w	r6, r6, #1
 8001c7a:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001c7e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8001c80:	4333      	orrs	r3, r6
 8001c82:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8001c84:	4333      	orrs	r3, r6
 8001c86:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8001c88:	4333      	orrs	r3, r6
 8001c8a:	698e      	ldr	r6, [r1, #24]
 8001c8c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001c8e:	4333      	orrs	r3, r6
 8001c90:	430b      	orrs	r3, r1
 8001c92:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8001c96:	400d      	ands	r5, r1
 8001c98:	432b      	orrs	r3, r5
 8001c9a:	ea43 030c 	orr.w	r3, r3, ip
 8001c9e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8001ca2:	bc70      	pop	{r4, r5, r6}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	fff00080 	.word	0xfff00080

08001cac <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001cac:	4603      	mov	r3, r0
 8001cae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001cb2:	6853      	ldr	r3, [r2, #4]
{
 8001cb4:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001cb6:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 8001cba:	698c      	ldr	r4, [r1, #24]
 8001cbc:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8001cbe:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001cc0:	4323      	orrs	r3, r4
 8001cc2:	684c      	ldr	r4, [r1, #4]
 8001cc4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001cc8:	688c      	ldr	r4, [r1, #8]
 8001cca:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001cce:	68cc      	ldr	r4, [r1, #12]
 8001cd0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001cd4:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 8001cd8:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 8001cdc:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 8001ce0:	3902      	subs	r1, #2
 8001ce2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001ce6:	ea43 030c 	orr.w	r3, r3, ip
 8001cea:	6053      	str	r3, [r2, #4]
}
 8001cec:	bd10      	pop	{r4, pc}
 8001cee:	bf00      	nop

08001cf0 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8001cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cf4:	d005      	beq.n	8001d02 <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001cf6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001cfa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8001cfe:	2000      	movs	r0, #0
 8001d00:	4770      	bx	lr
{
 8001d02:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8001d04:	680b      	ldr	r3, [r1, #0]
 8001d06:	698d      	ldr	r5, [r1, #24]
 8001d08:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001d0c:	432b      	orrs	r3, r5
 8001d0e:	684d      	ldr	r5, [r1, #4]
 8001d10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001d14:	688d      	ldr	r5, [r1, #8]
 8001d16:	68c9      	ldr	r1, [r1, #12]
 8001d18:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001d1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8001d22:	4021      	ands	r1, r4
 8001d24:	430b      	orrs	r3, r1
 8001d26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8001d2a:	bc30      	pop	{r4, r5}
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	4770      	bx	lr
 8001d30:	cff00000 	.word	0xcff00000

08001d34 <__errno>:
 8001d34:	4b01      	ldr	r3, [pc, #4]	; (8001d3c <__errno+0x8>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000034 	.word	0x20000034

08001d40 <__libc_init_array>:
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	2600      	movs	r6, #0
 8001d44:	4d0c      	ldr	r5, [pc, #48]	; (8001d78 <__libc_init_array+0x38>)
 8001d46:	4c0d      	ldr	r4, [pc, #52]	; (8001d7c <__libc_init_array+0x3c>)
 8001d48:	1b64      	subs	r4, r4, r5
 8001d4a:	10a4      	asrs	r4, r4, #2
 8001d4c:	42a6      	cmp	r6, r4
 8001d4e:	d109      	bne.n	8001d64 <__libc_init_array+0x24>
 8001d50:	f000 fc9c 	bl	800268c <_init>
 8001d54:	2600      	movs	r6, #0
 8001d56:	4d0a      	ldr	r5, [pc, #40]	; (8001d80 <__libc_init_array+0x40>)
 8001d58:	4c0a      	ldr	r4, [pc, #40]	; (8001d84 <__libc_init_array+0x44>)
 8001d5a:	1b64      	subs	r4, r4, r5
 8001d5c:	10a4      	asrs	r4, r4, #2
 8001d5e:	42a6      	cmp	r6, r4
 8001d60:	d105      	bne.n	8001d6e <__libc_init_array+0x2e>
 8001d62:	bd70      	pop	{r4, r5, r6, pc}
 8001d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d68:	4798      	blx	r3
 8001d6a:	3601      	adds	r6, #1
 8001d6c:	e7ee      	b.n	8001d4c <__libc_init_array+0xc>
 8001d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d72:	4798      	blx	r3
 8001d74:	3601      	adds	r6, #1
 8001d76:	e7f2      	b.n	8001d5e <__libc_init_array+0x1e>
 8001d78:	0800a7e8 	.word	0x0800a7e8
 8001d7c:	0800a7e8 	.word	0x0800a7e8
 8001d80:	0800a7e8 	.word	0x0800a7e8
 8001d84:	0800a7ec 	.word	0x0800a7ec

08001d88 <memset>:
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4402      	add	r2, r0
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d100      	bne.n	8001d92 <memset+0xa>
 8001d90:	4770      	bx	lr
 8001d92:	f803 1b01 	strb.w	r1, [r3], #1
 8001d96:	e7f9      	b.n	8001d8c <memset+0x4>

08001d98 <_vsiprintf_r>:
 8001d98:	b500      	push	{lr}
 8001d9a:	b09b      	sub	sp, #108	; 0x6c
 8001d9c:	9100      	str	r1, [sp, #0]
 8001d9e:	9104      	str	r1, [sp, #16]
 8001da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001da4:	9105      	str	r1, [sp, #20]
 8001da6:	9102      	str	r1, [sp, #8]
 8001da8:	4905      	ldr	r1, [pc, #20]	; (8001dc0 <_vsiprintf_r+0x28>)
 8001daa:	9103      	str	r1, [sp, #12]
 8001dac:	4669      	mov	r1, sp
 8001dae:	f000 f86f 	bl	8001e90 <_svfiprintf_r>
 8001db2:	2200      	movs	r2, #0
 8001db4:	9b00      	ldr	r3, [sp, #0]
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	b01b      	add	sp, #108	; 0x6c
 8001dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dbe:	bf00      	nop
 8001dc0:	ffff0208 	.word	0xffff0208

08001dc4 <vsiprintf>:
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	460a      	mov	r2, r1
 8001dc8:	4601      	mov	r1, r0
 8001dca:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <vsiprintf+0x10>)
 8001dcc:	6800      	ldr	r0, [r0, #0]
 8001dce:	f7ff bfe3 	b.w	8001d98 <_vsiprintf_r>
 8001dd2:	bf00      	nop
 8001dd4:	20000034 	.word	0x20000034

08001dd8 <__ssputs_r>:
 8001dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ddc:	688e      	ldr	r6, [r1, #8]
 8001dde:	4682      	mov	sl, r0
 8001de0:	429e      	cmp	r6, r3
 8001de2:	460c      	mov	r4, r1
 8001de4:	4690      	mov	r8, r2
 8001de6:	461f      	mov	r7, r3
 8001de8:	d838      	bhi.n	8001e5c <__ssputs_r+0x84>
 8001dea:	898a      	ldrh	r2, [r1, #12]
 8001dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001df0:	d032      	beq.n	8001e58 <__ssputs_r+0x80>
 8001df2:	6825      	ldr	r5, [r4, #0]
 8001df4:	6909      	ldr	r1, [r1, #16]
 8001df6:	3301      	adds	r3, #1
 8001df8:	eba5 0901 	sub.w	r9, r5, r1
 8001dfc:	6965      	ldr	r5, [r4, #20]
 8001dfe:	444b      	add	r3, r9
 8001e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e08:	106d      	asrs	r5, r5, #1
 8001e0a:	429d      	cmp	r5, r3
 8001e0c:	bf38      	it	cc
 8001e0e:	461d      	movcc	r5, r3
 8001e10:	0553      	lsls	r3, r2, #21
 8001e12:	d531      	bpl.n	8001e78 <__ssputs_r+0xa0>
 8001e14:	4629      	mov	r1, r5
 8001e16:	f000 fb6f 	bl	80024f8 <_malloc_r>
 8001e1a:	4606      	mov	r6, r0
 8001e1c:	b950      	cbnz	r0, 8001e34 <__ssputs_r+0x5c>
 8001e1e:	230c      	movs	r3, #12
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e24:	f8ca 3000 	str.w	r3, [sl]
 8001e28:	89a3      	ldrh	r3, [r4, #12]
 8001e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2e:	81a3      	strh	r3, [r4, #12]
 8001e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e34:	464a      	mov	r2, r9
 8001e36:	6921      	ldr	r1, [r4, #16]
 8001e38:	f000 face 	bl	80023d8 <memcpy>
 8001e3c:	89a3      	ldrh	r3, [r4, #12]
 8001e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e46:	81a3      	strh	r3, [r4, #12]
 8001e48:	6126      	str	r6, [r4, #16]
 8001e4a:	444e      	add	r6, r9
 8001e4c:	6026      	str	r6, [r4, #0]
 8001e4e:	463e      	mov	r6, r7
 8001e50:	6165      	str	r5, [r4, #20]
 8001e52:	eba5 0509 	sub.w	r5, r5, r9
 8001e56:	60a5      	str	r5, [r4, #8]
 8001e58:	42be      	cmp	r6, r7
 8001e5a:	d900      	bls.n	8001e5e <__ssputs_r+0x86>
 8001e5c:	463e      	mov	r6, r7
 8001e5e:	4632      	mov	r2, r6
 8001e60:	4641      	mov	r1, r8
 8001e62:	6820      	ldr	r0, [r4, #0]
 8001e64:	f000 fac6 	bl	80023f4 <memmove>
 8001e68:	68a3      	ldr	r3, [r4, #8]
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	1b9b      	subs	r3, r3, r6
 8001e6e:	60a3      	str	r3, [r4, #8]
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	4433      	add	r3, r6
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	e7db      	b.n	8001e30 <__ssputs_r+0x58>
 8001e78:	462a      	mov	r2, r5
 8001e7a:	f000 fbb1 	bl	80025e0 <_realloc_r>
 8001e7e:	4606      	mov	r6, r0
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d1e1      	bne.n	8001e48 <__ssputs_r+0x70>
 8001e84:	4650      	mov	r0, sl
 8001e86:	6921      	ldr	r1, [r4, #16]
 8001e88:	f000 face 	bl	8002428 <_free_r>
 8001e8c:	e7c7      	b.n	8001e1e <__ssputs_r+0x46>
	...

08001e90 <_svfiprintf_r>:
 8001e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e94:	4698      	mov	r8, r3
 8001e96:	898b      	ldrh	r3, [r1, #12]
 8001e98:	4607      	mov	r7, r0
 8001e9a:	061b      	lsls	r3, r3, #24
 8001e9c:	460d      	mov	r5, r1
 8001e9e:	4614      	mov	r4, r2
 8001ea0:	b09d      	sub	sp, #116	; 0x74
 8001ea2:	d50e      	bpl.n	8001ec2 <_svfiprintf_r+0x32>
 8001ea4:	690b      	ldr	r3, [r1, #16]
 8001ea6:	b963      	cbnz	r3, 8001ec2 <_svfiprintf_r+0x32>
 8001ea8:	2140      	movs	r1, #64	; 0x40
 8001eaa:	f000 fb25 	bl	80024f8 <_malloc_r>
 8001eae:	6028      	str	r0, [r5, #0]
 8001eb0:	6128      	str	r0, [r5, #16]
 8001eb2:	b920      	cbnz	r0, 8001ebe <_svfiprintf_r+0x2e>
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ebc:	e0d1      	b.n	8002062 <_svfiprintf_r+0x1d2>
 8001ebe:	2340      	movs	r3, #64	; 0x40
 8001ec0:	616b      	str	r3, [r5, #20]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ecc:	2330      	movs	r3, #48	; 0x30
 8001ece:	f04f 0901 	mov.w	r9, #1
 8001ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ed6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800207c <_svfiprintf_r+0x1ec>
 8001eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ede:	4623      	mov	r3, r4
 8001ee0:	469a      	mov	sl, r3
 8001ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ee6:	b10a      	cbz	r2, 8001eec <_svfiprintf_r+0x5c>
 8001ee8:	2a25      	cmp	r2, #37	; 0x25
 8001eea:	d1f9      	bne.n	8001ee0 <_svfiprintf_r+0x50>
 8001eec:	ebba 0b04 	subs.w	fp, sl, r4
 8001ef0:	d00b      	beq.n	8001f0a <_svfiprintf_r+0x7a>
 8001ef2:	465b      	mov	r3, fp
 8001ef4:	4622      	mov	r2, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	4638      	mov	r0, r7
 8001efa:	f7ff ff6d 	bl	8001dd8 <__ssputs_r>
 8001efe:	3001      	adds	r0, #1
 8001f00:	f000 80aa 	beq.w	8002058 <_svfiprintf_r+0x1c8>
 8001f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f06:	445a      	add	r2, fp
 8001f08:	9209      	str	r2, [sp, #36]	; 0x24
 8001f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80a2 	beq.w	8002058 <_svfiprintf_r+0x1c8>
 8001f14:	2300      	movs	r3, #0
 8001f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f1e:	f10a 0a01 	add.w	sl, sl, #1
 8001f22:	9304      	str	r3, [sp, #16]
 8001f24:	9307      	str	r3, [sp, #28]
 8001f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8001f2c:	4654      	mov	r4, sl
 8001f2e:	2205      	movs	r2, #5
 8001f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f34:	4851      	ldr	r0, [pc, #324]	; (800207c <_svfiprintf_r+0x1ec>)
 8001f36:	f000 fa41 	bl	80023bc <memchr>
 8001f3a:	9a04      	ldr	r2, [sp, #16]
 8001f3c:	b9d8      	cbnz	r0, 8001f76 <_svfiprintf_r+0xe6>
 8001f3e:	06d0      	lsls	r0, r2, #27
 8001f40:	bf44      	itt	mi
 8001f42:	2320      	movmi	r3, #32
 8001f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f48:	0711      	lsls	r1, r2, #28
 8001f4a:	bf44      	itt	mi
 8001f4c:	232b      	movmi	r3, #43	; 0x2b
 8001f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f52:	f89a 3000 	ldrb.w	r3, [sl]
 8001f56:	2b2a      	cmp	r3, #42	; 0x2a
 8001f58:	d015      	beq.n	8001f86 <_svfiprintf_r+0xf6>
 8001f5a:	4654      	mov	r4, sl
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f04f 0c0a 	mov.w	ip, #10
 8001f62:	9a07      	ldr	r2, [sp, #28]
 8001f64:	4621      	mov	r1, r4
 8001f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f6a:	3b30      	subs	r3, #48	; 0x30
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d94e      	bls.n	800200e <_svfiprintf_r+0x17e>
 8001f70:	b1b0      	cbz	r0, 8001fa0 <_svfiprintf_r+0x110>
 8001f72:	9207      	str	r2, [sp, #28]
 8001f74:	e014      	b.n	8001fa0 <_svfiprintf_r+0x110>
 8001f76:	eba0 0308 	sub.w	r3, r0, r8
 8001f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	46a2      	mov	sl, r4
 8001f82:	9304      	str	r3, [sp, #16]
 8001f84:	e7d2      	b.n	8001f2c <_svfiprintf_r+0x9c>
 8001f86:	9b03      	ldr	r3, [sp, #12]
 8001f88:	1d19      	adds	r1, r3, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	9103      	str	r1, [sp, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bfbb      	ittet	lt
 8001f92:	425b      	neglt	r3, r3
 8001f94:	f042 0202 	orrlt.w	r2, r2, #2
 8001f98:	9307      	strge	r3, [sp, #28]
 8001f9a:	9307      	strlt	r3, [sp, #28]
 8001f9c:	bfb8      	it	lt
 8001f9e:	9204      	strlt	r2, [sp, #16]
 8001fa0:	7823      	ldrb	r3, [r4, #0]
 8001fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8001fa4:	d10c      	bne.n	8001fc0 <_svfiprintf_r+0x130>
 8001fa6:	7863      	ldrb	r3, [r4, #1]
 8001fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8001faa:	d135      	bne.n	8002018 <_svfiprintf_r+0x188>
 8001fac:	9b03      	ldr	r3, [sp, #12]
 8001fae:	3402      	adds	r4, #2
 8001fb0:	1d1a      	adds	r2, r3, #4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	9203      	str	r2, [sp, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bfb8      	it	lt
 8001fba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001fbe:	9305      	str	r3, [sp, #20]
 8001fc0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002080 <_svfiprintf_r+0x1f0>
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	4650      	mov	r0, sl
 8001fc8:	7821      	ldrb	r1, [r4, #0]
 8001fca:	f000 f9f7 	bl	80023bc <memchr>
 8001fce:	b140      	cbz	r0, 8001fe2 <_svfiprintf_r+0x152>
 8001fd0:	2340      	movs	r3, #64	; 0x40
 8001fd2:	eba0 000a 	sub.w	r0, r0, sl
 8001fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8001fda:	9b04      	ldr	r3, [sp, #16]
 8001fdc:	3401      	adds	r4, #1
 8001fde:	4303      	orrs	r3, r0
 8001fe0:	9304      	str	r3, [sp, #16]
 8001fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fe6:	2206      	movs	r2, #6
 8001fe8:	4826      	ldr	r0, [pc, #152]	; (8002084 <_svfiprintf_r+0x1f4>)
 8001fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fee:	f000 f9e5 	bl	80023bc <memchr>
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d038      	beq.n	8002068 <_svfiprintf_r+0x1d8>
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <_svfiprintf_r+0x1f8>)
 8001ff8:	bb1b      	cbnz	r3, 8002042 <_svfiprintf_r+0x1b2>
 8001ffa:	9b03      	ldr	r3, [sp, #12]
 8001ffc:	3307      	adds	r3, #7
 8001ffe:	f023 0307 	bic.w	r3, r3, #7
 8002002:	3308      	adds	r3, #8
 8002004:	9303      	str	r3, [sp, #12]
 8002006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002008:	4433      	add	r3, r6
 800200a:	9309      	str	r3, [sp, #36]	; 0x24
 800200c:	e767      	b.n	8001ede <_svfiprintf_r+0x4e>
 800200e:	460c      	mov	r4, r1
 8002010:	2001      	movs	r0, #1
 8002012:	fb0c 3202 	mla	r2, ip, r2, r3
 8002016:	e7a5      	b.n	8001f64 <_svfiprintf_r+0xd4>
 8002018:	2300      	movs	r3, #0
 800201a:	f04f 0c0a 	mov.w	ip, #10
 800201e:	4619      	mov	r1, r3
 8002020:	3401      	adds	r4, #1
 8002022:	9305      	str	r3, [sp, #20]
 8002024:	4620      	mov	r0, r4
 8002026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800202a:	3a30      	subs	r2, #48	; 0x30
 800202c:	2a09      	cmp	r2, #9
 800202e:	d903      	bls.n	8002038 <_svfiprintf_r+0x1a8>
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0c5      	beq.n	8001fc0 <_svfiprintf_r+0x130>
 8002034:	9105      	str	r1, [sp, #20]
 8002036:	e7c3      	b.n	8001fc0 <_svfiprintf_r+0x130>
 8002038:	4604      	mov	r4, r0
 800203a:	2301      	movs	r3, #1
 800203c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002040:	e7f0      	b.n	8002024 <_svfiprintf_r+0x194>
 8002042:	ab03      	add	r3, sp, #12
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	462a      	mov	r2, r5
 8002048:	4638      	mov	r0, r7
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <_svfiprintf_r+0x1fc>)
 800204c:	a904      	add	r1, sp, #16
 800204e:	f3af 8000 	nop.w
 8002052:	1c42      	adds	r2, r0, #1
 8002054:	4606      	mov	r6, r0
 8002056:	d1d6      	bne.n	8002006 <_svfiprintf_r+0x176>
 8002058:	89ab      	ldrh	r3, [r5, #12]
 800205a:	065b      	lsls	r3, r3, #25
 800205c:	f53f af2c 	bmi.w	8001eb8 <_svfiprintf_r+0x28>
 8002060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002062:	b01d      	add	sp, #116	; 0x74
 8002064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002068:	ab03      	add	r3, sp, #12
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	462a      	mov	r2, r5
 800206e:	4638      	mov	r0, r7
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <_svfiprintf_r+0x1fc>)
 8002072:	a904      	add	r1, sp, #16
 8002074:	f000 f87c 	bl	8002170 <_printf_i>
 8002078:	e7eb      	b.n	8002052 <_svfiprintf_r+0x1c2>
 800207a:	bf00      	nop
 800207c:	0800a7b5 	.word	0x0800a7b5
 8002080:	0800a7bb 	.word	0x0800a7bb
 8002084:	0800a7bf 	.word	0x0800a7bf
 8002088:	00000000 	.word	0x00000000
 800208c:	08001dd9 	.word	0x08001dd9

08002090 <_printf_common>:
 8002090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002094:	4616      	mov	r6, r2
 8002096:	4699      	mov	r9, r3
 8002098:	688a      	ldr	r2, [r1, #8]
 800209a:	690b      	ldr	r3, [r1, #16]
 800209c:	4607      	mov	r7, r0
 800209e:	4293      	cmp	r3, r2
 80020a0:	bfb8      	it	lt
 80020a2:	4613      	movlt	r3, r2
 80020a4:	6033      	str	r3, [r6, #0]
 80020a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020aa:	460c      	mov	r4, r1
 80020ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020b0:	b10a      	cbz	r2, 80020b6 <_printf_common+0x26>
 80020b2:	3301      	adds	r3, #1
 80020b4:	6033      	str	r3, [r6, #0]
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	0699      	lsls	r1, r3, #26
 80020ba:	bf42      	ittt	mi
 80020bc:	6833      	ldrmi	r3, [r6, #0]
 80020be:	3302      	addmi	r3, #2
 80020c0:	6033      	strmi	r3, [r6, #0]
 80020c2:	6825      	ldr	r5, [r4, #0]
 80020c4:	f015 0506 	ands.w	r5, r5, #6
 80020c8:	d106      	bne.n	80020d8 <_printf_common+0x48>
 80020ca:	f104 0a19 	add.w	sl, r4, #25
 80020ce:	68e3      	ldr	r3, [r4, #12]
 80020d0:	6832      	ldr	r2, [r6, #0]
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	42ab      	cmp	r3, r5
 80020d6:	dc28      	bgt.n	800212a <_printf_common+0x9a>
 80020d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80020dc:	1e13      	subs	r3, r2, #0
 80020de:	6822      	ldr	r2, [r4, #0]
 80020e0:	bf18      	it	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	0692      	lsls	r2, r2, #26
 80020e6:	d42d      	bmi.n	8002144 <_printf_common+0xb4>
 80020e8:	4649      	mov	r1, r9
 80020ea:	4638      	mov	r0, r7
 80020ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020f0:	47c0      	blx	r8
 80020f2:	3001      	adds	r0, #1
 80020f4:	d020      	beq.n	8002138 <_printf_common+0xa8>
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	68e5      	ldr	r5, [r4, #12]
 80020fa:	f003 0306 	and.w	r3, r3, #6
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf18      	it	ne
 8002102:	2500      	movne	r5, #0
 8002104:	6832      	ldr	r2, [r6, #0]
 8002106:	f04f 0600 	mov.w	r6, #0
 800210a:	68a3      	ldr	r3, [r4, #8]
 800210c:	bf08      	it	eq
 800210e:	1aad      	subeq	r5, r5, r2
 8002110:	6922      	ldr	r2, [r4, #16]
 8002112:	bf08      	it	eq
 8002114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002118:	4293      	cmp	r3, r2
 800211a:	bfc4      	itt	gt
 800211c:	1a9b      	subgt	r3, r3, r2
 800211e:	18ed      	addgt	r5, r5, r3
 8002120:	341a      	adds	r4, #26
 8002122:	42b5      	cmp	r5, r6
 8002124:	d11a      	bne.n	800215c <_printf_common+0xcc>
 8002126:	2000      	movs	r0, #0
 8002128:	e008      	b.n	800213c <_printf_common+0xac>
 800212a:	2301      	movs	r3, #1
 800212c:	4652      	mov	r2, sl
 800212e:	4649      	mov	r1, r9
 8002130:	4638      	mov	r0, r7
 8002132:	47c0      	blx	r8
 8002134:	3001      	adds	r0, #1
 8002136:	d103      	bne.n	8002140 <_printf_common+0xb0>
 8002138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800213c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002140:	3501      	adds	r5, #1
 8002142:	e7c4      	b.n	80020ce <_printf_common+0x3e>
 8002144:	2030      	movs	r0, #48	; 0x30
 8002146:	18e1      	adds	r1, r4, r3
 8002148:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002152:	4422      	add	r2, r4
 8002154:	3302      	adds	r3, #2
 8002156:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800215a:	e7c5      	b.n	80020e8 <_printf_common+0x58>
 800215c:	2301      	movs	r3, #1
 800215e:	4622      	mov	r2, r4
 8002160:	4649      	mov	r1, r9
 8002162:	4638      	mov	r0, r7
 8002164:	47c0      	blx	r8
 8002166:	3001      	adds	r0, #1
 8002168:	d0e6      	beq.n	8002138 <_printf_common+0xa8>
 800216a:	3601      	adds	r6, #1
 800216c:	e7d9      	b.n	8002122 <_printf_common+0x92>
	...

08002170 <_printf_i>:
 8002170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002174:	7e0f      	ldrb	r7, [r1, #24]
 8002176:	4691      	mov	r9, r2
 8002178:	2f78      	cmp	r7, #120	; 0x78
 800217a:	4680      	mov	r8, r0
 800217c:	460c      	mov	r4, r1
 800217e:	469a      	mov	sl, r3
 8002180:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002186:	d807      	bhi.n	8002198 <_printf_i+0x28>
 8002188:	2f62      	cmp	r7, #98	; 0x62
 800218a:	d80a      	bhi.n	80021a2 <_printf_i+0x32>
 800218c:	2f00      	cmp	r7, #0
 800218e:	f000 80d9 	beq.w	8002344 <_printf_i+0x1d4>
 8002192:	2f58      	cmp	r7, #88	; 0x58
 8002194:	f000 80a4 	beq.w	80022e0 <_printf_i+0x170>
 8002198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800219c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021a0:	e03a      	b.n	8002218 <_printf_i+0xa8>
 80021a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021a6:	2b15      	cmp	r3, #21
 80021a8:	d8f6      	bhi.n	8002198 <_printf_i+0x28>
 80021aa:	a101      	add	r1, pc, #4	; (adr r1, 80021b0 <_printf_i+0x40>)
 80021ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021b0:	08002209 	.word	0x08002209
 80021b4:	0800221d 	.word	0x0800221d
 80021b8:	08002199 	.word	0x08002199
 80021bc:	08002199 	.word	0x08002199
 80021c0:	08002199 	.word	0x08002199
 80021c4:	08002199 	.word	0x08002199
 80021c8:	0800221d 	.word	0x0800221d
 80021cc:	08002199 	.word	0x08002199
 80021d0:	08002199 	.word	0x08002199
 80021d4:	08002199 	.word	0x08002199
 80021d8:	08002199 	.word	0x08002199
 80021dc:	0800232b 	.word	0x0800232b
 80021e0:	0800224d 	.word	0x0800224d
 80021e4:	0800230d 	.word	0x0800230d
 80021e8:	08002199 	.word	0x08002199
 80021ec:	08002199 	.word	0x08002199
 80021f0:	0800234d 	.word	0x0800234d
 80021f4:	08002199 	.word	0x08002199
 80021f8:	0800224d 	.word	0x0800224d
 80021fc:	08002199 	.word	0x08002199
 8002200:	08002199 	.word	0x08002199
 8002204:	08002315 	.word	0x08002315
 8002208:	682b      	ldr	r3, [r5, #0]
 800220a:	1d1a      	adds	r2, r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	602a      	str	r2, [r5, #0]
 8002210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002218:	2301      	movs	r3, #1
 800221a:	e0a4      	b.n	8002366 <_printf_i+0x1f6>
 800221c:	6820      	ldr	r0, [r4, #0]
 800221e:	6829      	ldr	r1, [r5, #0]
 8002220:	0606      	lsls	r6, r0, #24
 8002222:	f101 0304 	add.w	r3, r1, #4
 8002226:	d50a      	bpl.n	800223e <_printf_i+0xce>
 8002228:	680e      	ldr	r6, [r1, #0]
 800222a:	602b      	str	r3, [r5, #0]
 800222c:	2e00      	cmp	r6, #0
 800222e:	da03      	bge.n	8002238 <_printf_i+0xc8>
 8002230:	232d      	movs	r3, #45	; 0x2d
 8002232:	4276      	negs	r6, r6
 8002234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002238:	230a      	movs	r3, #10
 800223a:	485e      	ldr	r0, [pc, #376]	; (80023b4 <_printf_i+0x244>)
 800223c:	e019      	b.n	8002272 <_printf_i+0x102>
 800223e:	680e      	ldr	r6, [r1, #0]
 8002240:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002244:	602b      	str	r3, [r5, #0]
 8002246:	bf18      	it	ne
 8002248:	b236      	sxthne	r6, r6
 800224a:	e7ef      	b.n	800222c <_printf_i+0xbc>
 800224c:	682b      	ldr	r3, [r5, #0]
 800224e:	6820      	ldr	r0, [r4, #0]
 8002250:	1d19      	adds	r1, r3, #4
 8002252:	6029      	str	r1, [r5, #0]
 8002254:	0601      	lsls	r1, r0, #24
 8002256:	d501      	bpl.n	800225c <_printf_i+0xec>
 8002258:	681e      	ldr	r6, [r3, #0]
 800225a:	e002      	b.n	8002262 <_printf_i+0xf2>
 800225c:	0646      	lsls	r6, r0, #25
 800225e:	d5fb      	bpl.n	8002258 <_printf_i+0xe8>
 8002260:	881e      	ldrh	r6, [r3, #0]
 8002262:	2f6f      	cmp	r7, #111	; 0x6f
 8002264:	bf0c      	ite	eq
 8002266:	2308      	moveq	r3, #8
 8002268:	230a      	movne	r3, #10
 800226a:	4852      	ldr	r0, [pc, #328]	; (80023b4 <_printf_i+0x244>)
 800226c:	2100      	movs	r1, #0
 800226e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002272:	6865      	ldr	r5, [r4, #4]
 8002274:	2d00      	cmp	r5, #0
 8002276:	bfa8      	it	ge
 8002278:	6821      	ldrge	r1, [r4, #0]
 800227a:	60a5      	str	r5, [r4, #8]
 800227c:	bfa4      	itt	ge
 800227e:	f021 0104 	bicge.w	r1, r1, #4
 8002282:	6021      	strge	r1, [r4, #0]
 8002284:	b90e      	cbnz	r6, 800228a <_printf_i+0x11a>
 8002286:	2d00      	cmp	r5, #0
 8002288:	d04d      	beq.n	8002326 <_printf_i+0x1b6>
 800228a:	4615      	mov	r5, r2
 800228c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002290:	fb03 6711 	mls	r7, r3, r1, r6
 8002294:	5dc7      	ldrb	r7, [r0, r7]
 8002296:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800229a:	4637      	mov	r7, r6
 800229c:	42bb      	cmp	r3, r7
 800229e:	460e      	mov	r6, r1
 80022a0:	d9f4      	bls.n	800228c <_printf_i+0x11c>
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d10b      	bne.n	80022be <_printf_i+0x14e>
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	07de      	lsls	r6, r3, #31
 80022aa:	d508      	bpl.n	80022be <_printf_i+0x14e>
 80022ac:	6923      	ldr	r3, [r4, #16]
 80022ae:	6861      	ldr	r1, [r4, #4]
 80022b0:	4299      	cmp	r1, r3
 80022b2:	bfde      	ittt	le
 80022b4:	2330      	movle	r3, #48	; 0x30
 80022b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80022be:	1b52      	subs	r2, r2, r5
 80022c0:	6122      	str	r2, [r4, #16]
 80022c2:	464b      	mov	r3, r9
 80022c4:	4621      	mov	r1, r4
 80022c6:	4640      	mov	r0, r8
 80022c8:	f8cd a000 	str.w	sl, [sp]
 80022cc:	aa03      	add	r2, sp, #12
 80022ce:	f7ff fedf 	bl	8002090 <_printf_common>
 80022d2:	3001      	adds	r0, #1
 80022d4:	d14c      	bne.n	8002370 <_printf_i+0x200>
 80022d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022da:	b004      	add	sp, #16
 80022dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e0:	4834      	ldr	r0, [pc, #208]	; (80023b4 <_printf_i+0x244>)
 80022e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80022e6:	6829      	ldr	r1, [r5, #0]
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80022ee:	6029      	str	r1, [r5, #0]
 80022f0:	061d      	lsls	r5, r3, #24
 80022f2:	d514      	bpl.n	800231e <_printf_i+0x1ae>
 80022f4:	07df      	lsls	r7, r3, #31
 80022f6:	bf44      	itt	mi
 80022f8:	f043 0320 	orrmi.w	r3, r3, #32
 80022fc:	6023      	strmi	r3, [r4, #0]
 80022fe:	b91e      	cbnz	r6, 8002308 <_printf_i+0x198>
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	f023 0320 	bic.w	r3, r3, #32
 8002306:	6023      	str	r3, [r4, #0]
 8002308:	2310      	movs	r3, #16
 800230a:	e7af      	b.n	800226c <_printf_i+0xfc>
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	f043 0320 	orr.w	r3, r3, #32
 8002312:	6023      	str	r3, [r4, #0]
 8002314:	2378      	movs	r3, #120	; 0x78
 8002316:	4828      	ldr	r0, [pc, #160]	; (80023b8 <_printf_i+0x248>)
 8002318:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800231c:	e7e3      	b.n	80022e6 <_printf_i+0x176>
 800231e:	0659      	lsls	r1, r3, #25
 8002320:	bf48      	it	mi
 8002322:	b2b6      	uxthmi	r6, r6
 8002324:	e7e6      	b.n	80022f4 <_printf_i+0x184>
 8002326:	4615      	mov	r5, r2
 8002328:	e7bb      	b.n	80022a2 <_printf_i+0x132>
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	6826      	ldr	r6, [r4, #0]
 800232e:	1d18      	adds	r0, r3, #4
 8002330:	6961      	ldr	r1, [r4, #20]
 8002332:	6028      	str	r0, [r5, #0]
 8002334:	0635      	lsls	r5, r6, #24
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	d501      	bpl.n	800233e <_printf_i+0x1ce>
 800233a:	6019      	str	r1, [r3, #0]
 800233c:	e002      	b.n	8002344 <_printf_i+0x1d4>
 800233e:	0670      	lsls	r0, r6, #25
 8002340:	d5fb      	bpl.n	800233a <_printf_i+0x1ca>
 8002342:	8019      	strh	r1, [r3, #0]
 8002344:	2300      	movs	r3, #0
 8002346:	4615      	mov	r5, r2
 8002348:	6123      	str	r3, [r4, #16]
 800234a:	e7ba      	b.n	80022c2 <_printf_i+0x152>
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	2100      	movs	r1, #0
 8002350:	1d1a      	adds	r2, r3, #4
 8002352:	602a      	str	r2, [r5, #0]
 8002354:	681d      	ldr	r5, [r3, #0]
 8002356:	6862      	ldr	r2, [r4, #4]
 8002358:	4628      	mov	r0, r5
 800235a:	f000 f82f 	bl	80023bc <memchr>
 800235e:	b108      	cbz	r0, 8002364 <_printf_i+0x1f4>
 8002360:	1b40      	subs	r0, r0, r5
 8002362:	6060      	str	r0, [r4, #4]
 8002364:	6863      	ldr	r3, [r4, #4]
 8002366:	6123      	str	r3, [r4, #16]
 8002368:	2300      	movs	r3, #0
 800236a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800236e:	e7a8      	b.n	80022c2 <_printf_i+0x152>
 8002370:	462a      	mov	r2, r5
 8002372:	4649      	mov	r1, r9
 8002374:	4640      	mov	r0, r8
 8002376:	6923      	ldr	r3, [r4, #16]
 8002378:	47d0      	blx	sl
 800237a:	3001      	adds	r0, #1
 800237c:	d0ab      	beq.n	80022d6 <_printf_i+0x166>
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	079b      	lsls	r3, r3, #30
 8002382:	d413      	bmi.n	80023ac <_printf_i+0x23c>
 8002384:	68e0      	ldr	r0, [r4, #12]
 8002386:	9b03      	ldr	r3, [sp, #12]
 8002388:	4298      	cmp	r0, r3
 800238a:	bfb8      	it	lt
 800238c:	4618      	movlt	r0, r3
 800238e:	e7a4      	b.n	80022da <_printf_i+0x16a>
 8002390:	2301      	movs	r3, #1
 8002392:	4632      	mov	r2, r6
 8002394:	4649      	mov	r1, r9
 8002396:	4640      	mov	r0, r8
 8002398:	47d0      	blx	sl
 800239a:	3001      	adds	r0, #1
 800239c:	d09b      	beq.n	80022d6 <_printf_i+0x166>
 800239e:	3501      	adds	r5, #1
 80023a0:	68e3      	ldr	r3, [r4, #12]
 80023a2:	9903      	ldr	r1, [sp, #12]
 80023a4:	1a5b      	subs	r3, r3, r1
 80023a6:	42ab      	cmp	r3, r5
 80023a8:	dcf2      	bgt.n	8002390 <_printf_i+0x220>
 80023aa:	e7eb      	b.n	8002384 <_printf_i+0x214>
 80023ac:	2500      	movs	r5, #0
 80023ae:	f104 0619 	add.w	r6, r4, #25
 80023b2:	e7f5      	b.n	80023a0 <_printf_i+0x230>
 80023b4:	0800a7c6 	.word	0x0800a7c6
 80023b8:	0800a7d7 	.word	0x0800a7d7

080023bc <memchr>:
 80023bc:	4603      	mov	r3, r0
 80023be:	b510      	push	{r4, lr}
 80023c0:	b2c9      	uxtb	r1, r1
 80023c2:	4402      	add	r2, r0
 80023c4:	4293      	cmp	r3, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	d101      	bne.n	80023ce <memchr+0x12>
 80023ca:	2000      	movs	r0, #0
 80023cc:	e003      	b.n	80023d6 <memchr+0x1a>
 80023ce:	7804      	ldrb	r4, [r0, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	428c      	cmp	r4, r1
 80023d4:	d1f6      	bne.n	80023c4 <memchr+0x8>
 80023d6:	bd10      	pop	{r4, pc}

080023d8 <memcpy>:
 80023d8:	440a      	add	r2, r1
 80023da:	4291      	cmp	r1, r2
 80023dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80023e0:	d100      	bne.n	80023e4 <memcpy+0xc>
 80023e2:	4770      	bx	lr
 80023e4:	b510      	push	{r4, lr}
 80023e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023ea:	4291      	cmp	r1, r2
 80023ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023f0:	d1f9      	bne.n	80023e6 <memcpy+0xe>
 80023f2:	bd10      	pop	{r4, pc}

080023f4 <memmove>:
 80023f4:	4288      	cmp	r0, r1
 80023f6:	b510      	push	{r4, lr}
 80023f8:	eb01 0402 	add.w	r4, r1, r2
 80023fc:	d902      	bls.n	8002404 <memmove+0x10>
 80023fe:	4284      	cmp	r4, r0
 8002400:	4623      	mov	r3, r4
 8002402:	d807      	bhi.n	8002414 <memmove+0x20>
 8002404:	1e43      	subs	r3, r0, #1
 8002406:	42a1      	cmp	r1, r4
 8002408:	d008      	beq.n	800241c <memmove+0x28>
 800240a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800240e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002412:	e7f8      	b.n	8002406 <memmove+0x12>
 8002414:	4601      	mov	r1, r0
 8002416:	4402      	add	r2, r0
 8002418:	428a      	cmp	r2, r1
 800241a:	d100      	bne.n	800241e <memmove+0x2a>
 800241c:	bd10      	pop	{r4, pc}
 800241e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002426:	e7f7      	b.n	8002418 <memmove+0x24>

08002428 <_free_r>:
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	4605      	mov	r5, r0
 800242c:	2900      	cmp	r1, #0
 800242e:	d040      	beq.n	80024b2 <_free_r+0x8a>
 8002430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002434:	1f0c      	subs	r4, r1, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	bfb8      	it	lt
 800243a:	18e4      	addlt	r4, r4, r3
 800243c:	f000 f910 	bl	8002660 <__malloc_lock>
 8002440:	4a1c      	ldr	r2, [pc, #112]	; (80024b4 <_free_r+0x8c>)
 8002442:	6813      	ldr	r3, [r2, #0]
 8002444:	b933      	cbnz	r3, 8002454 <_free_r+0x2c>
 8002446:	6063      	str	r3, [r4, #4]
 8002448:	6014      	str	r4, [r2, #0]
 800244a:	4628      	mov	r0, r5
 800244c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002450:	f000 b90c 	b.w	800266c <__malloc_unlock>
 8002454:	42a3      	cmp	r3, r4
 8002456:	d908      	bls.n	800246a <_free_r+0x42>
 8002458:	6820      	ldr	r0, [r4, #0]
 800245a:	1821      	adds	r1, r4, r0
 800245c:	428b      	cmp	r3, r1
 800245e:	bf01      	itttt	eq
 8002460:	6819      	ldreq	r1, [r3, #0]
 8002462:	685b      	ldreq	r3, [r3, #4]
 8002464:	1809      	addeq	r1, r1, r0
 8002466:	6021      	streq	r1, [r4, #0]
 8002468:	e7ed      	b.n	8002446 <_free_r+0x1e>
 800246a:	461a      	mov	r2, r3
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	b10b      	cbz	r3, 8002474 <_free_r+0x4c>
 8002470:	42a3      	cmp	r3, r4
 8002472:	d9fa      	bls.n	800246a <_free_r+0x42>
 8002474:	6811      	ldr	r1, [r2, #0]
 8002476:	1850      	adds	r0, r2, r1
 8002478:	42a0      	cmp	r0, r4
 800247a:	d10b      	bne.n	8002494 <_free_r+0x6c>
 800247c:	6820      	ldr	r0, [r4, #0]
 800247e:	4401      	add	r1, r0
 8002480:	1850      	adds	r0, r2, r1
 8002482:	4283      	cmp	r3, r0
 8002484:	6011      	str	r1, [r2, #0]
 8002486:	d1e0      	bne.n	800244a <_free_r+0x22>
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4401      	add	r1, r0
 800248e:	6011      	str	r1, [r2, #0]
 8002490:	6053      	str	r3, [r2, #4]
 8002492:	e7da      	b.n	800244a <_free_r+0x22>
 8002494:	d902      	bls.n	800249c <_free_r+0x74>
 8002496:	230c      	movs	r3, #12
 8002498:	602b      	str	r3, [r5, #0]
 800249a:	e7d6      	b.n	800244a <_free_r+0x22>
 800249c:	6820      	ldr	r0, [r4, #0]
 800249e:	1821      	adds	r1, r4, r0
 80024a0:	428b      	cmp	r3, r1
 80024a2:	bf01      	itttt	eq
 80024a4:	6819      	ldreq	r1, [r3, #0]
 80024a6:	685b      	ldreq	r3, [r3, #4]
 80024a8:	1809      	addeq	r1, r1, r0
 80024aa:	6021      	streq	r1, [r4, #0]
 80024ac:	6063      	str	r3, [r4, #4]
 80024ae:	6054      	str	r4, [r2, #4]
 80024b0:	e7cb      	b.n	800244a <_free_r+0x22>
 80024b2:	bd38      	pop	{r3, r4, r5, pc}
 80024b4:	20000240 	.word	0x20000240

080024b8 <sbrk_aligned>:
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	4e0e      	ldr	r6, [pc, #56]	; (80024f4 <sbrk_aligned+0x3c>)
 80024bc:	460c      	mov	r4, r1
 80024be:	6831      	ldr	r1, [r6, #0]
 80024c0:	4605      	mov	r5, r0
 80024c2:	b911      	cbnz	r1, 80024ca <sbrk_aligned+0x12>
 80024c4:	f000 f8bc 	bl	8002640 <_sbrk_r>
 80024c8:	6030      	str	r0, [r6, #0]
 80024ca:	4621      	mov	r1, r4
 80024cc:	4628      	mov	r0, r5
 80024ce:	f000 f8b7 	bl	8002640 <_sbrk_r>
 80024d2:	1c43      	adds	r3, r0, #1
 80024d4:	d00a      	beq.n	80024ec <sbrk_aligned+0x34>
 80024d6:	1cc4      	adds	r4, r0, #3
 80024d8:	f024 0403 	bic.w	r4, r4, #3
 80024dc:	42a0      	cmp	r0, r4
 80024de:	d007      	beq.n	80024f0 <sbrk_aligned+0x38>
 80024e0:	1a21      	subs	r1, r4, r0
 80024e2:	4628      	mov	r0, r5
 80024e4:	f000 f8ac 	bl	8002640 <_sbrk_r>
 80024e8:	3001      	adds	r0, #1
 80024ea:	d101      	bne.n	80024f0 <sbrk_aligned+0x38>
 80024ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024f0:	4620      	mov	r0, r4
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
 80024f4:	20000244 	.word	0x20000244

080024f8 <_malloc_r>:
 80024f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024fc:	1ccd      	adds	r5, r1, #3
 80024fe:	f025 0503 	bic.w	r5, r5, #3
 8002502:	3508      	adds	r5, #8
 8002504:	2d0c      	cmp	r5, #12
 8002506:	bf38      	it	cc
 8002508:	250c      	movcc	r5, #12
 800250a:	2d00      	cmp	r5, #0
 800250c:	4607      	mov	r7, r0
 800250e:	db01      	blt.n	8002514 <_malloc_r+0x1c>
 8002510:	42a9      	cmp	r1, r5
 8002512:	d905      	bls.n	8002520 <_malloc_r+0x28>
 8002514:	230c      	movs	r3, #12
 8002516:	2600      	movs	r6, #0
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4630      	mov	r0, r6
 800251c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002520:	4e2e      	ldr	r6, [pc, #184]	; (80025dc <_malloc_r+0xe4>)
 8002522:	f000 f89d 	bl	8002660 <__malloc_lock>
 8002526:	6833      	ldr	r3, [r6, #0]
 8002528:	461c      	mov	r4, r3
 800252a:	bb34      	cbnz	r4, 800257a <_malloc_r+0x82>
 800252c:	4629      	mov	r1, r5
 800252e:	4638      	mov	r0, r7
 8002530:	f7ff ffc2 	bl	80024b8 <sbrk_aligned>
 8002534:	1c43      	adds	r3, r0, #1
 8002536:	4604      	mov	r4, r0
 8002538:	d14d      	bne.n	80025d6 <_malloc_r+0xde>
 800253a:	6834      	ldr	r4, [r6, #0]
 800253c:	4626      	mov	r6, r4
 800253e:	2e00      	cmp	r6, #0
 8002540:	d140      	bne.n	80025c4 <_malloc_r+0xcc>
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	4631      	mov	r1, r6
 8002546:	4638      	mov	r0, r7
 8002548:	eb04 0803 	add.w	r8, r4, r3
 800254c:	f000 f878 	bl	8002640 <_sbrk_r>
 8002550:	4580      	cmp	r8, r0
 8002552:	d13a      	bne.n	80025ca <_malloc_r+0xd2>
 8002554:	6821      	ldr	r1, [r4, #0]
 8002556:	3503      	adds	r5, #3
 8002558:	1a6d      	subs	r5, r5, r1
 800255a:	f025 0503 	bic.w	r5, r5, #3
 800255e:	3508      	adds	r5, #8
 8002560:	2d0c      	cmp	r5, #12
 8002562:	bf38      	it	cc
 8002564:	250c      	movcc	r5, #12
 8002566:	4638      	mov	r0, r7
 8002568:	4629      	mov	r1, r5
 800256a:	f7ff ffa5 	bl	80024b8 <sbrk_aligned>
 800256e:	3001      	adds	r0, #1
 8002570:	d02b      	beq.n	80025ca <_malloc_r+0xd2>
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	442b      	add	r3, r5
 8002576:	6023      	str	r3, [r4, #0]
 8002578:	e00e      	b.n	8002598 <_malloc_r+0xa0>
 800257a:	6822      	ldr	r2, [r4, #0]
 800257c:	1b52      	subs	r2, r2, r5
 800257e:	d41e      	bmi.n	80025be <_malloc_r+0xc6>
 8002580:	2a0b      	cmp	r2, #11
 8002582:	d916      	bls.n	80025b2 <_malloc_r+0xba>
 8002584:	1961      	adds	r1, r4, r5
 8002586:	42a3      	cmp	r3, r4
 8002588:	6025      	str	r5, [r4, #0]
 800258a:	bf18      	it	ne
 800258c:	6059      	strne	r1, [r3, #4]
 800258e:	6863      	ldr	r3, [r4, #4]
 8002590:	bf08      	it	eq
 8002592:	6031      	streq	r1, [r6, #0]
 8002594:	5162      	str	r2, [r4, r5]
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	4638      	mov	r0, r7
 800259a:	f104 060b 	add.w	r6, r4, #11
 800259e:	f000 f865 	bl	800266c <__malloc_unlock>
 80025a2:	f026 0607 	bic.w	r6, r6, #7
 80025a6:	1d23      	adds	r3, r4, #4
 80025a8:	1af2      	subs	r2, r6, r3
 80025aa:	d0b6      	beq.n	800251a <_malloc_r+0x22>
 80025ac:	1b9b      	subs	r3, r3, r6
 80025ae:	50a3      	str	r3, [r4, r2]
 80025b0:	e7b3      	b.n	800251a <_malloc_r+0x22>
 80025b2:	6862      	ldr	r2, [r4, #4]
 80025b4:	42a3      	cmp	r3, r4
 80025b6:	bf0c      	ite	eq
 80025b8:	6032      	streq	r2, [r6, #0]
 80025ba:	605a      	strne	r2, [r3, #4]
 80025bc:	e7ec      	b.n	8002598 <_malloc_r+0xa0>
 80025be:	4623      	mov	r3, r4
 80025c0:	6864      	ldr	r4, [r4, #4]
 80025c2:	e7b2      	b.n	800252a <_malloc_r+0x32>
 80025c4:	4634      	mov	r4, r6
 80025c6:	6876      	ldr	r6, [r6, #4]
 80025c8:	e7b9      	b.n	800253e <_malloc_r+0x46>
 80025ca:	230c      	movs	r3, #12
 80025cc:	4638      	mov	r0, r7
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	f000 f84c 	bl	800266c <__malloc_unlock>
 80025d4:	e7a1      	b.n	800251a <_malloc_r+0x22>
 80025d6:	6025      	str	r5, [r4, #0]
 80025d8:	e7de      	b.n	8002598 <_malloc_r+0xa0>
 80025da:	bf00      	nop
 80025dc:	20000240 	.word	0x20000240

080025e0 <_realloc_r>:
 80025e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e4:	4680      	mov	r8, r0
 80025e6:	4614      	mov	r4, r2
 80025e8:	460e      	mov	r6, r1
 80025ea:	b921      	cbnz	r1, 80025f6 <_realloc_r+0x16>
 80025ec:	4611      	mov	r1, r2
 80025ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025f2:	f7ff bf81 	b.w	80024f8 <_malloc_r>
 80025f6:	b92a      	cbnz	r2, 8002604 <_realloc_r+0x24>
 80025f8:	f7ff ff16 	bl	8002428 <_free_r>
 80025fc:	4625      	mov	r5, r4
 80025fe:	4628      	mov	r0, r5
 8002600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002604:	f000 f838 	bl	8002678 <_malloc_usable_size_r>
 8002608:	4284      	cmp	r4, r0
 800260a:	4607      	mov	r7, r0
 800260c:	d802      	bhi.n	8002614 <_realloc_r+0x34>
 800260e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002612:	d812      	bhi.n	800263a <_realloc_r+0x5a>
 8002614:	4621      	mov	r1, r4
 8002616:	4640      	mov	r0, r8
 8002618:	f7ff ff6e 	bl	80024f8 <_malloc_r>
 800261c:	4605      	mov	r5, r0
 800261e:	2800      	cmp	r0, #0
 8002620:	d0ed      	beq.n	80025fe <_realloc_r+0x1e>
 8002622:	42bc      	cmp	r4, r7
 8002624:	4622      	mov	r2, r4
 8002626:	4631      	mov	r1, r6
 8002628:	bf28      	it	cs
 800262a:	463a      	movcs	r2, r7
 800262c:	f7ff fed4 	bl	80023d8 <memcpy>
 8002630:	4631      	mov	r1, r6
 8002632:	4640      	mov	r0, r8
 8002634:	f7ff fef8 	bl	8002428 <_free_r>
 8002638:	e7e1      	b.n	80025fe <_realloc_r+0x1e>
 800263a:	4635      	mov	r5, r6
 800263c:	e7df      	b.n	80025fe <_realloc_r+0x1e>
	...

08002640 <_sbrk_r>:
 8002640:	b538      	push	{r3, r4, r5, lr}
 8002642:	2300      	movs	r3, #0
 8002644:	4d05      	ldr	r5, [pc, #20]	; (800265c <_sbrk_r+0x1c>)
 8002646:	4604      	mov	r4, r0
 8002648:	4608      	mov	r0, r1
 800264a:	602b      	str	r3, [r5, #0]
 800264c:	f7fe fbcc 	bl	8000de8 <_sbrk>
 8002650:	1c43      	adds	r3, r0, #1
 8002652:	d102      	bne.n	800265a <_sbrk_r+0x1a>
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	b103      	cbz	r3, 800265a <_sbrk_r+0x1a>
 8002658:	6023      	str	r3, [r4, #0]
 800265a:	bd38      	pop	{r3, r4, r5, pc}
 800265c:	20000248 	.word	0x20000248

08002660 <__malloc_lock>:
 8002660:	4801      	ldr	r0, [pc, #4]	; (8002668 <__malloc_lock+0x8>)
 8002662:	f000 b811 	b.w	8002688 <__retarget_lock_acquire_recursive>
 8002666:	bf00      	nop
 8002668:	2000024c 	.word	0x2000024c

0800266c <__malloc_unlock>:
 800266c:	4801      	ldr	r0, [pc, #4]	; (8002674 <__malloc_unlock+0x8>)
 800266e:	f000 b80c 	b.w	800268a <__retarget_lock_release_recursive>
 8002672:	bf00      	nop
 8002674:	2000024c 	.word	0x2000024c

08002678 <_malloc_usable_size_r>:
 8002678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800267c:	1f18      	subs	r0, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	bfbc      	itt	lt
 8002682:	580b      	ldrlt	r3, [r1, r0]
 8002684:	18c0      	addlt	r0, r0, r3
 8002686:	4770      	bx	lr

08002688 <__retarget_lock_acquire_recursive>:
 8002688:	4770      	bx	lr

0800268a <__retarget_lock_release_recursive>:
 800268a:	4770      	bx	lr

0800268c <_init>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	bf00      	nop
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr

08002698 <_fini>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	bf00      	nop
 800269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269e:	bc08      	pop	{r3}
 80026a0:	469e      	mov	lr, r3
 80026a2:	4770      	bx	lr
