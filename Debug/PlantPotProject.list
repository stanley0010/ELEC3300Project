
PlantPotProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008184  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b01c  0800b01c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800b01c  0800b01c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b01c  0800b01c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b01c  0800b01c  0001b01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b020  0800b020  0001b020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800b024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000098  0800b0bc  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  0800b0bc  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114c7  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271f  00000000  00000000  00031588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00033ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000198bf  00000000  00000000  000344c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010e81  00000000  00000000  0004dd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00098968  00000000  00000000  0005ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000f7568  2**0
                  CONTENTS, READONLY
 19 .debug_loc    0000a3c2  00000000  00000000  000f75b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003440  00000000  00000000  00101980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001b44  00000000  00000000  00104dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000098 	.word	0x20000098
 8000200:	00000000 	.word	0x00000000
 8000204:	08002e80 	.word	0x08002e80

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000009c 	.word	0x2000009c
 8000220:	08002e80 	.word	0x08002e80

08000224 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8000228:	2348      	movs	r3, #72	; 0x48
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800022a:	2628      	movs	r6, #40	; 0x28
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800022c:	2288      	movs	r2, #136	; 0x88
}

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
	LCD_CmdWrite(command);
 800022e:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8000232:	2501      	movs	r5, #1
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000234:	f04f 08e8 	mov.w	r8, #232	; 0xe8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8000238:	4f91      	ldr	r7, [pc, #580]	; (8000480 <lcdInit+0x25c>)
	HAL_Delay(50);
 800023a:	2032      	movs	r0, #50	; 0x32
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800023c:	703b      	strb	r3, [r7, #0]
  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800023e:	4b91      	ldr	r3, [pc, #580]	; (8000484 <lcdInit+0x260>)
}

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
	LCD_DataWrite(data);
 8000240:	f04f 0783 	mov.w	r7, #131	; 0x83
  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8000244:	701e      	strb	r6, [r3, #0]
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000246:	4b90      	ldr	r3, [pc, #576]	; (8000488 <lcdInit+0x264>)
	LCD_DataWrite(data);
 8000248:	f04f 092c 	mov.w	r9, #44	; 0x2c
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800024c:	701a      	strb	r2, [r3, #0]
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800024e:	4b8f      	ldr	r3, [pc, #572]	; (800048c <lcdInit+0x268>)
	LCD_DataWrite(data);
 8000250:	f04f 0a11 	mov.w	sl, #17
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000254:	f883 8000 	strb.w	r8, [r3]
	LCD_CmdWrite(command);
 8000258:	8025      	strh	r5, [r4, #0]
	HAL_Delay(50);
 800025a:	f000 ffe9 	bl	8001230 <HAL_Delay>
	LCD_CmdWrite(command);
 800025e:	23cf      	movs	r3, #207	; 0xcf
	LCD_DataWrite(data);
 8000260:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 8000262:	8026      	strh	r6, [r4, #0]
 8000264:	8023      	strh	r3, [r4, #0]
	LCD_DataWrite(data);
 8000266:	4b8a      	ldr	r3, [pc, #552]	; (8000490 <lcdInit+0x26c>)
 8000268:	2664      	movs	r6, #100	; 0x64
 800026a:	801a      	strh	r2, [r3, #0]
 800026c:	801f      	strh	r7, [r3, #0]
 800026e:	f04f 0730 	mov.w	r7, #48	; 0x30
 8000272:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8000274:	f04f 07ed 	mov.w	r7, #237	; 0xed
 8000278:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800027a:	f04f 0703 	mov.w	r7, #3
 800027e:	801e      	strh	r6, [r3, #0]
 8000280:	801f      	strh	r7, [r3, #0]
 8000282:	f04f 0712 	mov.w	r7, #18
 8000286:	801f      	strh	r7, [r3, #0]
 8000288:	f04f 0781 	mov.w	r7, #129	; 0x81
 800028c:	801f      	strh	r7, [r3, #0]
 800028e:	f04f 0785 	mov.w	r7, #133	; 0x85
	LCD_CmdWrite(command);
 8000292:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8000296:	801f      	strh	r7, [r3, #0]
 8000298:	f04f 0779 	mov.w	r7, #121	; 0x79
 800029c:	801d      	strh	r5, [r3, #0]
 800029e:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80002a0:	f04f 07cb 	mov.w	r7, #203	; 0xcb
 80002a4:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80002a6:	f04f 0739 	mov.w	r7, #57	; 0x39
 80002aa:	801f      	strh	r7, [r3, #0]
 80002ac:	f04f 0734 	mov.w	r7, #52	; 0x34
 80002b0:	f8a3 9000 	strh.w	r9, [r3]
 80002b4:	f04f 0802 	mov.w	r8, #2
 80002b8:	801a      	strh	r2, [r3, #0]
 80002ba:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80002bc:	f04f 07f7 	mov.w	r7, #247	; 0xf7
	LCD_DataWrite(data);
 80002c0:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 80002c4:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80002c6:	f04f 0720 	mov.w	r7, #32
 80002ca:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80002cc:	f04f 07ea 	mov.w	r7, #234	; 0xea
 80002d0:	8027      	strh	r7, [r4, #0]
 80002d2:	f04f 07c0 	mov.w	r7, #192	; 0xc0
	LCD_DataWrite(data);
 80002d6:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80002d8:	f04f 08c1 	mov.w	r8, #193	; 0xc1
	LCD_DataWrite(data);
 80002dc:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80002de:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80002e0:	f04f 0726 	mov.w	r7, #38	; 0x26
 80002e4:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80002e6:	f8a4 8000 	strh.w	r8, [r4]
 80002ea:	f04f 08c5 	mov.w	r8, #197	; 0xc5
	LCD_DataWrite(data);
 80002ee:	f8a3 a000 	strh.w	sl, [r3]
	LCD_CmdWrite(command);
 80002f2:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 80002f6:	f04f 0835 	mov.w	r8, #53	; 0x35
 80002fa:	f8a3 8000 	strh.w	r8, [r3]
 80002fe:	f04f 083e 	mov.w	r8, #62	; 0x3e
 8000302:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8000306:	f04f 08c7 	mov.w	r8, #199	; 0xc7
 800030a:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 800030e:	f04f 08be 	mov.w	r8, #190	; 0xbe
 8000312:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8000316:	f04f 0836 	mov.w	r8, #54	; 0x36
 800031a:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
 800031e:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8000322:	f04f 0855 	mov.w	r8, #85	; 0x55
  lcdWriteData(lcdPortraitConfig);
 8000326:	4f56      	ldr	r7, [pc, #344]	; (8000480 <lcdInit+0x25c>)
	LCD_DataWrite(data);
 8000328:	210a      	movs	r1, #10
  lcdWriteData(lcdPortraitConfig);
 800032a:	783f      	ldrb	r7, [r7, #0]
	LCD_DataWrite(data);
 800032c:	2007      	movs	r0, #7
 800032e:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8000330:	f8a4 c000 	strh.w	ip, [r4]
	LCD_DataWrite(data);
 8000334:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8000338:	f04f 08b1 	mov.w	r8, #177	; 0xb1
 800033c:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8000340:	f04f 081b 	mov.w	r8, #27
 8000344:	801a      	strh	r2, [r3, #0]
 8000346:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 800034a:	f04f 08f2 	mov.w	r8, #242	; 0xf2
 800034e:	f04f 0726 	mov.w	r7, #38	; 0x26
 8000352:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8000356:	f04f 0808 	mov.w	r8, #8
 800035a:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 800035e:	8027      	strh	r7, [r4, #0]
 8000360:	f04f 07e0 	mov.w	r7, #224	; 0xe0
	LCD_DataWrite(data);
 8000364:	801d      	strh	r5, [r3, #0]
 8000366:	f04f 081a 	mov.w	r8, #26
	LCD_CmdWrite(command);
 800036a:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800036c:	f04f 071f 	mov.w	r7, #31
 8000370:	801f      	strh	r7, [r3, #0]
 8000372:	f8a3 8000 	strh.w	r8, [r3]
 8000376:	f04f 0818 	mov.w	r8, #24
 800037a:	f8a3 8000 	strh.w	r8, [r3]
 800037e:	f04f 080f 	mov.w	r8, #15
 8000382:	8019      	strh	r1, [r3, #0]
 8000384:	f8a3 8000 	strh.w	r8, [r3]
 8000388:	f04f 0806 	mov.w	r8, #6
 800038c:	f8a3 8000 	strh.w	r8, [r3]
 8000390:	f04f 0845 	mov.w	r8, #69	; 0x45
 8000394:	f8a3 8000 	strh.w	r8, [r3]
 8000398:	f04f 0887 	mov.w	r8, #135	; 0x87
 800039c:	f8a3 8000 	strh.w	r8, [r3]
 80003a0:	f04f 0832 	mov.w	r8, #50	; 0x32
 80003a4:	f8a3 8000 	strh.w	r8, [r3]
 80003a8:	f04f 0802 	mov.w	r8, #2
 80003ac:	8019      	strh	r1, [r3, #0]
 80003ae:	f04f 0e05 	mov.w	lr, #5
 80003b2:	8018      	strh	r0, [r3, #0]
 80003b4:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 80003b8:	f04f 08e1 	mov.w	r8, #225	; 0xe1
	LCD_DataWrite(data);
 80003bc:	8018      	strh	r0, [r3, #0]
 80003be:	f8a3 e000 	strh.w	lr, [r3]
 80003c2:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80003c4:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 80003c8:	f04f 0825 	mov.w	r8, #37	; 0x25
 80003cc:	801a      	strh	r2, [r3, #0]
 80003ce:	f04f 0b27 	mov.w	fp, #39	; 0x27
 80003d2:	f8a3 8000 	strh.w	r8, [r3]
 80003d6:	f04f 0810 	mov.w	r8, #16
 80003da:	f8a3 b000 	strh.w	fp, [r3]
 80003de:	f8a3 e000 	strh.w	lr, [r3]
 80003e2:	f8a3 8000 	strh.w	r8, [r3]
 80003e6:	f04f 0809 	mov.w	r8, #9
 80003ea:	f8a3 8000 	strh.w	r8, [r3]
 80003ee:	f04f 0878 	mov.w	r8, #120	; 0x78
 80003f2:	f8a3 c000 	strh.w	ip, [r3]
 80003f6:	f8a3 8000 	strh.w	r8, [r3]
 80003fa:	f04f 084d 	mov.w	r8, #77	; 0x4d
 80003fe:	f8a3 8000 	strh.w	r8, [r3]
 8000402:	f8a3 e000 	strh.w	lr, [r3]
 8000406:	f04f 0818 	mov.w	r8, #24
 800040a:	f04f 0e0d 	mov.w	lr, #13
 800040e:	f8a3 8000 	strh.w	r8, [r3]
 8000412:	f8a3 e000 	strh.w	lr, [r3]
 8000416:	f04f 0e38 	mov.w	lr, #56	; 0x38
 800041a:	f8a3 e000 	strh.w	lr, [r3]
 800041e:	f8a3 c000 	strh.w	ip, [r3]
 8000422:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8000424:	f04f 072a 	mov.w	r7, #42	; 0x2a
 8000428:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800042a:	f04f 07ef 	mov.w	r7, #239	; 0xef
 800042e:	801a      	strh	r2, [r3, #0]
 8000430:	801a      	strh	r2, [r3, #0]
 8000432:	801a      	strh	r2, [r3, #0]
 8000434:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8000436:	f04f 072b 	mov.w	r7, #43	; 0x2b
 800043a:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800043c:	801a      	strh	r2, [r3, #0]
 800043e:	801a      	strh	r2, [r3, #0]
 8000440:	801d      	strh	r5, [r3, #0]
 8000442:	f04f 053f 	mov.w	r5, #63	; 0x3f
 8000446:	801d      	strh	r5, [r3, #0]
	LCD_CmdWrite(command);
 8000448:	f04f 05b7 	mov.w	r5, #183	; 0xb7
 800044c:	8025      	strh	r5, [r4, #0]
	LCD_DataWrite(data);
 800044e:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 8000450:	f04f 00b6 	mov.w	r0, #182	; 0xb6
 8000454:	8020      	strh	r0, [r4, #0]
	LCD_DataWrite(data);
 8000456:	8019      	strh	r1, [r3, #0]
 8000458:	f04f 0182 	mov.w	r1, #130	; 0x82
  HAL_Delay(100);
 800045c:	4630      	mov	r0, r6
	LCD_DataWrite(data);
 800045e:	8019      	strh	r1, [r3, #0]
 8000460:	f8a3 b000 	strh.w	fp, [r3]
 8000464:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 8000466:	f8a4 a000 	strh.w	sl, [r4]
  HAL_Delay(100);
 800046a:	f000 fee1 	bl	8001230 <HAL_Delay>
	LCD_CmdWrite(command);
 800046e:	2329      	movs	r3, #41	; 0x29
  HAL_Delay(100);
 8000470:	4630      	mov	r0, r6
	LCD_CmdWrite(command);
 8000472:	8023      	strh	r3, [r4, #0]
  HAL_Delay(100);
 8000474:	f000 fedc 	bl	8001230 <HAL_Delay>
	LCD_CmdWrite(command);
 8000478:	f8a4 9000 	strh.w	r9, [r4]
}
 800047c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000480:	200001ba 	.word	0x200001ba
 8000484:	200001b8 	.word	0x200001b8
 8000488:	200001bb 	.word	0x200001bb
 800048c:	200001b9 	.word	0x200001b9
 8000490:	60020000 	.word	0x60020000

08000494 <lcdFillRGB>:
{
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
	LCD_CmdWrite(command);
 8000496:	232a      	movs	r3, #42	; 0x2a
 8000498:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
	LCD_DataWrite(data);
 800049c:	f04f 0c00 	mov.w	ip, #0
	LCD_CmdWrite(command);
 80004a0:	262b      	movs	r6, #43	; 0x2b
 80004a2:	252c      	movs	r5, #44	; 0x2c
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80004a4:	4c14      	ldr	r4, [pc, #80]	; (80004f8 <lcdFillRGB+0x64>)
	LCD_DataWrite(data);
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <lcdFillRGB+0x68>)
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80004a8:	8821      	ldrh	r1, [r4, #0]
	LCD_CmdWrite(command);
 80004aa:	f8ae 3000 	strh.w	r3, [lr]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80004ae:	8863      	ldrh	r3, [r4, #2]
 80004b0:	3901      	subs	r1, #1
 80004b2:	3b01      	subs	r3, #1
  lcdWriteData((x1 >> 8) & 0xFF);
 80004b4:	f3c1 2707 	ubfx	r7, r1, #8, #8
  lcdWriteData(x1 & 0xFF);
 80004b8:	b2c9      	uxtb	r1, r1
	LCD_DataWrite(data);
 80004ba:	f8a2 c000 	strh.w	ip, [r2]
 80004be:	f8a2 c000 	strh.w	ip, [r2]
 80004c2:	8017      	strh	r7, [r2, #0]
 80004c4:	8011      	strh	r1, [r2, #0]
  lcdWriteData((y1 >> 8) & 0xFF);
 80004c6:	f3c3 2107 	ubfx	r1, r3, #8, #8
  lcdWriteData(y1 & 0xFF);
 80004ca:	b2db      	uxtb	r3, r3
	LCD_CmdWrite(command);
 80004cc:	f8ae 6000 	strh.w	r6, [lr]
	LCD_DataWrite(data);
 80004d0:	f8a2 c000 	strh.w	ip, [r2]
 80004d4:	f8a2 c000 	strh.w	ip, [r2]
 80004d8:	8011      	strh	r1, [r2, #0]
 80004da:	8013      	strh	r3, [r2, #0]
	LCD_CmdWrite(command);
 80004dc:	f8ae 5000 	strh.w	r5, [lr]
  int dimensions = lcdProperties.width * lcdProperties.height;
 80004e0:	8821      	ldrh	r1, [r4, #0]
 80004e2:	8863      	ldrh	r3, [r4, #2]
 80004e4:	fb03 f101 	mul.w	r1, r3, r1
  while(dimensions--)
 80004e8:	b121      	cbz	r1, 80004f4 <lcdFillRGB+0x60>
 80004ea:	1e4b      	subs	r3, r1, #1
 80004ec:	3b01      	subs	r3, #1
 80004ee:	1c59      	adds	r1, r3, #1
	LCD_DataWrite(data);
 80004f0:	8010      	strh	r0, [r2, #0]
  while(dimensions--)
 80004f2:	d1fb      	bne.n	80004ec <lcdFillRGB+0x58>
}
 80004f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000020 	.word	0x20000020
 80004fc:	60020000 	.word	0x60020000

08000500 <lcdDrawLine>:
{
 8000500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8000504:	1a17      	subs	r7, r2, r0
 8000506:	1a5e      	subs	r6, r3, r1
 8000508:	2f00      	cmp	r7, #0
{
 800050a:	b083      	sub	sp, #12
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 800050c:	bfb8      	it	lt
 800050e:	427f      	neglt	r7, r7
 8000510:	2e00      	cmp	r6, #0
{
 8000512:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8000516:	bfb8      	it	lt
 8000518:	4276      	neglt	r6, r6
	if (steep)
 800051a:	42be      	cmp	r6, r7
{
 800051c:	9401      	str	r4, [sp, #4]
	if (steep)
 800051e:	f340 8094 	ble.w	800064a <lcdDrawLine+0x14a>
 8000522:	4605      	mov	r5, r0
 8000524:	4694      	mov	ip, r2
 8000526:	4696      	mov	lr, r2
 8000528:	4604      	mov	r4, r0
		swap(x2, y2);
 800052a:	461a      	mov	r2, r3
		swap(x1, y1);
 800052c:	4608      	mov	r0, r1
		swap(x2, y2);
 800052e:	4663      	mov	r3, ip
		swap(x1, y1);
 8000530:	4629      	mov	r1, r5
	if (x1 > x2)
 8000532:	4290      	cmp	r0, r2
 8000534:	dd08      	ble.n	8000548 <lcdDrawLine+0x48>
 8000536:	46a0      	mov	r8, r4
 8000538:	468c      	mov	ip, r1
 800053a:	4605      	mov	r5, r0
 800053c:	4674      	mov	r4, lr
		swap(y1, y2);
 800053e:	4619      	mov	r1, r3
	if (x1 > x2)
 8000540:	4610      	mov	r0, r2
 8000542:	46c6      	mov	lr, r8
		swap(y1, y2);
 8000544:	4663      	mov	r3, ip
	if (x1 > x2)
 8000546:	462a      	mov	r2, r5
	dy = abs(y2 - y1);
 8000548:	ebae 0e04 	sub.w	lr, lr, r4
	dx = x2 - x1;
 800054c:	eba2 0900 	sub.w	r9, r2, r0
	dy = abs(y2 - y1);
 8000550:	f1be 0f00 	cmp.w	lr, #0
	int16_t err = dx / 2;
 8000554:	fa0f f489 	sxth.w	r4, r9
 8000558:	f3c9 3cc0 	ubfx	ip, r9, #15, #1
	dy = abs(y2 - y1);
 800055c:	bfb8      	it	lt
 800055e:	f1ce 0e00 	rsblt	lr, lr, #0
	int16_t err = dx / 2;
 8000562:	44a4      	add	ip, r4
	if (y1 < y2)
 8000564:	428b      	cmp	r3, r1
	dx = x2 - x1;
 8000566:	fa1f f989 	uxth.w	r9, r9
	int16_t err = dx / 2;
 800056a:	ea4f 0c6c 	mov.w	ip, ip, asr #1
	if (y1 < y2)
 800056e:	dd67      	ble.n	8000640 <lcdDrawLine+0x140>
		ystep = 1;
 8000570:	f04f 0b01 	mov.w	fp, #1
	LCD_CmdWrite(command);
 8000574:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
	LCD_DataWrite(data);
 8000578:	46ca      	mov	sl, r9
 800057a:	4d37      	ldr	r5, [pc, #220]	; (8000658 <lcdDrawLine+0x158>)
 800057c:	4c37      	ldr	r4, [pc, #220]	; (800065c <lcdDrawLine+0x15c>)
		err -= dy;
 800057e:	fa1f fe8e 	uxth.w	lr, lr
	LCD_DataWrite(data);
 8000582:	9200      	str	r2, [sp, #0]
 8000584:	e038      	b.n	80005f8 <lcdDrawLine+0xf8>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000586:	4548      	cmp	r0, r9
 8000588:	d923      	bls.n	80005d2 <lcdDrawLine+0xd2>
 800058a:	8868      	ldrh	r0, [r5, #2]
 800058c:	4298      	cmp	r0, r3
 800058e:	d920      	bls.n	80005d2 <lcdDrawLine+0xd2>
	LCD_CmdWrite(command);
 8000590:	f04f 022a 	mov.w	r2, #42	; 0x2a
 8000594:	f8a8 2000 	strh.w	r2, [r8]
 8000598:	f04f 022b 	mov.w	r2, #43	; 0x2b
  lcdWriteData((x0 >> 8) & 0xFF);
 800059c:	ea4f 2019 	mov.w	r0, r9, lsr #8
  lcdWriteData(x0 & 0xFF);
 80005a0:	fa5f f989 	uxtb.w	r9, r9
	LCD_DataWrite(data);
 80005a4:	8020      	strh	r0, [r4, #0]
 80005a6:	f8a4 9000 	strh.w	r9, [r4]
 80005aa:	8020      	strh	r0, [r4, #0]
 80005ac:	f8a4 9000 	strh.w	r9, [r4]
  lcdWriteData((y0 >> 8) & 0xFF);
 80005b0:	ea4f 2913 	mov.w	r9, r3, lsr #8
	LCD_CmdWrite(command);
 80005b4:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData(y0 & 0xFF);
 80005b8:	b2d8      	uxtb	r0, r3
	LCD_DataWrite(data);
 80005ba:	f8a4 9000 	strh.w	r9, [r4]
	LCD_CmdWrite(command);
 80005be:	f04f 022c 	mov.w	r2, #44	; 0x2c
	LCD_DataWrite(data);
 80005c2:	8020      	strh	r0, [r4, #0]
 80005c4:	f8a4 9000 	strh.w	r9, [r4]
 80005c8:	8020      	strh	r0, [r4, #0]
	LCD_CmdWrite(command);
 80005ca:	f8a8 2000 	strh.w	r2, [r8]
	LCD_DataWrite(data);
 80005ce:	9a01      	ldr	r2, [sp, #4]
 80005d0:	8022      	strh	r2, [r4, #0]
		err -= dy;
 80005d2:	ebac 0c0e 	sub.w	ip, ip, lr
 80005d6:	3301      	adds	r3, #1
 80005d8:	b218      	sxth	r0, r3
 80005da:	fa1f f38c 	uxth.w	r3, ip
 80005de:	fa0f fc8c 	sxth.w	ip, ip
		if (err < 0)
 80005e2:	f1bc 0f00 	cmp.w	ip, #0
 80005e6:	da04      	bge.n	80005f2 <lcdDrawLine+0xf2>
			err += dx;
 80005e8:	4453      	add	r3, sl
			y1 += ystep;
 80005ea:	4459      	add	r1, fp
			err += dx;
 80005ec:	fa0f fc83 	sxth.w	ip, r3
			y1 += ystep;
 80005f0:	b209      	sxth	r1, r1
	for (; x1 <= x2; x1++)
 80005f2:	9b00      	ldr	r3, [sp, #0]
 80005f4:	4298      	cmp	r0, r3
 80005f6:	dc25      	bgt.n	8000644 <lcdDrawLine+0x144>
		if (steep)
 80005f8:	42be      	cmp	r6, r7
 80005fa:	b283      	uxth	r3, r0
			lcdDrawPixel(y1, x1, color);
 80005fc:	fa1f f981 	uxth.w	r9, r1
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000600:	8828      	ldrh	r0, [r5, #0]
		if (steep)
 8000602:	dcc0      	bgt.n	8000586 <lcdDrawLine+0x86>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000604:	4298      	cmp	r0, r3
			lcdDrawPixel(x1, y1, color);
 8000606:	b288      	uxth	r0, r1
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000608:	d9e3      	bls.n	80005d2 <lcdDrawLine+0xd2>
 800060a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
 800060e:	4581      	cmp	r9, r0
 8000610:	d9df      	bls.n	80005d2 <lcdDrawLine+0xd2>
	LCD_CmdWrite(command);
 8000612:	f04f 022a 	mov.w	r2, #42	; 0x2a
  lcdWriteData(x0 & 0xFF);
 8000616:	fa5f f983 	uxtb.w	r9, r3
	LCD_CmdWrite(command);
 800061a:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData((x0 >> 8) & 0xFF);
 800061e:	0a1a      	lsrs	r2, r3, #8
	LCD_DataWrite(data);
 8000620:	8022      	strh	r2, [r4, #0]
 8000622:	f8a4 9000 	strh.w	r9, [r4]
 8000626:	8022      	strh	r2, [r4, #0]
	LCD_CmdWrite(command);
 8000628:	f04f 022b 	mov.w	r2, #43	; 0x2b
	LCD_DataWrite(data);
 800062c:	f8a4 9000 	strh.w	r9, [r4]
  lcdWriteData((y0 >> 8) & 0xFF);
 8000630:	ea4f 2910 	mov.w	r9, r0, lsr #8
	LCD_CmdWrite(command);
 8000634:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData(y0 & 0xFF);
 8000638:	b2c0      	uxtb	r0, r0
	LCD_DataWrite(data);
 800063a:	f8a4 9000 	strh.w	r9, [r4]
 800063e:	e7be      	b.n	80005be <lcdDrawLine+0xbe>
	for (; x1 <= x2; x1++)
 8000640:	4290      	cmp	r0, r2
 8000642:	dd05      	ble.n	8000650 <lcdDrawLine+0x150>
}
 8000644:	b003      	add	sp, #12
 8000646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800064a:	460c      	mov	r4, r1
 800064c:	469e      	mov	lr, r3
 800064e:	e770      	b.n	8000532 <lcdDrawLine+0x32>
		ystep = -1;
 8000650:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8000654:	e78e      	b.n	8000574 <lcdDrawLine+0x74>
 8000656:	bf00      	nop
 8000658:	20000020 	.word	0x20000020
 800065c:	60020000 	.word	0x60020000

08000660 <lcdDrawImage>:
{
 8000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8000664:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8000734 <lcdDrawImage+0xd4>
{
 8000668:	b085      	sub	sp, #20
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 800066a:	f8b8 e000 	ldrh.w	lr, [r8]
 800066e:	4586      	cmp	lr, r0
 8000670:	d95c      	bls.n	800072c <lcdDrawImage+0xcc>
 8000672:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 8000676:	428d      	cmp	r5, r1
 8000678:	d958      	bls.n	800072c <lcdDrawImage+0xcc>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 800067a:	8813      	ldrh	r3, [r2, #0]
 800067c:	4403      	add	r3, r0
 800067e:	4573      	cmp	r3, lr
 8000680:	dc54      	bgt.n	800072c <lcdDrawImage+0xcc>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8000682:	8853      	ldrh	r3, [r2, #2]
 8000684:	18cc      	adds	r4, r1, r3
 8000686:	42ac      	cmp	r4, r5
 8000688:	dc50      	bgt.n	800072c <lcdDrawImage+0xcc>
	for (int i = 0; i < pBitmap->ySize; ++i)
 800068a:	2b00      	cmp	r3, #0
 800068c:	d04e      	beq.n	800072c <lcdDrawImage+0xcc>
 800068e:	2700      	movs	r7, #0
	LCD_CmdWrite(command);
 8000690:	f04f 49c0 	mov.w	r9, #1610612736	; 0x60000000
 8000694:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8000698:	7993      	ldrb	r3, [r2, #6]
	LCD_DataWrite(data);
 800069a:	4c27      	ldr	r4, [pc, #156]	; (8000738 <lcdDrawImage+0xd8>)
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 800069c:	08db      	lsrs	r3, r3, #3
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	6893      	ldr	r3, [r2, #8]
 80006a2:	9300      	str	r3, [sp, #0]
  lcdWriteData((x0 >> 8) & 0xFF);
 80006a4:	0a03      	lsrs	r3, r0, #8
 80006a6:	9302      	str	r3, [sp, #8]
  lcdWriteData(x0 & 0xFF);
 80006a8:	b2c3      	uxtb	r3, r0
 80006aa:	9303      	str	r3, [sp, #12]
	LCD_DataWrite(data);
 80006ac:	9b02      	ldr	r3, [sp, #8]
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 80006ae:	8890      	ldrh	r0, [r2, #4]
	LCD_CmdWrite(command);
 80006b0:	f8a9 b000 	strh.w	fp, [r9]
	LCD_DataWrite(data);
 80006b4:	8023      	strh	r3, [r4, #0]
 80006b6:	9b03      	ldr	r3, [sp, #12]
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 80006b8:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	LCD_DataWrite(data);
 80006bc:	8023      	strh	r3, [r4, #0]
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 80006be:	9b01      	ldr	r3, [sp, #4]
  lcdWriteData((x1 >> 8) & 0xFF);
 80006c0:	f3ce 2a07 	ubfx	sl, lr, #8, #8
  lcdWriteData(x1 & 0xFF);
 80006c4:	fa5f fe8e 	uxtb.w	lr, lr
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 80006c8:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 80006cc:	fbb0 f5f3 	udiv	r5, r0, r3
 80006d0:	9b00      	ldr	r3, [sp, #0]
	LCD_DataWrite(data);
 80006d2:	f8a4 a000 	strh.w	sl, [r4]
 80006d6:	f8a4 e000 	strh.w	lr, [r4]
	LCD_CmdWrite(command);
 80006da:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
 80006de:	19ce      	adds	r6, r1, r7
 80006e0:	f8a9 e000 	strh.w	lr, [r9]
  lcdWriteData((y0 >> 8) & 0xFF);
 80006e4:	f3c6 2e07 	ubfx	lr, r6, #8, #8
  lcdWriteData(y0 & 0xFF);
 80006e8:	b2f6      	uxtb	r6, r6
	LCD_DataWrite(data);
 80006ea:	f8a4 e000 	strh.w	lr, [r4]
 80006ee:	8026      	strh	r6, [r4, #0]
  lcdWriteData((y1 >> 8) & 0xFF);
 80006f0:	f3cc 2607 	ubfx	r6, ip, #8, #8
	LCD_DataWrite(data);
 80006f4:	8026      	strh	r6, [r4, #0]
	LCD_CmdWrite(command);
 80006f6:	f04f 062c 	mov.w	r6, #44	; 0x2c
 80006fa:	fb07 3000 	mla	r0, r7, r0, r3
  uint32_t i = 0;
 80006fe:	2300      	movs	r3, #0
  lcdWriteData(y1 & 0xFF);
 8000700:	fa5f fc8c 	uxtb.w	ip, ip
	LCD_DataWrite(data);
 8000704:	f8a4 c000 	strh.w	ip, [r4]
	LCD_CmdWrite(command);
 8000708:	3802      	subs	r0, #2
 800070a:	f8a9 6000 	strh.w	r6, [r9]
    lcdWriteData(data[i++]);
 800070e:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8000712:	3301      	adds	r3, #1
  while (i < dataLength);
 8000714:	429d      	cmp	r5, r3
	LCD_DataWrite(data);
 8000716:	8026      	strh	r6, [r4, #0]
  while (i < dataLength);
 8000718:	d8f9      	bhi.n	800070e <lcdDrawImage+0xae>
	for (int i = 0; i < pBitmap->ySize; ++i)
 800071a:	8853      	ldrh	r3, [r2, #2]
 800071c:	3701      	adds	r7, #1
 800071e:	42bb      	cmp	r3, r7
 8000720:	dd04      	ble.n	800072c <lcdDrawImage+0xcc>
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8000722:	f8b8 e000 	ldrh.w	lr, [r8]
 8000726:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 800072a:	e7bf      	b.n	80006ac <lcdDrawImage+0x4c>
}
 800072c:	b005      	add	sp, #20
 800072e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000732:	bf00      	nop
 8000734:	20000020 	.word	0x20000020
 8000738:	60020000 	.word	0x60020000

0800073c <lcdDrawChar>:
{
 800073c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((x >= lcdProperties.width) || 			// Clip right
 8000740:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80008c8 <lcdDrawChar+0x18c>
{
 8000744:	b08b      	sub	sp, #44	; 0x2c
	if ((x >= lcdProperties.width) || 			// Clip right
 8000746:	f8b8 4000 	ldrh.w	r4, [r8]
{
 800074a:	e9cd 0107 	strd	r0, r1, [sp, #28]
	if ((x >= lcdProperties.width) || 			// Clip right
 800074e:	42a0      	cmp	r0, r4
{
 8000750:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 8000754:	9209      	str	r2, [sp, #36]	; 0x24
	if ((x >= lcdProperties.width) || 			// Clip right
 8000756:	f280 80b3 	bge.w	80008c0 <lcdDrawChar+0x184>
 800075a:	4699      	mov	r9, r3
			(y >= lcdProperties.height) || 		// Clip bottom
 800075c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000760:	4299      	cmp	r1, r3
 8000762:	f280 80ad 	bge.w	80008c0 <lcdDrawChar+0x184>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000766:	4b59      	ldr	r3, [pc, #356]	; (80008cc <lcdDrawChar+0x190>)
 8000768:	689c      	ldr	r4, [r3, #8]
 800076a:	88a3      	ldrh	r3, [r4, #4]
 800076c:	9403      	str	r4, [sp, #12]
			(y >= lcdProperties.height) || 		// Clip bottom
 800076e:	42c3      	cmn	r3, r0
 8000770:	f100 80a6 	bmi.w	80008c0 <lcdDrawChar+0x184>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000774:	88e3      	ldrh	r3, [r4, #6]
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000776:	42cb      	cmn	r3, r1
 8000778:	f100 80a2 	bmi.w	80008c0 <lcdDrawChar+0x184>
	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 800077c:	f3c3 02c7 	ubfx	r2, r3, #3, #8
 8000780:	9201      	str	r2, [sp, #4]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000782:	2b00      	cmp	r3, #0
 8000784:	f000 809c 	beq.w	80008c0 <lcdDrawChar+0x184>
 8000788:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 800078a:	f04f 4bc0 	mov.w	fp, #1610612736	; 0x60000000
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800078e:	4696      	mov	lr, r2
	LCD_DataWrite(data);
 8000790:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80008d0 <lcdDrawChar+0x194>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000794:	9202      	str	r2, [sp, #8]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000796:	9a01      	ldr	r2, [sp, #4]
 8000798:	2a00      	cmp	r2, #0
 800079a:	f000 8088 	beq.w	80008ae <lcdDrawChar+0x172>
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 800079e:	2000      	movs	r0, #0
					lcdDrawPixel(x + j + xP, y + i, bg);
 80007a0:	9a08      	ldr	r2, [sp, #32]
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 80007a2:	9903      	ldr	r1, [sp, #12]
					lcdDrawPixel(x + j + xP, y + i, bg);
 80007a4:	4472      	add	r2, lr
 80007a6:	b295      	uxth	r5, r2
  lcdWriteData((y0 >> 8) & 0xFF);
 80007a8:	f3c2 2e07 	ubfx	lr, r2, #8, #8
  lcdWriteData(y0 & 0xFF);
 80007ac:	fa5f fc82 	uxtb.w	ip, r2
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 80007b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80007b2:	6809      	ldr	r1, [r1, #0]
 80007b4:	3a20      	subs	r2, #32
 80007b6:	9205      	str	r2, [sp, #20]
 80007b8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80007bc:	9104      	str	r1, [sp, #16]
 80007be:	9206      	str	r2, [sp, #24]
 80007c0:	9a02      	ldr	r2, [sp, #8]
 80007c2:	9905      	ldr	r1, [sp, #20]
 80007c4:	9c06      	ldr	r4, [sp, #24]
 80007c6:	fb01 2303 	mla	r3, r1, r3, r2
 80007ca:	9a04      	ldr	r2, [sp, #16]
 80007cc:	9901      	ldr	r1, [sp, #4]
 80007ce:	fb01 2303 	mla	r3, r1, r3, r2
 80007d2:	5c1a      	ldrb	r2, [r3, r0]
			for(uint8_t j = 0; j < 8; j++)
 80007d4:	00c3      	lsls	r3, r0, #3
 80007d6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80007da:	f104 0108 	add.w	r1, r4, #8
 80007de:	4419      	add	r1, r3
 80007e0:	4423      	add	r3, r4
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	b289      	uxth	r1, r1
 80007e6:	e02f      	b.n	8000848 <lcdDrawChar+0x10c>
				else if (bg != color)
 80007e8:	454f      	cmp	r7, r9
 80007ea:	d027      	beq.n	800083c <lcdDrawChar+0x100>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80007ec:	f8b8 4000 	ldrh.w	r4, [r8]
 80007f0:	429c      	cmp	r4, r3
 80007f2:	d923      	bls.n	800083c <lcdDrawChar+0x100>
 80007f4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80007f8:	42ac      	cmp	r4, r5
 80007fa:	d91f      	bls.n	800083c <lcdDrawChar+0x100>
	LCD_CmdWrite(command);
 80007fc:	f04f 062a 	mov.w	r6, #42	; 0x2a
  lcdWriteData((x0 >> 8) & 0xFF);
 8000800:	0a1c      	lsrs	r4, r3, #8
	LCD_CmdWrite(command);
 8000802:	f8ab 6000 	strh.w	r6, [fp]
  lcdWriteData(x0 & 0xFF);
 8000806:	b2de      	uxtb	r6, r3
	LCD_DataWrite(data);
 8000808:	f8aa 4000 	strh.w	r4, [sl]
 800080c:	f8aa 6000 	strh.w	r6, [sl]
 8000810:	f8aa 4000 	strh.w	r4, [sl]
	LCD_CmdWrite(command);
 8000814:	f04f 042b 	mov.w	r4, #43	; 0x2b
	LCD_DataWrite(data);
 8000818:	f8aa 6000 	strh.w	r6, [sl]
	LCD_CmdWrite(command);
 800081c:	f8ab 4000 	strh.w	r4, [fp]
 8000820:	f04f 042c 	mov.w	r4, #44	; 0x2c
	LCD_DataWrite(data);
 8000824:	f8aa e000 	strh.w	lr, [sl]
 8000828:	f8aa c000 	strh.w	ip, [sl]
 800082c:	f8aa e000 	strh.w	lr, [sl]
 8000830:	f8aa c000 	strh.w	ip, [sl]
	LCD_CmdWrite(command);
 8000834:	f8ab 4000 	strh.w	r4, [fp]
	LCD_DataWrite(data);
 8000838:	f8aa 7000 	strh.w	r7, [sl]
			for(uint8_t j = 0; j < 8; j++)
 800083c:	3301      	adds	r3, #1
 800083e:	b29b      	uxth	r3, r3
				line <<= 1;
 8000840:	0052      	lsls	r2, r2, #1
			for(uint8_t j = 0; j < 8; j++)
 8000842:	4299      	cmp	r1, r3
				line <<= 1;
 8000844:	b2d2      	uxtb	r2, r2
			for(uint8_t j = 0; j < 8; j++)
 8000846:	d02b      	beq.n	80008a0 <lcdDrawChar+0x164>
				if((line & 0x80) == 0x80)
 8000848:	0614      	lsls	r4, r2, #24
 800084a:	d5cd      	bpl.n	80007e8 <lcdDrawChar+0xac>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 800084c:	f8b8 4000 	ldrh.w	r4, [r8]
 8000850:	429c      	cmp	r4, r3
 8000852:	d9f3      	bls.n	800083c <lcdDrawChar+0x100>
 8000854:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8000858:	42ac      	cmp	r4, r5
  lcdWriteData((x0 >> 8) & 0xFF);
 800085a:	ea4f 2413 	mov.w	r4, r3, lsr #8
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 800085e:	d9ed      	bls.n	800083c <lcdDrawChar+0x100>
	LCD_CmdWrite(command);
 8000860:	f04f 062a 	mov.w	r6, #42	; 0x2a
 8000864:	f8ab 6000 	strh.w	r6, [fp]
  lcdWriteData(x0 & 0xFF);
 8000868:	b2de      	uxtb	r6, r3
	LCD_DataWrite(data);
 800086a:	f8aa 4000 	strh.w	r4, [sl]
 800086e:	f8aa 6000 	strh.w	r6, [sl]
 8000872:	f8aa 4000 	strh.w	r4, [sl]
	LCD_CmdWrite(command);
 8000876:	f04f 042b 	mov.w	r4, #43	; 0x2b
	LCD_DataWrite(data);
 800087a:	f8aa 6000 	strh.w	r6, [sl]
	LCD_CmdWrite(command);
 800087e:	f8ab 4000 	strh.w	r4, [fp]
 8000882:	f04f 042c 	mov.w	r4, #44	; 0x2c
	LCD_DataWrite(data);
 8000886:	f8aa e000 	strh.w	lr, [sl]
 800088a:	f8aa c000 	strh.w	ip, [sl]
 800088e:	f8aa e000 	strh.w	lr, [sl]
 8000892:	f8aa c000 	strh.w	ip, [sl]
	LCD_CmdWrite(command);
 8000896:	f8ab 4000 	strh.w	r4, [fp]
	LCD_DataWrite(data);
 800089a:	f8aa 9000 	strh.w	r9, [sl]
}
 800089e:	e7cd      	b.n	800083c <lcdDrawChar+0x100>
		for(uint8_t k = 0; k < fontCoeff; k++)
 80008a0:	9a01      	ldr	r2, [sp, #4]
 80008a2:	3001      	adds	r0, #1
 80008a4:	b2c3      	uxtb	r3, r0
 80008a6:	4293      	cmp	r3, r2
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 80008a8:	9b03      	ldr	r3, [sp, #12]
 80008aa:	88db      	ldrh	r3, [r3, #6]
		for(uint8_t k = 0; k < fontCoeff; k++)
 80008ac:	d388      	bcc.n	80007c0 <lcdDrawChar+0x84>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 80008ae:	9a02      	ldr	r2, [sp, #8]
 80008b0:	3201      	adds	r2, #1
 80008b2:	fa5f fe82 	uxtb.w	lr, r2
 80008b6:	459e      	cmp	lr, r3
 80008b8:	f8cd e008 	str.w	lr, [sp, #8]
 80008bc:	f4ff af6b 	bcc.w	8000796 <lcdDrawChar+0x5a>
}
 80008c0:	b00b      	add	sp, #44	; 0x2c
 80008c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008c6:	bf00      	nop
 80008c8:	20000020 	.word	0x20000020
 80008cc:	20000010 	.word	0x20000010
 80008d0:	60020000 	.word	0x60020000

080008d4 <lcdPrintf>:
{
 80008d4:	b40f      	push	{r0, r1, r2, r3}
 80008d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	aa0e      	add	r2, sp, #56	; 0x38
	vsprintf(buf, fmt, lst);
 80008de:	4e2f      	ldr	r6, [pc, #188]	; (800099c <lcdPrintf+0xc8>)
{
 80008e0:	f852 1b04 	ldr.w	r1, [r2], #4
	vsprintf(buf, fmt, lst);
 80008e4:	4630      	mov	r0, r6
	va_start(lst, fmt);
 80008e6:	9203      	str	r2, [sp, #12]
	vsprintf(buf, fmt, lst);
 80008e8:	f001 fe66 	bl	80025b8 <vsiprintf>
	while (*p)
 80008ec:	7832      	ldrb	r2, [r6, #0]
 80008ee:	b362      	cbz	r2, 800094a <lcdPrintf+0x76>
		if (cursorXY.y >= lcdProperties.height)
 80008f0:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80009a0 <lcdPrintf+0xcc>
				cursorXY.x = 0;
 80008f4:	f04f 0900 	mov.w	r9, #0
 80008f8:	4d2a      	ldr	r5, [pc, #168]	; (80009a4 <lcdPrintf+0xd0>)
		if (cursorXY.y >= lcdProperties.height)
 80008fa:	f8ba 8002 	ldrh.w	r8, [sl, #2]
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 80008fe:	4f2a      	ldr	r7, [pc, #168]	; (80009a8 <lcdPrintf+0xd4>)
 8000900:	e011      	b.n	8000926 <lcdPrintf+0x52>
		else if (*p == '\r')
 8000902:	2a0d      	cmp	r2, #13
 8000904:	d026      	beq.n	8000954 <lcdPrintf+0x80>
		else if (*p == '\t')
 8000906:	2a09      	cmp	r2, #9
 8000908:	d126      	bne.n	8000958 <lcdPrintf+0x84>
			cursorXY.x += lcdFont.pFont->Width * 4;
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	882b      	ldrh	r3, [r5, #0]
 800090e:	8892      	ldrh	r2, [r2, #4]
		if (cursorXY.y >= lcdProperties.height)
 8000910:	886c      	ldrh	r4, [r5, #2]
			cursorXY.x += lcdFont.pFont->Width * 4;
 8000912:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000916:	802b      	strh	r3, [r5, #0]
	while (*p)
 8000918:	f816 2f01 	ldrb.w	r2, [r6, #1]!
		if (cursorXY.y >= lcdProperties.height)
 800091c:	45a0      	cmp	r8, r4
			cursorXY.y = 0;
 800091e:	bf98      	it	ls
 8000920:	f8a5 9002 	strhls.w	r9, [r5, #2]
	while (*p)
 8000924:	b18a      	cbz	r2, 800094a <lcdPrintf+0x76>
		if (*p == '\n')
 8000926:	2a0a      	cmp	r2, #10
 8000928:	d1eb      	bne.n	8000902 <lcdPrintf+0x2e>
			cursorXY.y += lcdFont.pFont->Height;
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	886b      	ldrh	r3, [r5, #2]
 800092e:	88d4      	ldrh	r4, [r2, #6]
	while (*p)
 8000930:	f816 2f01 	ldrb.w	r2, [r6, #1]!
			cursorXY.y += lcdFont.pFont->Height;
 8000934:	441c      	add	r4, r3
 8000936:	b2a4      	uxth	r4, r4
		if (cursorXY.y >= lcdProperties.height)
 8000938:	45a0      	cmp	r8, r4
			cursorXY.y += lcdFont.pFont->Height;
 800093a:	806c      	strh	r4, [r5, #2]
			cursorXY.x = 0;
 800093c:	f8a5 9000 	strh.w	r9, [r5]
			cursorXY.y = 0;
 8000940:	bf98      	it	ls
 8000942:	f8a5 9002 	strhls.w	r9, [r5, #2]
	while (*p)
 8000946:	2a00      	cmp	r2, #0
 8000948:	d1ed      	bne.n	8000926 <lcdPrintf+0x52>
}
 800094a:	b005      	add	sp, #20
 800094c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr
		if (cursorXY.y >= lcdProperties.height)
 8000954:	886c      	ldrh	r4, [r5, #2]
 8000956:	e7df      	b.n	8000918 <lcdPrintf+0x44>
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8000958:	88bb      	ldrh	r3, [r7, #4]
 800095a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800095e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	883b      	ldrh	r3, [r7, #0]
 8000966:	f8b5 b000 	ldrh.w	fp, [r5]
 800096a:	886c      	ldrh	r4, [r5, #2]
 800096c:	f7ff fee6 	bl	800073c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8000970:	68b9      	ldr	r1, [r7, #8]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000972:	7b38      	ldrb	r0, [r7, #12]
			cursorXY.x += lcdFont.pFont->Width;
 8000974:	888a      	ldrh	r2, [r1, #4]
 8000976:	eb0b 0302 	add.w	r3, fp, r2
 800097a:	b29b      	uxth	r3, r3
 800097c:	802b      	strh	r3, [r5, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 800097e:	2800      	cmp	r0, #0
 8000980:	d0ca      	beq.n	8000918 <lcdPrintf+0x44>
 8000982:	f8ba 0000 	ldrh.w	r0, [sl]
 8000986:	1a82      	subs	r2, r0, r2
 8000988:	4293      	cmp	r3, r2
 800098a:	ddc5      	ble.n	8000918 <lcdPrintf+0x44>
				cursorXY.y += lcdFont.pFont->Height;
 800098c:	88cb      	ldrh	r3, [r1, #6]
				cursorXY.x = 0;
 800098e:	f8a5 9000 	strh.w	r9, [r5]
				cursorXY.y += lcdFont.pFont->Height;
 8000992:	441c      	add	r4, r3
 8000994:	b2a4      	uxth	r4, r4
 8000996:	806c      	strh	r4, [r5, #2]
				cursorXY.x = 0;
 8000998:	e7be      	b.n	8000918 <lcdPrintf+0x44>
 800099a:	bf00      	nop
 800099c:	200000b4 	.word	0x200000b4
 80009a0:	20000020 	.word	0x20000020
 80009a4:	200001b4 	.word	0x200001b4
 80009a8:	20000010 	.word	0x20000010

080009ac <lcdSetTextFont>:
	lcdFont.pFont = font;
 80009ac:	4b01      	ldr	r3, [pc, #4]	; (80009b4 <lcdSetTextFont+0x8>)
 80009ae:	6098      	str	r0, [r3, #8]
}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000010 	.word	0x20000010

080009b8 <lcdSetTextColor>:
	lcdFont.TextColor = c;
 80009b8:	4b01      	ldr	r3, [pc, #4]	; (80009c0 <lcdSetTextColor+0x8>)
	lcdFont.BackColor = b;
 80009ba:	e9c3 0100 	strd	r0, r1, [r3]
}
 80009be:	4770      	bx	lr
 80009c0:	20000010 	.word	0x20000010

080009c4 <lcdSetOrientation>:
	LCD_CmdWrite(command);
 80009c4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80009c8:	2136      	movs	r1, #54	; 0x36
	lcdProperties.orientation = value;
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <lcdSetOrientation+0xac>)
{
 80009cc:	b570      	push	{r4, r5, r6, lr}
	LCD_CmdWrite(command);
 80009ce:	8011      	strh	r1, [r2, #0]
	lcdProperties.orientation = value;
 80009d0:	7118      	strb	r0, [r3, #4]
	switch (lcdProperties.orientation)
 80009d2:	2803      	cmp	r0, #3
 80009d4:	d83e      	bhi.n	8000a54 <lcdSetOrientation+0x90>
 80009d6:	e8df f000 	tbb	[pc, r0]
 80009da:	2f3b      	.short	0x2f3b
 80009dc:	0223      	.short	0x0223
			break;
 80009de:	f04f 0eef 	mov.w	lr, #239	; 0xef
 80009e2:	2500      	movs	r5, #0
 80009e4:	243f      	movs	r4, #63	; 0x3f
 80009e6:	2601      	movs	r6, #1
			lcdWriteData(lcdLandscapeMirrorConfig);
 80009e8:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <lcdSetOrientation+0xb0>)
 80009ea:	7811      	ldrb	r1, [r2, #0]
	LCD_DataWrite(data);
 80009ec:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <lcdSetOrientation+0xb4>)
 80009ee:	8011      	strh	r1, [r2, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80009f0:	4a22      	ldr	r2, [pc, #136]	; (8000a7c <lcdSetOrientation+0xb8>)
 80009f2:	601a      	str	r2, [r3, #0]
	LCD_CmdWrite(command);
 80009f4:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80009f8:	232a      	movs	r3, #42	; 0x2a
	LCD_DataWrite(data);
 80009fa:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 80009fc:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 8000a00:	202c      	movs	r0, #44	; 0x2c
 8000a02:	800b      	strh	r3, [r1, #0]
	LCD_DataWrite(data);
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <lcdSetOrientation+0xb4>)
 8000a06:	801a      	strh	r2, [r3, #0]
 8000a08:	801a      	strh	r2, [r3, #0]
 8000a0a:	801e      	strh	r6, [r3, #0]
 8000a0c:	801c      	strh	r4, [r3, #0]
	LCD_CmdWrite(command);
 8000a0e:	f8a1 c000 	strh.w	ip, [r1]
	LCD_DataWrite(data);
 8000a12:	801a      	strh	r2, [r3, #0]
 8000a14:	801a      	strh	r2, [r3, #0]
 8000a16:	801d      	strh	r5, [r3, #0]
 8000a18:	f8a3 e000 	strh.w	lr, [r3]
	LCD_CmdWrite(command);
 8000a1c:	8008      	strh	r0, [r1, #0]
}
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
			lcdWriteData(lcdPortraitMirrorConfig);
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <lcdSetOrientation+0xbc>)
 8000a22:	7810      	ldrb	r0, [r2, #0]
	LCD_DataWrite(data);
 8000a24:	4914      	ldr	r1, [pc, #80]	; (8000a78 <lcdSetOrientation+0xb4>)
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <lcdSetOrientation+0xc0>)
	LCD_DataWrite(data);
 8000a28:	8008      	strh	r0, [r1, #0]
			break;
 8000a2a:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8000a2e:	2501      	movs	r5, #1
 8000a30:	24ef      	movs	r4, #239	; 0xef
 8000a32:	2600      	movs	r6, #0
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000a34:	601a      	str	r2, [r3, #0]
			break;
 8000a36:	e7dd      	b.n	80009f4 <lcdSetOrientation+0x30>
			lcdWriteData(lcdLandscapeConfig);
 8000a38:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <lcdSetOrientation+0xc4>)
	LCD_DataWrite(data);
 8000a3a:	490f      	ldr	r1, [pc, #60]	; (8000a78 <lcdSetOrientation+0xb4>)
			lcdWriteData(lcdLandscapeConfig);
 8000a3c:	7810      	ldrb	r0, [r2, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <lcdSetOrientation+0xb8>)
	LCD_DataWrite(data);
 8000a40:	8008      	strh	r0, [r1, #0]
			break;
 8000a42:	f04f 0eef 	mov.w	lr, #239	; 0xef
 8000a46:	2500      	movs	r5, #0
 8000a48:	243f      	movs	r4, #63	; 0x3f
 8000a4a:	2601      	movs	r6, #1
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000a4c:	601a      	str	r2, [r3, #0]
			break;
 8000a4e:	e7d1      	b.n	80009f4 <lcdSetOrientation+0x30>
			lcdWriteData(lcdPortraitConfig);
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <lcdSetOrientation+0xc8>)
 8000a52:	e7e6      	b.n	8000a22 <lcdSetOrientation+0x5e>
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000a54:	881c      	ldrh	r4, [r3, #0]
 8000a56:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8000a5a:	3c01      	subs	r4, #1
 8000a5c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
  lcdWriteData((x1 >> 8) & 0xFF);
 8000a60:	f3c4 2607 	ubfx	r6, r4, #8, #8
  lcdWriteData((y1 >> 8) & 0xFF);
 8000a64:	f3ce 2507 	ubfx	r5, lr, #8, #8
  lcdWriteData(x1 & 0xFF);
 8000a68:	b2e4      	uxtb	r4, r4
  lcdWriteData(y1 & 0xFF);
 8000a6a:	fa5f fe8e 	uxtb.w	lr, lr
 8000a6e:	e7c1      	b.n	80009f4 <lcdSetOrientation+0x30>
 8000a70:	20000020 	.word	0x20000020
 8000a74:	200001b9 	.word	0x200001b9
 8000a78:	60020000 	.word	0x60020000
 8000a7c:	00f00140 	.word	0x00f00140
 8000a80:	200001bb 	.word	0x200001bb
 8000a84:	014000f0 	.word	0x014000f0
 8000a88:	200001b8 	.word	0x200001b8
 8000a8c:	200001ba 	.word	0x200001ba

08000a90 <lcdSetCursor>:
	LCD_CmdWrite(command);
 8000a90:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000a94:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
{
 8000a98:	b530      	push	{r4, r5, lr}
	LCD_CmdWrite(command);
 8000a9a:	252b      	movs	r5, #43	; 0x2b
 8000a9c:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
	cursorXY.x = x;
 8000aa0:	4c0c      	ldr	r4, [pc, #48]	; (8000ad4 <lcdSetCursor+0x44>)
	LCD_DataWrite(data);
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <lcdSetCursor+0x48>)
	cursorXY.x = x;
 8000aa4:	8020      	strh	r0, [r4, #0]
	cursorXY.y = y;
 8000aa6:	8061      	strh	r1, [r4, #2]
	LCD_CmdWrite(command);
 8000aa8:	f8a2 c000 	strh.w	ip, [r2]
  lcdWriteData((x0 >> 8) & 0xFF);
 8000aac:	ea4f 2c10 	mov.w	ip, r0, lsr #8
  lcdWriteData(x0 & 0xFF);
 8000ab0:	b2c0      	uxtb	r0, r0
	LCD_DataWrite(data);
 8000ab2:	f8a3 c000 	strh.w	ip, [r3]
 8000ab6:	8018      	strh	r0, [r3, #0]
 8000ab8:	f8a3 c000 	strh.w	ip, [r3]
 8000abc:	8018      	strh	r0, [r3, #0]
  lcdWriteData((y0 >> 8) & 0xFF);
 8000abe:	0a08      	lsrs	r0, r1, #8
  lcdWriteData(y0 & 0xFF);
 8000ac0:	b2c9      	uxtb	r1, r1
	LCD_CmdWrite(command);
 8000ac2:	8015      	strh	r5, [r2, #0]
	LCD_DataWrite(data);
 8000ac4:	8018      	strh	r0, [r3, #0]
 8000ac6:	8019      	strh	r1, [r3, #0]
 8000ac8:	8018      	strh	r0, [r3, #0]
 8000aca:	8019      	strh	r1, [r3, #0]
	LCD_CmdWrite(command);
 8000acc:	f8a2 e000 	strh.w	lr, [r2]
}
 8000ad0:	bd30      	pop	{r4, r5, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001b4 	.word	0x200001b4
 8000ad8:	60020000 	.word	0x60020000

08000adc <lcdGetWidth>:
  return lcdProperties.width;
 8000adc:	4b01      	ldr	r3, [pc, #4]	; (8000ae4 <lcdGetWidth+0x8>)
}
 8000ade:	8818      	ldrh	r0, [r3, #0]
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000020 	.word	0x20000020

08000ae8 <lcdGetHeight>:
  return lcdProperties.height;
 8000ae8:	4b01      	ldr	r3, [pc, #4]	; (8000af0 <lcdGetHeight+0x8>)
}
 8000aea:	8858      	ldrh	r0, [r3, #2]
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000020 	.word	0x20000020

08000af4 <lcdGetOrientation>:
  return lcdProperties.orientation;
 8000af4:	4b01      	ldr	r3, [pc, #4]	; (8000afc <lcdGetOrientation+0x8>)
}
 8000af6:	7918      	ldrb	r0, [r3, #4]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000020 	.word	0x20000020

08000b00 <printToScreen>:
			&& soilMoistureValue > (AirValue - intervals)) {
		printToScreen(0, lcdGetHeight() / 2 + 20, "Dry     ");
	}
}

void printToScreen(unsigned short x, unsigned short y, const char *fmt, ...){
 8000b00:	b40c      	push	{r2, r3}
 8000b02:	b510      	push	{r4, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	ab04      	add	r3, sp, #16
 8000b08:	f853 4b04 	ldr.w	r4, [r3], #4
	va_list args;
	va_start(args, fmt);
 8000b0c:	9301      	str	r3, [sp, #4]
	lcdSetCursor(x, y);
 8000b0e:	f7ff ffbf 	bl	8000a90 <lcdSetCursor>
	lcdPrintf(fmt, args);
 8000b12:	4620      	mov	r0, r4
 8000b14:	9901      	ldr	r1, [sp, #4]
 8000b16:	f7ff fedd 	bl	80008d4 <lcdPrintf>
	va_end(args);
}
 8000b1a:	b002      	add	sp, #8
 8000b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b20:	b002      	add	sp, #8
 8000b22:	4770      	bx	lr

08000b24 <getSoilMoisture>:
void getSoilMoisture() {
 8000b24:	b510      	push	{r4, lr}
	soilMoistureValue = HAL_ADC_GetValue(&hadc1);
 8000b26:	4820      	ldr	r0, [pc, #128]	; (8000ba8 <getSoilMoisture+0x84>)
 8000b28:	f000 fc46 	bl	80013b8 <HAL_ADC_GetValue>
 8000b2c:	4604      	mov	r4, r0
	lcdSetCursor(0, lcdGetHeight() / 2);
 8000b2e:	f7ff ffdb 	bl	8000ae8 <lcdGetHeight>
 8000b32:	4601      	mov	r1, r0
 8000b34:	2000      	movs	r0, #0
 8000b36:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8000b3a:	f7ff ffa9 	bl	8000a90 <lcdSetCursor>
	lcdPrintf("Soil Moisture: %d\r\n", soilMoistureValue);
 8000b3e:	4621      	mov	r1, r4
 8000b40:	481a      	ldr	r0, [pc, #104]	; (8000bac <getSoilMoisture+0x88>)
 8000b42:	f7ff fec7 	bl	80008d4 <lcdPrintf>
	HAL_Delay(200);
 8000b46:	20c8      	movs	r0, #200	; 0xc8
 8000b48:	f000 fb72 	bl	8001230 <HAL_Delay>
	if (soilMoistureValue > WaterValue
 8000b4c:	f640 53fc 	movw	r3, #3580	; 0xdfc
 8000b50:	429c      	cmp	r4, r3
 8000b52:	dd0e      	ble.n	8000b72 <getSoilMoisture+0x4e>
			&& soilMoistureValue < (WaterValue + intervals)) {
 8000b54:	f640 63a7 	movw	r3, #3751	; 0xea7
 8000b58:	429c      	cmp	r4, r3
 8000b5a:	dd0b      	ble.n	8000b74 <getSoilMoisture+0x50>
	} else if (soilMoistureValue > (WaterValue + intervals)
 8000b5c:	f640 63a8 	movw	r3, #3752	; 0xea8
 8000b60:	429c      	cmp	r4, r3
 8000b62:	d018      	beq.n	8000b96 <getSoilMoisture+0x72>
			&& soilMoistureValue < (AirValue - intervals)) {
 8000b64:	f640 7353 	movw	r3, #3923	; 0xf53
 8000b68:	429c      	cmp	r4, r3
 8000b6a:	dd0f      	ble.n	8000b8c <getSoilMoisture+0x68>
	} else if (soilMoistureValue < AirValue
 8000b6c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8000b70:	db11      	blt.n	8000b96 <getSoilMoisture+0x72>
}
 8000b72:	bd10      	pop	{r4, pc}
		printToScreen(0, lcdGetHeight() / 2 + 20, "Very wet");
 8000b74:	f7ff ffb8 	bl	8000ae8 <lcdGetHeight>
 8000b78:	4601      	mov	r1, r0
 8000b7a:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <getSoilMoisture+0x8c>)
		printToScreen(0, lcdGetHeight() / 2 + 20, "Dry     ");
 8000b7c:	0849      	lsrs	r1, r1, #1
 8000b7e:	3114      	adds	r1, #20
 8000b80:	2000      	movs	r0, #0
}
 8000b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printToScreen(0, lcdGetHeight() / 2 + 20, "Dry     ");
 8000b86:	b289      	uxth	r1, r1
 8000b88:	f7ff bfba 	b.w	8000b00 <printToScreen>
		printToScreen(0, lcdGetHeight() / 2 + 20, "Wet     ");
 8000b8c:	f7ff ffac 	bl	8000ae8 <lcdGetHeight>
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <getSoilMoisture+0x90>)
 8000b92:	4601      	mov	r1, r0
 8000b94:	e7f2      	b.n	8000b7c <getSoilMoisture+0x58>
			&& soilMoistureValue > (AirValue - intervals)) {
 8000b96:	f640 7354 	movw	r3, #3924	; 0xf54
 8000b9a:	429c      	cmp	r4, r3
 8000b9c:	dde9      	ble.n	8000b72 <getSoilMoisture+0x4e>
		printToScreen(0, lcdGetHeight() / 2 + 20, "Dry     ");
 8000b9e:	f7ff ffa3 	bl	8000ae8 <lcdGetHeight>
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <getSoilMoisture+0x94>)
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	e7e9      	b.n	8000b7c <getSoilMoisture+0x58>
 8000ba8:	200001bc 	.word	0x200001bc
 8000bac:	0800af78 	.word	0x0800af78
 8000bb0:	0800af8c 	.word	0x0800af8c
 8000bb4:	0800af98 	.word	0x0800af98
 8000bb8:	0800afa4 	.word	0x0800afa4

08000bbc <drawLines>:

void drawLines(uint16_t color) {
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	4604      	mov	r4, r0
	unsigned long start, t;
	int x1, y1, x2, y2, w = lcdGetWidth(), h = lcdGetHeight();
 8000bc4:	f7ff ff8a 	bl	8000adc <lcdGetWidth>
 8000bc8:	4680      	mov	r8, r0
 8000bca:	f7ff ff8d 	bl	8000ae8 <lcdGetHeight>
 8000bce:	4607      	mov	r7, r0

	lcdFillRGB(COLOR_BLACK);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff fc5f 	bl	8000494 <lcdFillRGB>

	x1 = y1 = 0;
	y2 = h - 1;
 8000bd6:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
	start = HAL_GetTick();
 8000bda:	f000 fb23 	bl	8001224 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 8000bde:	f1b8 0f00 	cmp.w	r8, #0
 8000be2:	d04c      	beq.n	8000c7e <drawLines+0xc2>
 8000be4:	2500      	movs	r5, #0
	y2 = h - 1;

	start = HAL_GetTick();

	for (x2 = 0; x2 < w; x2 += 6)
		lcdDrawLine(x1, y1, x2, y2, color);
 8000be6:	fa0f fa89 	sxth.w	sl, r9
		lcdDrawLine(x1, y1, x2, y2, color);
 8000bea:	2100      	movs	r1, #0
 8000bec:	b22a      	sxth	r2, r5
 8000bee:	4653      	mov	r3, sl
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	9400      	str	r4, [sp, #0]
	for (x2 = 0; x2 < w; x2 += 6)
 8000bf4:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 8000bf6:	f7ff fc83 	bl	8000500 <lcdDrawLine>
	for (x2 = 0; x2 < w; x2 += 6)
 8000bfa:	45a8      	cmp	r8, r5
 8000bfc:	dcf5      	bgt.n	8000bea <drawLines+0x2e>
	x2 = w - 1;
 8000bfe:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
	for (y2 = 0; y2 < h; y2 += 6)
 8000c02:	2f00      	cmp	r7, #0
 8000c04:	d04b      	beq.n	8000c9e <drawLines+0xe2>
 8000c06:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 8000c08:	b236      	sxth	r6, r6
		lcdDrawLine(x1, y1, x2, y2, color);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b22b      	sxth	r3, r5
 8000c0e:	4632      	mov	r2, r6
 8000c10:	4608      	mov	r0, r1
 8000c12:	9400      	str	r4, [sp, #0]
	for (y2 = 0; y2 < h; y2 += 6)
 8000c14:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 8000c16:	f7ff fc73 	bl	8000500 <lcdDrawLine>
	for (y2 = 0; y2 < h; y2 += 6)
 8000c1a:	42af      	cmp	r7, r5
 8000c1c:	dcf5      	bgt.n	8000c0a <drawLines+0x4e>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 8000c1e:	f000 fb01 	bl	8001224 <HAL_GetTick>
	HAL_Delay(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c26:	f000 fb03 	bl	8001230 <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fc32 	bl	8000494 <lcdFillRGB>
	start = HAL_GetTick();
 8000c30:	f000 faf8 	bl	8001224 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 8000c34:	f1b8 0f00 	cmp.w	r8, #0
 8000c38:	d00d      	beq.n	8000c56 <drawLines+0x9a>
 8000c3a:	fa0f fa89 	sxth.w	sl, r9
 8000c3e:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 8000c40:	b22a      	sxth	r2, r5
 8000c42:	4653      	mov	r3, sl
 8000c44:	2100      	movs	r1, #0
 8000c46:	4630      	mov	r0, r6
 8000c48:	9400      	str	r4, [sp, #0]
	for (x2 = 0; x2 < w; x2 += 6)
 8000c4a:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 8000c4c:	f7ff fc58 	bl	8000500 <lcdDrawLine>
	for (x2 = 0; x2 < w; x2 += 6)
 8000c50:	45a8      	cmp	r8, r5
 8000c52:	dcf5      	bgt.n	8000c40 <drawLines+0x84>
	x2 = 0;
	for (y2 = 0; y2 < h; y2 += 6)
 8000c54:	b157      	cbz	r7, 8000c6c <drawLines+0xb0>
	for (x2 = 0; x2 < w; x2 += 6)
 8000c56:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	b22b      	sxth	r3, r5
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	4611      	mov	r1, r2
 8000c60:	9400      	str	r4, [sp, #0]
	for (y2 = 0; y2 < h; y2 += 6)
 8000c62:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 8000c64:	f7ff fc4c 	bl	8000500 <lcdDrawLine>
	for (y2 = 0; y2 < h; y2 += 6)
 8000c68:	42af      	cmp	r7, r5
 8000c6a:	dcf5      	bgt.n	8000c58 <drawLines+0x9c>
	t += HAL_GetTick() - start;
 8000c6c:	f000 fada 	bl	8001224 <HAL_GetTick>

	HAL_Delay(1000);
 8000c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

//  return t += HAL_GetTick() - start;
}
 8000c74:	b002      	add	sp, #8
 8000c76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_Delay(1000);
 8000c7a:	f000 bad9 	b.w	8001230 <HAL_Delay>
	x2 = w - 1;
 8000c7e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (y2 = 0; y2 < h; y2 += 6)
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d1bf      	bne.n	8000c06 <drawLines+0x4a>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 8000c86:	f000 facd 	bl	8001224 <HAL_GetTick>
	HAL_Delay(1000);
 8000c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8e:	f000 facf 	bl	8001230 <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 8000c92:	4638      	mov	r0, r7
 8000c94:	f7ff fbfe 	bl	8000494 <lcdFillRGB>
	start = HAL_GetTick();
 8000c98:	f000 fac4 	bl	8001224 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 8000c9c:	e7e6      	b.n	8000c6c <drawLines+0xb0>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 8000c9e:	f000 fac1 	bl	8001224 <HAL_GetTick>
	HAL_Delay(1000);
 8000ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca6:	f000 fac3 	bl	8001230 <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 8000caa:	4638      	mov	r0, r7
		lcdDrawLine(x1, y1, x2, y2, color);
 8000cac:	b236      	sxth	r6, r6
	lcdFillRGB(COLOR_BLACK);
 8000cae:	f7ff fbf1 	bl	8000494 <lcdFillRGB>
	start = HAL_GetTick();
 8000cb2:	f000 fab7 	bl	8001224 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 8000cb6:	e7c2      	b.n	8000c3e <drawLines+0x82>

08000cb8 <drawImage>:

void drawImage() {
 8000cb8:	b508      	push	{r3, lr}
	unsigned long start;

	lcdFillRGB(COLOR_PEASHOOT_GREEN);
 8000cba:	f24d 60eb 	movw	r0, #55019	; 0xd6eb
 8000cbe:	f7ff fbe9 	bl	8000494 <lcdFillRGB>
	start = HAL_GetTick();
 8000cc2:	f000 faaf 	bl	8001224 <HAL_GetTick>
	if (lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE
 8000cc6:	f7ff ff15 	bl	8000af4 <lcdGetOrientation>
 8000cca:	2801      	cmp	r0, #1
 8000ccc:	d003      	beq.n	8000cd6 <drawImage+0x1e>
			|| lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE_MIRROR) {
 8000cce:	f7ff ff11 	bl	8000af4 <lcdGetOrientation>
 8000cd2:	2803      	cmp	r0, #3
 8000cd4:	d10d      	bne.n	8000cf2 <drawImage+0x3a>
		lcdDrawImage((lcdGetWidth() - bmSTLogo.xSize) / 2, 0, &bmSTLogo);
 8000cd6:	f7ff ff01 	bl	8000adc <lcdGetWidth>
 8000cda:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <drawImage+0x58>)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	8813      	ldrh	r3, [r2, #0]
 8000ce0:	1ac0      	subs	r0, r0, r3
 8000ce2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8000ce6:	f3c0 004f 	ubfx	r0, r0, #1, #16
	} else {
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
	}
}
 8000cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcdDrawImage((lcdGetWidth() - bmSTLogo.xSize) / 2, 0, &bmSTLogo);
 8000cee:	f7ff bcb7 	b.w	8000660 <lcdDrawImage>
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
 8000cf2:	f7ff fef9 	bl	8000ae8 <lcdGetHeight>
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <drawImage+0x58>)
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	8853      	ldrh	r3, [r2, #2]
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000d04:	f3c1 014f 	ubfx	r1, r1, #1, #16
}
 8000d08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
 8000d0c:	f7ff bca8 	b.w	8000660 <lcdDrawImage>
 8000d10:	0800af6c 	.word	0x0800af6c

08000d14 <start_animation>:
void start_animation() {
 8000d14:	b508      	push	{r3, lr}
	drawLines(COLOR_PEASHOOT_GREEN);
 8000d16:	f24d 60eb 	movw	r0, #55019	; 0xd6eb
 8000d1a:	f7ff ff4f 	bl	8000bbc <drawLines>
	HAL_Delay(200);
 8000d1e:	20c8      	movs	r0, #200	; 0xc8
 8000d20:	f000 fa86 	bl	8001230 <HAL_Delay>
}
 8000d24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	drawImage();
 8000d28:	f7ff bfc6 	b.w	8000cb8 <drawImage>

08000d2c <SystemClock_Config>:
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d2c:	2001      	movs	r0, #1
void SystemClock_Config(void) {
 8000d2e:	b510      	push	{r4, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d30:	2300      	movs	r3, #0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d38:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
void SystemClock_Config(void) {
 8000d3c:	b096      	sub	sp, #88	; 0x58
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d3e:	900c      	str	r0, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d40:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d42:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d44:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d48:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d4c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000d50:	e9cd 3304 	strd	r3, r3, [sp, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d54:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000d58:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d5c:	9115      	str	r1, [sp, #84]	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d5e:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d60:	9301      	str	r3, [sp, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d62:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d64:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d66:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000d68:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d6a:	f000 ff53 	bl	8001c14 <HAL_RCC_OscConfig>
 8000d6e:	b108      	cbz	r0, 8000d74 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d72:	e7fe      	b.n	8000d72 <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d74:	4603      	mov	r3, r0
 8000d76:	220f      	movs	r2, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	e9cd 4302 	strd	r4, r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d82:	4621      	mov	r1, r4
 8000d84:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d86:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d88:	9201      	str	r2, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d8a:	f001 f96f 	bl	800206c <HAL_RCC_ClockConfig>
 8000d8e:	b108      	cbz	r0, 8000d94 <SystemClock_Config+0x68>
 8000d90:	b672      	cpsid	i
	while (1) {
 8000d92:	e7fe      	b.n	8000d92 <SystemClock_Config+0x66>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d98:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d9a:	9406      	str	r4, [sp, #24]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d9c:	9308      	str	r3, [sp, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d9e:	f001 fa15 	bl	80021cc <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	b108      	cbz	r0, 8000da8 <SystemClock_Config+0x7c>
 8000da4:	b672      	cpsid	i
	while (1) {
 8000da6:	e7fe      	b.n	8000da6 <SystemClock_Config+0x7a>
}
 8000da8:	b016      	add	sp, #88	; 0x58
 8000daa:	bd10      	pop	{r4, pc}

08000dac <main>:
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000dac:	2400      	movs	r4, #0
int main(void) {
 8000dae:	b580      	push	{r7, lr}
	GPIO_InitStruct.Pin = DIN_Pin;
 8000db0:	f04f 0904 	mov.w	r9, #4
int main(void) {
 8000db4:	b08c      	sub	sp, #48	; 0x30
	HAL_Init();
 8000db6:	f000 fa17 	bl	80011e8 <HAL_Init>
	SystemClock_Config();
 8000dba:	f7ff ffb7 	bl	8000d2c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000dbe:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000dc2:	e9cd 4407 	strd	r4, r4, [sp, #28]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc6:	4b79      	ldr	r3, [pc, #484]	; (8000fac <main+0x200>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2601      	movs	r6, #1
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dca:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 8000dcc:	2119      	movs	r1, #25
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dd2:	619a      	str	r2, [r3, #24]
 8000dd4:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 8000dd6:	4876      	ldr	r0, [pc, #472]	; (8000fb0 <main+0x204>)
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ddc:	9200      	str	r2, [sp, #0]
 8000dde:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000de0:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de2:	2703      	movs	r7, #3
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000de4:	f042 0210 	orr.w	r2, r2, #16
 8000de8:	619a      	str	r2, [r3, #24]
 8000dea:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dec:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000df0:	f002 0210 	and.w	r2, r2, #16
 8000df4:	9201      	str	r2, [sp, #4]
 8000df6:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000df8:	699a      	ldr	r2, [r3, #24]
	hadc1.Instance = ADC1;
 8000dfa:	4d6e      	ldr	r5, [pc, #440]	; (8000fb4 <main+0x208>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfc:	f042 0220 	orr.w	r2, r2, #32
 8000e00:	619a      	str	r2, [r3, #24]
 8000e02:	699a      	ldr	r2, [r3, #24]
 8000e04:	f002 0220 	and.w	r2, r2, #32
 8000e08:	9202      	str	r2, [sp, #8]
 8000e0a:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	699a      	ldr	r2, [r3, #24]
 8000e0e:	ea42 0209 	orr.w	r2, r2, r9
 8000e12:	619a      	str	r2, [r3, #24]
 8000e14:	699a      	ldr	r2, [r3, #24]
 8000e16:	ea02 0209 	and.w	r2, r2, r9
 8000e1a:	9203      	str	r2, [sp, #12]
 8000e1c:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	699a      	ldr	r2, [r3, #24]
 8000e20:	f042 0208 	orr.w	r2, r2, #8
 8000e24:	619a      	str	r2, [r3, #24]
 8000e26:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 8000e28:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	9304      	str	r3, [sp, #16]
 8000e30:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOE, DOUT_Pin | IRQ_Pin | DCLK_Pin, GPIO_PIN_RESET);
 8000e32:	f000 feeb 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_2, GPIO_PIN_RESET);
 8000e36:	4622      	mov	r2, r4
 8000e38:	f241 0104 	movw	r1, #4100	; 0x1004
 8000e3c:	485e      	ldr	r0, [pc, #376]	; (8000fb8 <main+0x20c>)
 8000e3e:	f000 fee5 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e42:	4632      	mov	r2, r6
 8000e44:	2120      	movs	r1, #32
 8000e46:	485d      	ldr	r0, [pc, #372]	; (8000fbc <main+0x210>)
 8000e48:	f000 fee0 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000e4c:	4632      	mov	r2, r6
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4857      	ldr	r0, [pc, #348]	; (8000fb0 <main+0x204>)
 8000e52:	f000 fedb 	bl	8001c0c <HAL_GPIO_WritePin>
	HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8000e56:	4856      	ldr	r0, [pc, #344]	; (8000fb0 <main+0x204>)
 8000e58:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	e9cd 9405 	strd	r9, r4, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f000 fdac 	bl	80019bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DOUT_Pin | IRQ_Pin | DCLK_Pin | GPIO_PIN_1;
 8000e64:	231b      	movs	r3, #27
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e66:	4852      	ldr	r0, [pc, #328]	; (8000fb0 <main+0x204>)
 8000e68:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = DOUT_Pin | IRQ_Pin | DCLK_Pin | GPIO_PIN_1;
 8000e6a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	e9cd 6406 	strd	r6, r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e70:	9708      	str	r7, [sp, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e72:	f000 fda3 	bl	80019bc <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	4850      	ldr	r0, [pc, #320]	; (8000fb8 <main+0x20c>)
 8000e78:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	e9cd 8605 	strd	r8, r6, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7e:	e9cd 4707 	strd	r4, r7, [sp, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e82:	f000 fd9b 	bl	80019bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_Pin;
 8000e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	484b      	ldr	r0, [pc, #300]	; (8000fb8 <main+0x20c>)
 8000e8c:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = CS_Pin;
 8000e8e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	e9cd 4406 	strd	r4, r4, [sp, #24]
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f000 fd92 	bl	80019bc <HAL_GPIO_Init>
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9a:	4847      	ldr	r0, [pc, #284]	; (8000fb8 <main+0x20c>)
 8000e9c:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	e9cd 9605 	strd	r9, r6, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f000 fd89 	bl	80019bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eaa:	2320      	movs	r3, #32
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	4843      	ldr	r0, [pc, #268]	; (8000fbc <main+0x210>)
 8000eae:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eb0:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	e9cd 6406 	strd	r6, r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb6:	9708      	str	r7, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f000 fd80 	bl	80019bc <HAL_GPIO_Init>
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebc:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8000ec0:	61eb      	str	r3, [r5, #28]
	hadc1.Instance = ADC1;
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <main+0x214>)
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000ec4:	4628      	mov	r0, r5
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ec6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000eca:	9407      	str	r4, [sp, #28]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ecc:	60ac      	str	r4, [r5, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000ece:	732e      	strb	r6, [r5, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	752c      	strb	r4, [r5, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed2:	606c      	str	r4, [r5, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000ed4:	612e      	str	r6, [r5, #16]
	hadc1.Instance = ADC1;
 8000ed6:	602b      	str	r3, [r5, #0]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000ed8:	f000 fbe0 	bl	800169c <HAL_ADC_Init>
 8000edc:	b108      	cbz	r0, 8000ee2 <main+0x136>
 8000ede:	b672      	cpsid	i
	while (1) {
 8000ee0:	e7fe      	b.n	8000ee0 <main+0x134>
	sConfig.Channel = ADC_CHANNEL_12;
 8000ee2:	230c      	movs	r3, #12
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ee4:	9007      	str	r0, [sp, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ee6:	a905      	add	r1, sp, #20
 8000ee8:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eea:	9606      	str	r6, [sp, #24]
	sConfig.Channel = ADC_CHANNEL_12;
 8000eec:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000eee:	f000 fa67 	bl	80013c0 <HAL_ADC_ConfigChannel>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	bb20      	cbnz	r0, 8000f40 <main+0x194>
	FSMC_NORSRAM_TimingTypeDef Timing = { 0 };
 8000ef6:	9008      	str	r0, [sp, #32]
 8000ef8:	900b      	str	r0, [sp, #44]	; 0x2c
	Timing.AddressHoldTime = 15;
 8000efa:	200f      	movs	r0, #15
 8000efc:	9006      	str	r0, [sp, #24]
	Timing.DataSetupTime = 5;
 8000efe:	2005      	movs	r0, #5
 8000f00:	9007      	str	r0, [sp, #28]
	Timing.DataLatency = 17;
 8000f02:	2011      	movs	r0, #17
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f04:	2310      	movs	r3, #16
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000f06:	f04f 4420 	mov.w	r4, #2684354560	; 0xa0000000
	Timing.DataLatency = 17;
 8000f0a:	900a      	str	r0, [sp, #40]	; 0x28
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000f0c:	482d      	ldr	r0, [pc, #180]	; (8000fc4 <main+0x218>)
	Timing.CLKDivision = 16;
 8000f0e:	9309      	str	r3, [sp, #36]	; 0x24
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f10:	6143      	str	r3, [r0, #20]
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <main+0x21c>)
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8000f14:	a905      	add	r1, sp, #20
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000f16:	6004      	str	r4, [r0, #0]
	hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f18:	e9c0 2202 	strd	r2, r2, [r0, #8]
	hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f1c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f20:	e9c0 2208 	strd	r2, r2, [r0, #32]
	hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f24:	e9c0 820a 	strd	r8, r2, [r0, #40]	; 0x28
	hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f28:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
	Timing.AddressSetupTime = 1;
 8000f2c:	9605      	str	r6, [sp, #20]
	hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f2e:	6102      	str	r2, [r0, #16]
	hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f30:	6382      	str	r2, [r0, #56]	; 0x38
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f32:	6043      	str	r3, [r0, #4]
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8000f34:	f001 fa52 	bl	80023dc <HAL_SRAM_Init>
 8000f38:	4604      	mov	r4, r0
 8000f3a:	b118      	cbz	r0, 8000f44 <main+0x198>
 8000f3c:	b672      	cpsid	i
	while (1) {
 8000f3e:	e7fe      	b.n	8000f3e <main+0x192>
 8000f40:	b672      	cpsid	i
 8000f42:	e7fe      	b.n	8000f42 <main+0x196>
	__HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000f44:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <main+0x220>)
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000f46:	4628      	mov	r0, r5
	__HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000f48:	69d3      	ldr	r3, [r2, #28]
 8000f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4e:	61d3      	str	r3, [r2, #28]
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000f50:	f000 fc50 	bl	80017f4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8000f54:	4628      	mov	r0, r5
 8000f56:	f000 fb11 	bl	800157c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f5e:	4628      	mov	r0, r5
 8000f60:	f000 f978 	bl	8001254 <HAL_ADC_PollForConversion>
	LCD_BL_ON();
 8000f64:	4622      	mov	r2, r4
 8000f66:	4641      	mov	r1, r8
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <main+0x20c>)
 8000f6a:	f000 fe4f 	bl	8001c0c <HAL_GPIO_WritePin>
	lcdInit();
 8000f6e:	f7ff f959 	bl	8000224 <lcdInit>
	lcdSetOrientation(1);
 8000f72:	4630      	mov	r0, r6
 8000f74:	f7ff fd26 	bl	80009c4 <lcdSetOrientation>
	lcdSetTextFont(&Font16);
 8000f78:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <main+0x224>)
 8000f7a:	f7ff fd17 	bl	80009ac <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_PEASHOOT_GREEN);
 8000f7e:	f24d 61eb 	movw	r1, #55019	; 0xd6eb
 8000f82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f86:	f7ff fd17 	bl	80009b8 <lcdSetTextColor>
	start_animation();
 8000f8a:	f7ff fec3 	bl	8000d14 <start_animation>
	lcdSetCursor(0, lcdGetHeight() / 2);
 8000f8e:	f7ff fdab 	bl	8000ae8 <lcdGetHeight>
 8000f92:	4601      	mov	r1, r0
 8000f94:	4620      	mov	r0, r4
 8000f96:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8000f9a:	f7ff fd79 	bl	8000a90 <lcdSetCursor>
	lcdPrintf("Humidity: \r\n");
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <main+0x228>)
 8000fa0:	f7ff fc98 	bl	80008d4 <lcdPrintf>
		getSoilMoisture();
 8000fa4:	f7ff fdbe 	bl	8000b24 <getSoilMoisture>
	while (1) {
 8000fa8:	e7fc      	b.n	8000fa4 <main+0x1f8>
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40011800 	.word	0x40011800
 8000fb4:	200001bc 	.word	0x200001bc
 8000fb8:	40011400 	.word	0x40011400
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	40012400 	.word	0x40012400
 8000fc4:	200001ec 	.word	0x200001ec
 8000fc8:	a0000104 	.word	0xa0000104
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	0800afb0 	.word	0x0800afb0

08000fd8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_MspInit+0x3c>)
{
 8000fda:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fdc:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fde:	490e      	ldr	r1, [pc, #56]	; (8001018 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe0:	f042 0201 	orr.w	r2, r2, #1
 8000fe4:	619a      	str	r2, [r3, #24]
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	f002 0201 	and.w	r2, r2, #1
 8000fec:	9200      	str	r2, [sp, #0]
 8000fee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff0:	69da      	ldr	r2, [r3, #28]
 8000ff2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ff6:	61da      	str	r2, [r3, #28]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001002:	684b      	ldr	r3, [r1, #4]
 8001004:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001008:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800100c:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	b002      	add	sp, #8
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	40010000 	.word	0x40010000

0800101c <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	2300      	movs	r3, #0
{
 800101e:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC1)
 8001020:	4a15      	ldr	r2, [pc, #84]	; (8001078 <HAL_ADC_MspInit+0x5c>)
 8001022:	6801      	ldr	r1, [r0, #0]
{
 8001024:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 8001026:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800102c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC1)
 8001030:	d001      	beq.n	8001036 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001032:	b007      	add	sp, #28
 8001034:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001036:	2504      	movs	r5, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001038:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800103a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800103e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001042:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800104a:	619a      	str	r2, [r3, #24]
 800104c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001050:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001054:	9200      	str	r2, [sp, #0]
 8001056:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	699a      	ldr	r2, [r3, #24]
 800105a:	f042 0210 	orr.w	r2, r2, #16
 800105e:	619a      	str	r2, [r3, #24]
 8001060:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001062:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f000 fca5 	bl	80019bc <HAL_GPIO_Init>
}
 8001072:	b007      	add	sp, #28
 8001074:	bd30      	pop	{r4, r5, pc}
 8001076:	bf00      	nop
 8001078:	40012400 	.word	0x40012400
 800107c:	40011000 	.word	0x40011000

08001080 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001080:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001082:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_SRAM_MspInit+0x58>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001086:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 8001088:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800108a:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 800108c:	bb12      	cbnz	r2, 80010d4 <HAL_SRAM_MspInit+0x54>
  FSMC_Initialized = 1;
 800108e:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001092:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001094:	f64f 7680 	movw	r6, #65408	; 0xff80
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001098:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800109c:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 80010a0:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 80010a2:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6153      	str	r3, [r2, #20]
 80010ac:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ae:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80010b8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010bc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010be:	f000 fc7d 	bl	80019bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010c2:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <HAL_SRAM_MspInit+0x60>)
 80010c8:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010ce:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d0:	f000 fc74 	bl	80019bc <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80010d4:	b007      	add	sp, #28
 80010d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d8:	20000234 	.word	0x20000234
 80010dc:	40011800 	.word	0x40011800
 80010e0:	40011400 	.word	0x40011400

080010e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler>
 80010e6:	bf00      	nop

080010e8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <HardFault_Handler>
 80010ea:	bf00      	nop

080010ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <MemManage_Handler>
 80010ee:	bf00      	nop

080010f0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <BusFault_Handler>
 80010f2:	bf00      	nop

080010f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler>
 80010f6:	bf00      	nop

080010f8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <DebugMon_Handler>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <PendSV_Handler>:
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 b882 	b.w	800120c <HAL_IncTick>

08001108 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	490d      	ldr	r1, [pc, #52]	; (8001140 <_sbrk+0x38>)
{
 800110a:	4603      	mov	r3, r0
 800110c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110e:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <_sbrk+0x3c>)
 8001110:	4c0d      	ldr	r4, [pc, #52]	; (8001148 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001112:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001116:	b120      	cbz	r0, 8001122 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001118:	4403      	add	r3, r0
 800111a:	4293      	cmp	r3, r2
 800111c:	d807      	bhi.n	800112e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800111e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001120:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001122:	4c0a      	ldr	r4, [pc, #40]	; (800114c <_sbrk+0x44>)
 8001124:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4403      	add	r3, r0
 8001128:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800112a:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800112c:	d9f7      	bls.n	800111e <_sbrk+0x16>
    errno = ENOMEM;
 800112e:	f001 fa03 	bl	8002538 <__errno>
 8001132:	220c      	movs	r2, #12
 8001134:	4603      	mov	r3, r0
    return (void *)-1;
 8001136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOMEM;
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	bd10      	pop	{r4, pc}
 800113e:	bf00      	nop
 8001140:	20000238 	.word	0x20000238
 8001144:	20010000 	.word	0x20010000
 8001148:	00000400 	.word	0x00000400
 800114c:	20000250 	.word	0x20000250

08001150 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	; (800118c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	; (8001198 <LoopFillZerobss+0x22>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800117a:	f7ff ffe9 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f001 f9e1 	bl	8002544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001182:	f7ff fe13 	bl	8000dac <main>
  bx lr
 8001186:	4770      	bx	lr
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001190:	0800b024 	.word	0x0800b024
  ldr r2, =_sbss
 8001194:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001198:	20000250 	.word	0x20000250

0800119c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_2_IRQHandler>
	...

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <HAL_InitTick+0x3c>)
{
 80011a8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011aa:	7811      	ldrb	r1, [r2, #0]
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <HAL_InitTick+0x40>)
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	fbb2 f0f3 	udiv	r0, r2, r3
 80011b8:	f000 fbe8 	bl	800198c <HAL_SYSTICK_Config>
 80011bc:	b908      	cbnz	r0, 80011c2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	2d0f      	cmp	r5, #15
 80011c0:	d901      	bls.n	80011c6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80011c2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80011c4:	bd38      	pop	{r3, r4, r5, pc}
 80011c6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	4602      	mov	r2, r0
 80011ca:	4629      	mov	r1, r5
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d0:	f000 fb9e 	bl	8001910 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_InitTick+0x44>)
 80011d6:	4620      	mov	r0, r4
 80011d8:	601d      	str	r5, [r3, #0]
}
 80011da:	bd38      	pop	{r3, r4, r5, pc}
 80011dc:	2000002c 	.word	0x2000002c
 80011e0:	20000028 	.word	0x20000028
 80011e4:	20000030 	.word	0x20000030

080011e8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_Init+0x20>)
{
 80011ea:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ee:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f6:	f000 fb79 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	200f      	movs	r0, #15
 80011fc:	f7ff ffd0 	bl	80011a0 <HAL_InitTick>
  HAL_MspInit();
 8001200:	f7ff feea 	bl	8000fd8 <HAL_MspInit>
}
 8001204:	2000      	movs	r0, #0
 8001206:	bd08      	pop	{r3, pc}
 8001208:	40022000 	.word	0x40022000

0800120c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_IncTick+0x10>)
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_IncTick+0x14>)
 8001210:	6811      	ldr	r1, [r2, #0]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	440b      	add	r3, r1
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000023c 	.word	0x2000023c
 8001220:	2000002c 	.word	0x2000002c

08001224 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001224:	4b01      	ldr	r3, [pc, #4]	; (800122c <HAL_GetTick+0x8>)
 8001226:	6818      	ldr	r0, [r3, #0]
}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	2000023c 	.word	0x2000023c

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff6 	bl	8001224 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001238:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800123a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800123c:	d002      	beq.n	8001244 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_Delay+0x20>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	1b40      	subs	r0, r0, r5
 800124a:	42a0      	cmp	r0, r4
 800124c:	d3fa      	bcc.n	8001244 <HAL_Delay+0x14>
  {
  }
}
 800124e:	bd38      	pop	{r3, r4, r5, pc}
 8001250:	2000002c 	.word	0x2000002c

08001254 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001258:	2500      	movs	r5, #0
{
 800125a:	b083      	sub	sp, #12
 800125c:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800125e:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001260:	f7ff ffe0 	bl	8001224 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001264:	6833      	ldr	r3, [r6, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	05d7      	lsls	r7, r2, #23
 800126a:	d472      	bmi.n	8001352 <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4607      	mov	r7, r0
 8001270:	05d5      	lsls	r5, r2, #23
 8001272:	d403      	bmi.n	800127c <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001276:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800127a:	d01e      	beq.n	80012ba <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800127c:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <HAL_ADC_PollForConversion+0x154>)
 800127e:	2002      	movs	r0, #2
 8001280:	681d      	ldr	r5, [r3, #0]
 8001282:	f001 f825 	bl	80022d0 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001286:	6833      	ldr	r3, [r6, #0]
 8001288:	4a48      	ldr	r2, [pc, #288]	; (80013ac <HAL_ADC_PollForConversion+0x158>)
 800128a:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800128c:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001290:	4211      	tst	r1, r2
 8001292:	d125      	bne.n	80012e0 <HAL_ADC_PollForConversion+0x8c>
 8001294:	68d9      	ldr	r1, [r3, #12]
 8001296:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 800129a:	4211      	tst	r1, r2
 800129c:	d120      	bne.n	80012e0 <HAL_ADC_PollForConversion+0x8c>
 800129e:	6919      	ldr	r1, [r3, #16]
 80012a0:	4a43      	ldr	r2, [pc, #268]	; (80013b0 <HAL_ADC_PollForConversion+0x15c>)
 80012a2:	4211      	tst	r1, r2
 80012a4:	d17e      	bne.n	80013a4 <HAL_ADC_PollForConversion+0x150>
 80012a6:	68d9      	ldr	r1, [r3, #12]
 80012a8:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80012ac:	4211      	tst	r1, r2
 80012ae:	bf14      	ite	ne
 80012b0:	2029      	movne	r0, #41	; 0x29
 80012b2:	2014      	moveq	r0, #20
 80012b4:	e01e      	b.n	80012f4 <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 80012b6:	1c60      	adds	r0, r4, #1
 80012b8:	d154      	bne.n	8001364 <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	0791      	lsls	r1, r2, #30
 80012be:	d5fa      	bpl.n	80012b6 <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012c0:	f06f 0212 	mvn.w	r2, #18
 80012c4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80012c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012cc:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012d4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012d8:	d055      	beq.n	8001386 <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012da:	2000      	movs	r0, #0
}
 80012dc:	b003      	add	sp, #12
 80012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80012e0:	6919      	ldr	r1, [r3, #16]
 80012e2:	4a33      	ldr	r2, [pc, #204]	; (80013b0 <HAL_ADC_PollForConversion+0x15c>)
 80012e4:	4211      	tst	r1, r2
 80012e6:	d12a      	bne.n	800133e <HAL_ADC_PollForConversion+0xea>
 80012e8:	68d9      	ldr	r1, [r3, #12]
 80012ea:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80012ee:	4211      	tst	r1, r2
 80012f0:	d125      	bne.n	800133e <HAL_ADC_PollForConversion+0xea>
 80012f2:	2054      	movs	r0, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80012f4:	fb00 f505 	mul.w	r5, r0, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012f8:	9a01      	ldr	r2, [sp, #4]
 80012fa:	4295      	cmp	r5, r2
 80012fc:	d809      	bhi.n	8001312 <HAL_ADC_PollForConversion+0xbe>
 80012fe:	e7df      	b.n	80012c0 <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001300:	9b01      	ldr	r3, [sp, #4]
 8001302:	42ab      	cmp	r3, r5
 8001304:	d311      	bcc.n	800132a <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 8001306:	9b01      	ldr	r3, [sp, #4]
 8001308:	3301      	adds	r3, #1
 800130a:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800130c:	9b01      	ldr	r3, [sp, #4]
 800130e:	42ab      	cmp	r3, r5
 8001310:	d237      	bcs.n	8001382 <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 8001312:	1c62      	adds	r2, r4, #1
 8001314:	d0f7      	beq.n	8001306 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001316:	2c00      	cmp	r4, #0
 8001318:	d0f2      	beq.n	8001300 <HAL_ADC_PollForConversion+0xac>
 800131a:	f7ff ff83 	bl	8001224 <HAL_GetTick>
 800131e:	1bc0      	subs	r0, r0, r7
 8001320:	42a0      	cmp	r0, r4
 8001322:	d9f0      	bls.n	8001306 <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001324:	9b01      	ldr	r3, [sp, #4]
 8001326:	42ab      	cmp	r3, r5
 8001328:	d2ed      	bcs.n	8001306 <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 800132a:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 800132c:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800132e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8001330:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	62b3      	str	r3, [r6, #40]	; 0x28
}
 800133a:	b003      	add	sp, #12
 800133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800133e:	6919      	ldr	r1, [r3, #16]
 8001340:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <HAL_ADC_PollForConversion+0x160>)
 8001342:	4211      	tst	r1, r2
 8001344:	d114      	bne.n	8001370 <HAL_ADC_PollForConversion+0x11c>
 8001346:	68d9      	ldr	r1, [r3, #12]
 8001348:	4211      	tst	r1, r2
 800134a:	bf14      	ite	ne
 800134c:	20fc      	movne	r0, #252	; 0xfc
 800134e:	2054      	moveq	r0, #84	; 0x54
 8001350:	e7d0      	b.n	80012f4 <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 8001352:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001354:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8001356:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135a:	f043 0320 	orr.w	r3, r3, #32
 800135e:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8001360:	b003      	add	sp, #12
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001364:	b934      	cbnz	r4, 8001374 <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	f012 0202 	ands.w	r2, r2, #2
 800136c:	d1a5      	bne.n	80012ba <HAL_ADC_PollForConversion+0x66>
 800136e:	e7dd      	b.n	800132c <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001370:	20fc      	movs	r0, #252	; 0xfc
 8001372:	e7bf      	b.n	80012f4 <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001374:	f7ff ff56 	bl	8001224 <HAL_GetTick>
 8001378:	1bc3      	subs	r3, r0, r7
 800137a:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800137c:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800137e:	d99c      	bls.n	80012ba <HAL_ADC_PollForConversion+0x66>
 8001380:	e7f1      	b.n	8001366 <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001382:	6833      	ldr	r3, [r6, #0]
 8001384:	e79c      	b.n	80012c0 <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001386:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001388:	2800      	cmp	r0, #0
 800138a:	d1a6      	bne.n	80012da <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800138c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800138e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001392:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001394:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001396:	04db      	lsls	r3, r3, #19
 8001398:	d49f      	bmi.n	80012da <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800139a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	62b3      	str	r3, [r6, #40]	; 0x28
 80013a2:	e79b      	b.n	80012dc <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013a4:	2029      	movs	r0, #41	; 0x29
 80013a6:	e7a5      	b.n	80012f4 <HAL_ADC_PollForConversion+0xa0>
 80013a8:	20000028 	.word	0x20000028
 80013ac:	24924924 	.word	0x24924924
 80013b0:	12492492 	.word	0x12492492
 80013b4:	00249249 	.word	0x00249249

080013b8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013b8:	6803      	ldr	r3, [r0, #0]
 80013ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80013c0:	2300      	movs	r3, #0
{ 
 80013c2:	b530      	push	{r4, r5, lr}
 80013c4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80013c6:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d074      	beq.n	80014ba <HAL_ADC_ConfigChannel+0xfa>
 80013d0:	2301      	movs	r3, #1
 80013d2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013d6:	684b      	ldr	r3, [r1, #4]
 80013d8:	4602      	mov	r2, r0
 80013da:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013dc:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 80013de:	d932      	bls.n	8001446 <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013e0:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 80013e6:	d84e      	bhi.n	8001486 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013e8:	f04f 0c1f 	mov.w	ip, #31
 80013ec:	6808      	ldr	r0, [r1, #0]
 80013ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80013f0:	3b23      	subs	r3, #35	; 0x23
 80013f2:	fa00 fe03 	lsl.w	lr, r0, r3
 80013f6:	fa0c f303 	lsl.w	r3, ip, r3
 80013fa:	ea25 0303 	bic.w	r3, r5, r3
 80013fe:	ea43 030e 	orr.w	r3, r3, lr
 8001402:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001404:	2809      	cmp	r0, #9
 8001406:	d930      	bls.n	800146a <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001408:	f04f 0c07 	mov.w	ip, #7
 800140c:	688d      	ldr	r5, [r1, #8]
 800140e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8001412:	68e3      	ldr	r3, [r4, #12]
 8001414:	391e      	subs	r1, #30
 8001416:	408d      	lsls	r5, r1
 8001418:	fa0c f101 	lsl.w	r1, ip, r1
 800141c:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001420:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001424:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001426:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001428:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800142a:	d844      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800142c:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <HAL_ADC_ConfigChannel+0x128>)
 800142e:	429c      	cmp	r4, r3
 8001430:	d038      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 8001432:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001434:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800143c:	2300      	movs	r3, #0
 800143e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001442:	b003      	add	sp, #12
 8001444:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001446:	f04f 0c1f 	mov.w	ip, #31
 800144a:	6808      	ldr	r0, [r1, #0]
 800144c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001450:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001452:	3b05      	subs	r3, #5
 8001454:	fa00 fe03 	lsl.w	lr, r0, r3
 8001458:	fa0c f303 	lsl.w	r3, ip, r3
 800145c:	ea25 0303 	bic.w	r3, r5, r3
 8001460:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001464:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001466:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001468:	d8ce      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800146a:	2507      	movs	r5, #7
 800146c:	6889      	ldr	r1, [r1, #8]
 800146e:	6923      	ldr	r3, [r4, #16]
 8001470:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001474:	4081      	lsls	r1, r0
 8001476:	fa05 f000 	lsl.w	r0, r5, r0
 800147a:	ea23 0300 	bic.w	r3, r3, r0
 800147e:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001480:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001482:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001484:	e7da      	b.n	800143c <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001486:	f04f 0c1f 	mov.w	ip, #31
 800148a:	6808      	ldr	r0, [r1, #0]
 800148c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800148e:	3b41      	subs	r3, #65	; 0x41
 8001490:	fa00 fe03 	lsl.w	lr, r0, r3
 8001494:	fa0c f303 	lsl.w	r3, ip, r3
 8001498:	ea25 0303 	bic.w	r3, r5, r3
 800149c:	ea43 030e 	orr.w	r3, r3, lr
 80014a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014a2:	e7af      	b.n	8001404 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014a4:	68a3      	ldr	r3, [r4, #8]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	d405      	bmi.n	80014b6 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014aa:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ac:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014b2:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014b4:	d004      	beq.n	80014c0 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b6:	2000      	movs	r0, #0
 80014b8:	e7c0      	b.n	800143c <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 80014ba:	2002      	movs	r0, #2
}
 80014bc:	b003      	add	sp, #12
 80014be:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_ADC_ConfigChannel+0x12c>)
 80014c2:	490b      	ldr	r1, [pc, #44]	; (80014f0 <HAL_ADC_ConfigChannel+0x130>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fba1 1303 	umull	r1, r3, r1, r3
 80014ca:	0c9b      	lsrs	r3, r3, #18
 80014cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80014d4:	9b01      	ldr	r3, [sp, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0ed      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	3b01      	subs	r3, #1
 80014de:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80014e0:	9b01      	ldr	r3, [sp, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f9      	bne.n	80014da <HAL_ADC_ConfigChannel+0x11a>
 80014e6:	e7e6      	b.n	80014b6 <HAL_ADC_ConfigChannel+0xf6>
 80014e8:	40012400 	.word	0x40012400
 80014ec:	20000028 	.word	0x20000028
 80014f0:	431bde83 	.word	0x431bde83

080014f4 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80014f4:	2300      	movs	r3, #0
{
 80014f6:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014f8:	6802      	ldr	r2, [r0, #0]
{
 80014fa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80014fc:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014fe:	6893      	ldr	r3, [r2, #8]
 8001500:	07d9      	lsls	r1, r3, #31
 8001502:	d427      	bmi.n	8001554 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <ADC_Enable+0x80>)
 8001506:	4604      	mov	r4, r0
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	481b      	ldr	r0, [pc, #108]	; (8001578 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 800150c:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800150e:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8001512:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001516:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8001518:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800151a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800151c:	9b01      	ldr	r3, [sp, #4]
 800151e:	b12b      	cbz	r3, 800152c <ADC_Enable+0x38>
    {
      wait_loop_index--;
 8001520:	9b01      	ldr	r3, [sp, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001526:	9b01      	ldr	r3, [sp, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f9      	bne.n	8001520 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800152c:	f7ff fe7a 	bl	8001224 <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001530:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001532:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	07da      	lsls	r2, r3, #31
 8001538:	d40c      	bmi.n	8001554 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800153a:	f7ff fe73 	bl	8001224 <HAL_GetTick>
 800153e:	1b43      	subs	r3, r0, r5
 8001540:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001542:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001544:	d903      	bls.n	800154e <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	f012 0201 	ands.w	r2, r2, #1
 800154c:	d005      	beq.n	800155a <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	07db      	lsls	r3, r3, #31
 8001552:	d5f2      	bpl.n	800153a <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001554:	2000      	movs	r0, #0
}
 8001556:	b003      	add	sp, #12
 8001558:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800155e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001568:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800156a:	4303      	orrs	r3, r0
 800156c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800156e:	b003      	add	sp, #12
 8001570:	bd30      	pop	{r4, r5, pc}
 8001572:	bf00      	nop
 8001574:	20000028 	.word	0x20000028
 8001578:	431bde83 	.word	0x431bde83

0800157c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800157c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001580:	2b01      	cmp	r3, #1
 8001582:	d038      	beq.n	80015f6 <HAL_ADC_Start+0x7a>
 8001584:	2301      	movs	r3, #1
{
 8001586:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001588:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800158c:	4604      	mov	r4, r0
 800158e:	f7ff ffb1 	bl	80014f4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001592:	bb60      	cbnz	r0, 80015ee <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8001594:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001596:	6822      	ldr	r2, [r4, #0]
 8001598:	4929      	ldr	r1, [pc, #164]	; (8001640 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800159a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015a6:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 80015a8:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015aa:	d026      	beq.n	80015fa <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015b2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015b4:	6853      	ldr	r3, [r2, #4]
 80015b6:	0559      	lsls	r1, r3, #21
 80015b8:	d42b      	bmi.n	8001612 <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80015bc:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015be:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015c2:	bf18      	it	ne
 80015c4:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80015c6:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015ca:	bf18      	it	ne
 80015cc:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80015d0:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015d2:	f06f 0302 	mvn.w	r3, #2
 80015d6:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015d8:	6893      	ldr	r3, [r2, #8]
 80015da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015e2:	d01d      	beq.n	8001620 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015e4:	6893      	ldr	r3, [r2, #8]
 80015e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015ea:	6093      	str	r3, [r2, #8]
}
 80015ec:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 80015ee:	2300      	movs	r3, #0
 80015f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80015f4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80015f6:	2002      	movs	r0, #2
}
 80015f8:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_ADC_Start+0xc8>)
 80015fc:	6859      	ldr	r1, [r3, #4]
 80015fe:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8001602:	d0d3      	beq.n	80015ac <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001604:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001606:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800160a:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	055b      	lsls	r3, r3, #21
 8001610:	d5d3      	bpl.n	80015ba <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001614:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800161c:	62a3      	str	r3, [r4, #40]	; 0x28
 800161e:	e7cc      	b.n	80015ba <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_ADC_Start+0xc4>)
 8001622:	429a      	cmp	r2, r3
 8001624:	d004      	beq.n	8001630 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001626:	6893      	ldr	r3, [r2, #8]
 8001628:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800162c:	6093      	str	r3, [r2, #8]
}
 800162e:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001630:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001634:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001636:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800163a:	d1d3      	bne.n	80015e4 <HAL_ADC_Start+0x68>
 800163c:	e7f3      	b.n	8001626 <HAL_ADC_Start+0xaa>
 800163e:	bf00      	nop
 8001640:	40012800 	.word	0x40012800
 8001644:	40012400 	.word	0x40012400

08001648 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001648:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800164a:	6803      	ldr	r3, [r0, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	07d4      	lsls	r4, r2, #31
 8001650:	d401      	bmi.n	8001656 <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001652:	2000      	movs	r0, #0
}
 8001654:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001656:	4604      	mov	r4, r0
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001660:	f7ff fde0 	bl	8001224 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001664:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001666:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	07d9      	lsls	r1, r3, #31
 800166c:	d5f1      	bpl.n	8001652 <ADC_ConversionStop_Disable+0xa>
 800166e:	e002      	b.n	8001676 <ADC_ConversionStop_Disable+0x2e>
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	07db      	lsls	r3, r3, #31
 8001674:	d5ed      	bpl.n	8001652 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001676:	f7ff fdd5 	bl	8001224 <HAL_GetTick>
 800167a:	1b43      	subs	r3, r0, r5
 800167c:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 800167e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001680:	d9f6      	bls.n	8001670 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	07d2      	lsls	r2, r2, #31
 8001686:	d5f3      	bpl.n	8001670 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8001688:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800168c:	f043 0310 	orr.w	r3, r3, #16
 8001690:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001694:	4303      	orrs	r3, r0
 8001696:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001698:	bd38      	pop	{r3, r4, r5, pc}
 800169a:	bf00      	nop

0800169c <HAL_ADC_Init>:
  if(hadc == NULL)
 800169c:	2800      	cmp	r0, #0
 800169e:	d075      	beq.n	800178c <HAL_ADC_Init+0xf0>
{
 80016a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016a4:	4604      	mov	r4, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d052      	beq.n	8001750 <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016aa:	4620      	mov	r0, r4
 80016ac:	f7ff ffcc 	bl	8001648 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016b2:	f013 0310 	ands.w	r3, r3, #16
 80016b6:	d145      	bne.n	8001744 <HAL_ADC_Init+0xa8>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d143      	bne.n	8001744 <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 80016bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016be:	4d4a      	ldr	r5, [pc, #296]	; (80017e8 <HAL_ADC_Init+0x14c>)
 80016c0:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80016c2:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80016c6:	f021 0102 	bic.w	r1, r1, #2
 80016ca:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016ce:	42aa      	cmp	r2, r5
    ADC_STATE_CLR_SET(hadc->State,
 80016d0:	62a1      	str	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016d2:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016d4:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016d6:	d053      	beq.n	8001780 <HAL_ADC_Init+0xe4>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016d8:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016da:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 80016de:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016e0:	68a5      	ldr	r5, [r4, #8]
 80016e2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80016e6:	d039      	beq.n	800175c <HAL_ADC_Init+0xc0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e8:	f894 e014 	ldrb.w	lr, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016ec:	2d01      	cmp	r5, #1
 80016ee:	bf0c      	ite	eq
 80016f0:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 80016f4:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016f8:	f1be 0f01 	cmp.w	lr, #1
 80016fc:	d052      	beq.n	80017a4 <HAL_ADC_Init+0x108>
      MODIFY_REG(hadc->Instance->CR1,
 80016fe:	6856      	ldr	r6, [r2, #4]
 8001700:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001704:	ea46 060c 	orr.w	r6, r6, ip
 8001708:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800170a:	6897      	ldr	r7, [r2, #8]
 800170c:	4e37      	ldr	r6, [pc, #220]	; (80017ec <HAL_ADC_Init+0x150>)
 800170e:	403e      	ands	r6, r7
 8001710:	430e      	orrs	r6, r1
 8001712:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001714:	2d01      	cmp	r5, #1
 8001716:	d02f      	beq.n	8001778 <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 8001718:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800171a:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 800171e:	ea4c 0303 	orr.w	r3, ip, r3
 8001722:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001724:	6892      	ldr	r2, [r2, #8]
 8001726:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_ADC_Init+0x154>)
 8001728:	4013      	ands	r3, r2
 800172a:	4299      	cmp	r1, r3
 800172c:	d030      	beq.n	8001790 <HAL_ADC_Init+0xf4>
      tmp_hal_status = HAL_ERROR;
 800172e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001730:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001732:	f023 0312 	bic.w	r3, r3, #18
 8001736:	f043 0310 	orr.w	r3, r3, #16
 800173a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800173e:	4303      	orrs	r3, r0
 8001740:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001744:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001746:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800174e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001750:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001752:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001756:	f7ff fc61 	bl	800101c <HAL_ADC_MspInit>
 800175a:	e7a6      	b.n	80016aa <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800175c:	7d27      	ldrb	r7, [r4, #20]
 800175e:	2f01      	cmp	r7, #1
 8001760:	d01f      	beq.n	80017a2 <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CR1,
 8001762:	6853      	ldr	r3, [r2, #4]
 8001764:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800176e:	6895      	ldr	r5, [r2, #8]
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_ADC_Init+0x150>)
 8001772:	402b      	ands	r3, r5
 8001774:	430b      	orrs	r3, r1
 8001776:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001778:	6923      	ldr	r3, [r4, #16]
 800177a:	3b01      	subs	r3, #1
 800177c:	051b      	lsls	r3, r3, #20
 800177e:	e7cb      	b.n	8001718 <HAL_ADC_Init+0x7c>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001780:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
 8001784:	bf08      	it	eq
 8001786:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
 800178a:	e7a5      	b.n	80016d8 <HAL_ADC_Init+0x3c>
    return HAL_ERROR;
 800178c:	2001      	movs	r0, #1
}
 800178e:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8001790:	2300      	movs	r3, #0
 8001792:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80017a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017a2:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a4:	b1c6      	cbz	r6, 80017d8 <HAL_ADC_Init+0x13c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80017a8:	f046 0620 	orr.w	r6, r6, #32
 80017ac:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017b0:	f046 0601 	orr.w	r6, r6, #1
 80017b4:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 80017b6:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017b8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80017bc:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80017c0:	ea46 060c 	orr.w	r6, r6, ip
 80017c4:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80017c6:	6897      	ldr	r7, [r2, #8]
 80017c8:	4e08      	ldr	r6, [pc, #32]	; (80017ec <HAL_ADC_Init+0x150>)
 80017ca:	ea06 0607 	and.w	r6, r6, r7
 80017ce:	ea46 0601 	orr.w	r6, r6, r1
 80017d2:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d4:	d19e      	bne.n	8001714 <HAL_ADC_Init+0x78>
 80017d6:	e7cf      	b.n	8001778 <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017d8:	69a6      	ldr	r6, [r4, #24]
 80017da:	3e01      	subs	r6, #1
 80017dc:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 80017e0:	f446 6c00 	orr.w	ip, r6, #2048	; 0x800
 80017e4:	e7e7      	b.n	80017b6 <HAL_ADC_Init+0x11a>
 80017e6:	bf00      	nop
 80017e8:	40013c00 	.word	0x40013c00
 80017ec:	ffe1f7fd 	.word	0xffe1f7fd
 80017f0:	ff1f0efe 	.word	0xff1f0efe

080017f4 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80017f4:	2300      	movs	r3, #0
{
 80017f6:	b570      	push	{r4, r5, r6, lr}
 80017f8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80017fa:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017fc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001800:	2b01      	cmp	r3, #1
 8001802:	d05f      	beq.n	80018c4 <HAL_ADCEx_Calibration_Start+0xd0>
 8001804:	2301      	movs	r3, #1
 8001806:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800180a:	4604      	mov	r4, r0
 800180c:	f7ff ff1c 	bl	8001648 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001810:	4605      	mov	r5, r0
 8001812:	b128      	cbz	r0, 8001820 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001814:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 8001816:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8001818:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800181c:	b002      	add	sp, #8
 800181e:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001820:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001822:	4a31      	ldr	r2, [pc, #196]	; (80018e8 <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 8001824:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001828:	f023 0302 	bic.w	r3, r3, #2
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001832:	2002      	movs	r0, #2
 8001834:	6816      	ldr	r6, [r2, #0]
 8001836:	f000 fd4b 	bl	80022d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800183a:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800183e:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8001840:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 8001842:	9b01      	ldr	r3, [sp, #4]
 8001844:	b12b      	cbz	r3, 8001852 <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8001846:	9b01      	ldr	r3, [sp, #4]
 8001848:	3b01      	subs	r3, #1
 800184a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800184c:	9b01      	ldr	r3, [sp, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f9      	bne.n	8001846 <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 8001852:	4620      	mov	r0, r4
 8001854:	f7ff fe4e 	bl	80014f4 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001858:	6822      	ldr	r2, [r4, #0]
 800185a:	6893      	ldr	r3, [r2, #8]
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001862:	f7ff fcdf 	bl	8001224 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001866:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8001868:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	0711      	lsls	r1, r2, #28
 800186e:	d50b      	bpl.n	8001888 <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001870:	f7ff fcd8 	bl	8001224 <HAL_GetTick>
 8001874:	1b83      	subs	r3, r0, r6
 8001876:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001878:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800187a:	d902      	bls.n	8001882 <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	0712      	lsls	r2, r2, #28
 8001880:	d424      	bmi.n	80018cc <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	0710      	lsls	r0, r2, #28
 8001886:	d4f3      	bmi.n	8001870 <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	f042 0204 	orr.w	r2, r2, #4
 800188e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001890:	f7ff fcc8 	bl	8001224 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001894:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8001896:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	0759      	lsls	r1, r3, #29
 800189c:	d50b      	bpl.n	80018b6 <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800189e:	f7ff fcc1 	bl	8001224 <HAL_GetTick>
 80018a2:	1b83      	subs	r3, r0, r6
 80018a4:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80018a6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018a8:	d902      	bls.n	80018b0 <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	0752      	lsls	r2, r2, #29
 80018ae:	d40d      	bmi.n	80018cc <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	075b      	lsls	r3, r3, #29
 80018b4:	d4f3      	bmi.n	800189e <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 80018b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018b8:	f023 0303 	bic.w	r3, r3, #3
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80018c2:	e7a7      	b.n	8001814 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 80018c4:	2502      	movs	r5, #2
}
 80018c6:	4628      	mov	r0, r5
 80018c8:	b002      	add	sp, #8
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 80018cc:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 80018ce:	2200      	movs	r2, #0
}
 80018d0:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 80018d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80018d4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 80018d8:	f023 0312 	bic.w	r3, r3, #18
 80018dc:	f043 0310 	orr.w	r3, r3, #16
 80018e0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80018e2:	b002      	add	sp, #8
 80018e4:	bd70      	pop	{r4, r5, r6, pc}
 80018e6:	bf00      	nop
 80018e8:	20000028 	.word	0x20000028

080018ec <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ec:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4906      	ldr	r1, [pc, #24]	; (800190c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001908:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b500      	push	{lr}
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191a:	f1c3 0e07 	rsb	lr, r3, #7
 800191e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001922:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001926:	bf28      	it	cs
 8001928:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192c:	f1bc 0f06 	cmp.w	ip, #6
 8001930:	d91b      	bls.n	800196a <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001932:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	fa0c fc03 	lsl.w	ip, ip, r3
 800193c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001944:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001948:	ea21 010c 	bic.w	r1, r1, ip
 800194c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800194e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001954:	db0c      	blt.n	8001970 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	0109      	lsls	r1, r1, #4
 8001958:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800195c:	b2c9      	uxtb	r1, r1
 800195e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001962:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001966:	f85d fb04 	ldr.w	pc, [sp], #4
 800196a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196c:	4613      	mov	r3, r2
 800196e:	e7e7      	b.n	8001940 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_NVIC_SetPriority+0x78>)
 8001972:	f000 000f 	and.w	r0, r0, #15
 8001976:	0109      	lsls	r1, r1, #4
 8001978:	b2c9      	uxtb	r1, r1
 800197a:	4403      	add	r3, r0
 800197c:	7619      	strb	r1, [r3, #24]
 800197e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00
 8001988:	e000ecfc 	.word	0xe000ecfc

0800198c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	3801      	subs	r0, #1
 800198e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001992:	d20f      	bcs.n	80019b4 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001994:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a0:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	4c05      	ldr	r4, [pc, #20]	; (80019b8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019aa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80019ae:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b0:	6119      	str	r1, [r3, #16]
 80019b2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019b4:	2001      	movs	r0, #1
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c0:	680e      	ldr	r6, [r1, #0]
{
 80019c2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c4:	2e00      	cmp	r6, #0
 80019c6:	f000 80be 	beq.w	8001b46 <HAL_GPIO_Init+0x18a>
 80019ca:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019cc:	4f85      	ldr	r7, [pc, #532]	; (8001be4 <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 80019ce:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80019d0:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d2:	4d85      	ldr	r5, [pc, #532]	; (8001be8 <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 80019d4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8001bec <HAL_GPIO_Init+0x230>
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80019da:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019dc:	fa36 f403 	lsrs.w	r4, r6, r3
 80019e0:	f102 0204 	add.w	r2, r2, #4
 80019e4:	f000 80af 	beq.w	8001b46 <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 80019e8:	2401      	movs	r4, #1
 80019ea:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 80019ec:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f0:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 80019f4:	d1f1      	bne.n	80019da <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 80019f6:	684e      	ldr	r6, [r1, #4]
 80019f8:	2e12      	cmp	r6, #18
 80019fa:	f200 80a7 	bhi.w	8001b4c <HAL_GPIO_Init+0x190>
 80019fe:	2e12      	cmp	r6, #18
 8001a00:	d81a      	bhi.n	8001a38 <HAL_GPIO_Init+0x7c>
 8001a02:	e8df f006 	tbb	[pc, r6]
 8001a06:	c2b0      	.short	0xc2b0
 8001a08:	1919d7be 	.word	0x1919d7be
 8001a0c:	19191919 	.word	0x19191919
 8001a10:	19191919 	.word	0x19191919
 8001a14:	ba191919 	.word	0xba191919
 8001a18:	c5          	.byte	0xc5
 8001a19:	00          	.byte	0x00
 8001a1a:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8001bf0 <HAL_GPIO_Init+0x234>
 8001a1e:	4576      	cmp	r6, lr
 8001a20:	f000 80a1 	beq.w	8001b66 <HAL_GPIO_Init+0x1aa>
 8001a24:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001a28:	4576      	cmp	r6, lr
 8001a2a:	f000 809c 	beq.w	8001b66 <HAL_GPIO_Init+0x1aa>
 8001a2e:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8001a32:	4576      	cmp	r6, lr
 8001a34:	f000 8097 	beq.w	8001b66 <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a38:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001a3c:	bf9c      	itt	ls
 8001a3e:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a40:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a42:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a46:	bf84      	itt	hi
 8001a48:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a50:	f8de 4000 	ldr.w	r4, [lr]
 8001a54:	fa0a f90b 	lsl.w	r9, sl, fp
 8001a58:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001a5c:	ea24 040b 	bic.w	r4, r4, fp
 8001a60:	ea44 0409 	orr.w	r4, r4, r9
 8001a64:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a68:	684c      	ldr	r4, [r1, #4]
 8001a6a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001a6e:	f000 8082 	beq.w	8001b76 <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a72:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a76:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7a:	f04e 0e01 	orr.w	lr, lr, #1
 8001a7e:	f8c7 e018 	str.w	lr, [r7, #24]
 8001a82:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a86:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8a:	f00e 0e01 	and.w	lr, lr, #1
 8001a8e:	f8cd e004 	str.w	lr, [sp, #4]
 8001a92:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001a96:	f023 0e03 	bic.w	lr, r3, #3
 8001a9a:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8001a9e:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001aa2:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa6:	fa06 f609 	lsl.w	r6, r6, r9
 8001aaa:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aae:	f8df b144 	ldr.w	fp, [pc, #324]	; 8001bf4 <HAL_GPIO_Init+0x238>
 8001ab2:	4558      	cmp	r0, fp
 8001ab4:	d01b      	beq.n	8001aee <HAL_GPIO_Init+0x132>
 8001ab6:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8001aba:	4558      	cmp	r0, fp
 8001abc:	d073      	beq.n	8001ba6 <HAL_GPIO_Init+0x1ea>
 8001abe:	f8df b138 	ldr.w	fp, [pc, #312]	; 8001bf8 <HAL_GPIO_Init+0x23c>
 8001ac2:	4558      	cmp	r0, fp
 8001ac4:	d068      	beq.n	8001b98 <HAL_GPIO_Init+0x1dc>
 8001ac6:	f8df b134 	ldr.w	fp, [pc, #308]	; 8001bfc <HAL_GPIO_Init+0x240>
 8001aca:	4558      	cmp	r0, fp
 8001acc:	d07c      	beq.n	8001bc8 <HAL_GPIO_Init+0x20c>
 8001ace:	f8df b130 	ldr.w	fp, [pc, #304]	; 8001c00 <HAL_GPIO_Init+0x244>
 8001ad2:	4558      	cmp	r0, fp
 8001ad4:	d07f      	beq.n	8001bd6 <HAL_GPIO_Init+0x21a>
 8001ad6:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8001c04 <HAL_GPIO_Init+0x248>
 8001ada:	4558      	cmp	r0, fp
 8001adc:	bf0c      	ite	eq
 8001ade:	f04f 0b05 	moveq.w	fp, #5
 8001ae2:	f04f 0b06 	movne.w	fp, #6
 8001ae6:	fa0b f909 	lsl.w	r9, fp, r9
 8001aea:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001aee:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001af2:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001af8:	bf14      	ite	ne
 8001afa:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001afe:	ea26 060c 	biceq.w	r6, r6, ip
 8001b02:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001b04:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b06:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001b0a:	bf14      	ite	ne
 8001b0c:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b10:	ea26 060c 	biceq.w	r6, r6, ip
 8001b14:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b16:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b18:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b1c:	bf14      	ite	ne
 8001b1e:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b22:	ea26 060c 	biceq.w	r6, r6, ip
 8001b26:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b28:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b2c:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b2e:	d01f      	beq.n	8001b70 <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b30:	ea44 040c 	orr.w	r4, r4, ip
 8001b34:	60ec      	str	r4, [r5, #12]
 8001b36:	680e      	ldr	r6, [r1, #0]
	position++;
 8001b38:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3a:	fa36 f403 	lsrs.w	r4, r6, r3
 8001b3e:	f102 0204 	add.w	r2, r2, #4
 8001b42:	f47f af51 	bne.w	80019e8 <HAL_GPIO_Init+0x2c>
  }
}
 8001b46:	b003      	add	sp, #12
 8001b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001b4c:	4546      	cmp	r6, r8
 8001b4e:	d00a      	beq.n	8001b66 <HAL_GPIO_Init+0x1aa>
 8001b50:	f67f af63 	bls.w	8001a1a <HAL_GPIO_Init+0x5e>
 8001b54:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8001c08 <HAL_GPIO_Init+0x24c>
 8001b58:	4576      	cmp	r6, lr
 8001b5a:	d004      	beq.n	8001b66 <HAL_GPIO_Init+0x1aa>
 8001b5c:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001b60:	4576      	cmp	r6, lr
 8001b62:	f47f af69 	bne.w	8001a38 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b66:	688e      	ldr	r6, [r1, #8]
 8001b68:	bb3e      	cbnz	r6, 8001bba <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b6a:	f04f 0a04 	mov.w	sl, #4
 8001b6e:	e763      	b.n	8001a38 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b70:	ea24 040c 	bic.w	r4, r4, ip
 8001b74:	60ec      	str	r4, [r5, #12]
 8001b76:	680e      	ldr	r6, [r1, #0]
 8001b78:	e72f      	b.n	80019da <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b7a:	68cc      	ldr	r4, [r1, #12]
 8001b7c:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001b80:	e75a      	b.n	8001a38 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b82:	68cc      	ldr	r4, [r1, #12]
 8001b84:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001b88:	e756      	b.n	8001a38 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b8a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8001b8e:	e753      	b.n	8001a38 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b90:	68cc      	ldr	r4, [r1, #12]
 8001b92:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8001b96:	e74f      	b.n	8001a38 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b98:	f04f 0b02 	mov.w	fp, #2
 8001b9c:	fa0b f909 	lsl.w	r9, fp, r9
 8001ba0:	ea46 0609 	orr.w	r6, r6, r9
 8001ba4:	e7a3      	b.n	8001aee <HAL_GPIO_Init+0x132>
 8001ba6:	f04f 0b01 	mov.w	fp, #1
 8001baa:	fa0b f909 	lsl.w	r9, fp, r9
 8001bae:	ea46 0609 	orr.w	r6, r6, r9
 8001bb2:	e79c      	b.n	8001aee <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8001bb4:	f04f 0a00 	mov.w	sl, #0
 8001bb8:	e73e      	b.n	8001a38 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bba:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bbc:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8001bc0:	bf0c      	ite	eq
 8001bc2:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8001bc4:	6144      	strne	r4, [r0, #20]
 8001bc6:	e737      	b.n	8001a38 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bc8:	f04f 0b03 	mov.w	fp, #3
 8001bcc:	fa0b f909 	lsl.w	r9, fp, r9
 8001bd0:	ea46 0609 	orr.w	r6, r6, r9
 8001bd4:	e78b      	b.n	8001aee <HAL_GPIO_Init+0x132>
 8001bd6:	f04f 0b04 	mov.w	fp, #4
 8001bda:	fa0b f909 	lsl.w	r9, fp, r9
 8001bde:	ea46 0609 	orr.w	r6, r6, r9
 8001be2:	e784      	b.n	8001aee <HAL_GPIO_Init+0x132>
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010400 	.word	0x40010400
 8001bec:	10220000 	.word	0x10220000
 8001bf0:	10120000 	.word	0x10120000
 8001bf4:	40010800 	.word	0x40010800
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40011400 	.word	0x40011400
 8001c00:	40011800 	.word	0x40011800
 8001c04:	40011c00 	.word	0x40011c00
 8001c08:	10310000 	.word	0x10310000

08001c0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c0c:	b902      	cbnz	r2, 8001c10 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c0e:	0409      	lsls	r1, r1, #16
 8001c10:	6101      	str	r1, [r0, #16]
  }
}
 8001c12:	4770      	bx	lr

08001c14 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c14:	2800      	cmp	r0, #0
 8001c16:	f000 81b6 	beq.w	8001f86 <HAL_RCC_OscConfig+0x372>
{
 8001c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	6803      	ldr	r3, [r0, #0]
 8001c20:	4604      	mov	r4, r0
 8001c22:	07dd      	lsls	r5, r3, #31
{
 8001c24:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c26:	d535      	bpl.n	8001c94 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c28:	499a      	ldr	r1, [pc, #616]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001c2a:	684a      	ldr	r2, [r1, #4]
 8001c2c:	f002 020c 	and.w	r2, r2, #12
 8001c30:	2a04      	cmp	r2, #4
 8001c32:	f000 80ef 	beq.w	8001e14 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c36:	684a      	ldr	r2, [r1, #4]
 8001c38:	f002 020c 	and.w	r2, r2, #12
 8001c3c:	2a08      	cmp	r2, #8
 8001c3e:	f000 80e5 	beq.w	8001e0c <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c42:	6863      	ldr	r3, [r4, #4]
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d010      	beq.n	8001c6c <HAL_RCC_OscConfig+0x58>
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 810c 	beq.w	8001e68 <HAL_RCC_OscConfig+0x254>
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c54:	f000 8182 	beq.w	8001f5c <HAL_RCC_OscConfig+0x348>
 8001c58:	4b8e      	ldr	r3, [pc, #568]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e004      	b.n	8001c76 <HAL_RCC_OscConfig+0x62>
 8001c6c:	4a89      	ldr	r2, [pc, #548]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	6813      	ldr	r3, [r2, #0]
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fad5 	bl	8001224 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4e86      	ldr	r6, [pc, #536]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8001c7c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e005      	b.n	8001c8c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fad0 	bl	8001224 <HAL_GetTick>
 8001c84:	1b40      	subs	r0, r0, r5
 8001c86:	2864      	cmp	r0, #100	; 0x64
 8001c88:	f200 80ea 	bhi.w	8001e60 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8c:	6833      	ldr	r3, [r6, #0]
 8001c8e:	039a      	lsls	r2, r3, #14
 8001c90:	d5f6      	bpl.n	8001c80 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	079f      	lsls	r7, r3, #30
 8001c96:	d528      	bpl.n	8001cea <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c98:	4a7e      	ldr	r2, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001c9a:	6851      	ldr	r1, [r2, #4]
 8001c9c:	f011 0f0c 	tst.w	r1, #12
 8001ca0:	f000 808d 	beq.w	8001dbe <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca4:	6851      	ldr	r1, [r2, #4]
 8001ca6:	f001 010c 	and.w	r1, r1, #12
 8001caa:	2908      	cmp	r1, #8
 8001cac:	f000 8083 	beq.w	8001db6 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb0:	6923      	ldr	r3, [r4, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8118 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4b77      	ldr	r3, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4e75      	ldr	r6, [pc, #468]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8001cbe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fab0 	bl	8001224 <HAL_GetTick>
 8001cc4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff faac 	bl	8001224 <HAL_GetTick>
 8001ccc:	1b40      	subs	r0, r0, r5
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	f200 80c6 	bhi.w	8001e60 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	6833      	ldr	r3, [r6, #0]
 8001cd6:	0798      	lsls	r0, r3, #30
 8001cd8:	d5f6      	bpl.n	8001cc8 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	6833      	ldr	r3, [r6, #0]
 8001cdc:	6962      	ldr	r2, [r4, #20]
 8001cde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ce2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ce6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	071a      	lsls	r2, r3, #28
 8001cec:	d41f      	bmi.n	8001d2e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cee:	075d      	lsls	r5, r3, #29
 8001cf0:	d542      	bpl.n	8001d78 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf2:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	00d0      	lsls	r0, r2, #3
 8001cf8:	d57d      	bpl.n	8001df6 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	4e67      	ldr	r6, [pc, #412]	; (8001e9c <HAL_RCC_OscConfig+0x288>)
 8001cfe:	6833      	ldr	r3, [r6, #0]
 8001d00:	05d9      	lsls	r1, r3, #23
 8001d02:	f140 809d 	bpl.w	8001e40 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d06:	68e3      	ldr	r3, [r4, #12]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	f000 80fe 	beq.w	8001f0a <HAL_RCC_OscConfig+0x2f6>
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80ca 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x294>
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001d18:	6a1a      	ldr	r2, [r3, #32]
 8001d1a:	f000 812c 	beq.w	8001f76 <HAL_RCC_OscConfig+0x362>
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	621a      	str	r2, [r3, #32]
 8001d24:	6a1a      	ldr	r2, [r3, #32]
 8001d26:	f022 0204 	bic.w	r2, r2, #4
 8001d2a:	621a      	str	r2, [r3, #32]
 8001d2c:	e0f2      	b.n	8001f14 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2e:	69a3      	ldr	r3, [r4, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d04f      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8001d34:	2201      	movs	r2, #1
 8001d36:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d38:	4e56      	ldr	r6, [pc, #344]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8001d3a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fa71 	bl	8001224 <HAL_GetTick>
 8001d42:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d44:	e005      	b.n	8001d52 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff fa6d 	bl	8001224 <HAL_GetTick>
 8001d4a:	1b40      	subs	r0, r0, r5
 8001d4c:	2802      	cmp	r0, #2
 8001d4e:	f200 8087 	bhi.w	8001e60 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001d54:	079b      	lsls	r3, r3, #30
 8001d56:	d5f6      	bpl.n	8001d46 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d58:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_RCC_OscConfig+0x28c>)
 8001d5a:	4a52      	ldr	r2, [pc, #328]	; (8001ea4 <HAL_RCC_OscConfig+0x290>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0a5b      	lsrs	r3, r3, #9
 8001d64:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001d66:	bf00      	nop
  }
  while (Delay --);
 8001d68:	9b01      	ldr	r3, [sp, #4]
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	9201      	str	r2, [sp, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	075d      	lsls	r5, r3, #29
 8001d76:	d4bc      	bmi.n	8001cf2 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d78:	69e0      	ldr	r0, [r4, #28]
 8001d7a:	b1c0      	cbz	r0, 8001dae <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7c:	4d45      	ldr	r5, [pc, #276]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001d7e:	686b      	ldr	r3, [r5, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	f000 80d8 	beq.w	8001f3a <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001d90:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d92:	f000 80fa 	beq.w	8001f8a <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8001d96:	f7ff fa45 	bl	8001224 <HAL_GetTick>
 8001d9a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	e004      	b.n	8001da8 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7ff fa41 	bl	8001224 <HAL_GetTick>
 8001da2:	1b00      	subs	r0, r0, r4
 8001da4:	2802      	cmp	r0, #2
 8001da6:	d85b      	bhi.n	8001e60 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	019b      	lsls	r3, r3, #6
 8001dac:	d4f7      	bmi.n	8001d9e <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8001dae:	2000      	movs	r0, #0
}
 8001db0:	b002      	add	sp, #8
 8001db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db6:	6852      	ldr	r2, [r2, #4]
 8001db8:	03d6      	lsls	r6, r2, #15
 8001dba:	f53f af79 	bmi.w	8001cb0 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	4a35      	ldr	r2, [pc, #212]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	0795      	lsls	r5, r2, #30
 8001dc4:	d530      	bpl.n	8001e28 <HAL_RCC_OscConfig+0x214>
 8001dc6:	6922      	ldr	r2, [r4, #16]
 8001dc8:	2a01      	cmp	r2, #1
 8001dca:	d02d      	beq.n	8001e28 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
}
 8001dce:	b002      	add	sp, #8
 8001dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001dd4:	4a30      	ldr	r2, [pc, #192]	; (8001e98 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd6:	4e2f      	ldr	r6, [pc, #188]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8001dd8:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fa22 	bl	8001224 <HAL_GetTick>
 8001de0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de2:	e004      	b.n	8001dee <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff fa1e 	bl	8001224 <HAL_GetTick>
 8001de8:	1b40      	subs	r0, r0, r5
 8001dea:	2802      	cmp	r0, #2
 8001dec:	d838      	bhi.n	8001e60 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001df0:	079f      	lsls	r7, r3, #30
 8001df2:	d4f7      	bmi.n	8001de4 <HAL_RCC_OscConfig+0x1d0>
 8001df4:	e7bd      	b.n	8001d72 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001df8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dfe:	61da      	str	r2, [r3, #28]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001e0a:	e777      	b.n	8001cfc <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e0c:	684a      	ldr	r2, [r1, #4]
 8001e0e:	03d0      	lsls	r0, r2, #15
 8001e10:	f57f af17 	bpl.w	8001c42 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e14:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	0391      	lsls	r1, r2, #14
 8001e1a:	f57f af3b 	bpl.w	8001c94 <HAL_RCC_OscConfig+0x80>
 8001e1e:	6862      	ldr	r2, [r4, #4]
 8001e20:	2a00      	cmp	r2, #0
 8001e22:	f47f af37 	bne.w	8001c94 <HAL_RCC_OscConfig+0x80>
 8001e26:	e7d1      	b.n	8001dcc <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	491a      	ldr	r1, [pc, #104]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001e2a:	6960      	ldr	r0, [r4, #20]
 8001e2c:	680a      	ldr	r2, [r1, #0]
 8001e2e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001e32:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001e36:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e38:	071a      	lsls	r2, r3, #28
 8001e3a:	f57f af58 	bpl.w	8001cee <HAL_RCC_OscConfig+0xda>
 8001e3e:	e776      	b.n	8001d2e <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e40:	6833      	ldr	r3, [r6, #0]
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e48:	f7ff f9ec 	bl	8001224 <HAL_GetTick>
 8001e4c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	6833      	ldr	r3, [r6, #0]
 8001e50:	05da      	lsls	r2, r3, #23
 8001e52:	f53f af58 	bmi.w	8001d06 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7ff f9e5 	bl	8001224 <HAL_GetTick>
 8001e5a:	1bc0      	subs	r0, r0, r7
 8001e5c:	2864      	cmp	r0, #100	; 0x64
 8001e5e:	d9f6      	bls.n	8001e4e <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8001e60:	2003      	movs	r0, #3
}
 8001e62:	b002      	add	sp, #8
 8001e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	4d0a      	ldr	r5, [pc, #40]	; (8001e94 <HAL_RCC_OscConfig+0x280>)
 8001e6a:	682b      	ldr	r3, [r5, #0]
 8001e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e70:	602b      	str	r3, [r5, #0]
 8001e72:	682b      	ldr	r3, [r5, #0]
 8001e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e78:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e7a:	f7ff f9d3 	bl	8001224 <HAL_GetTick>
 8001e7e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e80:	e004      	b.n	8001e8c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e82:	f7ff f9cf 	bl	8001224 <HAL_GetTick>
 8001e86:	1b80      	subs	r0, r0, r6
 8001e88:	2864      	cmp	r0, #100	; 0x64
 8001e8a:	d8e9      	bhi.n	8001e60 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	039b      	lsls	r3, r3, #14
 8001e90:	d4f7      	bmi.n	8001e82 <HAL_RCC_OscConfig+0x26e>
 8001e92:	e6fe      	b.n	8001c92 <HAL_RCC_OscConfig+0x7e>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	42420000 	.word	0x42420000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	20000028 	.word	0x20000028
 8001ea4:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea8:	4e50      	ldr	r6, [pc, #320]	; (8001fec <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eae:	6a33      	ldr	r3, [r6, #32]
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6233      	str	r3, [r6, #32]
 8001eb6:	6a33      	ldr	r3, [r6, #32]
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f9b1 	bl	8001224 <HAL_GetTick>
 8001ec2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	e004      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff f9ad 	bl	8001224 <HAL_GetTick>
 8001eca:	1bc0      	subs	r0, r0, r7
 8001ecc:	4540      	cmp	r0, r8
 8001ece:	d8c7      	bhi.n	8001e60 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed0:	6a33      	ldr	r3, [r6, #32]
 8001ed2:	0798      	lsls	r0, r3, #30
 8001ed4:	d4f7      	bmi.n	8001ec6 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8001ed6:	2d00      	cmp	r5, #0
 8001ed8:	f43f af4e 	beq.w	8001d78 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001edc:	4a43      	ldr	r2, [pc, #268]	; (8001fec <HAL_RCC_OscConfig+0x3d8>)
 8001ede:	69d3      	ldr	r3, [r2, #28]
 8001ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]
 8001ee6:	e747      	b.n	8001d78 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8001ee8:	4a41      	ldr	r2, [pc, #260]	; (8001ff0 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	4e40      	ldr	r6, [pc, #256]	; (8001fec <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8001eec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001eee:	f7ff f999 	bl	8001224 <HAL_GetTick>
 8001ef2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef4:	e004      	b.n	8001f00 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef6:	f7ff f995 	bl	8001224 <HAL_GetTick>
 8001efa:	1b40      	subs	r0, r0, r5
 8001efc:	2802      	cmp	r0, #2
 8001efe:	d8af      	bhi.n	8001e60 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f00:	6833      	ldr	r3, [r6, #0]
 8001f02:	0799      	lsls	r1, r3, #30
 8001f04:	d4f7      	bmi.n	8001ef6 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	e6ef      	b.n	8001cea <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0a:	4a38      	ldr	r2, [pc, #224]	; (8001fec <HAL_RCC_OscConfig+0x3d8>)
 8001f0c:	6a13      	ldr	r3, [r2, #32]
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001f14:	f7ff f986 	bl	8001224 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f18:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1e:	4f33      	ldr	r7, [pc, #204]	; (8001fec <HAL_RCC_OscConfig+0x3d8>)
 8001f20:	e004      	b.n	8001f2c <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff f97f 	bl	8001224 <HAL_GetTick>
 8001f26:	1b80      	subs	r0, r0, r6
 8001f28:	4540      	cmp	r0, r8
 8001f2a:	d899      	bhi.n	8001e60 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	079b      	lsls	r3, r3, #30
 8001f30:	d5f7      	bpl.n	8001f22 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8001f32:	2d00      	cmp	r5, #0
 8001f34:	f43f af20 	beq.w	8001d78 <HAL_RCC_OscConfig+0x164>
 8001f38:	e7d0      	b.n	8001edc <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f3a:	2801      	cmp	r0, #1
 8001f3c:	f43f af38 	beq.w	8001db0 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8001f40:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	6a22      	ldr	r2, [r4, #32]
 8001f44:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001f48:	4291      	cmp	r1, r2
 8001f4a:	f47f af3f 	bne.w	8001dcc <HAL_RCC_OscConfig+0x1b8>
 8001f4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8001f54:	1a18      	subs	r0, r3, r0
 8001f56:	bf18      	it	ne
 8001f58:	2001      	movne	r0, #1
 8001f5a:	e729      	b.n	8001db0 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f60:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e67f      	b.n	8001c76 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f76:	f042 0204 	orr.w	r2, r2, #4
 8001f7a:	621a      	str	r2, [r3, #32]
 8001f7c:	6a1a      	ldr	r2, [r3, #32]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	621a      	str	r2, [r3, #32]
 8001f84:	e7c6      	b.n	8001f14 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8001f86:	2001      	movs	r0, #1
}
 8001f88:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8001f8a:	f7ff f94b 	bl	8001224 <HAL_GetTick>
 8001f8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	e005      	b.n	8001f9e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f92:	f7ff f947 	bl	8001224 <HAL_GetTick>
 8001f96:	1b80      	subs	r0, r0, r6
 8001f98:	2802      	cmp	r0, #2
 8001f9a:	f63f af61 	bhi.w	8001e60 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	0199      	lsls	r1, r3, #6
 8001fa2:	d4f6      	bmi.n	8001f92 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fa4:	6a23      	ldr	r3, [r4, #32]
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fac:	686a      	ldr	r2, [r5, #4]
 8001fae:	68a1      	ldr	r1, [r4, #8]
 8001fb0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fba:	4d0c      	ldr	r5, [pc, #48]	; (8001fec <HAL_RCC_OscConfig+0x3d8>)
 8001fbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001fbe:	686a      	ldr	r2, [r5, #4]
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001fc6:	490a      	ldr	r1, [pc, #40]	; (8001ff0 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001fcc:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001fce:	f7ff f929 	bl	8001224 <HAL_GetTick>
 8001fd2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd4:	e005      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff f925 	bl	8001224 <HAL_GetTick>
 8001fda:	1b00      	subs	r0, r0, r4
 8001fdc:	2802      	cmp	r0, #2
 8001fde:	f63f af3f 	bhi.w	8001e60 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe2:	682b      	ldr	r3, [r5, #0]
 8001fe4:	019a      	lsls	r2, r3, #6
 8001fe6:	d5f6      	bpl.n	8001fd6 <HAL_RCC_OscConfig+0x3c2>
 8001fe8:	e6e1      	b.n	8001dae <HAL_RCC_OscConfig+0x19a>
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	42420000 	.word	0x42420000

08001ff4 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ff4:	f240 2c01 	movw	ip, #513	; 0x201
{
 8001ff8:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001ffc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ffe:	f10d 0e18 	add.w	lr, sp, #24
 8002002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002004:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8002008:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800200a:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 800200e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002010:	f003 010c 	and.w	r1, r3, #12
 8002014:	2908      	cmp	r1, #8
 8002016:	d003      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 8002018:	4812      	ldr	r0, [pc, #72]	; (8002064 <HAL_RCC_GetSysClockFreq+0x70>)
}
 800201a:	b007      	add	sp, #28
 800201c:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002020:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8002024:	3118      	adds	r1, #24
 8002026:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002028:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800202a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800202e:	d50e      	bpl.n	800204e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002030:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002032:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002034:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002038:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800203c:	3318      	adds	r3, #24
 800203e:	446b      	add	r3, sp
 8002040:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002044:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002048:	b007      	add	sp, #28
 800204a:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_RCC_GetSysClockFreq+0x74>)
 8002050:	fb03 f000 	mul.w	r0, r3, r0
}
 8002054:	b007      	add	sp, #28
 8002056:	f85d fb04 	ldr.w	pc, [sp], #4
 800205a:	bf00      	nop
 800205c:	0800afd8 	.word	0x0800afd8
 8002060:	40021000 	.word	0x40021000
 8002064:	007a1200 	.word	0x007a1200
 8002068:	003d0900 	.word	0x003d0900

0800206c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800206c:	2800      	cmp	r0, #0
 800206e:	f000 808c 	beq.w	800218a <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002072:	4a49      	ldr	r2, [pc, #292]	; (8002198 <HAL_RCC_ClockConfig+0x12c>)
{
 8002074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002078:	6813      	ldr	r3, [r2, #0]
 800207a:	4604      	mov	r4, r0
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	428b      	cmp	r3, r1
 8002082:	460d      	mov	r5, r1
 8002084:	d20c      	bcs.n	80020a0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	6813      	ldr	r3, [r2, #0]
 8002088:	f023 0307 	bic.w	r3, r3, #7
 800208c:	430b      	orrs	r3, r1
 800208e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002090:	6813      	ldr	r3, [r2, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	428b      	cmp	r3, r1
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800209a:	2001      	movs	r0, #1
}
 800209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	0798      	lsls	r0, r3, #30
 80020a4:	d514      	bpl.n	80020d0 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a6:	0759      	lsls	r1, r3, #29
 80020a8:	d504      	bpl.n	80020b4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020aa:	493c      	ldr	r1, [pc, #240]	; (800219c <HAL_RCC_ClockConfig+0x130>)
 80020ac:	684a      	ldr	r2, [r1, #4]
 80020ae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80020b2:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b4:	071a      	lsls	r2, r3, #28
 80020b6:	d504      	bpl.n	80020c2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4938      	ldr	r1, [pc, #224]	; (800219c <HAL_RCC_ClockConfig+0x130>)
 80020ba:	684a      	ldr	r2, [r1, #4]
 80020bc:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80020c0:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c2:	4936      	ldr	r1, [pc, #216]	; (800219c <HAL_RCC_ClockConfig+0x130>)
 80020c4:	68a0      	ldr	r0, [r4, #8]
 80020c6:	684a      	ldr	r2, [r1, #4]
 80020c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020cc:	4302      	orrs	r2, r0
 80020ce:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d0:	07df      	lsls	r7, r3, #31
 80020d2:	d520      	bpl.n	8002116 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d4:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020dc:	d057      	beq.n	800218e <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020de:	2a02      	cmp	r2, #2
 80020e0:	d050      	beq.n	8002184 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	0799      	lsls	r1, r3, #30
 80020e4:	d5d9      	bpl.n	800209a <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4e2d      	ldr	r6, [pc, #180]	; (800219c <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ec:	6873      	ldr	r3, [r6, #4]
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80020f6:	f7ff f895 	bl	8001224 <HAL_GetTick>
 80020fa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fc:	e004      	b.n	8002108 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fe:	f7ff f891 	bl	8001224 <HAL_GetTick>
 8002102:	1bc0      	subs	r0, r0, r7
 8002104:	4540      	cmp	r0, r8
 8002106:	d845      	bhi.n	8002194 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002108:	6873      	ldr	r3, [r6, #4]
 800210a:	6862      	ldr	r2, [r4, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002114:	d1f3      	bne.n	80020fe <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002116:	4a20      	ldr	r2, [pc, #128]	; (8002198 <HAL_RCC_ClockConfig+0x12c>)
 8002118:	6813      	ldr	r3, [r2, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	42ab      	cmp	r3, r5
 8002120:	d909      	bls.n	8002136 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	6813      	ldr	r3, [r2, #0]
 8002124:	f023 0307 	bic.w	r3, r3, #7
 8002128:	432b      	orrs	r3, r5
 800212a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212c:	6813      	ldr	r3, [r2, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	42ab      	cmp	r3, r5
 8002134:	d1b1      	bne.n	800209a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	075a      	lsls	r2, r3, #29
 800213a:	d506      	bpl.n	800214a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213c:	4917      	ldr	r1, [pc, #92]	; (800219c <HAL_RCC_ClockConfig+0x130>)
 800213e:	68e0      	ldr	r0, [r4, #12]
 8002140:	684a      	ldr	r2, [r1, #4]
 8002142:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002146:	4302      	orrs	r2, r0
 8002148:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	071b      	lsls	r3, r3, #28
 800214c:	d507      	bpl.n	800215e <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <HAL_RCC_ClockConfig+0x130>)
 8002150:	6921      	ldr	r1, [r4, #16]
 8002152:	6853      	ldr	r3, [r2, #4]
 8002154:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002158:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800215c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215e:	f7ff ff49 	bl	8001ff4 <HAL_RCC_GetSysClockFreq>
 8002162:	4603      	mov	r3, r0
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <HAL_RCC_ClockConfig+0x130>)
 8002166:	490e      	ldr	r1, [pc, #56]	; (80021a0 <HAL_RCC_ClockConfig+0x134>)
 8002168:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800216a:	480e      	ldr	r0, [pc, #56]	; (80021a4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800216c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002170:	5c89      	ldrb	r1, [r1, r2]
 8002172:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_RCC_ClockConfig+0x13c>)
 8002174:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8002176:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002178:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800217a:	f7ff f811 	bl	80011a0 <HAL_InitTick>
  return HAL_OK;
 800217e:	2000      	movs	r0, #0
}
 8002180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002184:	0198      	lsls	r0, r3, #6
 8002186:	d4ae      	bmi.n	80020e6 <HAL_RCC_ClockConfig+0x7a>
 8002188:	e787      	b.n	800209a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800218a:	2001      	movs	r0, #1
}
 800218c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	039e      	lsls	r6, r3, #14
 8002190:	d4a9      	bmi.n	80020e6 <HAL_RCC_ClockConfig+0x7a>
 8002192:	e782      	b.n	800209a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002194:	2003      	movs	r0, #3
 8002196:	e781      	b.n	800209c <HAL_RCC_ClockConfig+0x30>
 8002198:	40022000 	.word	0x40022000
 800219c:	40021000 	.word	0x40021000
 80021a0:	0800afc0 	.word	0x0800afc0
 80021a4:	20000030 	.word	0x20000030
 80021a8:	20000028 	.word	0x20000028

080021ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4905      	ldr	r1, [pc, #20]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021b4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	6810      	ldr	r0, [r2, #0]
}
 80021bc:	40d8      	lsrs	r0, r3
 80021be:	4770      	bx	lr
 80021c0:	40021000 	.word	0x40021000
 80021c4:	20000028 	.word	0x20000028
 80021c8:	0800afd0 	.word	0x0800afd0

080021cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021d0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021d2:	6800      	ldr	r0, [r0, #0]
{
 80021d4:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021d6:	07c1      	lsls	r1, r0, #31
 80021d8:	d52c      	bpl.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	00d2      	lsls	r2, r2, #3
 80021e0:	d53f      	bpl.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e2:	4d39      	ldr	r5, [pc, #228]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 80021e4:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	682b      	ldr	r3, [r5, #0]
 80021e8:	05df      	lsls	r7, r3, #23
 80021ea:	d548      	bpl.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021ec:	4d35      	ldr	r5, [pc, #212]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80021ee:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021f0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80021f4:	d011      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80021f6:	6861      	ldr	r1, [r4, #4]
 80021f8:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d00d      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002200:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002202:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002204:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002206:	4a31      	ldr	r2, [pc, #196]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002208:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800220c:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002210:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002214:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002216:	07d9      	lsls	r1, r3, #31
 8002218:	d444      	bmi.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800221a:	6861      	ldr	r1, [r4, #4]
 800221c:	4a29      	ldr	r2, [pc, #164]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800221e:	6a13      	ldr	r3, [r2, #32]
 8002220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002224:	430b      	orrs	r3, r1
 8002226:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002228:	b11e      	cbz	r6, 8002232 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	69d3      	ldr	r3, [r2, #28]
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002232:	6820      	ldr	r0, [r4, #0]
 8002234:	0783      	lsls	r3, r0, #30
 8002236:	d506      	bpl.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002238:	4922      	ldr	r1, [pc, #136]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800223a:	68a3      	ldr	r3, [r4, #8]
 800223c:	684a      	ldr	r2, [r1, #4]
 800223e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002242:	431a      	orrs	r2, r3
 8002244:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002246:	f010 0010 	ands.w	r0, r0, #16
 800224a:	d007      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800224c:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002250:	6961      	ldr	r1, [r4, #20]
 8002252:	6853      	ldr	r3, [r2, #4]
 8002254:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002258:	430b      	orrs	r3, r1
 800225a:	6053      	str	r3, [r2, #4]
}
 800225c:	b002      	add	sp, #8
 800225e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4d18      	ldr	r5, [pc, #96]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800226a:	61da      	str	r2, [r3, #28]
 800226c:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 800226e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	682b      	ldr	r3, [r5, #0]
 800227a:	05df      	lsls	r7, r3, #23
 800227c:	d4b6      	bmi.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002286:	f7fe ffcd 	bl	8001224 <HAL_GetTick>
 800228a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	05d8      	lsls	r0, r3, #23
 8002290:	d4ac      	bmi.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002292:	f7fe ffc7 	bl	8001224 <HAL_GetTick>
 8002296:	1bc3      	subs	r3, r0, r7
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d9f7      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 800229c:	2003      	movs	r0, #3
}
 800229e:	b002      	add	sp, #8
 80022a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 80022a4:	f7fe ffbe 	bl	8001224 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80022ac:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	e004      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe ffb8 	bl	8001224 <HAL_GetTick>
 80022b4:	1bc0      	subs	r0, r0, r7
 80022b6:	4540      	cmp	r0, r8
 80022b8:	d8f0      	bhi.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	6a2b      	ldr	r3, [r5, #32]
 80022bc:	079a      	lsls	r2, r3, #30
 80022be:	d5f7      	bpl.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80022c0:	e7ab      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40007000 	.word	0x40007000
 80022cc:	42420000 	.word	0x42420000

080022d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80022d0:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
{
 80022d4:	b087      	sub	sp, #28
 80022d6:	4684      	mov	ip, r0
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022da:	f10d 0e18 	add.w	lr, sp, #24
 80022de:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022e2:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80022e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ea:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 80022ee:	280f      	cmp	r0, #15
 80022f0:	d819      	bhi.n	8002326 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80022f2:	e8df f000 	tbb	[pc, r0]
 80022f6:	2108      	.short	0x2108
 80022f8:	18181c18 	.word	0x18181c18
 80022fc:	18181c18 	.word	0x18181c18
 8002300:	18181818 	.word	0x18181818
 8002304:	2e18      	.short	0x2e18
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002306:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 800230a:	4930      	ldr	r1, [pc, #192]	; (80023cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 800230c:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800230e:	401a      	ands	r2, r3
 8002310:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8002314:	d055      	beq.n	80023c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800231e:	d048      	beq.n	80023b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002324:	d03d      	beq.n	80023a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002326:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8002328:	b007      	add	sp, #28
 800232a:	f85d fb04 	ldr.w	pc, [sp], #4
 800232e:	b007      	add	sp, #28
 8002330:	f85d eb04 	ldr.w	lr, [sp], #4
      frequency = HAL_RCC_GetSysClockFreq();
 8002334:	f7ff be5e 	b.w	8001ff4 <HAL_RCC_GetSysClockFreq>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002338:	f7ff ff38 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 800233c:	4b23      	ldr	r3, [pc, #140]	; (80023cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002344:	3301      	adds	r3, #1
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800234c:	b007      	add	sp, #28
 800234e:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 8002352:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8002354:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800235c:	d0e4      	beq.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8002362:	3118      	adds	r1, #24
 8002364:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002366:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002368:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800236c:	d40c      	bmi.n	8002388 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8002370:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002374:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	025b      	lsls	r3, r3, #9
 800237a:	d4d5      	bmi.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          frequency = (pllclk * 2) / 3;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 800237e:	0040      	lsls	r0, r0, #1
 8002380:	fba3 3000 	umull	r3, r0, r3, r0
 8002384:	0840      	lsrs	r0, r0, #1
 8002386:	e7cf      	b.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002388:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800238c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002390:	3318      	adds	r3, #24
 8002392:	446b      	add	r3, sp
 8002394:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	fb03 f000 	mul.w	r0, r3, r0
 80023a0:	e7e8      	b.n	8002374 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = HSE_VALUE / 128U;
 80023a2:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80023a6:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 80023a8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80023ac:	bf18      	it	ne
 80023ae:	4618      	movne	r0, r3
 80023b0:	e7ba      	b.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSI_VALUE;
 80023b2:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80023b6:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 80023b8:	f010 0002 	ands.w	r0, r0, #2
 80023bc:	bf18      	it	ne
 80023be:	4618      	movne	r0, r3
 80023c0:	e7b2      	b.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSE_VALUE;
 80023c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023c6:	e7af      	b.n	8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80023c8:	0800afd8 	.word	0x0800afd8
 80023cc:	40021000 	.word	0x40021000
 80023d0:	003d0900 	.word	0x003d0900
 80023d4:	aaaaaaab 	.word	0xaaaaaaab
 80023d8:	007a1200 	.word	0x007a1200

080023dc <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80023dc:	b368      	cbz	r0, 800243a <HAL_SRAM_Init+0x5e>
 80023de:	6983      	ldr	r3, [r0, #24]
{
 80023e0:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80023e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e6:	4604      	mov	r4, r0
 80023e8:	d029      	beq.n	800243e <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80023ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80023ee:	4615      	mov	r5, r2
 80023f0:	460e      	mov	r6, r1
 80023f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023f6:	b1db      	cbz	r3, 8002430 <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80023f8:	4621      	mov	r1, r4
 80023fa:	f851 0b08 	ldr.w	r0, [r1], #8
 80023fe:	f000 f821 	bl	8002444 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002402:	4631      	mov	r1, r6
 8002404:	68a2      	ldr	r2, [r4, #8]
 8002406:	6820      	ldr	r0, [r4, #0]
 8002408:	f000 f852 	bl	80024b0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800240c:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8002410:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002412:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002414:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002416:	f000 f86d 	bl	80024f4 <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800241a:	6822      	ldr	r2, [r4, #0]
 800241c:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 800241e:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002424:	432b      	orrs	r3, r5
 8002426:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 800242a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 800242e:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8002430:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 8002434:	f7fe fe24 	bl	8001080 <HAL_SRAM_MspInit>
 8002438:	e7de      	b.n	80023f8 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 800243a:	2001      	movs	r0, #1
}
 800243c:	4770      	bx	lr
    return HAL_ERROR;
 800243e:	2001      	movs	r0, #1
}
 8002440:	bd70      	pop	{r4, r5, r6, pc}
 8002442:	bf00      	nop

08002444 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002444:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 8002446:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002448:	688b      	ldr	r3, [r1, #8]
{
 800244a:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800244c:	2b08      	cmp	r3, #8
 800244e:	bf0c      	ite	eq
 8002450:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8002454:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002456:	684e      	ldr	r6, [r1, #4]
 8002458:	680c      	ldr	r4, [r1, #0]
 800245a:	4333      	orrs	r3, r6
 800245c:	68ce      	ldr	r6, [r1, #12]
 800245e:	4d13      	ldr	r5, [pc, #76]	; (80024ac <FSMC_NORSRAM_Init+0x68>)
 8002460:	4333      	orrs	r3, r6
 8002462:	690e      	ldr	r6, [r1, #16]
 8002464:	4333      	orrs	r3, r6
 8002466:	694e      	ldr	r6, [r1, #20]
 8002468:	4333      	orrs	r3, r6
 800246a:	69ce      	ldr	r6, [r1, #28]
 800246c:	4333      	orrs	r3, r6
 800246e:	6a0e      	ldr	r6, [r1, #32]
 8002470:	4333      	orrs	r3, r6
 8002472:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8002474:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002476:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 800247a:	f026 0601 	bic.w	r6, r6, #1
 800247e:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002482:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8002484:	4333      	orrs	r3, r6
 8002486:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8002488:	4333      	orrs	r3, r6
 800248a:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800248c:	4333      	orrs	r3, r6
 800248e:	698e      	ldr	r6, [r1, #24]
 8002490:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002492:	4333      	orrs	r3, r6
 8002494:	430b      	orrs	r3, r1
 8002496:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800249a:	400d      	ands	r5, r1
 800249c:	432b      	orrs	r3, r5
 800249e:	ea43 030c 	orr.w	r3, r3, ip
 80024a2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 80024a6:	bc70      	pop	{r4, r5, r6}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	fff00080 	.word	0xfff00080

080024b0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80024b0:	4603      	mov	r3, r0
 80024b2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80024b6:	6853      	ldr	r3, [r2, #4]
{
 80024b8:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80024ba:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 80024be:	698c      	ldr	r4, [r1, #24]
 80024c0:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 80024c2:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80024c4:	4323      	orrs	r3, r4
 80024c6:	684c      	ldr	r4, [r1, #4]
 80024c8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80024cc:	688c      	ldr	r4, [r1, #8]
 80024ce:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80024d2:	68cc      	ldr	r4, [r1, #12]
 80024d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80024d8:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 80024dc:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 80024e0:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 80024e4:	3902      	subs	r1, #2
 80024e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80024ea:	ea43 030c 	orr.w	r3, r3, ip
 80024ee:	6053      	str	r3, [r2, #4]
}
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	bf00      	nop

080024f4 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80024f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024f8:	d005      	beq.n	8002506 <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80024fa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80024fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002502:	2000      	movs	r0, #0
 8002504:	4770      	bx	lr
{
 8002506:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002508:	680b      	ldr	r3, [r1, #0]
 800250a:	698d      	ldr	r5, [r1, #24]
 800250c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8002510:	432b      	orrs	r3, r5
 8002512:	684d      	ldr	r5, [r1, #4]
 8002514:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002518:	688d      	ldr	r5, [r1, #8]
 800251a:	68c9      	ldr	r1, [r1, #12]
 800251c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002520:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002524:	4903      	ldr	r1, [pc, #12]	; (8002534 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8002526:	4021      	ands	r1, r4
 8002528:	430b      	orrs	r3, r1
 800252a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800252e:	bc30      	pop	{r4, r5}
 8002530:	2000      	movs	r0, #0
 8002532:	4770      	bx	lr
 8002534:	cff00000 	.word	0xcff00000

08002538 <__errno>:
 8002538:	4b01      	ldr	r3, [pc, #4]	; (8002540 <__errno+0x8>)
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000034 	.word	0x20000034

08002544 <__libc_init_array>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	2600      	movs	r6, #0
 8002548:	4d0c      	ldr	r5, [pc, #48]	; (800257c <__libc_init_array+0x38>)
 800254a:	4c0d      	ldr	r4, [pc, #52]	; (8002580 <__libc_init_array+0x3c>)
 800254c:	1b64      	subs	r4, r4, r5
 800254e:	10a4      	asrs	r4, r4, #2
 8002550:	42a6      	cmp	r6, r4
 8002552:	d109      	bne.n	8002568 <__libc_init_array+0x24>
 8002554:	f000 fc94 	bl	8002e80 <_init>
 8002558:	2600      	movs	r6, #0
 800255a:	4d0a      	ldr	r5, [pc, #40]	; (8002584 <__libc_init_array+0x40>)
 800255c:	4c0a      	ldr	r4, [pc, #40]	; (8002588 <__libc_init_array+0x44>)
 800255e:	1b64      	subs	r4, r4, r5
 8002560:	10a4      	asrs	r4, r4, #2
 8002562:	42a6      	cmp	r6, r4
 8002564:	d105      	bne.n	8002572 <__libc_init_array+0x2e>
 8002566:	bd70      	pop	{r4, r5, r6, pc}
 8002568:	f855 3b04 	ldr.w	r3, [r5], #4
 800256c:	4798      	blx	r3
 800256e:	3601      	adds	r6, #1
 8002570:	e7ee      	b.n	8002550 <__libc_init_array+0xc>
 8002572:	f855 3b04 	ldr.w	r3, [r5], #4
 8002576:	4798      	blx	r3
 8002578:	3601      	adds	r6, #1
 800257a:	e7f2      	b.n	8002562 <__libc_init_array+0x1e>
 800257c:	0800b01c 	.word	0x0800b01c
 8002580:	0800b01c 	.word	0x0800b01c
 8002584:	0800b01c 	.word	0x0800b01c
 8002588:	0800b020 	.word	0x0800b020

0800258c <_vsiprintf_r>:
 800258c:	b500      	push	{lr}
 800258e:	b09b      	sub	sp, #108	; 0x6c
 8002590:	9100      	str	r1, [sp, #0]
 8002592:	9104      	str	r1, [sp, #16]
 8002594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002598:	9105      	str	r1, [sp, #20]
 800259a:	9102      	str	r1, [sp, #8]
 800259c:	4905      	ldr	r1, [pc, #20]	; (80025b4 <_vsiprintf_r+0x28>)
 800259e:	9103      	str	r1, [sp, #12]
 80025a0:	4669      	mov	r1, sp
 80025a2:	f000 f86f 	bl	8002684 <_svfiprintf_r>
 80025a6:	2200      	movs	r2, #0
 80025a8:	9b00      	ldr	r3, [sp, #0]
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	b01b      	add	sp, #108	; 0x6c
 80025ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80025b2:	bf00      	nop
 80025b4:	ffff0208 	.word	0xffff0208

080025b8 <vsiprintf>:
 80025b8:	4613      	mov	r3, r2
 80025ba:	460a      	mov	r2, r1
 80025bc:	4601      	mov	r1, r0
 80025be:	4802      	ldr	r0, [pc, #8]	; (80025c8 <vsiprintf+0x10>)
 80025c0:	6800      	ldr	r0, [r0, #0]
 80025c2:	f7ff bfe3 	b.w	800258c <_vsiprintf_r>
 80025c6:	bf00      	nop
 80025c8:	20000034 	.word	0x20000034

080025cc <__ssputs_r>:
 80025cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025d0:	688e      	ldr	r6, [r1, #8]
 80025d2:	4682      	mov	sl, r0
 80025d4:	429e      	cmp	r6, r3
 80025d6:	460c      	mov	r4, r1
 80025d8:	4690      	mov	r8, r2
 80025da:	461f      	mov	r7, r3
 80025dc:	d838      	bhi.n	8002650 <__ssputs_r+0x84>
 80025de:	898a      	ldrh	r2, [r1, #12]
 80025e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80025e4:	d032      	beq.n	800264c <__ssputs_r+0x80>
 80025e6:	6825      	ldr	r5, [r4, #0]
 80025e8:	6909      	ldr	r1, [r1, #16]
 80025ea:	3301      	adds	r3, #1
 80025ec:	eba5 0901 	sub.w	r9, r5, r1
 80025f0:	6965      	ldr	r5, [r4, #20]
 80025f2:	444b      	add	r3, r9
 80025f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025fc:	106d      	asrs	r5, r5, #1
 80025fe:	429d      	cmp	r5, r3
 8002600:	bf38      	it	cc
 8002602:	461d      	movcc	r5, r3
 8002604:	0553      	lsls	r3, r2, #21
 8002606:	d531      	bpl.n	800266c <__ssputs_r+0xa0>
 8002608:	4629      	mov	r1, r5
 800260a:	f000 fb6f 	bl	8002cec <_malloc_r>
 800260e:	4606      	mov	r6, r0
 8002610:	b950      	cbnz	r0, 8002628 <__ssputs_r+0x5c>
 8002612:	230c      	movs	r3, #12
 8002614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002618:	f8ca 3000 	str.w	r3, [sl]
 800261c:	89a3      	ldrh	r3, [r4, #12]
 800261e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002622:	81a3      	strh	r3, [r4, #12]
 8002624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002628:	464a      	mov	r2, r9
 800262a:	6921      	ldr	r1, [r4, #16]
 800262c:	f000 face 	bl	8002bcc <memcpy>
 8002630:	89a3      	ldrh	r3, [r4, #12]
 8002632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263a:	81a3      	strh	r3, [r4, #12]
 800263c:	6126      	str	r6, [r4, #16]
 800263e:	444e      	add	r6, r9
 8002640:	6026      	str	r6, [r4, #0]
 8002642:	463e      	mov	r6, r7
 8002644:	6165      	str	r5, [r4, #20]
 8002646:	eba5 0509 	sub.w	r5, r5, r9
 800264a:	60a5      	str	r5, [r4, #8]
 800264c:	42be      	cmp	r6, r7
 800264e:	d900      	bls.n	8002652 <__ssputs_r+0x86>
 8002650:	463e      	mov	r6, r7
 8002652:	4632      	mov	r2, r6
 8002654:	4641      	mov	r1, r8
 8002656:	6820      	ldr	r0, [r4, #0]
 8002658:	f000 fac6 	bl	8002be8 <memmove>
 800265c:	68a3      	ldr	r3, [r4, #8]
 800265e:	2000      	movs	r0, #0
 8002660:	1b9b      	subs	r3, r3, r6
 8002662:	60a3      	str	r3, [r4, #8]
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	4433      	add	r3, r6
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	e7db      	b.n	8002624 <__ssputs_r+0x58>
 800266c:	462a      	mov	r2, r5
 800266e:	f000 fbb1 	bl	8002dd4 <_realloc_r>
 8002672:	4606      	mov	r6, r0
 8002674:	2800      	cmp	r0, #0
 8002676:	d1e1      	bne.n	800263c <__ssputs_r+0x70>
 8002678:	4650      	mov	r0, sl
 800267a:	6921      	ldr	r1, [r4, #16]
 800267c:	f000 face 	bl	8002c1c <_free_r>
 8002680:	e7c7      	b.n	8002612 <__ssputs_r+0x46>
	...

08002684 <_svfiprintf_r>:
 8002684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002688:	4698      	mov	r8, r3
 800268a:	898b      	ldrh	r3, [r1, #12]
 800268c:	4607      	mov	r7, r0
 800268e:	061b      	lsls	r3, r3, #24
 8002690:	460d      	mov	r5, r1
 8002692:	4614      	mov	r4, r2
 8002694:	b09d      	sub	sp, #116	; 0x74
 8002696:	d50e      	bpl.n	80026b6 <_svfiprintf_r+0x32>
 8002698:	690b      	ldr	r3, [r1, #16]
 800269a:	b963      	cbnz	r3, 80026b6 <_svfiprintf_r+0x32>
 800269c:	2140      	movs	r1, #64	; 0x40
 800269e:	f000 fb25 	bl	8002cec <_malloc_r>
 80026a2:	6028      	str	r0, [r5, #0]
 80026a4:	6128      	str	r0, [r5, #16]
 80026a6:	b920      	cbnz	r0, 80026b2 <_svfiprintf_r+0x2e>
 80026a8:	230c      	movs	r3, #12
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b0:	e0d1      	b.n	8002856 <_svfiprintf_r+0x1d2>
 80026b2:	2340      	movs	r3, #64	; 0x40
 80026b4:	616b      	str	r3, [r5, #20]
 80026b6:	2300      	movs	r3, #0
 80026b8:	9309      	str	r3, [sp, #36]	; 0x24
 80026ba:	2320      	movs	r3, #32
 80026bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80026c0:	2330      	movs	r3, #48	; 0x30
 80026c2:	f04f 0901 	mov.w	r9, #1
 80026c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80026ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002870 <_svfiprintf_r+0x1ec>
 80026ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026d2:	4623      	mov	r3, r4
 80026d4:	469a      	mov	sl, r3
 80026d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026da:	b10a      	cbz	r2, 80026e0 <_svfiprintf_r+0x5c>
 80026dc:	2a25      	cmp	r2, #37	; 0x25
 80026de:	d1f9      	bne.n	80026d4 <_svfiprintf_r+0x50>
 80026e0:	ebba 0b04 	subs.w	fp, sl, r4
 80026e4:	d00b      	beq.n	80026fe <_svfiprintf_r+0x7a>
 80026e6:	465b      	mov	r3, fp
 80026e8:	4622      	mov	r2, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	4638      	mov	r0, r7
 80026ee:	f7ff ff6d 	bl	80025cc <__ssputs_r>
 80026f2:	3001      	adds	r0, #1
 80026f4:	f000 80aa 	beq.w	800284c <_svfiprintf_r+0x1c8>
 80026f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026fa:	445a      	add	r2, fp
 80026fc:	9209      	str	r2, [sp, #36]	; 0x24
 80026fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 80a2 	beq.w	800284c <_svfiprintf_r+0x1c8>
 8002708:	2300      	movs	r3, #0
 800270a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800270e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002712:	f10a 0a01 	add.w	sl, sl, #1
 8002716:	9304      	str	r3, [sp, #16]
 8002718:	9307      	str	r3, [sp, #28]
 800271a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800271e:	931a      	str	r3, [sp, #104]	; 0x68
 8002720:	4654      	mov	r4, sl
 8002722:	2205      	movs	r2, #5
 8002724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002728:	4851      	ldr	r0, [pc, #324]	; (8002870 <_svfiprintf_r+0x1ec>)
 800272a:	f000 fa41 	bl	8002bb0 <memchr>
 800272e:	9a04      	ldr	r2, [sp, #16]
 8002730:	b9d8      	cbnz	r0, 800276a <_svfiprintf_r+0xe6>
 8002732:	06d0      	lsls	r0, r2, #27
 8002734:	bf44      	itt	mi
 8002736:	2320      	movmi	r3, #32
 8002738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800273c:	0711      	lsls	r1, r2, #28
 800273e:	bf44      	itt	mi
 8002740:	232b      	movmi	r3, #43	; 0x2b
 8002742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002746:	f89a 3000 	ldrb.w	r3, [sl]
 800274a:	2b2a      	cmp	r3, #42	; 0x2a
 800274c:	d015      	beq.n	800277a <_svfiprintf_r+0xf6>
 800274e:	4654      	mov	r4, sl
 8002750:	2000      	movs	r0, #0
 8002752:	f04f 0c0a 	mov.w	ip, #10
 8002756:	9a07      	ldr	r2, [sp, #28]
 8002758:	4621      	mov	r1, r4
 800275a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800275e:	3b30      	subs	r3, #48	; 0x30
 8002760:	2b09      	cmp	r3, #9
 8002762:	d94e      	bls.n	8002802 <_svfiprintf_r+0x17e>
 8002764:	b1b0      	cbz	r0, 8002794 <_svfiprintf_r+0x110>
 8002766:	9207      	str	r2, [sp, #28]
 8002768:	e014      	b.n	8002794 <_svfiprintf_r+0x110>
 800276a:	eba0 0308 	sub.w	r3, r0, r8
 800276e:	fa09 f303 	lsl.w	r3, r9, r3
 8002772:	4313      	orrs	r3, r2
 8002774:	46a2      	mov	sl, r4
 8002776:	9304      	str	r3, [sp, #16]
 8002778:	e7d2      	b.n	8002720 <_svfiprintf_r+0x9c>
 800277a:	9b03      	ldr	r3, [sp, #12]
 800277c:	1d19      	adds	r1, r3, #4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	9103      	str	r1, [sp, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	bfbb      	ittet	lt
 8002786:	425b      	neglt	r3, r3
 8002788:	f042 0202 	orrlt.w	r2, r2, #2
 800278c:	9307      	strge	r3, [sp, #28]
 800278e:	9307      	strlt	r3, [sp, #28]
 8002790:	bfb8      	it	lt
 8002792:	9204      	strlt	r2, [sp, #16]
 8002794:	7823      	ldrb	r3, [r4, #0]
 8002796:	2b2e      	cmp	r3, #46	; 0x2e
 8002798:	d10c      	bne.n	80027b4 <_svfiprintf_r+0x130>
 800279a:	7863      	ldrb	r3, [r4, #1]
 800279c:	2b2a      	cmp	r3, #42	; 0x2a
 800279e:	d135      	bne.n	800280c <_svfiprintf_r+0x188>
 80027a0:	9b03      	ldr	r3, [sp, #12]
 80027a2:	3402      	adds	r4, #2
 80027a4:	1d1a      	adds	r2, r3, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	9203      	str	r2, [sp, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bfb8      	it	lt
 80027ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80027b2:	9305      	str	r3, [sp, #20]
 80027b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002874 <_svfiprintf_r+0x1f0>
 80027b8:	2203      	movs	r2, #3
 80027ba:	4650      	mov	r0, sl
 80027bc:	7821      	ldrb	r1, [r4, #0]
 80027be:	f000 f9f7 	bl	8002bb0 <memchr>
 80027c2:	b140      	cbz	r0, 80027d6 <_svfiprintf_r+0x152>
 80027c4:	2340      	movs	r3, #64	; 0x40
 80027c6:	eba0 000a 	sub.w	r0, r0, sl
 80027ca:	fa03 f000 	lsl.w	r0, r3, r0
 80027ce:	9b04      	ldr	r3, [sp, #16]
 80027d0:	3401      	adds	r4, #1
 80027d2:	4303      	orrs	r3, r0
 80027d4:	9304      	str	r3, [sp, #16]
 80027d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027da:	2206      	movs	r2, #6
 80027dc:	4826      	ldr	r0, [pc, #152]	; (8002878 <_svfiprintf_r+0x1f4>)
 80027de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027e2:	f000 f9e5 	bl	8002bb0 <memchr>
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d038      	beq.n	800285c <_svfiprintf_r+0x1d8>
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <_svfiprintf_r+0x1f8>)
 80027ec:	bb1b      	cbnz	r3, 8002836 <_svfiprintf_r+0x1b2>
 80027ee:	9b03      	ldr	r3, [sp, #12]
 80027f0:	3307      	adds	r3, #7
 80027f2:	f023 0307 	bic.w	r3, r3, #7
 80027f6:	3308      	adds	r3, #8
 80027f8:	9303      	str	r3, [sp, #12]
 80027fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027fc:	4433      	add	r3, r6
 80027fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002800:	e767      	b.n	80026d2 <_svfiprintf_r+0x4e>
 8002802:	460c      	mov	r4, r1
 8002804:	2001      	movs	r0, #1
 8002806:	fb0c 3202 	mla	r2, ip, r2, r3
 800280a:	e7a5      	b.n	8002758 <_svfiprintf_r+0xd4>
 800280c:	2300      	movs	r3, #0
 800280e:	f04f 0c0a 	mov.w	ip, #10
 8002812:	4619      	mov	r1, r3
 8002814:	3401      	adds	r4, #1
 8002816:	9305      	str	r3, [sp, #20]
 8002818:	4620      	mov	r0, r4
 800281a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800281e:	3a30      	subs	r2, #48	; 0x30
 8002820:	2a09      	cmp	r2, #9
 8002822:	d903      	bls.n	800282c <_svfiprintf_r+0x1a8>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0c5      	beq.n	80027b4 <_svfiprintf_r+0x130>
 8002828:	9105      	str	r1, [sp, #20]
 800282a:	e7c3      	b.n	80027b4 <_svfiprintf_r+0x130>
 800282c:	4604      	mov	r4, r0
 800282e:	2301      	movs	r3, #1
 8002830:	fb0c 2101 	mla	r1, ip, r1, r2
 8002834:	e7f0      	b.n	8002818 <_svfiprintf_r+0x194>
 8002836:	ab03      	add	r3, sp, #12
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	462a      	mov	r2, r5
 800283c:	4638      	mov	r0, r7
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <_svfiprintf_r+0x1fc>)
 8002840:	a904      	add	r1, sp, #16
 8002842:	f3af 8000 	nop.w
 8002846:	1c42      	adds	r2, r0, #1
 8002848:	4606      	mov	r6, r0
 800284a:	d1d6      	bne.n	80027fa <_svfiprintf_r+0x176>
 800284c:	89ab      	ldrh	r3, [r5, #12]
 800284e:	065b      	lsls	r3, r3, #25
 8002850:	f53f af2c 	bmi.w	80026ac <_svfiprintf_r+0x28>
 8002854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002856:	b01d      	add	sp, #116	; 0x74
 8002858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800285c:	ab03      	add	r3, sp, #12
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	462a      	mov	r2, r5
 8002862:	4638      	mov	r0, r7
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <_svfiprintf_r+0x1fc>)
 8002866:	a904      	add	r1, sp, #16
 8002868:	f000 f87c 	bl	8002964 <_printf_i>
 800286c:	e7eb      	b.n	8002846 <_svfiprintf_r+0x1c2>
 800286e:	bf00      	nop
 8002870:	0800afe9 	.word	0x0800afe9
 8002874:	0800afef 	.word	0x0800afef
 8002878:	0800aff3 	.word	0x0800aff3
 800287c:	00000000 	.word	0x00000000
 8002880:	080025cd 	.word	0x080025cd

08002884 <_printf_common>:
 8002884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002888:	4616      	mov	r6, r2
 800288a:	4699      	mov	r9, r3
 800288c:	688a      	ldr	r2, [r1, #8]
 800288e:	690b      	ldr	r3, [r1, #16]
 8002890:	4607      	mov	r7, r0
 8002892:	4293      	cmp	r3, r2
 8002894:	bfb8      	it	lt
 8002896:	4613      	movlt	r3, r2
 8002898:	6033      	str	r3, [r6, #0]
 800289a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800289e:	460c      	mov	r4, r1
 80028a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028a4:	b10a      	cbz	r2, 80028aa <_printf_common+0x26>
 80028a6:	3301      	adds	r3, #1
 80028a8:	6033      	str	r3, [r6, #0]
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	0699      	lsls	r1, r3, #26
 80028ae:	bf42      	ittt	mi
 80028b0:	6833      	ldrmi	r3, [r6, #0]
 80028b2:	3302      	addmi	r3, #2
 80028b4:	6033      	strmi	r3, [r6, #0]
 80028b6:	6825      	ldr	r5, [r4, #0]
 80028b8:	f015 0506 	ands.w	r5, r5, #6
 80028bc:	d106      	bne.n	80028cc <_printf_common+0x48>
 80028be:	f104 0a19 	add.w	sl, r4, #25
 80028c2:	68e3      	ldr	r3, [r4, #12]
 80028c4:	6832      	ldr	r2, [r6, #0]
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	42ab      	cmp	r3, r5
 80028ca:	dc28      	bgt.n	800291e <_printf_common+0x9a>
 80028cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028d0:	1e13      	subs	r3, r2, #0
 80028d2:	6822      	ldr	r2, [r4, #0]
 80028d4:	bf18      	it	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	0692      	lsls	r2, r2, #26
 80028da:	d42d      	bmi.n	8002938 <_printf_common+0xb4>
 80028dc:	4649      	mov	r1, r9
 80028de:	4638      	mov	r0, r7
 80028e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028e4:	47c0      	blx	r8
 80028e6:	3001      	adds	r0, #1
 80028e8:	d020      	beq.n	800292c <_printf_common+0xa8>
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	68e5      	ldr	r5, [r4, #12]
 80028ee:	f003 0306 	and.w	r3, r3, #6
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	bf18      	it	ne
 80028f6:	2500      	movne	r5, #0
 80028f8:	6832      	ldr	r2, [r6, #0]
 80028fa:	f04f 0600 	mov.w	r6, #0
 80028fe:	68a3      	ldr	r3, [r4, #8]
 8002900:	bf08      	it	eq
 8002902:	1aad      	subeq	r5, r5, r2
 8002904:	6922      	ldr	r2, [r4, #16]
 8002906:	bf08      	it	eq
 8002908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800290c:	4293      	cmp	r3, r2
 800290e:	bfc4      	itt	gt
 8002910:	1a9b      	subgt	r3, r3, r2
 8002912:	18ed      	addgt	r5, r5, r3
 8002914:	341a      	adds	r4, #26
 8002916:	42b5      	cmp	r5, r6
 8002918:	d11a      	bne.n	8002950 <_printf_common+0xcc>
 800291a:	2000      	movs	r0, #0
 800291c:	e008      	b.n	8002930 <_printf_common+0xac>
 800291e:	2301      	movs	r3, #1
 8002920:	4652      	mov	r2, sl
 8002922:	4649      	mov	r1, r9
 8002924:	4638      	mov	r0, r7
 8002926:	47c0      	blx	r8
 8002928:	3001      	adds	r0, #1
 800292a:	d103      	bne.n	8002934 <_printf_common+0xb0>
 800292c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002934:	3501      	adds	r5, #1
 8002936:	e7c4      	b.n	80028c2 <_printf_common+0x3e>
 8002938:	2030      	movs	r0, #48	; 0x30
 800293a:	18e1      	adds	r1, r4, r3
 800293c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002946:	4422      	add	r2, r4
 8002948:	3302      	adds	r3, #2
 800294a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800294e:	e7c5      	b.n	80028dc <_printf_common+0x58>
 8002950:	2301      	movs	r3, #1
 8002952:	4622      	mov	r2, r4
 8002954:	4649      	mov	r1, r9
 8002956:	4638      	mov	r0, r7
 8002958:	47c0      	blx	r8
 800295a:	3001      	adds	r0, #1
 800295c:	d0e6      	beq.n	800292c <_printf_common+0xa8>
 800295e:	3601      	adds	r6, #1
 8002960:	e7d9      	b.n	8002916 <_printf_common+0x92>
	...

08002964 <_printf_i>:
 8002964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002968:	7e0f      	ldrb	r7, [r1, #24]
 800296a:	4691      	mov	r9, r2
 800296c:	2f78      	cmp	r7, #120	; 0x78
 800296e:	4680      	mov	r8, r0
 8002970:	460c      	mov	r4, r1
 8002972:	469a      	mov	sl, r3
 8002974:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800297a:	d807      	bhi.n	800298c <_printf_i+0x28>
 800297c:	2f62      	cmp	r7, #98	; 0x62
 800297e:	d80a      	bhi.n	8002996 <_printf_i+0x32>
 8002980:	2f00      	cmp	r7, #0
 8002982:	f000 80d9 	beq.w	8002b38 <_printf_i+0x1d4>
 8002986:	2f58      	cmp	r7, #88	; 0x58
 8002988:	f000 80a4 	beq.w	8002ad4 <_printf_i+0x170>
 800298c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002994:	e03a      	b.n	8002a0c <_printf_i+0xa8>
 8002996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800299a:	2b15      	cmp	r3, #21
 800299c:	d8f6      	bhi.n	800298c <_printf_i+0x28>
 800299e:	a101      	add	r1, pc, #4	; (adr r1, 80029a4 <_printf_i+0x40>)
 80029a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029a4:	080029fd 	.word	0x080029fd
 80029a8:	08002a11 	.word	0x08002a11
 80029ac:	0800298d 	.word	0x0800298d
 80029b0:	0800298d 	.word	0x0800298d
 80029b4:	0800298d 	.word	0x0800298d
 80029b8:	0800298d 	.word	0x0800298d
 80029bc:	08002a11 	.word	0x08002a11
 80029c0:	0800298d 	.word	0x0800298d
 80029c4:	0800298d 	.word	0x0800298d
 80029c8:	0800298d 	.word	0x0800298d
 80029cc:	0800298d 	.word	0x0800298d
 80029d0:	08002b1f 	.word	0x08002b1f
 80029d4:	08002a41 	.word	0x08002a41
 80029d8:	08002b01 	.word	0x08002b01
 80029dc:	0800298d 	.word	0x0800298d
 80029e0:	0800298d 	.word	0x0800298d
 80029e4:	08002b41 	.word	0x08002b41
 80029e8:	0800298d 	.word	0x0800298d
 80029ec:	08002a41 	.word	0x08002a41
 80029f0:	0800298d 	.word	0x0800298d
 80029f4:	0800298d 	.word	0x0800298d
 80029f8:	08002b09 	.word	0x08002b09
 80029fc:	682b      	ldr	r3, [r5, #0]
 80029fe:	1d1a      	adds	r2, r3, #4
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	602a      	str	r2, [r5, #0]
 8002a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0a4      	b.n	8002b5a <_printf_i+0x1f6>
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	6829      	ldr	r1, [r5, #0]
 8002a14:	0606      	lsls	r6, r0, #24
 8002a16:	f101 0304 	add.w	r3, r1, #4
 8002a1a:	d50a      	bpl.n	8002a32 <_printf_i+0xce>
 8002a1c:	680e      	ldr	r6, [r1, #0]
 8002a1e:	602b      	str	r3, [r5, #0]
 8002a20:	2e00      	cmp	r6, #0
 8002a22:	da03      	bge.n	8002a2c <_printf_i+0xc8>
 8002a24:	232d      	movs	r3, #45	; 0x2d
 8002a26:	4276      	negs	r6, r6
 8002a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a2c:	230a      	movs	r3, #10
 8002a2e:	485e      	ldr	r0, [pc, #376]	; (8002ba8 <_printf_i+0x244>)
 8002a30:	e019      	b.n	8002a66 <_printf_i+0x102>
 8002a32:	680e      	ldr	r6, [r1, #0]
 8002a34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	bf18      	it	ne
 8002a3c:	b236      	sxthne	r6, r6
 8002a3e:	e7ef      	b.n	8002a20 <_printf_i+0xbc>
 8002a40:	682b      	ldr	r3, [r5, #0]
 8002a42:	6820      	ldr	r0, [r4, #0]
 8002a44:	1d19      	adds	r1, r3, #4
 8002a46:	6029      	str	r1, [r5, #0]
 8002a48:	0601      	lsls	r1, r0, #24
 8002a4a:	d501      	bpl.n	8002a50 <_printf_i+0xec>
 8002a4c:	681e      	ldr	r6, [r3, #0]
 8002a4e:	e002      	b.n	8002a56 <_printf_i+0xf2>
 8002a50:	0646      	lsls	r6, r0, #25
 8002a52:	d5fb      	bpl.n	8002a4c <_printf_i+0xe8>
 8002a54:	881e      	ldrh	r6, [r3, #0]
 8002a56:	2f6f      	cmp	r7, #111	; 0x6f
 8002a58:	bf0c      	ite	eq
 8002a5a:	2308      	moveq	r3, #8
 8002a5c:	230a      	movne	r3, #10
 8002a5e:	4852      	ldr	r0, [pc, #328]	; (8002ba8 <_printf_i+0x244>)
 8002a60:	2100      	movs	r1, #0
 8002a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a66:	6865      	ldr	r5, [r4, #4]
 8002a68:	2d00      	cmp	r5, #0
 8002a6a:	bfa8      	it	ge
 8002a6c:	6821      	ldrge	r1, [r4, #0]
 8002a6e:	60a5      	str	r5, [r4, #8]
 8002a70:	bfa4      	itt	ge
 8002a72:	f021 0104 	bicge.w	r1, r1, #4
 8002a76:	6021      	strge	r1, [r4, #0]
 8002a78:	b90e      	cbnz	r6, 8002a7e <_printf_i+0x11a>
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	d04d      	beq.n	8002b1a <_printf_i+0x1b6>
 8002a7e:	4615      	mov	r5, r2
 8002a80:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a84:	fb03 6711 	mls	r7, r3, r1, r6
 8002a88:	5dc7      	ldrb	r7, [r0, r7]
 8002a8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a8e:	4637      	mov	r7, r6
 8002a90:	42bb      	cmp	r3, r7
 8002a92:	460e      	mov	r6, r1
 8002a94:	d9f4      	bls.n	8002a80 <_printf_i+0x11c>
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d10b      	bne.n	8002ab2 <_printf_i+0x14e>
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	07de      	lsls	r6, r3, #31
 8002a9e:	d508      	bpl.n	8002ab2 <_printf_i+0x14e>
 8002aa0:	6923      	ldr	r3, [r4, #16]
 8002aa2:	6861      	ldr	r1, [r4, #4]
 8002aa4:	4299      	cmp	r1, r3
 8002aa6:	bfde      	ittt	le
 8002aa8:	2330      	movle	r3, #48	; 0x30
 8002aaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002aae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ab2:	1b52      	subs	r2, r2, r5
 8002ab4:	6122      	str	r2, [r4, #16]
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	4621      	mov	r1, r4
 8002aba:	4640      	mov	r0, r8
 8002abc:	f8cd a000 	str.w	sl, [sp]
 8002ac0:	aa03      	add	r2, sp, #12
 8002ac2:	f7ff fedf 	bl	8002884 <_printf_common>
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	d14c      	bne.n	8002b64 <_printf_i+0x200>
 8002aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ace:	b004      	add	sp, #16
 8002ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad4:	4834      	ldr	r0, [pc, #208]	; (8002ba8 <_printf_i+0x244>)
 8002ad6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ada:	6829      	ldr	r1, [r5, #0]
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ae2:	6029      	str	r1, [r5, #0]
 8002ae4:	061d      	lsls	r5, r3, #24
 8002ae6:	d514      	bpl.n	8002b12 <_printf_i+0x1ae>
 8002ae8:	07df      	lsls	r7, r3, #31
 8002aea:	bf44      	itt	mi
 8002aec:	f043 0320 	orrmi.w	r3, r3, #32
 8002af0:	6023      	strmi	r3, [r4, #0]
 8002af2:	b91e      	cbnz	r6, 8002afc <_printf_i+0x198>
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	f023 0320 	bic.w	r3, r3, #32
 8002afa:	6023      	str	r3, [r4, #0]
 8002afc:	2310      	movs	r3, #16
 8002afe:	e7af      	b.n	8002a60 <_printf_i+0xfc>
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	f043 0320 	orr.w	r3, r3, #32
 8002b06:	6023      	str	r3, [r4, #0]
 8002b08:	2378      	movs	r3, #120	; 0x78
 8002b0a:	4828      	ldr	r0, [pc, #160]	; (8002bac <_printf_i+0x248>)
 8002b0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b10:	e7e3      	b.n	8002ada <_printf_i+0x176>
 8002b12:	0659      	lsls	r1, r3, #25
 8002b14:	bf48      	it	mi
 8002b16:	b2b6      	uxthmi	r6, r6
 8002b18:	e7e6      	b.n	8002ae8 <_printf_i+0x184>
 8002b1a:	4615      	mov	r5, r2
 8002b1c:	e7bb      	b.n	8002a96 <_printf_i+0x132>
 8002b1e:	682b      	ldr	r3, [r5, #0]
 8002b20:	6826      	ldr	r6, [r4, #0]
 8002b22:	1d18      	adds	r0, r3, #4
 8002b24:	6961      	ldr	r1, [r4, #20]
 8002b26:	6028      	str	r0, [r5, #0]
 8002b28:	0635      	lsls	r5, r6, #24
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	d501      	bpl.n	8002b32 <_printf_i+0x1ce>
 8002b2e:	6019      	str	r1, [r3, #0]
 8002b30:	e002      	b.n	8002b38 <_printf_i+0x1d4>
 8002b32:	0670      	lsls	r0, r6, #25
 8002b34:	d5fb      	bpl.n	8002b2e <_printf_i+0x1ca>
 8002b36:	8019      	strh	r1, [r3, #0]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	4615      	mov	r5, r2
 8002b3c:	6123      	str	r3, [r4, #16]
 8002b3e:	e7ba      	b.n	8002ab6 <_printf_i+0x152>
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	2100      	movs	r1, #0
 8002b44:	1d1a      	adds	r2, r3, #4
 8002b46:	602a      	str	r2, [r5, #0]
 8002b48:	681d      	ldr	r5, [r3, #0]
 8002b4a:	6862      	ldr	r2, [r4, #4]
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f000 f82f 	bl	8002bb0 <memchr>
 8002b52:	b108      	cbz	r0, 8002b58 <_printf_i+0x1f4>
 8002b54:	1b40      	subs	r0, r0, r5
 8002b56:	6060      	str	r0, [r4, #4]
 8002b58:	6863      	ldr	r3, [r4, #4]
 8002b5a:	6123      	str	r3, [r4, #16]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b62:	e7a8      	b.n	8002ab6 <_printf_i+0x152>
 8002b64:	462a      	mov	r2, r5
 8002b66:	4649      	mov	r1, r9
 8002b68:	4640      	mov	r0, r8
 8002b6a:	6923      	ldr	r3, [r4, #16]
 8002b6c:	47d0      	blx	sl
 8002b6e:	3001      	adds	r0, #1
 8002b70:	d0ab      	beq.n	8002aca <_printf_i+0x166>
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	079b      	lsls	r3, r3, #30
 8002b76:	d413      	bmi.n	8002ba0 <_printf_i+0x23c>
 8002b78:	68e0      	ldr	r0, [r4, #12]
 8002b7a:	9b03      	ldr	r3, [sp, #12]
 8002b7c:	4298      	cmp	r0, r3
 8002b7e:	bfb8      	it	lt
 8002b80:	4618      	movlt	r0, r3
 8002b82:	e7a4      	b.n	8002ace <_printf_i+0x16a>
 8002b84:	2301      	movs	r3, #1
 8002b86:	4632      	mov	r2, r6
 8002b88:	4649      	mov	r1, r9
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	47d0      	blx	sl
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d09b      	beq.n	8002aca <_printf_i+0x166>
 8002b92:	3501      	adds	r5, #1
 8002b94:	68e3      	ldr	r3, [r4, #12]
 8002b96:	9903      	ldr	r1, [sp, #12]
 8002b98:	1a5b      	subs	r3, r3, r1
 8002b9a:	42ab      	cmp	r3, r5
 8002b9c:	dcf2      	bgt.n	8002b84 <_printf_i+0x220>
 8002b9e:	e7eb      	b.n	8002b78 <_printf_i+0x214>
 8002ba0:	2500      	movs	r5, #0
 8002ba2:	f104 0619 	add.w	r6, r4, #25
 8002ba6:	e7f5      	b.n	8002b94 <_printf_i+0x230>
 8002ba8:	0800affa 	.word	0x0800affa
 8002bac:	0800b00b 	.word	0x0800b00b

08002bb0 <memchr>:
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	b510      	push	{r4, lr}
 8002bb4:	b2c9      	uxtb	r1, r1
 8002bb6:	4402      	add	r2, r0
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	d101      	bne.n	8002bc2 <memchr+0x12>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	e003      	b.n	8002bca <memchr+0x1a>
 8002bc2:	7804      	ldrb	r4, [r0, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	428c      	cmp	r4, r1
 8002bc8:	d1f6      	bne.n	8002bb8 <memchr+0x8>
 8002bca:	bd10      	pop	{r4, pc}

08002bcc <memcpy>:
 8002bcc:	440a      	add	r2, r1
 8002bce:	4291      	cmp	r1, r2
 8002bd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002bd4:	d100      	bne.n	8002bd8 <memcpy+0xc>
 8002bd6:	4770      	bx	lr
 8002bd8:	b510      	push	{r4, lr}
 8002bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bde:	4291      	cmp	r1, r2
 8002be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002be4:	d1f9      	bne.n	8002bda <memcpy+0xe>
 8002be6:	bd10      	pop	{r4, pc}

08002be8 <memmove>:
 8002be8:	4288      	cmp	r0, r1
 8002bea:	b510      	push	{r4, lr}
 8002bec:	eb01 0402 	add.w	r4, r1, r2
 8002bf0:	d902      	bls.n	8002bf8 <memmove+0x10>
 8002bf2:	4284      	cmp	r4, r0
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	d807      	bhi.n	8002c08 <memmove+0x20>
 8002bf8:	1e43      	subs	r3, r0, #1
 8002bfa:	42a1      	cmp	r1, r4
 8002bfc:	d008      	beq.n	8002c10 <memmove+0x28>
 8002bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c06:	e7f8      	b.n	8002bfa <memmove+0x12>
 8002c08:	4601      	mov	r1, r0
 8002c0a:	4402      	add	r2, r0
 8002c0c:	428a      	cmp	r2, r1
 8002c0e:	d100      	bne.n	8002c12 <memmove+0x2a>
 8002c10:	bd10      	pop	{r4, pc}
 8002c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c1a:	e7f7      	b.n	8002c0c <memmove+0x24>

08002c1c <_free_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4605      	mov	r5, r0
 8002c20:	2900      	cmp	r1, #0
 8002c22:	d040      	beq.n	8002ca6 <_free_r+0x8a>
 8002c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c28:	1f0c      	subs	r4, r1, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bfb8      	it	lt
 8002c2e:	18e4      	addlt	r4, r4, r3
 8002c30:	f000 f910 	bl	8002e54 <__malloc_lock>
 8002c34:	4a1c      	ldr	r2, [pc, #112]	; (8002ca8 <_free_r+0x8c>)
 8002c36:	6813      	ldr	r3, [r2, #0]
 8002c38:	b933      	cbnz	r3, 8002c48 <_free_r+0x2c>
 8002c3a:	6063      	str	r3, [r4, #4]
 8002c3c:	6014      	str	r4, [r2, #0]
 8002c3e:	4628      	mov	r0, r5
 8002c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c44:	f000 b90c 	b.w	8002e60 <__malloc_unlock>
 8002c48:	42a3      	cmp	r3, r4
 8002c4a:	d908      	bls.n	8002c5e <_free_r+0x42>
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	1821      	adds	r1, r4, r0
 8002c50:	428b      	cmp	r3, r1
 8002c52:	bf01      	itttt	eq
 8002c54:	6819      	ldreq	r1, [r3, #0]
 8002c56:	685b      	ldreq	r3, [r3, #4]
 8002c58:	1809      	addeq	r1, r1, r0
 8002c5a:	6021      	streq	r1, [r4, #0]
 8002c5c:	e7ed      	b.n	8002c3a <_free_r+0x1e>
 8002c5e:	461a      	mov	r2, r3
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	b10b      	cbz	r3, 8002c68 <_free_r+0x4c>
 8002c64:	42a3      	cmp	r3, r4
 8002c66:	d9fa      	bls.n	8002c5e <_free_r+0x42>
 8002c68:	6811      	ldr	r1, [r2, #0]
 8002c6a:	1850      	adds	r0, r2, r1
 8002c6c:	42a0      	cmp	r0, r4
 8002c6e:	d10b      	bne.n	8002c88 <_free_r+0x6c>
 8002c70:	6820      	ldr	r0, [r4, #0]
 8002c72:	4401      	add	r1, r0
 8002c74:	1850      	adds	r0, r2, r1
 8002c76:	4283      	cmp	r3, r0
 8002c78:	6011      	str	r1, [r2, #0]
 8002c7a:	d1e0      	bne.n	8002c3e <_free_r+0x22>
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4401      	add	r1, r0
 8002c82:	6011      	str	r1, [r2, #0]
 8002c84:	6053      	str	r3, [r2, #4]
 8002c86:	e7da      	b.n	8002c3e <_free_r+0x22>
 8002c88:	d902      	bls.n	8002c90 <_free_r+0x74>
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	602b      	str	r3, [r5, #0]
 8002c8e:	e7d6      	b.n	8002c3e <_free_r+0x22>
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	1821      	adds	r1, r4, r0
 8002c94:	428b      	cmp	r3, r1
 8002c96:	bf01      	itttt	eq
 8002c98:	6819      	ldreq	r1, [r3, #0]
 8002c9a:	685b      	ldreq	r3, [r3, #4]
 8002c9c:	1809      	addeq	r1, r1, r0
 8002c9e:	6021      	streq	r1, [r4, #0]
 8002ca0:	6063      	str	r3, [r4, #4]
 8002ca2:	6054      	str	r4, [r2, #4]
 8002ca4:	e7cb      	b.n	8002c3e <_free_r+0x22>
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
 8002ca8:	20000240 	.word	0x20000240

08002cac <sbrk_aligned>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	4e0e      	ldr	r6, [pc, #56]	; (8002ce8 <sbrk_aligned+0x3c>)
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	6831      	ldr	r1, [r6, #0]
 8002cb4:	4605      	mov	r5, r0
 8002cb6:	b911      	cbnz	r1, 8002cbe <sbrk_aligned+0x12>
 8002cb8:	f000 f8bc 	bl	8002e34 <_sbrk_r>
 8002cbc:	6030      	str	r0, [r6, #0]
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f000 f8b7 	bl	8002e34 <_sbrk_r>
 8002cc6:	1c43      	adds	r3, r0, #1
 8002cc8:	d00a      	beq.n	8002ce0 <sbrk_aligned+0x34>
 8002cca:	1cc4      	adds	r4, r0, #3
 8002ccc:	f024 0403 	bic.w	r4, r4, #3
 8002cd0:	42a0      	cmp	r0, r4
 8002cd2:	d007      	beq.n	8002ce4 <sbrk_aligned+0x38>
 8002cd4:	1a21      	subs	r1, r4, r0
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f000 f8ac 	bl	8002e34 <_sbrk_r>
 8002cdc:	3001      	adds	r0, #1
 8002cde:	d101      	bne.n	8002ce4 <sbrk_aligned+0x38>
 8002ce0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	20000244 	.word	0x20000244

08002cec <_malloc_r>:
 8002cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cf0:	1ccd      	adds	r5, r1, #3
 8002cf2:	f025 0503 	bic.w	r5, r5, #3
 8002cf6:	3508      	adds	r5, #8
 8002cf8:	2d0c      	cmp	r5, #12
 8002cfa:	bf38      	it	cc
 8002cfc:	250c      	movcc	r5, #12
 8002cfe:	2d00      	cmp	r5, #0
 8002d00:	4607      	mov	r7, r0
 8002d02:	db01      	blt.n	8002d08 <_malloc_r+0x1c>
 8002d04:	42a9      	cmp	r1, r5
 8002d06:	d905      	bls.n	8002d14 <_malloc_r+0x28>
 8002d08:	230c      	movs	r3, #12
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4630      	mov	r0, r6
 8002d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d14:	4e2e      	ldr	r6, [pc, #184]	; (8002dd0 <_malloc_r+0xe4>)
 8002d16:	f000 f89d 	bl	8002e54 <__malloc_lock>
 8002d1a:	6833      	ldr	r3, [r6, #0]
 8002d1c:	461c      	mov	r4, r3
 8002d1e:	bb34      	cbnz	r4, 8002d6e <_malloc_r+0x82>
 8002d20:	4629      	mov	r1, r5
 8002d22:	4638      	mov	r0, r7
 8002d24:	f7ff ffc2 	bl	8002cac <sbrk_aligned>
 8002d28:	1c43      	adds	r3, r0, #1
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	d14d      	bne.n	8002dca <_malloc_r+0xde>
 8002d2e:	6834      	ldr	r4, [r6, #0]
 8002d30:	4626      	mov	r6, r4
 8002d32:	2e00      	cmp	r6, #0
 8002d34:	d140      	bne.n	8002db8 <_malloc_r+0xcc>
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	4631      	mov	r1, r6
 8002d3a:	4638      	mov	r0, r7
 8002d3c:	eb04 0803 	add.w	r8, r4, r3
 8002d40:	f000 f878 	bl	8002e34 <_sbrk_r>
 8002d44:	4580      	cmp	r8, r0
 8002d46:	d13a      	bne.n	8002dbe <_malloc_r+0xd2>
 8002d48:	6821      	ldr	r1, [r4, #0]
 8002d4a:	3503      	adds	r5, #3
 8002d4c:	1a6d      	subs	r5, r5, r1
 8002d4e:	f025 0503 	bic.w	r5, r5, #3
 8002d52:	3508      	adds	r5, #8
 8002d54:	2d0c      	cmp	r5, #12
 8002d56:	bf38      	it	cc
 8002d58:	250c      	movcc	r5, #12
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	f7ff ffa5 	bl	8002cac <sbrk_aligned>
 8002d62:	3001      	adds	r0, #1
 8002d64:	d02b      	beq.n	8002dbe <_malloc_r+0xd2>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	442b      	add	r3, r5
 8002d6a:	6023      	str	r3, [r4, #0]
 8002d6c:	e00e      	b.n	8002d8c <_malloc_r+0xa0>
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	1b52      	subs	r2, r2, r5
 8002d72:	d41e      	bmi.n	8002db2 <_malloc_r+0xc6>
 8002d74:	2a0b      	cmp	r2, #11
 8002d76:	d916      	bls.n	8002da6 <_malloc_r+0xba>
 8002d78:	1961      	adds	r1, r4, r5
 8002d7a:	42a3      	cmp	r3, r4
 8002d7c:	6025      	str	r5, [r4, #0]
 8002d7e:	bf18      	it	ne
 8002d80:	6059      	strne	r1, [r3, #4]
 8002d82:	6863      	ldr	r3, [r4, #4]
 8002d84:	bf08      	it	eq
 8002d86:	6031      	streq	r1, [r6, #0]
 8002d88:	5162      	str	r2, [r4, r5]
 8002d8a:	604b      	str	r3, [r1, #4]
 8002d8c:	4638      	mov	r0, r7
 8002d8e:	f104 060b 	add.w	r6, r4, #11
 8002d92:	f000 f865 	bl	8002e60 <__malloc_unlock>
 8002d96:	f026 0607 	bic.w	r6, r6, #7
 8002d9a:	1d23      	adds	r3, r4, #4
 8002d9c:	1af2      	subs	r2, r6, r3
 8002d9e:	d0b6      	beq.n	8002d0e <_malloc_r+0x22>
 8002da0:	1b9b      	subs	r3, r3, r6
 8002da2:	50a3      	str	r3, [r4, r2]
 8002da4:	e7b3      	b.n	8002d0e <_malloc_r+0x22>
 8002da6:	6862      	ldr	r2, [r4, #4]
 8002da8:	42a3      	cmp	r3, r4
 8002daa:	bf0c      	ite	eq
 8002dac:	6032      	streq	r2, [r6, #0]
 8002dae:	605a      	strne	r2, [r3, #4]
 8002db0:	e7ec      	b.n	8002d8c <_malloc_r+0xa0>
 8002db2:	4623      	mov	r3, r4
 8002db4:	6864      	ldr	r4, [r4, #4]
 8002db6:	e7b2      	b.n	8002d1e <_malloc_r+0x32>
 8002db8:	4634      	mov	r4, r6
 8002dba:	6876      	ldr	r6, [r6, #4]
 8002dbc:	e7b9      	b.n	8002d32 <_malloc_r+0x46>
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	4638      	mov	r0, r7
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	f000 f84c 	bl	8002e60 <__malloc_unlock>
 8002dc8:	e7a1      	b.n	8002d0e <_malloc_r+0x22>
 8002dca:	6025      	str	r5, [r4, #0]
 8002dcc:	e7de      	b.n	8002d8c <_malloc_r+0xa0>
 8002dce:	bf00      	nop
 8002dd0:	20000240 	.word	0x20000240

08002dd4 <_realloc_r>:
 8002dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd8:	4680      	mov	r8, r0
 8002dda:	4614      	mov	r4, r2
 8002ddc:	460e      	mov	r6, r1
 8002dde:	b921      	cbnz	r1, 8002dea <_realloc_r+0x16>
 8002de0:	4611      	mov	r1, r2
 8002de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002de6:	f7ff bf81 	b.w	8002cec <_malloc_r>
 8002dea:	b92a      	cbnz	r2, 8002df8 <_realloc_r+0x24>
 8002dec:	f7ff ff16 	bl	8002c1c <_free_r>
 8002df0:	4625      	mov	r5, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002df8:	f000 f838 	bl	8002e6c <_malloc_usable_size_r>
 8002dfc:	4284      	cmp	r4, r0
 8002dfe:	4607      	mov	r7, r0
 8002e00:	d802      	bhi.n	8002e08 <_realloc_r+0x34>
 8002e02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e06:	d812      	bhi.n	8002e2e <_realloc_r+0x5a>
 8002e08:	4621      	mov	r1, r4
 8002e0a:	4640      	mov	r0, r8
 8002e0c:	f7ff ff6e 	bl	8002cec <_malloc_r>
 8002e10:	4605      	mov	r5, r0
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d0ed      	beq.n	8002df2 <_realloc_r+0x1e>
 8002e16:	42bc      	cmp	r4, r7
 8002e18:	4622      	mov	r2, r4
 8002e1a:	4631      	mov	r1, r6
 8002e1c:	bf28      	it	cs
 8002e1e:	463a      	movcs	r2, r7
 8002e20:	f7ff fed4 	bl	8002bcc <memcpy>
 8002e24:	4631      	mov	r1, r6
 8002e26:	4640      	mov	r0, r8
 8002e28:	f7ff fef8 	bl	8002c1c <_free_r>
 8002e2c:	e7e1      	b.n	8002df2 <_realloc_r+0x1e>
 8002e2e:	4635      	mov	r5, r6
 8002e30:	e7df      	b.n	8002df2 <_realloc_r+0x1e>
	...

08002e34 <_sbrk_r>:
 8002e34:	b538      	push	{r3, r4, r5, lr}
 8002e36:	2300      	movs	r3, #0
 8002e38:	4d05      	ldr	r5, [pc, #20]	; (8002e50 <_sbrk_r+0x1c>)
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	602b      	str	r3, [r5, #0]
 8002e40:	f7fe f962 	bl	8001108 <_sbrk>
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d102      	bne.n	8002e4e <_sbrk_r+0x1a>
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	b103      	cbz	r3, 8002e4e <_sbrk_r+0x1a>
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
 8002e50:	20000248 	.word	0x20000248

08002e54 <__malloc_lock>:
 8002e54:	4801      	ldr	r0, [pc, #4]	; (8002e5c <__malloc_lock+0x8>)
 8002e56:	f000 b811 	b.w	8002e7c <__retarget_lock_acquire_recursive>
 8002e5a:	bf00      	nop
 8002e5c:	2000024c 	.word	0x2000024c

08002e60 <__malloc_unlock>:
 8002e60:	4801      	ldr	r0, [pc, #4]	; (8002e68 <__malloc_unlock+0x8>)
 8002e62:	f000 b80c 	b.w	8002e7e <__retarget_lock_release_recursive>
 8002e66:	bf00      	nop
 8002e68:	2000024c 	.word	0x2000024c

08002e6c <_malloc_usable_size_r>:
 8002e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e70:	1f18      	subs	r0, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bfbc      	itt	lt
 8002e76:	580b      	ldrlt	r3, [r1, r0]
 8002e78:	18c0      	addlt	r0, r0, r3
 8002e7a:	4770      	bx	lr

08002e7c <__retarget_lock_acquire_recursive>:
 8002e7c:	4770      	bx	lr

08002e7e <__retarget_lock_release_recursive>:
 8002e7e:	4770      	bx	lr

08002e80 <_init>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	bf00      	nop
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr

08002e8c <_fini>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr
