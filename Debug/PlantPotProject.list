
PlantPotProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d9c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000860c  08007f88  08007f88  00017f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010594  08010594  00030208  2**0
                  CONTENTS
  4 .ARM          00000000  08010594  08010594  00030208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010594  08010594  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010594  08010594  00020594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010598  08010598  00020598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0801059c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000208  080107a4  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  080107a4  000303c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013017  00000000  00000000  00030231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca9  00000000  00000000  00043248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000b616  00000000  00000000  00045ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  00051508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003848  00000000  00000000  00051e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4cc  00000000  00000000  000556a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001285e  00000000  00000000  00070b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099e09  00000000  00000000  000833d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d1db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003188  00000000  00000000  0011d22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000208 	.word	0x20000208
 8000204:	00000000 	.word	0x00000000
 8000208:	08007f6c 	.word	0x08007f6c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000020c 	.word	0x2000020c
 8000224:	08007f6c 	.word	0x08007f6c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_f2iz>:
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e64:	d30f      	bcc.n	8000e86 <__aeabi_f2iz+0x2a>
 8000e66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6e:	d90d      	bls.n	8000e8c <__aeabi_f2iz+0x30>
 8000e70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e78:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e80:	bf18      	it	ne
 8000e82:	4240      	negne	r0, r0
 8000e84:	4770      	bx	lr
 8000e86:	f04f 0000 	mov.w	r0, #0
 8000e8a:	4770      	bx	lr
 8000e8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e90:	d101      	bne.n	8000e96 <__aeabi_f2iz+0x3a>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d105      	bne.n	8000ea2 <__aeabi_f2iz+0x46>
 8000e96:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e9a:	bf08      	it	eq
 8000e9c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f04f 0000 	mov.w	r0, #0
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_d2lz>:
 8000ea8:	b538      	push	{r3, r4, r5, lr}
 8000eaa:	4605      	mov	r5, r0
 8000eac:	460c      	mov	r4, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	f7ff fded 	bl	8000a94 <__aeabi_dcmplt>
 8000eba:	b928      	cbnz	r0, 8000ec8 <__aeabi_d2lz+0x20>
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec4:	f000 b80a 	b.w	8000edc <__aeabi_d2ulz>
 8000ec8:	4628      	mov	r0, r5
 8000eca:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ece:	f000 f805 	bl	8000edc <__aeabi_d2ulz>
 8000ed2:	4240      	negs	r0, r0
 8000ed4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed8:	bd38      	pop	{r3, r4, r5, pc}
 8000eda:	bf00      	nop

08000edc <__aeabi_d2ulz>:
 8000edc:	b5d0      	push	{r4, r6, r7, lr}
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <__aeabi_d2ulz+0x34>)
 8000ee2:	4606      	mov	r6, r0
 8000ee4:	460f      	mov	r7, r1
 8000ee6:	f7ff fb63 	bl	80005b0 <__aeabi_dmul>
 8000eea:	f7ff fe39 	bl	8000b60 <__aeabi_d2uiz>
 8000eee:	4604      	mov	r4, r0
 8000ef0:	f7ff fae4 	bl	80004bc <__aeabi_ui2d>
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <__aeabi_d2ulz+0x38>)
 8000ef8:	f7ff fb5a 	bl	80005b0 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4630      	mov	r0, r6
 8000f02:	4639      	mov	r1, r7
 8000f04:	f7ff f99c 	bl	8000240 <__aeabi_dsub>
 8000f08:	f7ff fe2a 	bl	8000b60 <__aeabi_d2uiz>
 8000f0c:	4621      	mov	r1, r4
 8000f0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000f10:	3df00000 	.word	0x3df00000
 8000f14:	41f00000 	.word	0x41f00000

08000f18 <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f1c:	460c      	mov	r4, r1
 8000f1e:	4684      	mov	ip, r0
 8000f20:	4620      	mov	r0, r4
  hx711->clk_gpio = clk_gpio;
  hx711->clk_pin = clk_pin;
  hx711->dat_gpio = dat_gpio;
  hx711->dat_pin = dat_pin;

  GPIO_InitTypeDef  gpio = {0};
 8000f22:	f04f 0800 	mov.w	r8, #0
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000f26:	461c      	mov	r4, r3
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2701      	movs	r7, #1
  gpio.Pull = GPIO_NOPULL;
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2a:	2603      	movs	r6, #3
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
  hx711->clk_gpio = clk_gpio;
 8000f32:	f8cc 0000 	str.w	r0, [ip]
  gpio.Pin = clk_pin;
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000f36:	4669      	mov	r1, sp
  hx711->dat_pin = dat_pin;
 8000f38:	f8ac 500a 	strh.w	r5, [ip, #10]
  hx711->clk_pin = clk_pin;
 8000f3c:	f8ac 2008 	strh.w	r2, [ip, #8]
  hx711->dat_gpio = dat_gpio;
 8000f40:	f8cc 3004 	str.w	r3, [ip, #4]
  gpio.Pin = clk_pin;
 8000f44:	9200      	str	r2, [sp, #0]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	e9cd 7801 	strd	r7, r8, [sp, #4]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4a:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000f4c:	f001 fd94 	bl	8002a78 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
  gpio.Pull = GPIO_PULLUP;
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio.Pin = dat_pin;
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000f50:	4669      	mov	r1, sp
 8000f52:	4620      	mov	r0, r4
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f54:	e9cd 7602 	strd	r7, r6, [sp, #8]
  gpio.Mode = GPIO_MODE_INPUT;
 8000f58:	f8cd 8004 	str.w	r8, [sp, #4]
  gpio.Pin = dat_pin;
 8000f5c:	9500      	str	r5, [sp, #0]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000f5e:	f001 fd8b 	bl	8002a78 <HAL_GPIO_Init>

}
 8000f62:	b004      	add	sp, #16
 8000f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f68 <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function.
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 8000f68:	6101      	str	r1, [r0, #16]
	hx711->Bscale = Bscale;
 8000f6a:	61c2      	str	r2, [r0, #28]
}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
  // Define A channel's gain
	switch (Again) {
 8000f70:	2940      	cmp	r1, #64	; 0x40
 8000f72:	d007      	beq.n	8000f84 <set_gain+0x14>
 8000f74:	2980      	cmp	r1, #128	; 0x80
 8000f76:	d101      	bne.n	8000f7c <set_gain+0xc>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	7503      	strb	r3, [r0, #20]
				break;
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
				break;
		}
	hx711->Bgain = 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f880 3020 	strb.w	r3, [r0, #32]
}
 8000f82:	4770      	bx	lr
				hx711->Again = 3;
 8000f84:	2303      	movs	r3, #3
 8000f86:	7503      	strb	r3, [r0, #20]
	hx711->Bgain = 2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f880 3020 	strb.w	r3, [r0, #32]
}
 8000f8e:	4770      	bx	lr

08000f90 <shiftIn>:
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
	else hx711->Boffset = offset;
}

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	2507      	movs	r5, #7
    uint8_t value = 0;
 8000f94:	2700      	movs	r7, #0
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8000f96:	4604      	mov	r4, r0
 8000f98:	460e      	mov	r6, r1
 8000f9a:	e00e      	b.n	8000fba <shiftIn+0x2a>
    uint8_t i;

    for(i = 0; i < 8; ++i) {
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
        if(bitOrder == 0)
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 8000f9c:	f001 fe94 	bl	8002cc8 <HAL_GPIO_ReadPin>
 8000fa0:	f1c5 0307 	rsb	r3, r5, #7
 8000fa4:	4098      	lsls	r0, r3
 8000fa6:	4338      	orrs	r0, r7
 8000fa8:	b2c7      	uxtb	r7, r0
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	8921      	ldrh	r1, [r4, #8]
 8000fae:	6820      	ldr	r0, [r4, #0]
    for(i = 0; i < 8; ++i) {
 8000fb0:	3d01      	subs	r5, #1
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8000fb2:	f001 fe8f 	bl	8002cd4 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 8000fb6:	1c6b      	adds	r3, r5, #1
 8000fb8:	d00e      	beq.n	8000fd8 <shiftIn+0x48>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8000fba:	8921      	ldrh	r1, [r4, #8]
 8000fbc:	6820      	ldr	r0, [r4, #0]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f001 fe88 	bl	8002cd4 <HAL_GPIO_WritePin>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 8000fc4:	8961      	ldrh	r1, [r4, #10]
 8000fc6:	6860      	ldr	r0, [r4, #4]
        if(bitOrder == 0)
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d0e7      	beq.n	8000f9c <shiftIn+0xc>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 8000fcc:	f001 fe7c 	bl	8002cc8 <HAL_GPIO_ReadPin>
 8000fd0:	40a8      	lsls	r0, r5
 8000fd2:	4338      	orrs	r0, r7
 8000fd4:	b2c7      	uxtb	r7, r0
 8000fd6:	e7e8      	b.n	8000faa <shiftIn+0x1a>
    }
    return value;
}
 8000fd8:	4638      	mov	r0, r7
 8000fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000fdc <read>:
		HAL_Delay(0);
	}
}

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 8000fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	460d      	mov	r5, r1
void wait_ready(hx711_t *hx711) {
 8000fe4:	e002      	b.n	8000fec <read+0x10>
		HAL_Delay(0);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f001 f980 	bl	80022ec <HAL_Delay>
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 8000fec:	8961      	ldrh	r1, [r4, #10]
 8000fee:	6860      	ldr	r0, [r4, #4]
 8000ff0:	f001 fe6a 	bl	8002cc8 <HAL_GPIO_ReadPin>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d1f6      	bne.n	8000fe6 <read+0xa>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
	uint8_t data[3] = { 0 };
	uint8_t filler = 0x00;

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f7ff ffc7 	bl	8000f90 <shiftIn>
	data[1] = shiftIn(hx711, 1);
 8001002:	2101      	movs	r1, #1
	data[2] = shiftIn(hx711, 1);
 8001004:	4607      	mov	r7, r0
	data[1] = shiftIn(hx711, 1);
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff ffc2 	bl	8000f90 <shiftIn>
	data[0] = shiftIn(hx711, 1);
 800100c:	2101      	movs	r1, #1
	data[1] = shiftIn(hx711, 1);
 800100e:	4606      	mov	r6, r0
	data[0] = shiftIn(hx711, 1);
 8001010:	4620      	mov	r0, r4
 8001012:	f7ff ffbd 	bl	8000f90 <shiftIn>
 8001016:	4681      	mov	r9, r0

	uint8_t gain = 0;
	if(channel == 0) gain = hx711->Again;
 8001018:	b9f5      	cbnz	r5, 8001058 <read+0x7c>
 800101a:	f894 8014 	ldrb.w	r8, [r4, #20]
	else gain = hx711->Bgain;

	for (unsigned int i = 0; i < gain; i++) {
 800101e:	f1b8 0f00 	cmp.w	r8, #0
 8001022:	d00d      	beq.n	8001040 <read+0x64>
 8001024:	2500      	movs	r5, #0
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8001026:	2201      	movs	r2, #1
 8001028:	8921      	ldrh	r1, [r4, #8]
 800102a:	6820      	ldr	r0, [r4, #0]
 800102c:	f001 fe52 	bl	8002cd4 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 8001030:	3501      	adds	r5, #1
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	8921      	ldrh	r1, [r4, #8]
 8001036:	6820      	ldr	r0, [r4, #0]
 8001038:	f001 fe4c 	bl	8002cd4 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 800103c:	4545      	cmp	r5, r8
 800103e:	d1f2      	bne.n	8001026 <read+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001040:	b662      	cpsie	i
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
			| (unsigned long)(data[2]) << 16
			| (unsigned long)(data[1]) << 8
 8001042:	0233      	lsls	r3, r6, #8
	value = ( (unsigned long)(filler) << 24
 8001044:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8001048:	ea43 0309 	orr.w	r3, r3, r9
	if (data[2] & 0x80) {
 800104c:	f347 10c0 	sbfx	r0, r7, #7, #1
			| (unsigned long)(data[0]) );

	return (long)(value);
}
 8001050:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8001054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else gain = hx711->Bgain;
 8001058:	f894 8020 	ldrb.w	r8, [r4, #32]
 800105c:	e7df      	b.n	800101e <read+0x42>
 800105e:	bf00      	nop

08001060 <tare_all>:
	double sum = read_average(hx711, times, channel);
	set_offset(hx711, sum, channel);
}

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 8001060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001062:	460d      	mov	r5, r1
	read(hx711, channel); // Change channel
 8001064:	2100      	movs	r1, #0
	double sum = read_average(hx711, times, channel);
 8001066:	b26d      	sxtb	r5, r5
void tare_all(hx711_t *hx711, uint8_t times) {
 8001068:	4606      	mov	r6, r0
	read(hx711, channel); // Change channel
 800106a:	f7ff ffb7 	bl	8000fdc <read>
	for (int8_t i = 0; i < times; i++) {
 800106e:	2d00      	cmp	r5, #0
 8001070:	dd28      	ble.n	80010c4 <tare_all+0x64>
 8001072:	2400      	movs	r4, #0
	long sum = 0;
 8001074:	4627      	mov	r7, r4
		sum += read(hx711, channel);
 8001076:	2100      	movs	r1, #0
 8001078:	4630      	mov	r0, r6
 800107a:	f7ff ffaf 	bl	8000fdc <read>
 800107e:	4603      	mov	r3, r0
	for (int8_t i = 0; i < times; i++) {
 8001080:	3401      	adds	r4, #1
		HAL_Delay(0);
 8001082:	2000      	movs	r0, #0
		sum += read(hx711, channel);
 8001084:	441f      	add	r7, r3
		HAL_Delay(0);
 8001086:	f001 f931 	bl	80022ec <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 800108a:	b263      	sxtb	r3, r4
 800108c:	429d      	cmp	r5, r3
 800108e:	dcf2      	bgt.n	8001076 <tare_all+0x16>
	return sum / times;
 8001090:	fb97 f7f5 	sdiv	r7, r7, r5
	read(hx711, channel); // Change channel
 8001094:	2400      	movs	r4, #0
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8001096:	60f7      	str	r7, [r6, #12]
	read(hx711, channel); // Change channel
 8001098:	2101      	movs	r1, #1
 800109a:	4630      	mov	r0, r6
 800109c:	f7ff ff9e 	bl	8000fdc <read>
 80010a0:	4627      	mov	r7, r4
		sum += read(hx711, channel);
 80010a2:	2101      	movs	r1, #1
 80010a4:	4630      	mov	r0, r6
 80010a6:	f7ff ff99 	bl	8000fdc <read>
 80010aa:	4603      	mov	r3, r0
	for (int8_t i = 0; i < times; i++) {
 80010ac:	3401      	adds	r4, #1
		HAL_Delay(0);
 80010ae:	2000      	movs	r0, #0
		sum += read(hx711, channel);
 80010b0:	441f      	add	r7, r3
		HAL_Delay(0);
 80010b2:	f001 f91b 	bl	80022ec <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 80010b6:	b263      	sxtb	r3, r4
 80010b8:	429d      	cmp	r5, r3
 80010ba:	dcf2      	bgt.n	80010a2 <tare_all+0x42>
	return sum / times;
 80010bc:	fb97 f5f5 	sdiv	r5, r7, r5
	else hx711->Boffset = offset;
 80010c0:	61b5      	str	r5, [r6, #24]
	tare(hx711, times, CHANNEL_A);
	tare(hx711, times, CHANNEL_B);
}
 80010c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 80010c4:	2500      	movs	r5, #0
	read(hx711, channel); // Change channel
 80010c6:	2101      	movs	r1, #1
 80010c8:	4630      	mov	r0, r6
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 80010ca:	60f5      	str	r5, [r6, #12]
	read(hx711, channel); // Change channel
 80010cc:	f7ff ff86 	bl	8000fdc <read>
	else hx711->Boffset = offset;
 80010d0:	61b5      	str	r5, [r6, #24]
}
 80010d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080010d4 <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 80010d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d8:	4692      	mov	sl, r2
 80010da:	4689      	mov	r9, r1
  // Read load cell
	read(hx711, channel);
 80010dc:	4611      	mov	r1, r2
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 80010de:	4606      	mov	r6, r0
	read(hx711, channel);
 80010e0:	f7ff ff7c 	bl	8000fdc <read>
	float scale = 0;
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 80010e4:	f1ba 0f00 	cmp.w	sl, #0
 80010e8:	d129      	bne.n	800113e <get_weight+0x6a>
	for (int8_t i = 0; i < times; i++) {
 80010ea:	f1b9 0f00 	cmp.w	r9, #0
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 80010ee:	6937      	ldr	r7, [r6, #16]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 80010f0:	f8d6 800c 	ldr.w	r8, [r6, #12]
	for (int8_t i = 0; i < times; i++) {
 80010f4:	dd29      	ble.n	800114a <get_weight+0x76>
 80010f6:	2400      	movs	r4, #0
	long sum = 0;
 80010f8:	4625      	mov	r5, r4
		sum += read(hx711, channel);
 80010fa:	4651      	mov	r1, sl
 80010fc:	4630      	mov	r0, r6
 80010fe:	f7ff ff6d 	bl	8000fdc <read>
 8001102:	4603      	mov	r3, r0
 8001104:	3401      	adds	r4, #1
		HAL_Delay(0);
 8001106:	2000      	movs	r0, #0
 8001108:	b264      	sxtb	r4, r4
		sum += read(hx711, channel);
 800110a:	441d      	add	r5, r3
		HAL_Delay(0);
 800110c:	f001 f8ee 	bl	80022ec <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 8001110:	45a1      	cmp	r9, r4
 8001112:	d1f2      	bne.n	80010fa <get_weight+0x26>
	return sum / times;
 8001114:	fb95 f0f9 	sdiv	r0, r5, r9
	return read_average(hx711, times, channel) - offset;
 8001118:	eba0 0008 	sub.w	r0, r0, r8
 800111c:	f7ff f9de 	bl	80004dc <__aeabi_i2d>
 8001120:	4604      	mov	r4, r0
	else scale = hx711->Bscale;
	return get_value(hx711, times, channel) / scale;
 8001122:	4638      	mov	r0, r7
	return read_average(hx711, times, channel) - offset;
 8001124:	460d      	mov	r5, r1
	return get_value(hx711, times, channel) / scale;
 8001126:	f7ff f9eb 	bl	8000500 <__aeabi_f2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4620      	mov	r0, r4
 8001130:	4629      	mov	r1, r5
 8001132:	f7ff fb67 	bl	8000804 <__aeabi_ddiv>
 8001136:	f7ff fd33 	bl	8000ba0 <__aeabi_d2f>
}
 800113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int8_t i = 0; i < times; i++) {
 800113e:	f1b9 0f00 	cmp.w	r9, #0
	else scale = hx711->Bscale;
 8001142:	69f7      	ldr	r7, [r6, #28]
	else offset = hx711->Boffset;
 8001144:	f8d6 8018 	ldr.w	r8, [r6, #24]
	for (int8_t i = 0; i < times; i++) {
 8001148:	dcd5      	bgt.n	80010f6 <get_weight+0x22>
 800114a:	2000      	movs	r0, #0
 800114c:	e7e4      	b.n	8001118 <get_weight+0x44>
 800114e:	bf00      	nop

08001150 <init_weight>:
	snprintf(weightStr, 10, "%.2f", weight);
	strcat(weightStr, " g   ");
	printToScreen(0, lcdGetHeight() / 2 + 60, weightStr);
}

void init_weight(hx711_t *hx711){
 8001150:	b530      	push	{r4, r5, lr}

	/* Initialize the hx711 sensors */
	hx711_init(hx711, GPIOB, GPIO_PIN_6, GPIOB , GPIO_PIN_7);
 8001152:	2580      	movs	r5, #128	; 0x80
void init_weight(hx711_t *hx711){
 8001154:	4604      	mov	r4, r0
	hx711_init(hx711, GPIOB, GPIO_PIN_6, GPIOB , GPIO_PIN_7);
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <init_weight+0x38>)
void init_weight(hx711_t *hx711){
 8001158:	b083      	sub	sp, #12
	hx711_init(hx711, GPIOB, GPIO_PIN_6, GPIOB , GPIO_PIN_7);
 800115a:	4619      	mov	r1, r3
 800115c:	2240      	movs	r2, #64	; 0x40
 800115e:	9500      	str	r5, [sp, #0]
 8001160:	f7ff feda 	bl	8000f18 <hx711_init>

	/* Configure gain for each channel (see datasheet for details) */
	set_gain(hx711, 128, 32);
 8001164:	4629      	mov	r1, r5
 8001166:	4620      	mov	r0, r4
 8001168:	2220      	movs	r2, #32
 800116a:	f7ff ff01 	bl	8000f70 <set_gain>

	/* Set HX711 scaling factor (see README for procedure) */
	set_scale(hx711, 420, 1);
 800116e:	4620      	mov	r0, r4
 8001170:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001174:	4905      	ldr	r1, [pc, #20]	; (800118c <init_weight+0x3c>)
 8001176:	f7ff fef7 	bl	8000f68 <set_scale>

	/* Tare weight */
	tare_all(hx711, 10);
 800117a:	210a      	movs	r1, #10
 800117c:	4620      	mov	r0, r4
}
 800117e:	b003      	add	sp, #12
 8001180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	tare_all(hx711, 10);
 8001184:	f7ff bf6c 	b.w	8001060 <tare_all>
 8001188:	40010c00 	.word	0x40010c00
 800118c:	43d20000 	.word	0x43d20000

08001190 <printToScreen>:
			&& soilMoistureValue > (AirValue - intervals)) {
		printToScreen(0, lcdGetHeight() / 2 + 20, "Dry     ");
	}
}

void printToScreen(unsigned short x, unsigned short y, const char *fmt, ...){
 8001190:	b40c      	push	{r2, r3}
 8001192:	b510      	push	{r4, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	ab04      	add	r3, sp, #16
 8001198:	f853 4b04 	ldr.w	r4, [r3], #4
	va_list args;
	va_start(args, fmt);
 800119c:	9301      	str	r3, [sp, #4]
	lcdSetCursor(x, y);
 800119e:	f000 ffff 	bl	80021a0 <lcdSetCursor>
	lcdPrintf(fmt, args);
 80011a2:	4620      	mov	r0, r4
 80011a4:	9901      	ldr	r1, [sp, #4]
 80011a6:	f000 ff1d 	bl	8001fe4 <lcdPrintf>
	va_end(args);
}
 80011aa:	b002      	add	sp, #8
 80011ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b0:	b002      	add	sp, #8
 80011b2:	4770      	bx	lr

080011b4 <displayWeight>:
void displayWeight(hx711_t loadcell){
 80011b4:	b084      	sub	sp, #16
 80011b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b8:	b08d      	sub	sp, #52	; 0x34
 80011ba:	f10d 0c0c 	add.w	ip, sp, #12
	weightA = get_weight(&hx711, 10, CHANNEL_A);
 80011be:	4664      	mov	r4, ip
 80011c0:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
void displayWeight(hx711_t loadcell){
 80011c4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80011c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80011cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80011d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80011d8:	f8de 3000 	ldr.w	r3, [lr]
	weightA = get_weight(&hx711, 10, CHANNEL_A);
 80011dc:	2200      	movs	r2, #0
 80011de:	f8cc 3000 	str.w	r3, [ip]
 80011e2:	210a      	movs	r1, #10
 80011e4:	4620      	mov	r0, r4
 80011e6:	f7ff ff75 	bl	80010d4 <get_weight>
 80011ea:	f7ff fe37 	bl	8000e5c <__aeabi_f2iz>
 80011ee:	4605      	mov	r5, r0
	weightB = get_weight(&hx711, 10, CHANNEL_B);
 80011f0:	2201      	movs	r2, #1
 80011f2:	210a      	movs	r1, #10
 80011f4:	4620      	mov	r0, r4
 80011f6:	f7ff ff6d 	bl	80010d4 <get_weight>
	return weightA;
 80011fa:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
 80011fe:	f7ff fdd9 	bl	8000db4 <__aeabi_i2f>
	snprintf(weightStr, 10, "%.2f", weight);
 8001202:	f7ff f97d 	bl	8000500 <__aeabi_f2d>
 8001206:	4606      	mov	r6, r0
 8001208:	460f      	mov	r7, r1
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <displayWeight+0x98>)
 800120c:	210a      	movs	r1, #10
 800120e:	4620      	mov	r0, r4
 8001210:	e9cd 6700 	strd	r6, r7, [sp]
 8001214:	f003 f898 	bl	8004348 <sniprintf>
	strcat(weightStr, " g   ");
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff f805 	bl	8000228 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <displayWeight+0x9c>)
 8001222:	8891      	ldrh	r1, [r2, #4]
 8001224:	6810      	ldr	r0, [r2, #0]
 8001226:	18e2      	adds	r2, r4, r3
 8001228:	50e0      	str	r0, [r4, r3]
 800122a:	8091      	strh	r1, [r2, #4]
	printToScreen(0, lcdGetHeight() / 2 + 60, weightStr);
 800122c:	f000 ffe4 	bl	80021f8 <lcdGetHeight>
 8001230:	4601      	mov	r1, r0
 8001232:	0849      	lsrs	r1, r1, #1
 8001234:	313c      	adds	r1, #60	; 0x3c
 8001236:	4622      	mov	r2, r4
 8001238:	2000      	movs	r0, #0
 800123a:	b289      	uxth	r1, r1
 800123c:	f7ff ffa8 	bl	8001190 <printToScreen>
}
 8001240:	b00d      	add	sp, #52	; 0x34
 8001242:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001246:	b004      	add	sp, #16
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	08007f88 	.word	0x08007f88
 8001250:	08007f90 	.word	0x08007f90

08001254 <getSoilMoisture>:
void getSoilMoisture() {
 8001254:	b510      	push	{r4, lr}
	soilMoistureValue = HAL_ADC_GetValue(&hadc1);
 8001256:	4820      	ldr	r0, [pc, #128]	; (80012d8 <getSoilMoisture+0x84>)
 8001258:	f001 f90c 	bl	8002474 <HAL_ADC_GetValue>
 800125c:	4604      	mov	r4, r0
	lcdSetCursor(0, lcdGetHeight() / 2);
 800125e:	f000 ffcb 	bl	80021f8 <lcdGetHeight>
 8001262:	4601      	mov	r1, r0
 8001264:	2000      	movs	r0, #0
 8001266:	f3c1 014f 	ubfx	r1, r1, #1, #16
 800126a:	f000 ff99 	bl	80021a0 <lcdSetCursor>
	lcdPrintf("Soil Moisture: %d\r\n", soilMoistureValue);
 800126e:	4621      	mov	r1, r4
 8001270:	481a      	ldr	r0, [pc, #104]	; (80012dc <getSoilMoisture+0x88>)
 8001272:	f000 feb7 	bl	8001fe4 <lcdPrintf>
	HAL_Delay(200);
 8001276:	20c8      	movs	r0, #200	; 0xc8
 8001278:	f001 f838 	bl	80022ec <HAL_Delay>
	if (soilMoistureValue > WaterValue
 800127c:	f640 5334 	movw	r3, #3380	; 0xd34
 8001280:	429c      	cmp	r4, r3
 8001282:	dd0e      	ble.n	80012a2 <getSoilMoisture+0x4e>
			&& soilMoistureValue < (WaterValue + intervals)) {
 8001284:	f640 6321 	movw	r3, #3617	; 0xe21
 8001288:	429c      	cmp	r4, r3
 800128a:	dd0b      	ble.n	80012a4 <getSoilMoisture+0x50>
	} else if (soilMoistureValue > (WaterValue + intervals)
 800128c:	f640 6322 	movw	r3, #3618	; 0xe22
 8001290:	429c      	cmp	r4, r3
 8001292:	d018      	beq.n	80012c6 <getSoilMoisture+0x72>
			&& soilMoistureValue < (AirValue - intervals)) {
 8001294:	f640 7311 	movw	r3, #3857	; 0xf11
 8001298:	429c      	cmp	r4, r3
 800129a:	dd0f      	ble.n	80012bc <getSoilMoisture+0x68>
	} else if (soilMoistureValue < AirValue
 800129c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80012a0:	db11      	blt.n	80012c6 <getSoilMoisture+0x72>
}
 80012a2:	bd10      	pop	{r4, pc}
		printToScreen(0, lcdGetHeight() / 2 + 20, "Very wet");
 80012a4:	f000 ffa8 	bl	80021f8 <lcdGetHeight>
 80012a8:	4601      	mov	r1, r0
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <getSoilMoisture+0x8c>)
		printToScreen(0, lcdGetHeight() / 2 + 20, "Dry     ");
 80012ac:	0849      	lsrs	r1, r1, #1
 80012ae:	3114      	adds	r1, #20
 80012b0:	2000      	movs	r0, #0
}
 80012b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printToScreen(0, lcdGetHeight() / 2 + 20, "Dry     ");
 80012b6:	b289      	uxth	r1, r1
 80012b8:	f7ff bf6a 	b.w	8001190 <printToScreen>
		printToScreen(0, lcdGetHeight() / 2 + 20, "Wet     ");
 80012bc:	f000 ff9c 	bl	80021f8 <lcdGetHeight>
 80012c0:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <getSoilMoisture+0x90>)
 80012c2:	4601      	mov	r1, r0
 80012c4:	e7f2      	b.n	80012ac <getSoilMoisture+0x58>
			&& soilMoistureValue > (AirValue - intervals)) {
 80012c6:	f640 7312 	movw	r3, #3858	; 0xf12
 80012ca:	429c      	cmp	r4, r3
 80012cc:	dde9      	ble.n	80012a2 <getSoilMoisture+0x4e>
		printToScreen(0, lcdGetHeight() / 2 + 20, "Dry     ");
 80012ce:	f000 ff93 	bl	80021f8 <lcdGetHeight>
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <getSoilMoisture+0x94>)
 80012d4:	4601      	mov	r1, r0
 80012d6:	e7e9      	b.n	80012ac <getSoilMoisture+0x58>
 80012d8:	20000224 	.word	0x20000224
 80012dc:	08007f98 	.word	0x08007f98
 80012e0:	08007fac 	.word	0x08007fac
 80012e4:	08007fb8 	.word	0x08007fb8
 80012e8:	08007fc4 	.word	0x08007fc4

080012ec <drawLines>:

void drawLines(uint16_t color) {
 80012ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	4604      	mov	r4, r0
	unsigned long start, t;
	int x1, y1, x2, y2, w = lcdGetWidth(), h = lcdGetHeight();
 80012f4:	f000 ff7a 	bl	80021ec <lcdGetWidth>
 80012f8:	4680      	mov	r8, r0
 80012fa:	f000 ff7d 	bl	80021f8 <lcdGetHeight>
 80012fe:	4607      	mov	r7, r0

	lcdFillRGB(COLOR_BLACK);
 8001300:	2000      	movs	r0, #0
 8001302:	f000 fc4f 	bl	8001ba4 <lcdFillRGB>

	x1 = y1 = 0;
	y2 = h - 1;
 8001306:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
	start = HAL_GetTick();
 800130a:	f000 ffe9 	bl	80022e0 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 800130e:	f1b8 0f00 	cmp.w	r8, #0
 8001312:	d04c      	beq.n	80013ae <drawLines+0xc2>
 8001314:	2500      	movs	r5, #0
	y2 = h - 1;

	start = HAL_GetTick();

	for (x2 = 0; x2 < w; x2 += 6)
		lcdDrawLine(x1, y1, x2, y2, color);
 8001316:	fa0f fa89 	sxth.w	sl, r9
		lcdDrawLine(x1, y1, x2, y2, color);
 800131a:	2100      	movs	r1, #0
 800131c:	b22a      	sxth	r2, r5
 800131e:	4653      	mov	r3, sl
 8001320:	4608      	mov	r0, r1
 8001322:	9400      	str	r4, [sp, #0]
	for (x2 = 0; x2 < w; x2 += 6)
 8001324:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 8001326:	f000 fc73 	bl	8001c10 <lcdDrawLine>
	for (x2 = 0; x2 < w; x2 += 6)
 800132a:	45a8      	cmp	r8, r5
 800132c:	dcf5      	bgt.n	800131a <drawLines+0x2e>
	x2 = w - 1;
 800132e:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
	for (y2 = 0; y2 < h; y2 += 6)
 8001332:	2f00      	cmp	r7, #0
 8001334:	d04b      	beq.n	80013ce <drawLines+0xe2>
 8001336:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 8001338:	b236      	sxth	r6, r6
		lcdDrawLine(x1, y1, x2, y2, color);
 800133a:	2100      	movs	r1, #0
 800133c:	b22b      	sxth	r3, r5
 800133e:	4632      	mov	r2, r6
 8001340:	4608      	mov	r0, r1
 8001342:	9400      	str	r4, [sp, #0]
	for (y2 = 0; y2 < h; y2 += 6)
 8001344:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 8001346:	f000 fc63 	bl	8001c10 <lcdDrawLine>
	for (y2 = 0; y2 < h; y2 += 6)
 800134a:	42af      	cmp	r7, r5
 800134c:	dcf5      	bgt.n	800133a <drawLines+0x4e>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 800134e:	f000 ffc7 	bl	80022e0 <HAL_GetTick>
	HAL_Delay(1000);
 8001352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001356:	f000 ffc9 	bl	80022ec <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 800135a:	2000      	movs	r0, #0
 800135c:	f000 fc22 	bl	8001ba4 <lcdFillRGB>
	start = HAL_GetTick();
 8001360:	f000 ffbe 	bl	80022e0 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 8001364:	f1b8 0f00 	cmp.w	r8, #0
 8001368:	d00d      	beq.n	8001386 <drawLines+0x9a>
 800136a:	fa0f fa89 	sxth.w	sl, r9
 800136e:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 8001370:	b22a      	sxth	r2, r5
 8001372:	4653      	mov	r3, sl
 8001374:	2100      	movs	r1, #0
 8001376:	4630      	mov	r0, r6
 8001378:	9400      	str	r4, [sp, #0]
	for (x2 = 0; x2 < w; x2 += 6)
 800137a:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 800137c:	f000 fc48 	bl	8001c10 <lcdDrawLine>
	for (x2 = 0; x2 < w; x2 += 6)
 8001380:	45a8      	cmp	r8, r5
 8001382:	dcf5      	bgt.n	8001370 <drawLines+0x84>
	x2 = 0;
	for (y2 = 0; y2 < h; y2 += 6)
 8001384:	b157      	cbz	r7, 800139c <drawLines+0xb0>
	for (x2 = 0; x2 < w; x2 += 6)
 8001386:	2500      	movs	r5, #0
		lcdDrawLine(x1, y1, x2, y2, color);
 8001388:	2200      	movs	r2, #0
 800138a:	b22b      	sxth	r3, r5
 800138c:	4630      	mov	r0, r6
 800138e:	4611      	mov	r1, r2
 8001390:	9400      	str	r4, [sp, #0]
	for (y2 = 0; y2 < h; y2 += 6)
 8001392:	3506      	adds	r5, #6
		lcdDrawLine(x1, y1, x2, y2, color);
 8001394:	f000 fc3c 	bl	8001c10 <lcdDrawLine>
	for (y2 = 0; y2 < h; y2 += 6)
 8001398:	42af      	cmp	r7, r5
 800139a:	dcf5      	bgt.n	8001388 <drawLines+0x9c>
	t += HAL_GetTick() - start;
 800139c:	f000 ffa0 	bl	80022e0 <HAL_GetTick>

	HAL_Delay(1000);
 80013a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

//  return t += HAL_GetTick() - start;
}
 80013a4:	b002      	add	sp, #8
 80013a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_Delay(1000);
 80013aa:	f000 bf9f 	b.w	80022ec <HAL_Delay>
	x2 = w - 1;
 80013ae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (y2 = 0; y2 < h; y2 += 6)
 80013b2:	2f00      	cmp	r7, #0
 80013b4:	d1bf      	bne.n	8001336 <drawLines+0x4a>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 80013b6:	f000 ff93 	bl	80022e0 <HAL_GetTick>
	HAL_Delay(1000);
 80013ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013be:	f000 ff95 	bl	80022ec <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 80013c2:	4638      	mov	r0, r7
 80013c4:	f000 fbee 	bl	8001ba4 <lcdFillRGB>
	start = HAL_GetTick();
 80013c8:	f000 ff8a 	bl	80022e0 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 80013cc:	e7e6      	b.n	800139c <drawLines+0xb0>
	t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 80013ce:	f000 ff87 	bl	80022e0 <HAL_GetTick>
	HAL_Delay(1000);
 80013d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d6:	f000 ff89 	bl	80022ec <HAL_Delay>
	lcdFillRGB(COLOR_BLACK);
 80013da:	4638      	mov	r0, r7
		lcdDrawLine(x1, y1, x2, y2, color);
 80013dc:	b236      	sxth	r6, r6
	lcdFillRGB(COLOR_BLACK);
 80013de:	f000 fbe1 	bl	8001ba4 <lcdFillRGB>
	start = HAL_GetTick();
 80013e2:	f000 ff7d 	bl	80022e0 <HAL_GetTick>
	for (x2 = 0; x2 < w; x2 += 6)
 80013e6:	e7c2      	b.n	800136e <drawLines+0x82>

080013e8 <drawImage>:

void drawImage() {

	lcdFillRGB(COLOR_PEASHOOT_GREEN);
 80013e8:	f24d 60eb 	movw	r0, #55019	; 0xd6eb
void drawImage() {
 80013ec:	b508      	push	{r3, lr}
	lcdFillRGB(COLOR_PEASHOOT_GREEN);
 80013ee:	f000 fbd9 	bl	8001ba4 <lcdFillRGB>
	if (lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE
 80013f2:	f000 ff07 	bl	8002204 <lcdGetOrientation>
 80013f6:	2801      	cmp	r0, #1
 80013f8:	d003      	beq.n	8001402 <drawImage+0x1a>
			|| lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE_MIRROR) {
 80013fa:	f000 ff03 	bl	8002204 <lcdGetOrientation>
 80013fe:	2803      	cmp	r0, #3
 8001400:	d10d      	bne.n	800141e <drawImage+0x36>
		lcdDrawImage((lcdGetWidth() - bmSTLogo.xSize) / 2, 0, &bmSTLogo);
 8001402:	f000 fef3 	bl	80021ec <lcdGetWidth>
 8001406:	4a0d      	ldr	r2, [pc, #52]	; (800143c <drawImage+0x54>)
 8001408:	2100      	movs	r1, #0
 800140a:	8813      	ldrh	r3, [r2, #0]
 800140c:	1ac0      	subs	r0, r0, r3
 800140e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8001412:	f3c0 004f 	ubfx	r0, r0, #1, #16
	} else {
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
	}
	}
 8001416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcdDrawImage((lcdGetWidth() - bmSTLogo.xSize) / 2, 0, &bmSTLogo);
 800141a:	f000 bca9 	b.w	8001d70 <lcdDrawImage>
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
 800141e:	f000 feeb 	bl	80021f8 <lcdGetHeight>
 8001422:	4601      	mov	r1, r0
 8001424:	4a05      	ldr	r2, [pc, #20]	; (800143c <drawImage+0x54>)
 8001426:	2000      	movs	r0, #0
 8001428:	8853      	ldrh	r3, [r2, #2]
 800142a:	1ac9      	subs	r1, r1, r3
 800142c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8001430:	f3c1 014f 	ubfx	r1, r1, #1, #16
	}
 8001434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
 8001438:	f000 bc9a 	b.w	8001d70 <lcdDrawImage>
 800143c:	080100cc 	.word	0x080100cc

08001440 <start_animation>:
void start_animation() {
 8001440:	b508      	push	{r3, lr}
	drawLines(COLOR_PEASHOOT_GREEN);
 8001442:	f24d 60eb 	movw	r0, #55019	; 0xd6eb
 8001446:	f7ff ff51 	bl	80012ec <drawLines>
	HAL_Delay(200);
 800144a:	20c8      	movs	r0, #200	; 0xc8
 800144c:	f000 ff4e 	bl	80022ec <HAL_Delay>
}
 8001450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	drawImage();
 8001454:	f7ff bfc8 	b.w	80013e8 <drawImage>

08001458 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001458:	2001      	movs	r0, #1
{
 800145a:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145c:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800145e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001462:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001464:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8001468:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800146a:	900c      	str	r0, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146c:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146e:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001470:	e9cd 4213 	strd	r4, r2, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001474:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800147c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001480:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8001484:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001488:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	9301      	str	r3, [sp, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800148e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001490:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f001 fc21 	bl	8002cdc <HAL_RCC_OscConfig>
 800149a:	b108      	cbz	r0, 80014a0 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800149e:	e7fe      	b.n	800149e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	4603      	mov	r3, r0
 80014a2:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a4:	e9cd 4302 	strd	r4, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ae:	4621      	mov	r1, r4
 80014b0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b4:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b6:	f001 fe3d 	bl	8003134 <HAL_RCC_ClockConfig>
 80014ba:	b108      	cbz	r0, 80014c0 <SystemClock_Config+0x68>
 80014bc:	b672      	cpsid	i
	while (1) {
 80014be:	e7fe      	b.n	80014be <SystemClock_Config+0x66>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c4:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014c6:	9406      	str	r4, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014c8:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ca:	f001 fee3 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	b108      	cbz	r0, 80014d4 <SystemClock_Config+0x7c>
 80014d0:	b672      	cpsid	i
	while (1) {
 80014d2:	e7fe      	b.n	80014d2 <SystemClock_Config+0x7a>
}
 80014d4:	b016      	add	sp, #88	; 0x58
 80014d6:	bd10      	pop	{r4, pc}

080014d8 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	2500      	movs	r5, #0
{
 80014da:	b580      	push	{r7, lr}
  GPIO_InitStruct.Pin = DIN_Pin;
 80014dc:	f04f 0a04 	mov.w	sl, #4
{
 80014e0:	b094      	sub	sp, #80	; 0x50
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	ac0b      	add	r4, sp, #44	; 0x2c
  HAL_Init();
 80014e4:	f000 fede 	bl	80022a4 <HAL_Init>
  SystemClock_Config();
 80014e8:	f7ff ffb6 	bl	8001458 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	950b      	str	r5, [sp, #44]	; 0x2c
 80014ee:	e9c4 5501 	strd	r5, r5, [r4, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <main+0x23c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	60e5      	str	r5, [r4, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2701      	movs	r7, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, DOUT_Pin|IRQ_Pin|DCLK_Pin, GPIO_PIN_RESET);
 8001502:	2119      	movs	r1, #25
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001504:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001508:	9206      	str	r2, [sp, #24]
 800150a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, DOUT_Pin|IRQ_Pin|DCLK_Pin, GPIO_PIN_RESET);
 800150e:	4882      	ldr	r0, [pc, #520]	; (8001718 <main+0x240>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001510:	f042 0210 	orr.w	r2, r2, #16
 8001514:	619a      	str	r2, [r3, #24]
 8001516:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001518:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151c:	f002 0210 	and.w	r2, r2, #16
 8001520:	9207      	str	r2, [sp, #28]
 8001522:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001524:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001526:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152a:	f042 0220 	orr.w	r2, r2, #32
 800152e:	619a      	str	r2, [r3, #24]
 8001530:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8001532:	4e7a      	ldr	r6, [pc, #488]	; (800171c <main+0x244>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	f002 0220 	and.w	r2, r2, #32
 8001538:	9208      	str	r2, [sp, #32]
 800153a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	699a      	ldr	r2, [r3, #24]
 800153e:	ea42 020a 	orr.w	r2, r2, sl
 8001542:	619a      	str	r2, [r3, #24]
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	ea02 020a 	and.w	r2, r2, sl
 800154a:	9209      	str	r2, [sp, #36]	; 0x24
 800154c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	699a      	ldr	r2, [r3, #24]
 8001550:	f042 0208 	orr.w	r2, r2, #8
 8001554:	619a      	str	r2, [r3, #24]
 8001556:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, DOUT_Pin|IRQ_Pin|DCLK_Pin, GPIO_PIN_RESET);
 8001558:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	930a      	str	r3, [sp, #40]	; 0x28
 8001560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOE, DOUT_Pin|IRQ_Pin|DCLK_Pin, GPIO_PIN_RESET);
 8001562:	f001 fbb7 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_2, GPIO_PIN_RESET);
 8001566:	462a      	mov	r2, r5
 8001568:	f241 0104 	movw	r1, #4100	; 0x1004
 800156c:	486c      	ldr	r0, [pc, #432]	; (8001720 <main+0x248>)
 800156e:	f001 fbb1 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_SET);
 8001572:	463a      	mov	r2, r7
 8001574:	21a0      	movs	r1, #160	; 0xa0
 8001576:	486b      	ldr	r0, [pc, #428]	; (8001724 <main+0x24c>)
 8001578:	f001 fbac 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800157c:	463a      	mov	r2, r7
 800157e:	2102      	movs	r1, #2
 8001580:	4865      	ldr	r0, [pc, #404]	; (8001718 <main+0x240>)
 8001582:	f001 fba7 	bl	8002cd4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001586:	4621      	mov	r1, r4
 8001588:	4863      	ldr	r0, [pc, #396]	; (8001718 <main+0x240>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158a:	e9cd a50b 	strd	sl, r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(DIN_GPIO_Port, &GPIO_InitStruct);
 8001590:	f001 fa72 	bl	8002a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DOUT_Pin|IRQ_Pin|DCLK_Pin|GPIO_PIN_1;
 8001594:	231b      	movs	r3, #27
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001596:	4621      	mov	r1, r4
 8001598:	485f      	ldr	r0, [pc, #380]	; (8001718 <main+0x240>)
  GPIO_InitStruct.Pin = DOUT_Pin|IRQ_Pin|DCLK_Pin|GPIO_PIN_1;
 800159a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	e9cd 750c 	strd	r7, r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a4:	f001 fa68 	bl	8002a78 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a8:	4621      	mov	r1, r4
 80015aa:	485d      	ldr	r0, [pc, #372]	; (8001720 <main+0x248>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	e9cd 870b 	strd	r8, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b0:	e9cd 590d 	strd	r5, r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b4:	f001 fa60 	bl	8002a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_Pin;
 80015b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80015bc:	4621      	mov	r1, r4
 80015be:	4858      	ldr	r0, [pc, #352]	; (8001720 <main+0x248>)
  GPIO_InitStruct.Pin = CS_Pin;
 80015c0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f001 fa57 	bl	8002a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015cc:	4621      	mov	r1, r4
 80015ce:	4854      	ldr	r0, [pc, #336]	; (8001720 <main+0x248>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	e9cd a70b 	strd	sl, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d8:	f001 fa4e 	bl	8002a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015dc:	23a0      	movs	r3, #160	; 0xa0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	4621      	mov	r1, r4
 80015e0:	4850      	ldr	r0, [pc, #320]	; (8001724 <main+0x24c>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015e2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	e9cd 750c 	strd	r7, r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f001 fa44 	bl	8002a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f0:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	484c      	ldr	r0, [pc, #304]	; (8001724 <main+0x24c>)
 80015f4:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f001 fa3c 	bl	8002a78 <HAL_GPIO_Init>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001600:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8001604:	61f3      	str	r3, [r6, #28]
  hadc1.Instance = ADC1;
 8001606:	4b48      	ldr	r3, [pc, #288]	; (8001728 <main+0x250>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001608:	4630      	mov	r0, r6
  ADC_ChannelConfTypeDef sConfig = {0};
 800160a:	950b      	str	r5, [sp, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800160c:	60b5      	str	r5, [r6, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800160e:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001612:	7337      	strb	r7, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001614:	7535      	strb	r5, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001616:	6075      	str	r5, [r6, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001618:	6137      	str	r7, [r6, #16]
  hadc1.Instance = ADC1;
 800161a:	6033      	str	r3, [r6, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800161c:	f001 f89c 	bl	8002758 <HAL_ADC_Init>
 8001620:	b108      	cbz	r0, 8001626 <main+0x14e>
 8001622:	b672      	cpsid	i
	while (1) {
 8001624:	e7fe      	b.n	8001624 <main+0x14c>
  sConfig.Channel = ADC_CHANNEL_12;
 8001626:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001628:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162a:	4621      	mov	r1, r4
 800162c:	4630      	mov	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800162e:	970c      	str	r7, [sp, #48]	; 0x30
  sConfig.Channel = ADC_CHANNEL_12;
 8001630:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001632:	f000 ff23 	bl	800247c <HAL_ADC_ConfigChannel>
 8001636:	4602      	mov	r2, r0
 8001638:	bb20      	cbnz	r0, 8001684 <main+0x1ac>
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800163a:	900e      	str	r0, [sp, #56]	; 0x38
 800163c:	9011      	str	r0, [sp, #68]	; 0x44
  Timing.AddressHoldTime = 15;
 800163e:	200f      	movs	r0, #15
 8001640:	900c      	str	r0, [sp, #48]	; 0x30
  Timing.DataSetupTime = 5;
 8001642:	2005      	movs	r0, #5
 8001644:	900d      	str	r0, [sp, #52]	; 0x34
  Timing.DataLatency = 17;
 8001646:	2011      	movs	r0, #17
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001648:	2310      	movs	r3, #16
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800164a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
  Timing.DataLatency = 17;
 800164e:	9010      	str	r0, [sp, #64]	; 0x40
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001650:	4836      	ldr	r0, [pc, #216]	; (800172c <main+0x254>)
  Timing.CLKDivision = 16;
 8001652:	930f      	str	r3, [sp, #60]	; 0x3c
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001654:	6143      	str	r3, [r0, #20]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001656:	4b36      	ldr	r3, [pc, #216]	; (8001730 <main+0x258>)
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001658:	6001      	str	r1, [r0, #0]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800165a:	4621      	mov	r1, r4
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800165c:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001660:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001664:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001668:	e9c0 820a 	strd	r8, r2, [r0, #40]	; 0x28
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800166c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
  Timing.AddressSetupTime = 1;
 8001670:	970b      	str	r7, [sp, #44]	; 0x2c
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001672:	6102      	str	r2, [r0, #16]
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001674:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001676:	6043      	str	r3, [r0, #4]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001678:	f001 ff14 	bl	80034a4 <HAL_SRAM_Init>
 800167c:	4605      	mov	r5, r0
 800167e:	b118      	cbz	r0, 8001688 <main+0x1b0>
 8001680:	b672      	cpsid	i
	while (1) {
 8001682:	e7fe      	b.n	8001682 <main+0x1aa>
 8001684:	b672      	cpsid	i
 8001686:	e7fe      	b.n	8001686 <main+0x1ae>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001688:	4a2a      	ldr	r2, [pc, #168]	; (8001734 <main+0x25c>)
	HAL_ADCEx_Calibration_Start(&hadc1);
 800168a:	4630      	mov	r0, r6
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800168c:	69d3      	ldr	r3, [r2, #28]
 800168e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001692:	61d3      	str	r3, [r2, #28]
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001694:	f001 f90c 	bl	80028b0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8001698:	4630      	mov	r0, r6
 800169a:	f000 ffcd 	bl	8002638 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800169e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016a2:	4630      	mov	r0, r6
 80016a4:	f000 fe34 	bl	8002310 <HAL_ADC_PollForConversion>
	init_weight(&loadcell);
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff fd51 	bl	8001150 <init_weight>
	LCD_BL_ON();
 80016ae:	462a      	mov	r2, r5
 80016b0:	4641      	mov	r1, r8
 80016b2:	481b      	ldr	r0, [pc, #108]	; (8001720 <main+0x248>)
 80016b4:	f001 fb0e 	bl	8002cd4 <HAL_GPIO_WritePin>
	lcdInit();
 80016b8:	f000 f93c 	bl	8001934 <lcdInit>
	lcdSetOrientation(1);
 80016bc:	4638      	mov	r0, r7
 80016be:	f000 fd09 	bl	80020d4 <lcdSetOrientation>
	lcdSetTextFont(&Font16);
 80016c2:	481d      	ldr	r0, [pc, #116]	; (8001738 <main+0x260>)
 80016c4:	f000 fcfa 	bl	80020bc <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_PEASHOOT_GREEN);
 80016c8:	f24d 61eb 	movw	r1, #55019	; 0xd6eb
 80016cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016d0:	f000 fcfa 	bl	80020c8 <lcdSetTextColor>
	start_animation();
 80016d4:	f7ff feb4 	bl	8001440 <start_animation>
	lcdSetCursor(0, lcdGetHeight() / 2);
 80016d8:	f000 fd8e 	bl	80021f8 <lcdGetHeight>
 80016dc:	4601      	mov	r1, r0
 80016de:	4628      	mov	r0, r5
 80016e0:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80016e4:	f000 fd5c 	bl	80021a0 <lcdSetCursor>
	lcdPrintf("Humidity: \r\n");
 80016e8:	4814      	ldr	r0, [pc, #80]	; (800173c <main+0x264>)
 80016ea:	f000 fc7b 	bl	8001fe4 <lcdPrintf>
		getSoilMoisture();
 80016ee:	f7ff fdb1 	bl	8001254 <getSoilMoisture>
		displayWeight(loadcell);
 80016f2:	46ec      	mov	ip, sp
 80016f4:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 80016f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80016fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001700:	f8de 5000 	ldr.w	r5, [lr]
 8001704:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001708:	f8cc 5000 	str.w	r5, [ip]
 800170c:	f7ff fd52 	bl	80011b4 <displayWeight>
	while (1) {
 8001710:	e7ed      	b.n	80016ee <main+0x216>
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	40011800 	.word	0x40011800
 800171c:	20000224 	.word	0x20000224
 8001720:	40011400 	.word	0x40011400
 8001724:	40010c00 	.word	0x40010c00
 8001728:	40012400 	.word	0x40012400
 800172c:	20000254 	.word	0x20000254
 8001730:	a0000104 	.word	0xa0000104
 8001734:	40010000 	.word	0x40010000
 8001738:	2000000c 	.word	0x2000000c
 800173c:	08007fd0 	.word	0x08007fd0

08001740 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_MspInit+0x3c>)
{
 8001742:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001744:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001746:	490e      	ldr	r1, [pc, #56]	; (8001780 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001748:	f042 0201 	orr.w	r2, r2, #1
 800174c:	619a      	str	r2, [r3, #24]
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	f002 0201 	and.w	r2, r2, #1
 8001754:	9200      	str	r2, [sp, #0]
 8001756:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	69da      	ldr	r2, [r3, #28]
 800175a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800175e:	61da      	str	r2, [r3, #28]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800176a:	684b      	ldr	r3, [r1, #4]
 800176c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001774:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	b002      	add	sp, #8
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000

08001784 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	2300      	movs	r3, #0
{
 8001786:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC1)
 8001788:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <HAL_ADC_MspInit+0x5c>)
 800178a:	6801      	ldr	r1, [r0, #0]
{
 800178c:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 800178e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001794:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hadc->Instance==ADC1)
 8001798:	d001      	beq.n	800179e <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800179a:	b007      	add	sp, #28
 800179c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800179e:	2504      	movs	r5, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a0:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80017aa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b2:	619a      	str	r2, [r3, #24]
 80017b4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017b8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80017bc:	9200      	str	r2, [sp, #0]
 80017be:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	f042 0210 	orr.w	r2, r2, #16
 80017c6:	619a      	str	r2, [r3, #24]
 80017c8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ca:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d6:	f001 f94f 	bl	8002a78 <HAL_GPIO_Init>
}
 80017da:	b007      	add	sp, #28
 80017dc:	bd30      	pop	{r4, r5, pc}
 80017de:	bf00      	nop
 80017e0:	40012400 	.word	0x40012400
 80017e4:	40011000 	.word	0x40011000

080017e8 <HAL_SRAM_MspInit>:

static void HAL_FSMC_MspInit(void){
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017e8:	2100      	movs	r1, #0
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80017ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_SRAM_MspInit+0x58>)
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80017ee:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 80017f0:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017f2:	9104      	str	r1, [sp, #16]
  if (FSMC_Initialized) {
 80017f4:	bb12      	cbnz	r2, 800183c <HAL_SRAM_MspInit+0x54>
  FSMC_Initialized = 1;
 80017f6:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fa:	2403      	movs	r4, #3
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80017fc:	f64f 7680 	movw	r6, #65408	; 0xff80
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001800:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001804:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  FSMC_Initialized = 1;
 8001808:	601f      	str	r7, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 800180a:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <HAL_SRAM_MspInit+0x5c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6153      	str	r3, [r2, #20]
 8001814:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001816:	a902      	add	r1, sp, #8
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001820:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001824:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001826:	f001 f927 	bl	8002a78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800182a:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182e:	4806      	ldr	r0, [pc, #24]	; (8001848 <HAL_SRAM_MspInit+0x60>)
 8001830:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001834:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001836:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001838:	f001 f91e 	bl	8002a78 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800183c:	b007      	add	sp, #28
 800183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001840:	2000029c 	.word	0x2000029c
 8001844:	40011800 	.word	0x40011800
 8001848:	40011400 	.word	0x40011400

0800184c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler>
 800184e:	bf00      	nop

08001850 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <HardFault_Handler>
 8001852:	bf00      	nop

08001854 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler>
 8001856:	bf00      	nop

08001858 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <BusFault_Handler>
 800185a:	bf00      	nop

0800185c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler>
 800185e:	bf00      	nop

08001860 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <DebugMon_Handler>:
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <PendSV_Handler>:
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186c:	f000 bd2c 	b.w	80022c8 <HAL_IncTick>

08001870 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001870:	2001      	movs	r0, #1
 8001872:	4770      	bx	lr

08001874 <_kill>:

int _kill(int pid, int sig)
{
 8001874:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001876:	f001 fec3 	bl	8003600 <__errno>
 800187a:	2216      	movs	r2, #22
 800187c:	4603      	mov	r3, r0
	return -1;
}
 800187e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	errno = EINVAL;
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	bd08      	pop	{r3, pc}
 8001886:	bf00      	nop

08001888 <_exit>:

void _exit (int status)
{
 8001888:	b508      	push	{r3, lr}
	errno = EINVAL;
 800188a:	f001 feb9 	bl	8003600 <__errno>
 800188e:	2316      	movs	r3, #22
 8001890:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001892:	e7fe      	b.n	8001892 <_exit+0xa>

08001894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001894:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	1e16      	subs	r6, r2, #0
 8001898:	dd07      	ble.n	80018aa <_read+0x16>
 800189a:	460c      	mov	r4, r1
 800189c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800189e:	f3af 8000 	nop.w
 80018a2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	42a5      	cmp	r5, r4
 80018a8:	d1f9      	bne.n	800189e <_read+0xa>
	}

return len;
}
 80018aa:	4630      	mov	r0, r6
 80018ac:	bd70      	pop	{r4, r5, r6, pc}
 80018ae:	bf00      	nop

080018b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	1e16      	subs	r6, r2, #0
 80018b4:	dd07      	ble.n	80018c6 <_write+0x16>
 80018b6:	460c      	mov	r4, r1
 80018b8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80018ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 80018be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	42a5      	cmp	r5, r4
 80018c4:	d1f9      	bne.n	80018ba <_write+0xa>
	}
	return len;
}
 80018c6:	4630      	mov	r0, r6
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
 80018ca:	bf00      	nop

080018cc <_close>:

int _close(int file)
{
	return -1;
}
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop

080018d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80018d8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80018da:	604b      	str	r3, [r1, #4]
}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018e0:	2001      	movs	r0, #1
 80018e2:	4770      	bx	lr

080018e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018e4:	2000      	movs	r0, #0
 80018e6:	4770      	bx	lr

080018e8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	490d      	ldr	r1, [pc, #52]	; (8001920 <_sbrk+0x38>)
{
 80018ea:	4603      	mov	r3, r0
 80018ec:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ee:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <_sbrk+0x3c>)
 80018f0:	4c0d      	ldr	r4, [pc, #52]	; (8001928 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80018f2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80018f6:	b120      	cbz	r0, 8001902 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f8:	4403      	add	r3, r0
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d807      	bhi.n	800190e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80018fe:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001900:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001902:	4c0a      	ldr	r4, [pc, #40]	; (800192c <_sbrk+0x44>)
 8001904:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	4403      	add	r3, r0
 8001908:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800190a:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800190c:	d9f7      	bls.n	80018fe <_sbrk+0x16>
    errno = ENOMEM;
 800190e:	f001 fe77 	bl	8003600 <__errno>
 8001912:	220c      	movs	r2, #12
 8001914:	4603      	mov	r3, r0
    return (void *)-1;
 8001916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    errno = ENOMEM;
 800191a:	601a      	str	r2, [r3, #0]
}
 800191c:	bd10      	pop	{r4, pc}
 800191e:	bf00      	nop
 8001920:	200002a0 	.word	0x200002a0
 8001924:	20010000 	.word	0x20010000
 8001928:	00000400 	.word	0x00000400
 800192c:	200003c0 	.word	0x200003c0

08001930 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop

08001934 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8001934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001938:	2348      	movs	r3, #72	; 0x48
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800193a:	2628      	movs	r6, #40	; 0x28
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800193c:	2288      	movs	r2, #136	; 0x88
}

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
	LCD_CmdWrite(command);
 800193e:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8001942:	2501      	movs	r5, #1
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001944:	f04f 08e8 	mov.w	r8, #232	; 0xe8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001948:	4f91      	ldr	r7, [pc, #580]	; (8001b90 <lcdInit+0x25c>)
	HAL_Delay(50);
 800194a:	2032      	movs	r0, #50	; 0x32
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800194c:	703b      	strb	r3, [r7, #0]
  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800194e:	4b91      	ldr	r3, [pc, #580]	; (8001b94 <lcdInit+0x260>)
}

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
	LCD_DataWrite(data);
 8001950:	f04f 0783 	mov.w	r7, #131	; 0x83
  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8001954:	701e      	strb	r6, [r3, #0]
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001956:	4b90      	ldr	r3, [pc, #576]	; (8001b98 <lcdInit+0x264>)
	LCD_DataWrite(data);
 8001958:	f04f 092c 	mov.w	r9, #44	; 0x2c
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800195c:	701a      	strb	r2, [r3, #0]
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800195e:	4b8f      	ldr	r3, [pc, #572]	; (8001b9c <lcdInit+0x268>)
	LCD_DataWrite(data);
 8001960:	f04f 0a11 	mov.w	sl, #17
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001964:	f883 8000 	strb.w	r8, [r3]
	LCD_CmdWrite(command);
 8001968:	8025      	strh	r5, [r4, #0]
	HAL_Delay(50);
 800196a:	f000 fcbf 	bl	80022ec <HAL_Delay>
	LCD_CmdWrite(command);
 800196e:	23cf      	movs	r3, #207	; 0xcf
	LCD_DataWrite(data);
 8001970:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 8001972:	8026      	strh	r6, [r4, #0]
 8001974:	8023      	strh	r3, [r4, #0]
	LCD_DataWrite(data);
 8001976:	4b8a      	ldr	r3, [pc, #552]	; (8001ba0 <lcdInit+0x26c>)
 8001978:	2664      	movs	r6, #100	; 0x64
 800197a:	801a      	strh	r2, [r3, #0]
 800197c:	801f      	strh	r7, [r3, #0]
 800197e:	f04f 0730 	mov.w	r7, #48	; 0x30
 8001982:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001984:	f04f 07ed 	mov.w	r7, #237	; 0xed
 8001988:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800198a:	f04f 0703 	mov.w	r7, #3
 800198e:	801e      	strh	r6, [r3, #0]
 8001990:	801f      	strh	r7, [r3, #0]
 8001992:	f04f 0712 	mov.w	r7, #18
 8001996:	801f      	strh	r7, [r3, #0]
 8001998:	f04f 0781 	mov.w	r7, #129	; 0x81
 800199c:	801f      	strh	r7, [r3, #0]
 800199e:	f04f 0785 	mov.w	r7, #133	; 0x85
	LCD_CmdWrite(command);
 80019a2:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 80019a6:	801f      	strh	r7, [r3, #0]
 80019a8:	f04f 0779 	mov.w	r7, #121	; 0x79
 80019ac:	801d      	strh	r5, [r3, #0]
 80019ae:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80019b0:	f04f 07cb 	mov.w	r7, #203	; 0xcb
 80019b4:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80019b6:	f04f 0739 	mov.w	r7, #57	; 0x39
 80019ba:	801f      	strh	r7, [r3, #0]
 80019bc:	f04f 0734 	mov.w	r7, #52	; 0x34
 80019c0:	f8a3 9000 	strh.w	r9, [r3]
 80019c4:	f04f 0802 	mov.w	r8, #2
 80019c8:	801a      	strh	r2, [r3, #0]
 80019ca:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80019cc:	f04f 07f7 	mov.w	r7, #247	; 0xf7
	LCD_DataWrite(data);
 80019d0:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 80019d4:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80019d6:	f04f 0720 	mov.w	r7, #32
 80019da:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80019dc:	f04f 07ea 	mov.w	r7, #234	; 0xea
 80019e0:	8027      	strh	r7, [r4, #0]
 80019e2:	f04f 07c0 	mov.w	r7, #192	; 0xc0
	LCD_DataWrite(data);
 80019e6:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80019e8:	f04f 08c1 	mov.w	r8, #193	; 0xc1
	LCD_DataWrite(data);
 80019ec:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80019ee:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80019f0:	f04f 0726 	mov.w	r7, #38	; 0x26
 80019f4:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 80019f6:	f8a4 8000 	strh.w	r8, [r4]
 80019fa:	f04f 08c5 	mov.w	r8, #197	; 0xc5
	LCD_DataWrite(data);
 80019fe:	f8a3 a000 	strh.w	sl, [r3]
	LCD_CmdWrite(command);
 8001a02:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8001a06:	f04f 0835 	mov.w	r8, #53	; 0x35
 8001a0a:	f8a3 8000 	strh.w	r8, [r3]
 8001a0e:	f04f 083e 	mov.w	r8, #62	; 0x3e
 8001a12:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8001a16:	f04f 08c7 	mov.w	r8, #199	; 0xc7
 8001a1a:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8001a1e:	f04f 08be 	mov.w	r8, #190	; 0xbe
 8001a22:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8001a26:	f04f 0836 	mov.w	r8, #54	; 0x36
 8001a2a:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
 8001a2e:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8001a32:	f04f 0855 	mov.w	r8, #85	; 0x55
  lcdWriteData(lcdPortraitConfig);
 8001a36:	4f56      	ldr	r7, [pc, #344]	; (8001b90 <lcdInit+0x25c>)
	LCD_DataWrite(data);
 8001a38:	210a      	movs	r1, #10
  lcdWriteData(lcdPortraitConfig);
 8001a3a:	783f      	ldrb	r7, [r7, #0]
	LCD_DataWrite(data);
 8001a3c:	2007      	movs	r0, #7
 8001a3e:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001a40:	f8a4 c000 	strh.w	ip, [r4]
	LCD_DataWrite(data);
 8001a44:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8001a48:	f04f 08b1 	mov.w	r8, #177	; 0xb1
 8001a4c:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8001a50:	f04f 081b 	mov.w	r8, #27
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8001a5a:	f04f 08f2 	mov.w	r8, #242	; 0xf2
 8001a5e:	f04f 0726 	mov.w	r7, #38	; 0x26
 8001a62:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8001a66:	f04f 0808 	mov.w	r8, #8
 8001a6a:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8001a6e:	8027      	strh	r7, [r4, #0]
 8001a70:	f04f 07e0 	mov.w	r7, #224	; 0xe0
	LCD_DataWrite(data);
 8001a74:	801d      	strh	r5, [r3, #0]
 8001a76:	f04f 081a 	mov.w	r8, #26
	LCD_CmdWrite(command);
 8001a7a:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8001a7c:	f04f 071f 	mov.w	r7, #31
 8001a80:	801f      	strh	r7, [r3, #0]
 8001a82:	f8a3 8000 	strh.w	r8, [r3]
 8001a86:	f04f 0818 	mov.w	r8, #24
 8001a8a:	f8a3 8000 	strh.w	r8, [r3]
 8001a8e:	f04f 080f 	mov.w	r8, #15
 8001a92:	8019      	strh	r1, [r3, #0]
 8001a94:	f8a3 8000 	strh.w	r8, [r3]
 8001a98:	f04f 0806 	mov.w	r8, #6
 8001a9c:	f8a3 8000 	strh.w	r8, [r3]
 8001aa0:	f04f 0845 	mov.w	r8, #69	; 0x45
 8001aa4:	f8a3 8000 	strh.w	r8, [r3]
 8001aa8:	f04f 0887 	mov.w	r8, #135	; 0x87
 8001aac:	f8a3 8000 	strh.w	r8, [r3]
 8001ab0:	f04f 0832 	mov.w	r8, #50	; 0x32
 8001ab4:	f8a3 8000 	strh.w	r8, [r3]
 8001ab8:	f04f 0802 	mov.w	r8, #2
 8001abc:	8019      	strh	r1, [r3, #0]
 8001abe:	f04f 0e05 	mov.w	lr, #5
 8001ac2:	8018      	strh	r0, [r3, #0]
 8001ac4:	f8a3 8000 	strh.w	r8, [r3]
	LCD_CmdWrite(command);
 8001ac8:	f04f 08e1 	mov.w	r8, #225	; 0xe1
	LCD_DataWrite(data);
 8001acc:	8018      	strh	r0, [r3, #0]
 8001ace:	f8a3 e000 	strh.w	lr, [r3]
 8001ad2:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 8001ad4:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8001ad8:	f04f 0825 	mov.w	r8, #37	; 0x25
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	f04f 0b27 	mov.w	fp, #39	; 0x27
 8001ae2:	f8a3 8000 	strh.w	r8, [r3]
 8001ae6:	f04f 0810 	mov.w	r8, #16
 8001aea:	f8a3 b000 	strh.w	fp, [r3]
 8001aee:	f8a3 e000 	strh.w	lr, [r3]
 8001af2:	f8a3 8000 	strh.w	r8, [r3]
 8001af6:	f04f 0809 	mov.w	r8, #9
 8001afa:	f8a3 8000 	strh.w	r8, [r3]
 8001afe:	f04f 0878 	mov.w	r8, #120	; 0x78
 8001b02:	f8a3 c000 	strh.w	ip, [r3]
 8001b06:	f8a3 8000 	strh.w	r8, [r3]
 8001b0a:	f04f 084d 	mov.w	r8, #77	; 0x4d
 8001b0e:	f8a3 8000 	strh.w	r8, [r3]
 8001b12:	f8a3 e000 	strh.w	lr, [r3]
 8001b16:	f04f 0818 	mov.w	r8, #24
 8001b1a:	f04f 0e0d 	mov.w	lr, #13
 8001b1e:	f8a3 8000 	strh.w	r8, [r3]
 8001b22:	f8a3 e000 	strh.w	lr, [r3]
 8001b26:	f04f 0e38 	mov.w	lr, #56	; 0x38
 8001b2a:	f8a3 e000 	strh.w	lr, [r3]
 8001b2e:	f8a3 c000 	strh.w	ip, [r3]
 8001b32:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001b34:	f04f 072a 	mov.w	r7, #42	; 0x2a
 8001b38:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8001b3a:	f04f 07ef 	mov.w	r7, #239	; 0xef
 8001b3e:	801a      	strh	r2, [r3, #0]
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	801a      	strh	r2, [r3, #0]
 8001b44:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001b46:	f04f 072b 	mov.w	r7, #43	; 0x2b
 8001b4a:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8001b4c:	801a      	strh	r2, [r3, #0]
 8001b4e:	801a      	strh	r2, [r3, #0]
 8001b50:	801d      	strh	r5, [r3, #0]
 8001b52:	f04f 053f 	mov.w	r5, #63	; 0x3f
 8001b56:	801d      	strh	r5, [r3, #0]
	LCD_CmdWrite(command);
 8001b58:	f04f 05b7 	mov.w	r5, #183	; 0xb7
 8001b5c:	8025      	strh	r5, [r4, #0]
	LCD_DataWrite(data);
 8001b5e:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 8001b60:	f04f 00b6 	mov.w	r0, #182	; 0xb6
 8001b64:	8020      	strh	r0, [r4, #0]
	LCD_DataWrite(data);
 8001b66:	8019      	strh	r1, [r3, #0]
 8001b68:	f04f 0182 	mov.w	r1, #130	; 0x82
  HAL_Delay(100);
 8001b6c:	4630      	mov	r0, r6
	LCD_DataWrite(data);
 8001b6e:	8019      	strh	r1, [r3, #0]
 8001b70:	f8a3 b000 	strh.w	fp, [r3]
 8001b74:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 8001b76:	f8a4 a000 	strh.w	sl, [r4]
  HAL_Delay(100);
 8001b7a:	f000 fbb7 	bl	80022ec <HAL_Delay>
	LCD_CmdWrite(command);
 8001b7e:	2329      	movs	r3, #41	; 0x29
  HAL_Delay(100);
 8001b80:	4630      	mov	r0, r6
	LCD_CmdWrite(command);
 8001b82:	8023      	strh	r3, [r4, #0]
  HAL_Delay(100);
 8001b84:	f000 fbb2 	bl	80022ec <HAL_Delay>
	LCD_CmdWrite(command);
 8001b88:	f8a4 9000 	strh.w	r9, [r4]
}
 8001b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b90:	200003aa 	.word	0x200003aa
 8001b94:	200003a8 	.word	0x200003a8
 8001b98:	200003ab 	.word	0x200003ab
 8001b9c:	200003a9 	.word	0x200003a9
 8001ba0:	60020000 	.word	0x60020000

08001ba4 <lcdFillRGB>:
{
 8001ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
	LCD_CmdWrite(command);
 8001ba6:	232a      	movs	r3, #42	; 0x2a
 8001ba8:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
	LCD_DataWrite(data);
 8001bac:	f04f 0c00 	mov.w	ip, #0
	LCD_CmdWrite(command);
 8001bb0:	262b      	movs	r6, #43	; 0x2b
 8001bb2:	252c      	movs	r5, #44	; 0x2c
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001bb4:	4c14      	ldr	r4, [pc, #80]	; (8001c08 <lcdFillRGB+0x64>)
	LCD_DataWrite(data);
 8001bb6:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <lcdFillRGB+0x68>)
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001bb8:	8821      	ldrh	r1, [r4, #0]
	LCD_CmdWrite(command);
 8001bba:	f8ae 3000 	strh.w	r3, [lr]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001bbe:	8863      	ldrh	r3, [r4, #2]
 8001bc0:	3901      	subs	r1, #1
 8001bc2:	3b01      	subs	r3, #1
  lcdWriteData((x1 >> 8) & 0xFF);
 8001bc4:	f3c1 2707 	ubfx	r7, r1, #8, #8
  lcdWriteData(x1 & 0xFF);
 8001bc8:	b2c9      	uxtb	r1, r1
	LCD_DataWrite(data);
 8001bca:	f8a2 c000 	strh.w	ip, [r2]
 8001bce:	f8a2 c000 	strh.w	ip, [r2]
 8001bd2:	8017      	strh	r7, [r2, #0]
 8001bd4:	8011      	strh	r1, [r2, #0]
  lcdWriteData((y1 >> 8) & 0xFF);
 8001bd6:	f3c3 2107 	ubfx	r1, r3, #8, #8
  lcdWriteData(y1 & 0xFF);
 8001bda:	b2db      	uxtb	r3, r3
	LCD_CmdWrite(command);
 8001bdc:	f8ae 6000 	strh.w	r6, [lr]
	LCD_DataWrite(data);
 8001be0:	f8a2 c000 	strh.w	ip, [r2]
 8001be4:	f8a2 c000 	strh.w	ip, [r2]
 8001be8:	8011      	strh	r1, [r2, #0]
 8001bea:	8013      	strh	r3, [r2, #0]
	LCD_CmdWrite(command);
 8001bec:	f8ae 5000 	strh.w	r5, [lr]
  int dimensions = lcdProperties.width * lcdProperties.height;
 8001bf0:	8821      	ldrh	r1, [r4, #0]
 8001bf2:	8863      	ldrh	r3, [r4, #2]
 8001bf4:	fb03 f101 	mul.w	r1, r3, r1
  while(dimensions--)
 8001bf8:	b121      	cbz	r1, 8001c04 <lcdFillRGB+0x60>
 8001bfa:	1e4b      	subs	r3, r1, #1
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	1c59      	adds	r1, r3, #1
	LCD_DataWrite(data);
 8001c00:	8010      	strh	r0, [r2, #0]
  while(dimensions--)
 8001c02:	d1fb      	bne.n	8001bfc <lcdFillRGB+0x58>
}
 8001c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000024 	.word	0x20000024
 8001c0c:	60020000 	.word	0x60020000

08001c10 <lcdDrawLine>:
{
 8001c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001c14:	1a17      	subs	r7, r2, r0
 8001c16:	1a5e      	subs	r6, r3, r1
 8001c18:	2f00      	cmp	r7, #0
{
 8001c1a:	b083      	sub	sp, #12
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001c1c:	bfb8      	it	lt
 8001c1e:	427f      	neglt	r7, r7
 8001c20:	2e00      	cmp	r6, #0
{
 8001c22:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001c26:	bfb8      	it	lt
 8001c28:	4276      	neglt	r6, r6
	if (steep)
 8001c2a:	42be      	cmp	r6, r7
{
 8001c2c:	9401      	str	r4, [sp, #4]
	if (steep)
 8001c2e:	f340 8094 	ble.w	8001d5a <lcdDrawLine+0x14a>
 8001c32:	4605      	mov	r5, r0
 8001c34:	4694      	mov	ip, r2
 8001c36:	4696      	mov	lr, r2
 8001c38:	4604      	mov	r4, r0
		swap(x2, y2);
 8001c3a:	461a      	mov	r2, r3
		swap(x1, y1);
 8001c3c:	4608      	mov	r0, r1
		swap(x2, y2);
 8001c3e:	4663      	mov	r3, ip
		swap(x1, y1);
 8001c40:	4629      	mov	r1, r5
	if (x1 > x2)
 8001c42:	4290      	cmp	r0, r2
 8001c44:	dd08      	ble.n	8001c58 <lcdDrawLine+0x48>
 8001c46:	46a0      	mov	r8, r4
 8001c48:	468c      	mov	ip, r1
 8001c4a:	4605      	mov	r5, r0
 8001c4c:	4674      	mov	r4, lr
		swap(y1, y2);
 8001c4e:	4619      	mov	r1, r3
	if (x1 > x2)
 8001c50:	4610      	mov	r0, r2
 8001c52:	46c6      	mov	lr, r8
		swap(y1, y2);
 8001c54:	4663      	mov	r3, ip
	if (x1 > x2)
 8001c56:	462a      	mov	r2, r5
	dy = abs(y2 - y1);
 8001c58:	ebae 0e04 	sub.w	lr, lr, r4
	dx = x2 - x1;
 8001c5c:	eba2 0900 	sub.w	r9, r2, r0
	dy = abs(y2 - y1);
 8001c60:	f1be 0f00 	cmp.w	lr, #0
	int16_t err = dx / 2;
 8001c64:	fa0f f489 	sxth.w	r4, r9
 8001c68:	f3c9 3cc0 	ubfx	ip, r9, #15, #1
	dy = abs(y2 - y1);
 8001c6c:	bfb8      	it	lt
 8001c6e:	f1ce 0e00 	rsblt	lr, lr, #0
	int16_t err = dx / 2;
 8001c72:	44a4      	add	ip, r4
	if (y1 < y2)
 8001c74:	428b      	cmp	r3, r1
	dx = x2 - x1;
 8001c76:	fa1f f989 	uxth.w	r9, r9
	int16_t err = dx / 2;
 8001c7a:	ea4f 0c6c 	mov.w	ip, ip, asr #1
	if (y1 < y2)
 8001c7e:	dd67      	ble.n	8001d50 <lcdDrawLine+0x140>
		ystep = 1;
 8001c80:	f04f 0b01 	mov.w	fp, #1
	LCD_CmdWrite(command);
 8001c84:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
	LCD_DataWrite(data);
 8001c88:	46ca      	mov	sl, r9
 8001c8a:	4d37      	ldr	r5, [pc, #220]	; (8001d68 <lcdDrawLine+0x158>)
 8001c8c:	4c37      	ldr	r4, [pc, #220]	; (8001d6c <lcdDrawLine+0x15c>)
		err -= dy;
 8001c8e:	fa1f fe8e 	uxth.w	lr, lr
	LCD_DataWrite(data);
 8001c92:	9200      	str	r2, [sp, #0]
 8001c94:	e038      	b.n	8001d08 <lcdDrawLine+0xf8>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001c96:	4548      	cmp	r0, r9
 8001c98:	d923      	bls.n	8001ce2 <lcdDrawLine+0xd2>
 8001c9a:	8868      	ldrh	r0, [r5, #2]
 8001c9c:	4298      	cmp	r0, r3
 8001c9e:	d920      	bls.n	8001ce2 <lcdDrawLine+0xd2>
	LCD_CmdWrite(command);
 8001ca0:	f04f 022a 	mov.w	r2, #42	; 0x2a
 8001ca4:	f8a8 2000 	strh.w	r2, [r8]
 8001ca8:	f04f 022b 	mov.w	r2, #43	; 0x2b
  lcdWriteData((x0 >> 8) & 0xFF);
 8001cac:	ea4f 2019 	mov.w	r0, r9, lsr #8
  lcdWriteData(x0 & 0xFF);
 8001cb0:	fa5f f989 	uxtb.w	r9, r9
	LCD_DataWrite(data);
 8001cb4:	8020      	strh	r0, [r4, #0]
 8001cb6:	f8a4 9000 	strh.w	r9, [r4]
 8001cba:	8020      	strh	r0, [r4, #0]
 8001cbc:	f8a4 9000 	strh.w	r9, [r4]
  lcdWriteData((y0 >> 8) & 0xFF);
 8001cc0:	ea4f 2913 	mov.w	r9, r3, lsr #8
	LCD_CmdWrite(command);
 8001cc4:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData(y0 & 0xFF);
 8001cc8:	b2d8      	uxtb	r0, r3
	LCD_DataWrite(data);
 8001cca:	f8a4 9000 	strh.w	r9, [r4]
	LCD_CmdWrite(command);
 8001cce:	f04f 022c 	mov.w	r2, #44	; 0x2c
	LCD_DataWrite(data);
 8001cd2:	8020      	strh	r0, [r4, #0]
 8001cd4:	f8a4 9000 	strh.w	r9, [r4]
 8001cd8:	8020      	strh	r0, [r4, #0]
	LCD_CmdWrite(command);
 8001cda:	f8a8 2000 	strh.w	r2, [r8]
	LCD_DataWrite(data);
 8001cde:	9a01      	ldr	r2, [sp, #4]
 8001ce0:	8022      	strh	r2, [r4, #0]
		err -= dy;
 8001ce2:	ebac 0c0e 	sub.w	ip, ip, lr
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b218      	sxth	r0, r3
 8001cea:	fa1f f38c 	uxth.w	r3, ip
 8001cee:	fa0f fc8c 	sxth.w	ip, ip
		if (err < 0)
 8001cf2:	f1bc 0f00 	cmp.w	ip, #0
 8001cf6:	da04      	bge.n	8001d02 <lcdDrawLine+0xf2>
			err += dx;
 8001cf8:	4453      	add	r3, sl
			y1 += ystep;
 8001cfa:	4459      	add	r1, fp
			err += dx;
 8001cfc:	fa0f fc83 	sxth.w	ip, r3
			y1 += ystep;
 8001d00:	b209      	sxth	r1, r1
	for (; x1 <= x2; x1++)
 8001d02:	9b00      	ldr	r3, [sp, #0]
 8001d04:	4298      	cmp	r0, r3
 8001d06:	dc25      	bgt.n	8001d54 <lcdDrawLine+0x144>
		if (steep)
 8001d08:	42be      	cmp	r6, r7
 8001d0a:	b283      	uxth	r3, r0
			lcdDrawPixel(y1, x1, color);
 8001d0c:	fa1f f981 	uxth.w	r9, r1
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001d10:	8828      	ldrh	r0, [r5, #0]
		if (steep)
 8001d12:	dcc0      	bgt.n	8001c96 <lcdDrawLine+0x86>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001d14:	4298      	cmp	r0, r3
			lcdDrawPixel(x1, y1, color);
 8001d16:	b288      	uxth	r0, r1
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001d18:	d9e3      	bls.n	8001ce2 <lcdDrawLine+0xd2>
 8001d1a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
 8001d1e:	4581      	cmp	r9, r0
 8001d20:	d9df      	bls.n	8001ce2 <lcdDrawLine+0xd2>
	LCD_CmdWrite(command);
 8001d22:	f04f 022a 	mov.w	r2, #42	; 0x2a
  lcdWriteData(x0 & 0xFF);
 8001d26:	fa5f f983 	uxtb.w	r9, r3
	LCD_CmdWrite(command);
 8001d2a:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData((x0 >> 8) & 0xFF);
 8001d2e:	0a1a      	lsrs	r2, r3, #8
	LCD_DataWrite(data);
 8001d30:	8022      	strh	r2, [r4, #0]
 8001d32:	f8a4 9000 	strh.w	r9, [r4]
 8001d36:	8022      	strh	r2, [r4, #0]
	LCD_CmdWrite(command);
 8001d38:	f04f 022b 	mov.w	r2, #43	; 0x2b
	LCD_DataWrite(data);
 8001d3c:	f8a4 9000 	strh.w	r9, [r4]
  lcdWriteData((y0 >> 8) & 0xFF);
 8001d40:	ea4f 2910 	mov.w	r9, r0, lsr #8
	LCD_CmdWrite(command);
 8001d44:	f8a8 2000 	strh.w	r2, [r8]
  lcdWriteData(y0 & 0xFF);
 8001d48:	b2c0      	uxtb	r0, r0
	LCD_DataWrite(data);
 8001d4a:	f8a4 9000 	strh.w	r9, [r4]
 8001d4e:	e7be      	b.n	8001cce <lcdDrawLine+0xbe>
	for (; x1 <= x2; x1++)
 8001d50:	4290      	cmp	r0, r2
 8001d52:	dd05      	ble.n	8001d60 <lcdDrawLine+0x150>
}
 8001d54:	b003      	add	sp, #12
 8001d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	469e      	mov	lr, r3
 8001d5e:	e770      	b.n	8001c42 <lcdDrawLine+0x32>
		ystep = -1;
 8001d60:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8001d64:	e78e      	b.n	8001c84 <lcdDrawLine+0x74>
 8001d66:	bf00      	nop
 8001d68:	20000024 	.word	0x20000024
 8001d6c:	60020000 	.word	0x60020000

08001d70 <lcdDrawImage>:
{
 8001d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8001d74:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8001e44 <lcdDrawImage+0xd4>
{
 8001d78:	b085      	sub	sp, #20
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8001d7a:	f8b8 e000 	ldrh.w	lr, [r8]
 8001d7e:	4586      	cmp	lr, r0
 8001d80:	d95c      	bls.n	8001e3c <lcdDrawImage+0xcc>
 8001d82:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 8001d86:	428d      	cmp	r5, r1
 8001d88:	d958      	bls.n	8001e3c <lcdDrawImage+0xcc>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8001d8a:	8813      	ldrh	r3, [r2, #0]
 8001d8c:	4403      	add	r3, r0
 8001d8e:	4573      	cmp	r3, lr
 8001d90:	dc54      	bgt.n	8001e3c <lcdDrawImage+0xcc>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8001d92:	8853      	ldrh	r3, [r2, #2]
 8001d94:	18cc      	adds	r4, r1, r3
 8001d96:	42ac      	cmp	r4, r5
 8001d98:	dc50      	bgt.n	8001e3c <lcdDrawImage+0xcc>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d04e      	beq.n	8001e3c <lcdDrawImage+0xcc>
 8001d9e:	2700      	movs	r7, #0
	LCD_CmdWrite(command);
 8001da0:	f04f 49c0 	mov.w	r9, #1610612736	; 0x60000000
 8001da4:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8001da8:	7993      	ldrb	r3, [r2, #6]
	LCD_DataWrite(data);
 8001daa:	4c27      	ldr	r4, [pc, #156]	; (8001e48 <lcdDrawImage+0xd8>)
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8001dac:	08db      	lsrs	r3, r3, #3
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	6893      	ldr	r3, [r2, #8]
 8001db2:	9300      	str	r3, [sp, #0]
  lcdWriteData((x0 >> 8) & 0xFF);
 8001db4:	0a03      	lsrs	r3, r0, #8
 8001db6:	9302      	str	r3, [sp, #8]
  lcdWriteData(x0 & 0xFF);
 8001db8:	b2c3      	uxtb	r3, r0
 8001dba:	9303      	str	r3, [sp, #12]
	LCD_DataWrite(data);
 8001dbc:	9b02      	ldr	r3, [sp, #8]
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8001dbe:	8890      	ldrh	r0, [r2, #4]
	LCD_CmdWrite(command);
 8001dc0:	f8a9 b000 	strh.w	fp, [r9]
	LCD_DataWrite(data);
 8001dc4:	8023      	strh	r3, [r4, #0]
 8001dc6:	9b03      	ldr	r3, [sp, #12]
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8001dc8:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	LCD_DataWrite(data);
 8001dcc:	8023      	strh	r3, [r4, #0]
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8001dce:	9b01      	ldr	r3, [sp, #4]
  lcdWriteData((x1 >> 8) & 0xFF);
 8001dd0:	f3ce 2a07 	ubfx	sl, lr, #8, #8
  lcdWriteData(x1 & 0xFF);
 8001dd4:	fa5f fe8e 	uxtb.w	lr, lr
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8001dd8:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8001ddc:	fbb0 f5f3 	udiv	r5, r0, r3
 8001de0:	9b00      	ldr	r3, [sp, #0]
	LCD_DataWrite(data);
 8001de2:	f8a4 a000 	strh.w	sl, [r4]
 8001de6:	f8a4 e000 	strh.w	lr, [r4]
	LCD_CmdWrite(command);
 8001dea:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
 8001dee:	19ce      	adds	r6, r1, r7
 8001df0:	f8a9 e000 	strh.w	lr, [r9]
  lcdWriteData((y0 >> 8) & 0xFF);
 8001df4:	f3c6 2e07 	ubfx	lr, r6, #8, #8
  lcdWriteData(y0 & 0xFF);
 8001df8:	b2f6      	uxtb	r6, r6
	LCD_DataWrite(data);
 8001dfa:	f8a4 e000 	strh.w	lr, [r4]
 8001dfe:	8026      	strh	r6, [r4, #0]
  lcdWriteData((y1 >> 8) & 0xFF);
 8001e00:	f3cc 2607 	ubfx	r6, ip, #8, #8
	LCD_DataWrite(data);
 8001e04:	8026      	strh	r6, [r4, #0]
	LCD_CmdWrite(command);
 8001e06:	f04f 062c 	mov.w	r6, #44	; 0x2c
 8001e0a:	fb07 3000 	mla	r0, r7, r0, r3
  uint32_t i = 0;
 8001e0e:	2300      	movs	r3, #0
  lcdWriteData(y1 & 0xFF);
 8001e10:	fa5f fc8c 	uxtb.w	ip, ip
	LCD_DataWrite(data);
 8001e14:	f8a4 c000 	strh.w	ip, [r4]
	LCD_CmdWrite(command);
 8001e18:	3802      	subs	r0, #2
 8001e1a:	f8a9 6000 	strh.w	r6, [r9]
    lcdWriteData(data[i++]);
 8001e1e:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8001e22:	3301      	adds	r3, #1
  while (i < dataLength);
 8001e24:	429d      	cmp	r5, r3
	LCD_DataWrite(data);
 8001e26:	8026      	strh	r6, [r4, #0]
  while (i < dataLength);
 8001e28:	d8f9      	bhi.n	8001e1e <lcdDrawImage+0xae>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8001e2a:	8853      	ldrh	r3, [r2, #2]
 8001e2c:	3701      	adds	r7, #1
 8001e2e:	42bb      	cmp	r3, r7
 8001e30:	dd04      	ble.n	8001e3c <lcdDrawImage+0xcc>
  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8001e32:	f8b8 e000 	ldrh.w	lr, [r8]
 8001e36:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 8001e3a:	e7bf      	b.n	8001dbc <lcdDrawImage+0x4c>
}
 8001e3c:	b005      	add	sp, #20
 8001e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e42:	bf00      	nop
 8001e44:	20000024 	.word	0x20000024
 8001e48:	60020000 	.word	0x60020000

08001e4c <lcdDrawChar>:
{
 8001e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((x >= lcdProperties.width) || 			// Clip right
 8001e50:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001fd8 <lcdDrawChar+0x18c>
{
 8001e54:	b08b      	sub	sp, #44	; 0x2c
	if ((x >= lcdProperties.width) || 			// Clip right
 8001e56:	f8b8 4000 	ldrh.w	r4, [r8]
{
 8001e5a:	e9cd 0107 	strd	r0, r1, [sp, #28]
	if ((x >= lcdProperties.width) || 			// Clip right
 8001e5e:	42a0      	cmp	r0, r4
{
 8001e60:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 8001e64:	9209      	str	r2, [sp, #36]	; 0x24
	if ((x >= lcdProperties.width) || 			// Clip right
 8001e66:	f280 80b3 	bge.w	8001fd0 <lcdDrawChar+0x184>
 8001e6a:	4699      	mov	r9, r3
			(y >= lcdProperties.height) || 		// Clip bottom
 8001e6c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8001e70:	4299      	cmp	r1, r3
 8001e72:	f280 80ad 	bge.w	8001fd0 <lcdDrawChar+0x184>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001e76:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <lcdDrawChar+0x190>)
 8001e78:	689c      	ldr	r4, [r3, #8]
 8001e7a:	88a3      	ldrh	r3, [r4, #4]
 8001e7c:	9403      	str	r4, [sp, #12]
			(y >= lcdProperties.height) || 		// Clip bottom
 8001e7e:	42c3      	cmn	r3, r0
 8001e80:	f100 80a6 	bmi.w	8001fd0 <lcdDrawChar+0x184>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8001e84:	88e3      	ldrh	r3, [r4, #6]
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001e86:	42cb      	cmn	r3, r1
 8001e88:	f100 80a2 	bmi.w	8001fd0 <lcdDrawChar+0x184>
	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8001e8c:	f3c3 02c7 	ubfx	r2, r3, #3, #8
 8001e90:	9201      	str	r2, [sp, #4]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 809c 	beq.w	8001fd0 <lcdDrawChar+0x184>
 8001e98:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 8001e9a:	f04f 4bc0 	mov.w	fp, #1610612736	; 0x60000000
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001e9e:	4696      	mov	lr, r2
	LCD_DataWrite(data);
 8001ea0:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8001fe0 <lcdDrawChar+0x194>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001ea4:	9202      	str	r2, [sp, #8]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8001ea6:	9a01      	ldr	r2, [sp, #4]
 8001ea8:	2a00      	cmp	r2, #0
 8001eaa:	f000 8088 	beq.w	8001fbe <lcdDrawChar+0x172>
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001eae:	2000      	movs	r0, #0
					lcdDrawPixel(x + j + xP, y + i, bg);
 8001eb0:	9a08      	ldr	r2, [sp, #32]
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001eb2:	9903      	ldr	r1, [sp, #12]
					lcdDrawPixel(x + j + xP, y + i, bg);
 8001eb4:	4472      	add	r2, lr
 8001eb6:	b295      	uxth	r5, r2
  lcdWriteData((y0 >> 8) & 0xFF);
 8001eb8:	f3c2 2e07 	ubfx	lr, r2, #8, #8
  lcdWriteData(y0 & 0xFF);
 8001ebc:	fa5f fc82 	uxtb.w	ip, r2
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ec2:	6809      	ldr	r1, [r1, #0]
 8001ec4:	3a20      	subs	r2, #32
 8001ec6:	9205      	str	r2, [sp, #20]
 8001ec8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8001ecc:	9104      	str	r1, [sp, #16]
 8001ece:	9206      	str	r2, [sp, #24]
 8001ed0:	9a02      	ldr	r2, [sp, #8]
 8001ed2:	9905      	ldr	r1, [sp, #20]
 8001ed4:	9c06      	ldr	r4, [sp, #24]
 8001ed6:	fb01 2303 	mla	r3, r1, r3, r2
 8001eda:	9a04      	ldr	r2, [sp, #16]
 8001edc:	9901      	ldr	r1, [sp, #4]
 8001ede:	fb01 2303 	mla	r3, r1, r3, r2
 8001ee2:	5c1a      	ldrb	r2, [r3, r0]
			for(uint8_t j = 0; j < 8; j++)
 8001ee4:	00c3      	lsls	r3, r0, #3
 8001ee6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001eea:	f104 0108 	add.w	r1, r4, #8
 8001eee:	4419      	add	r1, r3
 8001ef0:	4423      	add	r3, r4
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	b289      	uxth	r1, r1
 8001ef6:	e02f      	b.n	8001f58 <lcdDrawChar+0x10c>
				else if (bg != color)
 8001ef8:	454f      	cmp	r7, r9
 8001efa:	d027      	beq.n	8001f4c <lcdDrawChar+0x100>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001efc:	f8b8 4000 	ldrh.w	r4, [r8]
 8001f00:	429c      	cmp	r4, r3
 8001f02:	d923      	bls.n	8001f4c <lcdDrawChar+0x100>
 8001f04:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8001f08:	42ac      	cmp	r4, r5
 8001f0a:	d91f      	bls.n	8001f4c <lcdDrawChar+0x100>
	LCD_CmdWrite(command);
 8001f0c:	f04f 062a 	mov.w	r6, #42	; 0x2a
  lcdWriteData((x0 >> 8) & 0xFF);
 8001f10:	0a1c      	lsrs	r4, r3, #8
	LCD_CmdWrite(command);
 8001f12:	f8ab 6000 	strh.w	r6, [fp]
  lcdWriteData(x0 & 0xFF);
 8001f16:	b2de      	uxtb	r6, r3
	LCD_DataWrite(data);
 8001f18:	f8aa 4000 	strh.w	r4, [sl]
 8001f1c:	f8aa 6000 	strh.w	r6, [sl]
 8001f20:	f8aa 4000 	strh.w	r4, [sl]
	LCD_CmdWrite(command);
 8001f24:	f04f 042b 	mov.w	r4, #43	; 0x2b
	LCD_DataWrite(data);
 8001f28:	f8aa 6000 	strh.w	r6, [sl]
	LCD_CmdWrite(command);
 8001f2c:	f8ab 4000 	strh.w	r4, [fp]
 8001f30:	f04f 042c 	mov.w	r4, #44	; 0x2c
	LCD_DataWrite(data);
 8001f34:	f8aa e000 	strh.w	lr, [sl]
 8001f38:	f8aa c000 	strh.w	ip, [sl]
 8001f3c:	f8aa e000 	strh.w	lr, [sl]
 8001f40:	f8aa c000 	strh.w	ip, [sl]
	LCD_CmdWrite(command);
 8001f44:	f8ab 4000 	strh.w	r4, [fp]
	LCD_DataWrite(data);
 8001f48:	f8aa 7000 	strh.w	r7, [sl]
			for(uint8_t j = 0; j < 8; j++)
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b29b      	uxth	r3, r3
				line <<= 1;
 8001f50:	0052      	lsls	r2, r2, #1
			for(uint8_t j = 0; j < 8; j++)
 8001f52:	4299      	cmp	r1, r3
				line <<= 1;
 8001f54:	b2d2      	uxtb	r2, r2
			for(uint8_t j = 0; j < 8; j++)
 8001f56:	d02b      	beq.n	8001fb0 <lcdDrawChar+0x164>
				if((line & 0x80) == 0x80)
 8001f58:	0614      	lsls	r4, r2, #24
 8001f5a:	d5cd      	bpl.n	8001ef8 <lcdDrawChar+0xac>
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001f5c:	f8b8 4000 	ldrh.w	r4, [r8]
 8001f60:	429c      	cmp	r4, r3
 8001f62:	d9f3      	bls.n	8001f4c <lcdDrawChar+0x100>
 8001f64:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8001f68:	42ac      	cmp	r4, r5
  lcdWriteData((x0 >> 8) & 0xFF);
 8001f6a:	ea4f 2413 	mov.w	r4, r3, lsr #8
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001f6e:	d9ed      	bls.n	8001f4c <lcdDrawChar+0x100>
	LCD_CmdWrite(command);
 8001f70:	f04f 062a 	mov.w	r6, #42	; 0x2a
 8001f74:	f8ab 6000 	strh.w	r6, [fp]
  lcdWriteData(x0 & 0xFF);
 8001f78:	b2de      	uxtb	r6, r3
	LCD_DataWrite(data);
 8001f7a:	f8aa 4000 	strh.w	r4, [sl]
 8001f7e:	f8aa 6000 	strh.w	r6, [sl]
 8001f82:	f8aa 4000 	strh.w	r4, [sl]
	LCD_CmdWrite(command);
 8001f86:	f04f 042b 	mov.w	r4, #43	; 0x2b
	LCD_DataWrite(data);
 8001f8a:	f8aa 6000 	strh.w	r6, [sl]
	LCD_CmdWrite(command);
 8001f8e:	f8ab 4000 	strh.w	r4, [fp]
 8001f92:	f04f 042c 	mov.w	r4, #44	; 0x2c
	LCD_DataWrite(data);
 8001f96:	f8aa e000 	strh.w	lr, [sl]
 8001f9a:	f8aa c000 	strh.w	ip, [sl]
 8001f9e:	f8aa e000 	strh.w	lr, [sl]
 8001fa2:	f8aa c000 	strh.w	ip, [sl]
	LCD_CmdWrite(command);
 8001fa6:	f8ab 4000 	strh.w	r4, [fp]
	LCD_DataWrite(data);
 8001faa:	f8aa 9000 	strh.w	r9, [sl]
}
 8001fae:	e7cd      	b.n	8001f4c <lcdDrawChar+0x100>
		for(uint8_t k = 0; k < fontCoeff; k++)
 8001fb0:	9a01      	ldr	r2, [sp, #4]
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	b2c3      	uxtb	r3, r0
 8001fb6:	4293      	cmp	r3, r2
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001fb8:	9b03      	ldr	r3, [sp, #12]
 8001fba:	88db      	ldrh	r3, [r3, #6]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8001fbc:	d388      	bcc.n	8001ed0 <lcdDrawChar+0x84>
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001fbe:	9a02      	ldr	r2, [sp, #8]
 8001fc0:	3201      	adds	r2, #1
 8001fc2:	fa5f fe82 	uxtb.w	lr, r2
 8001fc6:	459e      	cmp	lr, r3
 8001fc8:	f8cd e008 	str.w	lr, [sp, #8]
 8001fcc:	f4ff af6b 	bcc.w	8001ea6 <lcdDrawChar+0x5a>
}
 8001fd0:	b00b      	add	sp, #44	; 0x2c
 8001fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000024 	.word	0x20000024
 8001fdc:	20000014 	.word	0x20000014
 8001fe0:	60020000 	.word	0x60020000

08001fe4 <lcdPrintf>:
{
 8001fe4:	b40f      	push	{r0, r1, r2, r3}
 8001fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	aa0e      	add	r2, sp, #56	; 0x38
	vsprintf(buf, fmt, lst);
 8001fee:	4e2f      	ldr	r6, [pc, #188]	; (80020ac <lcdPrintf+0xc8>)
{
 8001ff0:	f852 1b04 	ldr.w	r1, [r2], #4
	vsprintf(buf, fmt, lst);
 8001ff4:	4630      	mov	r0, r6
	va_start(lst, fmt);
 8001ff6:	9203      	str	r2, [sp, #12]
	vsprintf(buf, fmt, lst);
 8001ff8:	f003 f8a0 	bl	800513c <vsiprintf>
	while (*p)
 8001ffc:	7832      	ldrb	r2, [r6, #0]
 8001ffe:	b362      	cbz	r2, 800205a <lcdPrintf+0x76>
		if (cursorXY.y >= lcdProperties.height)
 8002000:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80020b0 <lcdPrintf+0xcc>
				cursorXY.x = 0;
 8002004:	f04f 0900 	mov.w	r9, #0
 8002008:	4d2a      	ldr	r5, [pc, #168]	; (80020b4 <lcdPrintf+0xd0>)
		if (cursorXY.y >= lcdProperties.height)
 800200a:	f8ba 8002 	ldrh.w	r8, [sl, #2]
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 800200e:	4f2a      	ldr	r7, [pc, #168]	; (80020b8 <lcdPrintf+0xd4>)
 8002010:	e011      	b.n	8002036 <lcdPrintf+0x52>
		else if (*p == '\r')
 8002012:	2a0d      	cmp	r2, #13
 8002014:	d026      	beq.n	8002064 <lcdPrintf+0x80>
		else if (*p == '\t')
 8002016:	2a09      	cmp	r2, #9
 8002018:	d126      	bne.n	8002068 <lcdPrintf+0x84>
			cursorXY.x += lcdFont.pFont->Width * 4;
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	882b      	ldrh	r3, [r5, #0]
 800201e:	8892      	ldrh	r2, [r2, #4]
		if (cursorXY.y >= lcdProperties.height)
 8002020:	886c      	ldrh	r4, [r5, #2]
			cursorXY.x += lcdFont.pFont->Width * 4;
 8002022:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002026:	802b      	strh	r3, [r5, #0]
	while (*p)
 8002028:	f816 2f01 	ldrb.w	r2, [r6, #1]!
		if (cursorXY.y >= lcdProperties.height)
 800202c:	45a0      	cmp	r8, r4
			cursorXY.y = 0;
 800202e:	bf98      	it	ls
 8002030:	f8a5 9002 	strhls.w	r9, [r5, #2]
	while (*p)
 8002034:	b18a      	cbz	r2, 800205a <lcdPrintf+0x76>
		if (*p == '\n')
 8002036:	2a0a      	cmp	r2, #10
 8002038:	d1eb      	bne.n	8002012 <lcdPrintf+0x2e>
			cursorXY.y += lcdFont.pFont->Height;
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	886b      	ldrh	r3, [r5, #2]
 800203e:	88d4      	ldrh	r4, [r2, #6]
	while (*p)
 8002040:	f816 2f01 	ldrb.w	r2, [r6, #1]!
			cursorXY.y += lcdFont.pFont->Height;
 8002044:	441c      	add	r4, r3
 8002046:	b2a4      	uxth	r4, r4
		if (cursorXY.y >= lcdProperties.height)
 8002048:	45a0      	cmp	r8, r4
			cursorXY.y += lcdFont.pFont->Height;
 800204a:	806c      	strh	r4, [r5, #2]
			cursorXY.x = 0;
 800204c:	f8a5 9000 	strh.w	r9, [r5]
			cursorXY.y = 0;
 8002050:	bf98      	it	ls
 8002052:	f8a5 9002 	strhls.w	r9, [r5, #2]
	while (*p)
 8002056:	2a00      	cmp	r2, #0
 8002058:	d1ed      	bne.n	8002036 <lcdPrintf+0x52>
}
 800205a:	b005      	add	sp, #20
 800205c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002060:	b004      	add	sp, #16
 8002062:	4770      	bx	lr
		if (cursorXY.y >= lcdProperties.height)
 8002064:	886c      	ldrh	r4, [r5, #2]
 8002066:	e7df      	b.n	8002028 <lcdPrintf+0x44>
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8002068:	88bb      	ldrh	r3, [r7, #4]
 800206a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800206e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	883b      	ldrh	r3, [r7, #0]
 8002076:	f8b5 b000 	ldrh.w	fp, [r5]
 800207a:	886c      	ldrh	r4, [r5, #2]
 800207c:	f7ff fee6 	bl	8001e4c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8002080:	68b9      	ldr	r1, [r7, #8]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8002082:	7b38      	ldrb	r0, [r7, #12]
			cursorXY.x += lcdFont.pFont->Width;
 8002084:	888a      	ldrh	r2, [r1, #4]
 8002086:	eb0b 0302 	add.w	r3, fp, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	802b      	strh	r3, [r5, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 800208e:	2800      	cmp	r0, #0
 8002090:	d0ca      	beq.n	8002028 <lcdPrintf+0x44>
 8002092:	f8ba 0000 	ldrh.w	r0, [sl]
 8002096:	1a82      	subs	r2, r0, r2
 8002098:	4293      	cmp	r3, r2
 800209a:	ddc5      	ble.n	8002028 <lcdPrintf+0x44>
				cursorXY.y += lcdFont.pFont->Height;
 800209c:	88cb      	ldrh	r3, [r1, #6]
				cursorXY.x = 0;
 800209e:	f8a5 9000 	strh.w	r9, [r5]
				cursorXY.y += lcdFont.pFont->Height;
 80020a2:	441c      	add	r4, r3
 80020a4:	b2a4      	uxth	r4, r4
 80020a6:	806c      	strh	r4, [r5, #2]
				cursorXY.x = 0;
 80020a8:	e7be      	b.n	8002028 <lcdPrintf+0x44>
 80020aa:	bf00      	nop
 80020ac:	200002a4 	.word	0x200002a4
 80020b0:	20000024 	.word	0x20000024
 80020b4:	200003a4 	.word	0x200003a4
 80020b8:	20000014 	.word	0x20000014

080020bc <lcdSetTextFont>:
	lcdFont.pFont = font;
 80020bc:	4b01      	ldr	r3, [pc, #4]	; (80020c4 <lcdSetTextFont+0x8>)
 80020be:	6098      	str	r0, [r3, #8]
}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000014 	.word	0x20000014

080020c8 <lcdSetTextColor>:
	lcdFont.TextColor = c;
 80020c8:	4b01      	ldr	r3, [pc, #4]	; (80020d0 <lcdSetTextColor+0x8>)
	lcdFont.BackColor = b;
 80020ca:	e9c3 0100 	strd	r0, r1, [r3]
}
 80020ce:	4770      	bx	lr
 80020d0:	20000014 	.word	0x20000014

080020d4 <lcdSetOrientation>:
	LCD_CmdWrite(command);
 80020d4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020d8:	2136      	movs	r1, #54	; 0x36
	lcdProperties.orientation = value;
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <lcdSetOrientation+0xac>)
{
 80020dc:	b570      	push	{r4, r5, r6, lr}
	LCD_CmdWrite(command);
 80020de:	8011      	strh	r1, [r2, #0]
	lcdProperties.orientation = value;
 80020e0:	7118      	strb	r0, [r3, #4]
	switch (lcdProperties.orientation)
 80020e2:	2803      	cmp	r0, #3
 80020e4:	d83e      	bhi.n	8002164 <lcdSetOrientation+0x90>
 80020e6:	e8df f000 	tbb	[pc, r0]
 80020ea:	2f3b      	.short	0x2f3b
 80020ec:	0223      	.short	0x0223
			break;
 80020ee:	f04f 0eef 	mov.w	lr, #239	; 0xef
 80020f2:	2500      	movs	r5, #0
 80020f4:	243f      	movs	r4, #63	; 0x3f
 80020f6:	2601      	movs	r6, #1
			lcdWriteData(lcdLandscapeMirrorConfig);
 80020f8:	4a22      	ldr	r2, [pc, #136]	; (8002184 <lcdSetOrientation+0xb0>)
 80020fa:	7811      	ldrb	r1, [r2, #0]
	LCD_DataWrite(data);
 80020fc:	4a22      	ldr	r2, [pc, #136]	; (8002188 <lcdSetOrientation+0xb4>)
 80020fe:	8011      	strh	r1, [r2, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8002100:	4a22      	ldr	r2, [pc, #136]	; (800218c <lcdSetOrientation+0xb8>)
 8002102:	601a      	str	r2, [r3, #0]
	LCD_CmdWrite(command);
 8002104:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002108:	232a      	movs	r3, #42	; 0x2a
	LCD_DataWrite(data);
 800210a:	2200      	movs	r2, #0
	LCD_CmdWrite(command);
 800210c:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 8002110:	202c      	movs	r0, #44	; 0x2c
 8002112:	800b      	strh	r3, [r1, #0]
	LCD_DataWrite(data);
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <lcdSetOrientation+0xb4>)
 8002116:	801a      	strh	r2, [r3, #0]
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	801e      	strh	r6, [r3, #0]
 800211c:	801c      	strh	r4, [r3, #0]
	LCD_CmdWrite(command);
 800211e:	f8a1 c000 	strh.w	ip, [r1]
	LCD_DataWrite(data);
 8002122:	801a      	strh	r2, [r3, #0]
 8002124:	801a      	strh	r2, [r3, #0]
 8002126:	801d      	strh	r5, [r3, #0]
 8002128:	f8a3 e000 	strh.w	lr, [r3]
	LCD_CmdWrite(command);
 800212c:	8008      	strh	r0, [r1, #0]
}
 800212e:	bd70      	pop	{r4, r5, r6, pc}
			lcdWriteData(lcdPortraitMirrorConfig);
 8002130:	4a17      	ldr	r2, [pc, #92]	; (8002190 <lcdSetOrientation+0xbc>)
 8002132:	7810      	ldrb	r0, [r2, #0]
	LCD_DataWrite(data);
 8002134:	4914      	ldr	r1, [pc, #80]	; (8002188 <lcdSetOrientation+0xb4>)
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8002136:	4a17      	ldr	r2, [pc, #92]	; (8002194 <lcdSetOrientation+0xc0>)
	LCD_DataWrite(data);
 8002138:	8008      	strh	r0, [r1, #0]
			break;
 800213a:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 800213e:	2501      	movs	r5, #1
 8002140:	24ef      	movs	r4, #239	; 0xef
 8002142:	2600      	movs	r6, #0
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8002144:	601a      	str	r2, [r3, #0]
			break;
 8002146:	e7dd      	b.n	8002104 <lcdSetOrientation+0x30>
			lcdWriteData(lcdLandscapeConfig);
 8002148:	4a13      	ldr	r2, [pc, #76]	; (8002198 <lcdSetOrientation+0xc4>)
	LCD_DataWrite(data);
 800214a:	490f      	ldr	r1, [pc, #60]	; (8002188 <lcdSetOrientation+0xb4>)
			lcdWriteData(lcdLandscapeConfig);
 800214c:	7810      	ldrb	r0, [r2, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 800214e:	4a0f      	ldr	r2, [pc, #60]	; (800218c <lcdSetOrientation+0xb8>)
	LCD_DataWrite(data);
 8002150:	8008      	strh	r0, [r1, #0]
			break;
 8002152:	f04f 0eef 	mov.w	lr, #239	; 0xef
 8002156:	2500      	movs	r5, #0
 8002158:	243f      	movs	r4, #63	; 0x3f
 800215a:	2601      	movs	r6, #1
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 800215c:	601a      	str	r2, [r3, #0]
			break;
 800215e:	e7d1      	b.n	8002104 <lcdSetOrientation+0x30>
			lcdWriteData(lcdPortraitConfig);
 8002160:	4a0e      	ldr	r2, [pc, #56]	; (800219c <lcdSetOrientation+0xc8>)
 8002162:	e7e6      	b.n	8002132 <lcdSetOrientation+0x5e>
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8002164:	881c      	ldrh	r4, [r3, #0]
 8002166:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 800216a:	3c01      	subs	r4, #1
 800216c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
  lcdWriteData((x1 >> 8) & 0xFF);
 8002170:	f3c4 2607 	ubfx	r6, r4, #8, #8
  lcdWriteData((y1 >> 8) & 0xFF);
 8002174:	f3ce 2507 	ubfx	r5, lr, #8, #8
  lcdWriteData(x1 & 0xFF);
 8002178:	b2e4      	uxtb	r4, r4
  lcdWriteData(y1 & 0xFF);
 800217a:	fa5f fe8e 	uxtb.w	lr, lr
 800217e:	e7c1      	b.n	8002104 <lcdSetOrientation+0x30>
 8002180:	20000024 	.word	0x20000024
 8002184:	200003a9 	.word	0x200003a9
 8002188:	60020000 	.word	0x60020000
 800218c:	00f00140 	.word	0x00f00140
 8002190:	200003ab 	.word	0x200003ab
 8002194:	014000f0 	.word	0x014000f0
 8002198:	200003a8 	.word	0x200003a8
 800219c:	200003aa 	.word	0x200003aa

080021a0 <lcdSetCursor>:
	LCD_CmdWrite(command);
 80021a0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80021a4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
{
 80021a8:	b530      	push	{r4, r5, lr}
	LCD_CmdWrite(command);
 80021aa:	252b      	movs	r5, #43	; 0x2b
 80021ac:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
	cursorXY.x = x;
 80021b0:	4c0c      	ldr	r4, [pc, #48]	; (80021e4 <lcdSetCursor+0x44>)
	LCD_DataWrite(data);
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <lcdSetCursor+0x48>)
	cursorXY.x = x;
 80021b4:	8020      	strh	r0, [r4, #0]
	cursorXY.y = y;
 80021b6:	8061      	strh	r1, [r4, #2]
	LCD_CmdWrite(command);
 80021b8:	f8a2 c000 	strh.w	ip, [r2]
  lcdWriteData((x0 >> 8) & 0xFF);
 80021bc:	ea4f 2c10 	mov.w	ip, r0, lsr #8
  lcdWriteData(x0 & 0xFF);
 80021c0:	b2c0      	uxtb	r0, r0
	LCD_DataWrite(data);
 80021c2:	f8a3 c000 	strh.w	ip, [r3]
 80021c6:	8018      	strh	r0, [r3, #0]
 80021c8:	f8a3 c000 	strh.w	ip, [r3]
 80021cc:	8018      	strh	r0, [r3, #0]
  lcdWriteData((y0 >> 8) & 0xFF);
 80021ce:	0a08      	lsrs	r0, r1, #8
  lcdWriteData(y0 & 0xFF);
 80021d0:	b2c9      	uxtb	r1, r1
	LCD_CmdWrite(command);
 80021d2:	8015      	strh	r5, [r2, #0]
	LCD_DataWrite(data);
 80021d4:	8018      	strh	r0, [r3, #0]
 80021d6:	8019      	strh	r1, [r3, #0]
 80021d8:	8018      	strh	r0, [r3, #0]
 80021da:	8019      	strh	r1, [r3, #0]
	LCD_CmdWrite(command);
 80021dc:	f8a2 e000 	strh.w	lr, [r2]
}
 80021e0:	bd30      	pop	{r4, r5, pc}
 80021e2:	bf00      	nop
 80021e4:	200003a4 	.word	0x200003a4
 80021e8:	60020000 	.word	0x60020000

080021ec <lcdGetWidth>:
  return lcdProperties.width;
 80021ec:	4b01      	ldr	r3, [pc, #4]	; (80021f4 <lcdGetWidth+0x8>)
}
 80021ee:	8818      	ldrh	r0, [r3, #0]
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000024 	.word	0x20000024

080021f8 <lcdGetHeight>:
  return lcdProperties.height;
 80021f8:	4b01      	ldr	r3, [pc, #4]	; (8002200 <lcdGetHeight+0x8>)
}
 80021fa:	8858      	ldrh	r0, [r3, #2]
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000024 	.word	0x20000024

08002204 <lcdGetOrientation>:
  return lcdProperties.orientation;
 8002204:	4b01      	ldr	r3, [pc, #4]	; (800220c <lcdGetOrientation+0x8>)
}
 8002206:	7918      	ldrb	r0, [r3, #4]
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000024 	.word	0x20000024

08002210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	; (8002248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	; (8002254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002236:	f7ff fb7b 	bl	8001930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223a:	f001 f9e7 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800223e:	f7ff f94b 	bl	80014d8 <main>
  bx lr
 8002242:	4770      	bx	lr
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800224c:	0801059c 	.word	0x0801059c
  ldr r2, =_sbss
 8002250:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002254:	200003c0 	.word	0x200003c0

08002258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC1_2_IRQHandler>
	...

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800225e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002262:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_InitTick+0x3c>)
{
 8002264:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002266:	7811      	ldrb	r1, [r2, #0]
 8002268:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_InitTick+0x40>)
 800226a:	fbb3 f3f1 	udiv	r3, r3, r1
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	fbb2 f0f3 	udiv	r0, r2, r3
 8002274:	f000 fbe8 	bl	8002a48 <HAL_SYSTICK_Config>
 8002278:	b908      	cbnz	r0, 800227e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227a:	2d0f      	cmp	r5, #15
 800227c:	d901      	bls.n	8002282 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800227e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002280:	bd38      	pop	{r3, r4, r5, pc}
 8002282:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	4602      	mov	r2, r0
 8002286:	4629      	mov	r1, r5
 8002288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800228c:	f000 fb9e 	bl	80029cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_InitTick+0x44>)
 8002292:	4620      	mov	r0, r4
 8002294:	601d      	str	r5, [r3, #0]
}
 8002296:	bd38      	pop	{r3, r4, r5, pc}
 8002298:	2000002c 	.word	0x2000002c
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000030 	.word	0x20000030

080022a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <HAL_Init+0x20>)
{
 80022a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ac:	f043 0310 	orr.w	r3, r3, #16
 80022b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b2:	f000 fb79 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	200f      	movs	r0, #15
 80022b8:	f7ff ffd0 	bl	800225c <HAL_InitTick>
  HAL_MspInit();
 80022bc:	f7ff fa40 	bl	8001740 <HAL_MspInit>
}
 80022c0:	2000      	movs	r0, #0
 80022c2:	bd08      	pop	{r3, pc}
 80022c4:	40022000 	.word	0x40022000

080022c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_IncTick+0x10>)
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_IncTick+0x14>)
 80022cc:	6811      	ldr	r1, [r2, #0]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	440b      	add	r3, r1
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200003ac 	.word	0x200003ac
 80022dc:	2000002c 	.word	0x2000002c

080022e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022e0:	4b01      	ldr	r3, [pc, #4]	; (80022e8 <HAL_GetTick+0x8>)
 80022e2:	6818      	ldr	r0, [r3, #0]
}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	200003ac 	.word	0x200003ac

080022ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ec:	b538      	push	{r3, r4, r5, lr}
 80022ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff fff6 	bl	80022e0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80022f6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80022f8:	d002      	beq.n	8002300 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_Delay+0x20>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002300:	f7ff ffee 	bl	80022e0 <HAL_GetTick>
 8002304:	1b40      	subs	r0, r0, r5
 8002306:	42a0      	cmp	r0, r4
 8002308:	d3fa      	bcc.n	8002300 <HAL_Delay+0x14>
  {
  }
}
 800230a:	bd38      	pop	{r3, r4, r5, pc}
 800230c:	2000002c 	.word	0x2000002c

08002310 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002314:	2500      	movs	r5, #0
{
 8002316:	b083      	sub	sp, #12
 8002318:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800231a:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800231c:	f7ff ffe0 	bl	80022e0 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002320:	6833      	ldr	r3, [r6, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	05d7      	lsls	r7, r2, #23
 8002326:	d472      	bmi.n	800240e <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	4607      	mov	r7, r0
 800232c:	05d5      	lsls	r5, r2, #23
 800232e:	d403      	bmi.n	8002338 <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002332:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8002336:	d01e      	beq.n	8002376 <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002338:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <HAL_ADC_PollForConversion+0x154>)
 800233a:	2002      	movs	r0, #2
 800233c:	681d      	ldr	r5, [r3, #0]
 800233e:	f001 f82b 	bl	8003398 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002342:	6833      	ldr	r3, [r6, #0]
 8002344:	4a48      	ldr	r2, [pc, #288]	; (8002468 <HAL_ADC_PollForConversion+0x158>)
 8002346:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002348:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800234c:	4211      	tst	r1, r2
 800234e:	d125      	bne.n	800239c <HAL_ADC_PollForConversion+0x8c>
 8002350:	68d9      	ldr	r1, [r3, #12]
 8002352:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 8002356:	4211      	tst	r1, r2
 8002358:	d120      	bne.n	800239c <HAL_ADC_PollForConversion+0x8c>
 800235a:	6919      	ldr	r1, [r3, #16]
 800235c:	4a43      	ldr	r2, [pc, #268]	; (800246c <HAL_ADC_PollForConversion+0x15c>)
 800235e:	4211      	tst	r1, r2
 8002360:	d17e      	bne.n	8002460 <HAL_ADC_PollForConversion+0x150>
 8002362:	68d9      	ldr	r1, [r3, #12]
 8002364:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8002368:	4211      	tst	r1, r2
 800236a:	bf14      	ite	ne
 800236c:	2029      	movne	r0, #41	; 0x29
 800236e:	2014      	moveq	r0, #20
 8002370:	e01e      	b.n	80023b0 <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 8002372:	1c60      	adds	r0, r4, #1
 8002374:	d154      	bne.n	8002420 <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	0791      	lsls	r1, r2, #30
 800237a:	d5fa      	bpl.n	8002372 <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800237c:	f06f 0212 	mvn.w	r2, #18
 8002380:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002382:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8002384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002388:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002390:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002394:	d055      	beq.n	8002442 <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002396:	2000      	movs	r0, #0
}
 8002398:	b003      	add	sp, #12
 800239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	4a33      	ldr	r2, [pc, #204]	; (800246c <HAL_ADC_PollForConversion+0x15c>)
 80023a0:	4211      	tst	r1, r2
 80023a2:	d12a      	bne.n	80023fa <HAL_ADC_PollForConversion+0xea>
 80023a4:	68d9      	ldr	r1, [r3, #12]
 80023a6:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80023aa:	4211      	tst	r1, r2
 80023ac:	d125      	bne.n	80023fa <HAL_ADC_PollForConversion+0xea>
 80023ae:	2054      	movs	r0, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80023b0:	fb00 f505 	mul.w	r5, r0, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023b4:	9a01      	ldr	r2, [sp, #4]
 80023b6:	4295      	cmp	r5, r2
 80023b8:	d809      	bhi.n	80023ce <HAL_ADC_PollForConversion+0xbe>
 80023ba:	e7df      	b.n	800237c <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023bc:	9b01      	ldr	r3, [sp, #4]
 80023be:	42ab      	cmp	r3, r5
 80023c0:	d311      	bcc.n	80023e6 <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 80023c2:	9b01      	ldr	r3, [sp, #4]
 80023c4:	3301      	adds	r3, #1
 80023c6:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023c8:	9b01      	ldr	r3, [sp, #4]
 80023ca:	42ab      	cmp	r3, r5
 80023cc:	d237      	bcs.n	800243e <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 80023ce:	1c62      	adds	r2, r4, #1
 80023d0:	d0f7      	beq.n	80023c2 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023d2:	2c00      	cmp	r4, #0
 80023d4:	d0f2      	beq.n	80023bc <HAL_ADC_PollForConversion+0xac>
 80023d6:	f7ff ff83 	bl	80022e0 <HAL_GetTick>
 80023da:	1bc0      	subs	r0, r0, r7
 80023dc:	42a0      	cmp	r0, r4
 80023de:	d9f0      	bls.n	80023c2 <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023e0:	9b01      	ldr	r3, [sp, #4]
 80023e2:	42ab      	cmp	r3, r5
 80023e4:	d2ed      	bcs.n	80023c2 <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 80023e6:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 80023e8:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023ea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80023ec:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	62b3      	str	r3, [r6, #40]	; 0x28
}
 80023f6:	b003      	add	sp, #12
 80023f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80023fa:	6919      	ldr	r1, [r3, #16]
 80023fc:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_ADC_PollForConversion+0x160>)
 80023fe:	4211      	tst	r1, r2
 8002400:	d114      	bne.n	800242c <HAL_ADC_PollForConversion+0x11c>
 8002402:	68d9      	ldr	r1, [r3, #12]
 8002404:	4211      	tst	r1, r2
 8002406:	bf14      	ite	ne
 8002408:	20fc      	movne	r0, #252	; 0xfc
 800240a:	2054      	moveq	r0, #84	; 0x54
 800240c:	e7d0      	b.n	80023b0 <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 800240e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002410:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002412:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002416:	f043 0320 	orr.w	r3, r3, #32
 800241a:	62b3      	str	r3, [r6, #40]	; 0x28
}
 800241c:	b003      	add	sp, #12
 800241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002420:	b934      	cbnz	r4, 8002430 <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	f012 0202 	ands.w	r2, r2, #2
 8002428:	d1a5      	bne.n	8002376 <HAL_ADC_PollForConversion+0x66>
 800242a:	e7dd      	b.n	80023e8 <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800242c:	20fc      	movs	r0, #252	; 0xfc
 800242e:	e7bf      	b.n	80023b0 <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002430:	f7ff ff56 	bl	80022e0 <HAL_GetTick>
 8002434:	1bc3      	subs	r3, r0, r7
 8002436:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002438:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800243a:	d99c      	bls.n	8002376 <HAL_ADC_PollForConversion+0x66>
 800243c:	e7f1      	b.n	8002422 <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800243e:	6833      	ldr	r3, [r6, #0]
 8002440:	e79c      	b.n	800237c <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002442:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002444:	2800      	cmp	r0, #0
 8002446:	d1a6      	bne.n	8002396 <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002448:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800244a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800244e:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002450:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002452:	04db      	lsls	r3, r3, #19
 8002454:	d49f      	bmi.n	8002396 <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002456:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	62b3      	str	r3, [r6, #40]	; 0x28
 800245e:	e79b      	b.n	8002398 <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002460:	2029      	movs	r0, #41	; 0x29
 8002462:	e7a5      	b.n	80023b0 <HAL_ADC_PollForConversion+0xa0>
 8002464:	20000000 	.word	0x20000000
 8002468:	24924924 	.word	0x24924924
 800246c:	12492492 	.word	0x12492492
 8002470:	00249249 	.word	0x00249249

08002474 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002474:	6803      	ldr	r3, [r0, #0]
 8002476:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop

0800247c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800247c:	2300      	movs	r3, #0
{ 
 800247e:	b530      	push	{r4, r5, lr}
 8002480:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002482:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002484:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002488:	2b01      	cmp	r3, #1
 800248a:	d074      	beq.n	8002576 <HAL_ADC_ConfigChannel+0xfa>
 800248c:	2301      	movs	r3, #1
 800248e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002492:	684b      	ldr	r3, [r1, #4]
 8002494:	4602      	mov	r2, r0
 8002496:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002498:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 800249a:	d932      	bls.n	8002502 <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800249c:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800249e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 80024a2:	d84e      	bhi.n	8002542 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024a4:	f04f 0c1f 	mov.w	ip, #31
 80024a8:	6808      	ldr	r0, [r1, #0]
 80024aa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80024ac:	3b23      	subs	r3, #35	; 0x23
 80024ae:	fa00 fe03 	lsl.w	lr, r0, r3
 80024b2:	fa0c f303 	lsl.w	r3, ip, r3
 80024b6:	ea25 0303 	bic.w	r3, r5, r3
 80024ba:	ea43 030e 	orr.w	r3, r3, lr
 80024be:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024c0:	2809      	cmp	r0, #9
 80024c2:	d930      	bls.n	8002526 <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024c4:	f04f 0c07 	mov.w	ip, #7
 80024c8:	688d      	ldr	r5, [r1, #8]
 80024ca:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80024ce:	68e3      	ldr	r3, [r4, #12]
 80024d0:	391e      	subs	r1, #30
 80024d2:	408d      	lsls	r5, r1
 80024d4:	fa0c f101 	lsl.w	r1, ip, r1
 80024d8:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024dc:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024e0:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024e2:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024e4:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024e6:	d844      	bhi.n	8002572 <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024e8:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_ADC_ConfigChannel+0x128>)
 80024ea:	429c      	cmp	r4, r3
 80024ec:	d038      	beq.n	8002560 <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 80024ee:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80024f2:	f043 0320 	orr.w	r3, r3, #32
 80024f6:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f8:	2300      	movs	r3, #0
 80024fa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80024fe:	b003      	add	sp, #12
 8002500:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002502:	f04f 0c1f 	mov.w	ip, #31
 8002506:	6808      	ldr	r0, [r1, #0]
 8002508:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800250c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800250e:	3b05      	subs	r3, #5
 8002510:	fa00 fe03 	lsl.w	lr, r0, r3
 8002514:	fa0c f303 	lsl.w	r3, ip, r3
 8002518:	ea25 0303 	bic.w	r3, r5, r3
 800251c:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002520:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002522:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002524:	d8ce      	bhi.n	80024c4 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002526:	2507      	movs	r5, #7
 8002528:	6889      	ldr	r1, [r1, #8]
 800252a:	6923      	ldr	r3, [r4, #16]
 800252c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002530:	4081      	lsls	r1, r0
 8002532:	fa05 f000 	lsl.w	r0, r5, r0
 8002536:	ea23 0300 	bic.w	r3, r3, r0
 800253a:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253c:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800253e:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002540:	e7da      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002542:	f04f 0c1f 	mov.w	ip, #31
 8002546:	6808      	ldr	r0, [r1, #0]
 8002548:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800254a:	3b41      	subs	r3, #65	; 0x41
 800254c:	fa00 fe03 	lsl.w	lr, r0, r3
 8002550:	fa0c f303 	lsl.w	r3, ip, r3
 8002554:	ea25 0303 	bic.w	r3, r5, r3
 8002558:	ea43 030e 	orr.w	r3, r3, lr
 800255c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800255e:	e7af      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002560:	68a3      	ldr	r3, [r4, #8]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	d405      	bmi.n	8002572 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002566:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002568:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800256a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800256e:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002570:	d004      	beq.n	800257c <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002572:	2000      	movs	r0, #0
 8002574:	e7c0      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8002576:	2002      	movs	r0, #2
}
 8002578:	b003      	add	sp, #12
 800257a:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_ADC_ConfigChannel+0x12c>)
 800257e:	490b      	ldr	r1, [pc, #44]	; (80025ac <HAL_ADC_ConfigChannel+0x130>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fba1 1303 	umull	r1, r3, r1, r3
 8002586:	0c9b      	lsrs	r3, r3, #18
 8002588:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002590:	9b01      	ldr	r3, [sp, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0ed      	beq.n	8002572 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8002596:	9b01      	ldr	r3, [sp, #4]
 8002598:	3b01      	subs	r3, #1
 800259a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800259c:	9b01      	ldr	r3, [sp, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x11a>
 80025a2:	e7e6      	b.n	8002572 <HAL_ADC_ConfigChannel+0xf6>
 80025a4:	40012400 	.word	0x40012400
 80025a8:	20000000 	.word	0x20000000
 80025ac:	431bde83 	.word	0x431bde83

080025b0 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80025b0:	2300      	movs	r3, #0
{
 80025b2:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025b4:	6802      	ldr	r2, [r0, #0]
{
 80025b6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80025b8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025ba:	6893      	ldr	r3, [r2, #8]
 80025bc:	07d9      	lsls	r1, r3, #31
 80025be:	d427      	bmi.n	8002610 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <ADC_Enable+0x80>)
 80025c2:	4604      	mov	r4, r0
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	481b      	ldr	r0, [pc, #108]	; (8002634 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 80025c8:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ca:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80025ce:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025d2:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80025d4:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025d6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80025d8:	9b01      	ldr	r3, [sp, #4]
 80025da:	b12b      	cbz	r3, 80025e8 <ADC_Enable+0x38>
    {
      wait_loop_index--;
 80025dc:	9b01      	ldr	r3, [sp, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80025e2:	9b01      	ldr	r3, [sp, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f9      	bne.n	80025dc <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025e8:	f7ff fe7a 	bl	80022e0 <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ec:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80025ee:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	07da      	lsls	r2, r3, #31
 80025f4:	d40c      	bmi.n	8002610 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025f6:	f7ff fe73 	bl	80022e0 <HAL_GetTick>
 80025fa:	1b43      	subs	r3, r0, r5
 80025fc:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025fe:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002600:	d903      	bls.n	800260a <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	f012 0201 	ands.w	r2, r2, #1
 8002608:	d005      	beq.n	8002616 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	07db      	lsls	r3, r3, #31
 800260e:	d5f2      	bpl.n	80025f6 <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002610:	2000      	movs	r0, #0
}
 8002612:	b003      	add	sp, #12
 8002614:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8002616:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800261a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	f043 0310 	orr.w	r3, r3, #16
 8002622:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002626:	4303      	orrs	r3, r0
 8002628:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800262a:	b003      	add	sp, #12
 800262c:	bd30      	pop	{r4, r5, pc}
 800262e:	bf00      	nop
 8002630:	20000000 	.word	0x20000000
 8002634:	431bde83 	.word	0x431bde83

08002638 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002638:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800263c:	2b01      	cmp	r3, #1
 800263e:	d038      	beq.n	80026b2 <HAL_ADC_Start+0x7a>
 8002640:	2301      	movs	r3, #1
{
 8002642:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002644:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002648:	4604      	mov	r4, r0
 800264a:	f7ff ffb1 	bl	80025b0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800264e:	bb60      	cbnz	r0, 80026aa <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 8002650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	4929      	ldr	r1, [pc, #164]	; (80026fc <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8002656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002662:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 8002664:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002666:	d026      	beq.n	80026b6 <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002668:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800266a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800266e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002670:	6853      	ldr	r3, [r2, #4]
 8002672:	0559      	lsls	r1, r3, #21
 8002674:	d42b      	bmi.n	80026ce <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002678:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800267a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800267e:	bf18      	it	ne
 8002680:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8002682:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002686:	bf18      	it	ne
 8002688:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800268c:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800268e:	f06f 0302 	mvn.w	r3, #2
 8002692:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002694:	6893      	ldr	r3, [r2, #8]
 8002696:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800269a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800269e:	d01d      	beq.n	80026dc <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026a0:	6893      	ldr	r3, [r2, #8]
 80026a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a6:	6093      	str	r3, [r2, #8]
}
 80026a8:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 80026aa:	2300      	movs	r3, #0
 80026ac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80026b0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80026b2:	2002      	movs	r0, #2
}
 80026b4:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_ADC_Start+0xc8>)
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 80026be:	d0d3      	beq.n	8002668 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80026c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80026c6:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	055b      	lsls	r3, r3, #21
 80026cc:	d5d3      	bpl.n	8002676 <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80026da:	e7cc      	b.n	8002676 <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_ADC_Start+0xc4>)
 80026de:	429a      	cmp	r2, r3
 80026e0:	d004      	beq.n	80026ec <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026e2:	6893      	ldr	r3, [r2, #8]
 80026e4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80026e8:	6093      	str	r3, [r2, #8]
}
 80026ea:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80026ec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026f0:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026f2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80026f6:	d1d3      	bne.n	80026a0 <HAL_ADC_Start+0x68>
 80026f8:	e7f3      	b.n	80026e2 <HAL_ADC_Start+0xaa>
 80026fa:	bf00      	nop
 80026fc:	40012800 	.word	0x40012800
 8002700:	40012400 	.word	0x40012400

08002704 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002704:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002706:	6803      	ldr	r3, [r0, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	07d4      	lsls	r4, r2, #31
 800270c:	d401      	bmi.n	8002712 <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800270e:	2000      	movs	r0, #0
}
 8002710:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002712:	4604      	mov	r4, r0
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800271c:	f7ff fde0 	bl	80022e0 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002720:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002722:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	07d9      	lsls	r1, r3, #31
 8002728:	d5f1      	bpl.n	800270e <ADC_ConversionStop_Disable+0xa>
 800272a:	e002      	b.n	8002732 <ADC_ConversionStop_Disable+0x2e>
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	07db      	lsls	r3, r3, #31
 8002730:	d5ed      	bpl.n	800270e <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002732:	f7ff fdd5 	bl	80022e0 <HAL_GetTick>
 8002736:	1b43      	subs	r3, r0, r5
 8002738:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 800273a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800273c:	d9f6      	bls.n	800272c <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	07d2      	lsls	r2, r2, #31
 8002742:	d5f3      	bpl.n	800272c <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 8002744:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002748:	f043 0310 	orr.w	r3, r3, #16
 800274c:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002750:	4303      	orrs	r3, r0
 8002752:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002754:	bd38      	pop	{r3, r4, r5, pc}
 8002756:	bf00      	nop

08002758 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002758:	2800      	cmp	r0, #0
 800275a:	d075      	beq.n	8002848 <HAL_ADC_Init+0xf0>
{
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 800275e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002760:	4604      	mov	r4, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d052      	beq.n	800280c <HAL_ADC_Init+0xb4>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff ffcc 	bl	8002704 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800276c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800276e:	f013 0310 	ands.w	r3, r3, #16
 8002772:	d145      	bne.n	8002800 <HAL_ADC_Init+0xa8>
 8002774:	2800      	cmp	r0, #0
 8002776:	d143      	bne.n	8002800 <HAL_ADC_Init+0xa8>
    ADC_STATE_CLR_SET(hadc->State,
 8002778:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800277a:	4d4a      	ldr	r5, [pc, #296]	; (80028a4 <HAL_ADC_Init+0x14c>)
 800277c:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800277e:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002782:	f021 0102 	bic.w	r1, r1, #2
 8002786:	f041 0102 	orr.w	r1, r1, #2
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800278a:	42aa      	cmp	r2, r5
    ADC_STATE_CLR_SET(hadc->State,
 800278c:	62a1      	str	r1, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800278e:	69e5      	ldr	r5, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002790:	6861      	ldr	r1, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002792:	d053      	beq.n	800283c <HAL_ADC_Init+0xe4>
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002794:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002796:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 800279a:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800279c:	68a5      	ldr	r5, [r4, #8]
 800279e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80027a2:	d039      	beq.n	8002818 <HAL_ADC_Init+0xc0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027a4:	f894 e014 	ldrb.w	lr, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027a8:	2d01      	cmp	r5, #1
 80027aa:	bf0c      	ite	eq
 80027ac:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 80027b0:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027b4:	f1be 0f01 	cmp.w	lr, #1
 80027b8:	d052      	beq.n	8002860 <HAL_ADC_Init+0x108>
      MODIFY_REG(hadc->Instance->CR1,
 80027ba:	6856      	ldr	r6, [r2, #4]
 80027bc:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80027c0:	ea46 060c 	orr.w	r6, r6, ip
 80027c4:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80027c6:	6897      	ldr	r7, [r2, #8]
 80027c8:	4e37      	ldr	r6, [pc, #220]	; (80028a8 <HAL_ADC_Init+0x150>)
 80027ca:	403e      	ands	r6, r7
 80027cc:	430e      	orrs	r6, r1
 80027ce:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027d0:	2d01      	cmp	r5, #1
 80027d2:	d02f      	beq.n	8002834 <HAL_ADC_Init+0xdc>
    MODIFY_REG(hadc->Instance->SQR1,
 80027d4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80027d6:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 80027da:	ea4c 0303 	orr.w	r3, ip, r3
 80027de:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027e0:	6892      	ldr	r2, [r2, #8]
 80027e2:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_ADC_Init+0x154>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	4299      	cmp	r1, r3
 80027e8:	d030      	beq.n	800284c <HAL_ADC_Init+0xf4>
      tmp_hal_status = HAL_ERROR;
 80027ea:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80027ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027ee:	f023 0312 	bic.w	r3, r3, #18
 80027f2:	f043 0310 	orr.w	r3, r3, #16
 80027f6:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027fa:	4303      	orrs	r3, r0
 80027fc:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80027fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002800:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002802:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002804:	f043 0310 	orr.w	r3, r3, #16
 8002808:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800280a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 800280c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800280e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002812:	f7fe ffb7 	bl	8001784 <HAL_ADC_MspInit>
 8002816:	e7a6      	b.n	8002766 <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002818:	7d27      	ldrb	r7, [r4, #20]
 800281a:	2f01      	cmp	r7, #1
 800281c:	d01f      	beq.n	800285e <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CR1,
 800281e:	6853      	ldr	r3, [r2, #4]
 8002820:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 8002824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002828:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800282a:	6895      	ldr	r5, [r2, #8]
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_ADC_Init+0x150>)
 800282e:	402b      	ands	r3, r5
 8002830:	430b      	orrs	r3, r1
 8002832:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002834:	6923      	ldr	r3, [r4, #16]
 8002836:	3b01      	subs	r3, #1
 8002838:	051b      	lsls	r3, r3, #20
 800283a:	e7cb      	b.n	80027d4 <HAL_ADC_Init+0x7c>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800283c:	f5b5 2f40 	cmp.w	r5, #786432	; 0xc0000
 8002840:	bf08      	it	eq
 8002842:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
 8002846:	e7a5      	b.n	8002794 <HAL_ADC_Init+0x3c>
    return HAL_ERROR;
 8002848:	2001      	movs	r0, #1
}
 800284a:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 800284c:	2300      	movs	r3, #0
 800284e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002850:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800285c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800285e:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002860:	b1c6      	cbz	r6, 8002894 <HAL_ADC_Init+0x13c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002864:	f046 0620 	orr.w	r6, r6, #32
 8002868:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800286c:	f046 0601 	orr.w	r6, r6, #1
 8002870:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8002872:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002874:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002878:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 800287c:	ea46 060c 	orr.w	r6, r6, ip
 8002880:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002882:	6897      	ldr	r7, [r2, #8]
 8002884:	4e08      	ldr	r6, [pc, #32]	; (80028a8 <HAL_ADC_Init+0x150>)
 8002886:	ea06 0607 	and.w	r6, r6, r7
 800288a:	ea46 0601 	orr.w	r6, r6, r1
 800288e:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002890:	d19e      	bne.n	80027d0 <HAL_ADC_Init+0x78>
 8002892:	e7cf      	b.n	8002834 <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002894:	69a6      	ldr	r6, [r4, #24]
 8002896:	3e01      	subs	r6, #1
 8002898:	ea4c 3646 	orr.w	r6, ip, r6, lsl #13
 800289c:	f446 6c00 	orr.w	ip, r6, #2048	; 0x800
 80028a0:	e7e7      	b.n	8002872 <HAL_ADC_Init+0x11a>
 80028a2:	bf00      	nop
 80028a4:	40013c00 	.word	0x40013c00
 80028a8:	ffe1f7fd 	.word	0xffe1f7fd
 80028ac:	ff1f0efe 	.word	0xff1f0efe

080028b0 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80028b0:	2300      	movs	r3, #0
{
 80028b2:	b570      	push	{r4, r5, r6, lr}
 80028b4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80028b6:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d05f      	beq.n	8002980 <HAL_ADCEx_Calibration_Start+0xd0>
 80028c0:	2301      	movs	r3, #1
 80028c2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028c6:	4604      	mov	r4, r0
 80028c8:	f7ff ff1c 	bl	8002704 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80028cc:	4605      	mov	r5, r0
 80028ce:	b128      	cbz	r0, 80028dc <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d0:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 80028d2:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 80028d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80028d8:	b002      	add	sp, #8
 80028da:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80028dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80028de:	4a31      	ldr	r2, [pc, #196]	; (80029a4 <HAL_ADCEx_Calibration_Start+0xf4>)
    ADC_STATE_CLR_SET(hadc->State,
 80028e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028e4:	f023 0302 	bic.w	r3, r3, #2
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80028ee:	2002      	movs	r0, #2
 80028f0:	6816      	ldr	r6, [r2, #0]
 80028f2:	f000 fd51 	bl	8003398 <HAL_RCCEx_GetPeriphCLKFreq>
 80028f6:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80028fa:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 80028fc:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 80028fe:	9b01      	ldr	r3, [sp, #4]
 8002900:	b12b      	cbz	r3, 800290e <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8002902:	9b01      	ldr	r3, [sp, #4]
 8002904:	3b01      	subs	r3, #1
 8002906:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002908:	9b01      	ldr	r3, [sp, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f9      	bne.n	8002902 <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 800290e:	4620      	mov	r0, r4
 8002910:	f7ff fe4e 	bl	80025b0 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002914:	6822      	ldr	r2, [r4, #0]
 8002916:	6893      	ldr	r3, [r2, #8]
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800291e:	f7ff fcdf 	bl	80022e0 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002922:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002924:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	0711      	lsls	r1, r2, #28
 800292a:	d50b      	bpl.n	8002944 <HAL_ADCEx_Calibration_Start+0x94>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800292c:	f7ff fcd8 	bl	80022e0 <HAL_GetTick>
 8002930:	1b83      	subs	r3, r0, r6
 8002932:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002934:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002936:	d902      	bls.n	800293e <HAL_ADCEx_Calibration_Start+0x8e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	0712      	lsls	r2, r2, #28
 800293c:	d424      	bmi.n	8002988 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	0710      	lsls	r0, r2, #28
 8002942:	d4f3      	bmi.n	800292c <HAL_ADCEx_Calibration_Start+0x7c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	f042 0204 	orr.w	r2, r2, #4
 800294a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800294c:	f7ff fcc8 	bl	80022e0 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002950:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002952:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	0759      	lsls	r1, r3, #29
 8002958:	d50b      	bpl.n	8002972 <HAL_ADCEx_Calibration_Start+0xc2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800295a:	f7ff fcc1 	bl	80022e0 <HAL_GetTick>
 800295e:	1b83      	subs	r3, r0, r6
 8002960:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002962:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002964:	d902      	bls.n	800296c <HAL_ADCEx_Calibration_Start+0xbc>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	0752      	lsls	r2, r2, #29
 800296a:	d40d      	bmi.n	8002988 <HAL_ADCEx_Calibration_Start+0xd8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	075b      	lsls	r3, r3, #29
 8002970:	d4f3      	bmi.n	800295a <HAL_ADCEx_Calibration_Start+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 8002972:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002974:	f023 0303 	bic.w	r3, r3, #3
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	62a3      	str	r3, [r4, #40]	; 0x28
 800297e:	e7a7      	b.n	80028d0 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8002980:	2502      	movs	r5, #2
}
 8002982:	4628      	mov	r0, r5
 8002984:	b002      	add	sp, #8
 8002986:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_ERROR;
 8002988:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 800298a:	2200      	movs	r2, #0
}
 800298c:	4628      	mov	r0, r5
          ADC_STATE_CLR_SET(hadc->State,
 800298e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8002990:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          ADC_STATE_CLR_SET(hadc->State,
 8002994:	f023 0312 	bic.w	r3, r3, #18
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800299e:	b002      	add	sp, #8
 80029a0:	bd70      	pop	{r4, r5, r6, pc}
 80029a2:	bf00      	nop
 80029a4:	20000000 	.word	0x20000000

080029a8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a8:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4906      	ldr	r1, [pc, #24]	; (80029c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029ae:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b6:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80029c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ce:	b500      	push	{lr}
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d6:	f1c3 0e07 	rsb	lr, r3, #7
 80029da:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e2:	bf28      	it	cs
 80029e4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e8:	f1bc 0f06 	cmp.w	ip, #6
 80029ec:	d91b      	bls.n	8002a26 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ee:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	fa0c fc03 	lsl.w	ip, ip, r3
 80029f8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002a00:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002a04:	ea21 010c 	bic.w	r1, r1, ip
 8002a08:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002a10:	db0c      	blt.n	8002a2c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	0109      	lsls	r1, r1, #4
 8002a14:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002a18:	b2c9      	uxtb	r1, r1
 8002a1a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002a1e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a26:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a28:	4613      	mov	r3, r2
 8002a2a:	e7e7      	b.n	80029fc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_NVIC_SetPriority+0x78>)
 8002a2e:	f000 000f 	and.w	r0, r0, #15
 8002a32:	0109      	lsls	r1, r1, #4
 8002a34:	b2c9      	uxtb	r1, r1
 8002a36:	4403      	add	r3, r0
 8002a38:	7619      	strb	r1, [r3, #24]
 8002a3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	e000ecfc 	.word	0xe000ecfc

08002a48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	3801      	subs	r0, #1
 8002a4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002a4e:	d20f      	bcs.n	8002a70 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a54:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5a:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5c:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5e:	4c05      	ldr	r4, [pc, #20]	; (8002a74 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a60:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a62:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a66:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8002a6a:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6c:	6119      	str	r1, [r3, #16]
 8002a6e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002a70:	2001      	movs	r0, #1
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7c:	680e      	ldr	r6, [r1, #0]
{
 8002a7e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a80:	2e00      	cmp	r6, #0
 8002a82:	f000 80be 	beq.w	8002c02 <HAL_GPIO_Init+0x18a>
 8002a86:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a88:	4f85      	ldr	r7, [pc, #532]	; (8002ca0 <HAL_GPIO_Init+0x228>)
  uint32_t config = 0x00u;
 8002a8a:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8002a8c:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a8e:	4d85      	ldr	r5, [pc, #532]	; (8002ca4 <HAL_GPIO_Init+0x22c>)
      switch (GPIO_Init->Mode)
 8002a90:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8002ca8 <HAL_GPIO_Init+0x230>
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8002a96:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a98:	fa36 f403 	lsrs.w	r4, r6, r3
 8002a9c:	f102 0204 	add.w	r2, r2, #4
 8002aa0:	f000 80af 	beq.w	8002c02 <HAL_GPIO_Init+0x18a>
    ioposition = (0x01uL << position);
 8002aa4:	2401      	movs	r4, #1
 8002aa6:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8002aa8:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aac:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8002ab0:	d1f1      	bne.n	8002a96 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8002ab2:	684e      	ldr	r6, [r1, #4]
 8002ab4:	2e12      	cmp	r6, #18
 8002ab6:	f200 80a7 	bhi.w	8002c08 <HAL_GPIO_Init+0x190>
 8002aba:	2e12      	cmp	r6, #18
 8002abc:	d81a      	bhi.n	8002af4 <HAL_GPIO_Init+0x7c>
 8002abe:	e8df f006 	tbb	[pc, r6]
 8002ac2:	c2b0      	.short	0xc2b0
 8002ac4:	1919d7be 	.word	0x1919d7be
 8002ac8:	19191919 	.word	0x19191919
 8002acc:	19191919 	.word	0x19191919
 8002ad0:	ba191919 	.word	0xba191919
 8002ad4:	c5          	.byte	0xc5
 8002ad5:	00          	.byte	0x00
 8002ad6:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8002cac <HAL_GPIO_Init+0x234>
 8002ada:	4576      	cmp	r6, lr
 8002adc:	f000 80a1 	beq.w	8002c22 <HAL_GPIO_Init+0x1aa>
 8002ae0:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8002ae4:	4576      	cmp	r6, lr
 8002ae6:	f000 809c 	beq.w	8002c22 <HAL_GPIO_Init+0x1aa>
 8002aea:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8002aee:	4576      	cmp	r6, lr
 8002af0:	f000 8097 	beq.w	8002c22 <HAL_GPIO_Init+0x1aa>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002af4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8002af8:	bf9c      	itt	ls
 8002afa:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002afc:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002afe:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b02:	bf84      	itt	hi
 8002b04:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b08:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b0c:	f8de 4000 	ldr.w	r4, [lr]
 8002b10:	fa0a f90b 	lsl.w	r9, sl, fp
 8002b14:	fa06 fb0b 	lsl.w	fp, r6, fp
 8002b18:	ea24 040b 	bic.w	r4, r4, fp
 8002b1c:	ea44 0409 	orr.w	r4, r4, r9
 8002b20:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b24:	684c      	ldr	r4, [r1, #4]
 8002b26:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002b2a:	f000 8082 	beq.w	8002c32 <HAL_GPIO_Init+0x1ba>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b2e:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b32:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b36:	f04e 0e01 	orr.w	lr, lr, #1
 8002b3a:	f8c7 e018 	str.w	lr, [r7, #24]
 8002b3e:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b42:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b46:	f00e 0e01 	and.w	lr, lr, #1
 8002b4a:	f8cd e004 	str.w	lr, [sp, #4]
 8002b4e:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002b52:	f023 0e03 	bic.w	lr, r3, #3
 8002b56:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8002b5a:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8002b5e:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b62:	fa06 f609 	lsl.w	r6, r6, r9
 8002b66:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b6a:	f8df b144 	ldr.w	fp, [pc, #324]	; 8002cb0 <HAL_GPIO_Init+0x238>
 8002b6e:	4558      	cmp	r0, fp
 8002b70:	d01b      	beq.n	8002baa <HAL_GPIO_Init+0x132>
 8002b72:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8002b76:	4558      	cmp	r0, fp
 8002b78:	d073      	beq.n	8002c62 <HAL_GPIO_Init+0x1ea>
 8002b7a:	f8df b138 	ldr.w	fp, [pc, #312]	; 8002cb4 <HAL_GPIO_Init+0x23c>
 8002b7e:	4558      	cmp	r0, fp
 8002b80:	d068      	beq.n	8002c54 <HAL_GPIO_Init+0x1dc>
 8002b82:	f8df b134 	ldr.w	fp, [pc, #308]	; 8002cb8 <HAL_GPIO_Init+0x240>
 8002b86:	4558      	cmp	r0, fp
 8002b88:	d07c      	beq.n	8002c84 <HAL_GPIO_Init+0x20c>
 8002b8a:	f8df b130 	ldr.w	fp, [pc, #304]	; 8002cbc <HAL_GPIO_Init+0x244>
 8002b8e:	4558      	cmp	r0, fp
 8002b90:	d07f      	beq.n	8002c92 <HAL_GPIO_Init+0x21a>
 8002b92:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8002cc0 <HAL_GPIO_Init+0x248>
 8002b96:	4558      	cmp	r0, fp
 8002b98:	bf0c      	ite	eq
 8002b9a:	f04f 0b05 	moveq.w	fp, #5
 8002b9e:	f04f 0b06 	movne.w	fp, #6
 8002ba2:	fa0b f909 	lsl.w	r9, fp, r9
 8002ba6:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002baa:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002bae:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bb0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002bb4:	bf14      	ite	ne
 8002bb6:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bba:	ea26 060c 	biceq.w	r6, r6, ip
 8002bbe:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002bc0:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002bc6:	bf14      	ite	ne
 8002bc8:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bcc:	ea26 060c 	biceq.w	r6, r6, ip
 8002bd0:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bd2:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bd4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bd8:	bf14      	ite	ne
 8002bda:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bde:	ea26 060c 	biceq.w	r6, r6, ip
 8002be2:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be4:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002be8:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bea:	d01f      	beq.n	8002c2c <HAL_GPIO_Init+0x1b4>
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bec:	ea44 040c 	orr.w	r4, r4, ip
 8002bf0:	60ec      	str	r4, [r5, #12]
 8002bf2:	680e      	ldr	r6, [r1, #0]
	position++;
 8002bf4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf6:	fa36 f403 	lsrs.w	r4, r6, r3
 8002bfa:	f102 0204 	add.w	r2, r2, #4
 8002bfe:	f47f af51 	bne.w	8002aa4 <HAL_GPIO_Init+0x2c>
  }
}
 8002c02:	b003      	add	sp, #12
 8002c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8002c08:	4546      	cmp	r6, r8
 8002c0a:	d00a      	beq.n	8002c22 <HAL_GPIO_Init+0x1aa>
 8002c0c:	f67f af63 	bls.w	8002ad6 <HAL_GPIO_Init+0x5e>
 8002c10:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8002cc4 <HAL_GPIO_Init+0x24c>
 8002c14:	4576      	cmp	r6, lr
 8002c16:	d004      	beq.n	8002c22 <HAL_GPIO_Init+0x1aa>
 8002c18:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8002c1c:	4576      	cmp	r6, lr
 8002c1e:	f47f af69 	bne.w	8002af4 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c22:	688e      	ldr	r6, [r1, #8]
 8002c24:	bb3e      	cbnz	r6, 8002c76 <HAL_GPIO_Init+0x1fe>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c26:	f04f 0a04 	mov.w	sl, #4
 8002c2a:	e763      	b.n	8002af4 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c2c:	ea24 040c 	bic.w	r4, r4, ip
 8002c30:	60ec      	str	r4, [r5, #12]
 8002c32:	680e      	ldr	r6, [r1, #0]
 8002c34:	e72f      	b.n	8002a96 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c36:	68cc      	ldr	r4, [r1, #12]
 8002c38:	f104 0a04 	add.w	sl, r4, #4
          break;
 8002c3c:	e75a      	b.n	8002af4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c3e:	68cc      	ldr	r4, [r1, #12]
 8002c40:	f104 0a08 	add.w	sl, r4, #8
          break;
 8002c44:	e756      	b.n	8002af4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c46:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8002c4a:	e753      	b.n	8002af4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c4c:	68cc      	ldr	r4, [r1, #12]
 8002c4e:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8002c52:	e74f      	b.n	8002af4 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c54:	f04f 0b02 	mov.w	fp, #2
 8002c58:	fa0b f909 	lsl.w	r9, fp, r9
 8002c5c:	ea46 0609 	orr.w	r6, r6, r9
 8002c60:	e7a3      	b.n	8002baa <HAL_GPIO_Init+0x132>
 8002c62:	f04f 0b01 	mov.w	fp, #1
 8002c66:	fa0b f909 	lsl.w	r9, fp, r9
 8002c6a:	ea46 0609 	orr.w	r6, r6, r9
 8002c6e:	e79c      	b.n	8002baa <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8002c70:	f04f 0a00 	mov.w	sl, #0
 8002c74:	e73e      	b.n	8002af4 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c76:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c78:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8002c7c:	bf0c      	ite	eq
 8002c7e:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8002c80:	6144      	strne	r4, [r0, #20]
 8002c82:	e737      	b.n	8002af4 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c84:	f04f 0b03 	mov.w	fp, #3
 8002c88:	fa0b f909 	lsl.w	r9, fp, r9
 8002c8c:	ea46 0609 	orr.w	r6, r6, r9
 8002c90:	e78b      	b.n	8002baa <HAL_GPIO_Init+0x132>
 8002c92:	f04f 0b04 	mov.w	fp, #4
 8002c96:	fa0b f909 	lsl.w	r9, fp, r9
 8002c9a:	ea46 0609 	orr.w	r6, r6, r9
 8002c9e:	e784      	b.n	8002baa <HAL_GPIO_Init+0x132>
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40010400 	.word	0x40010400
 8002ca8:	10220000 	.word	0x10220000
 8002cac:	10120000 	.word	0x10120000
 8002cb0:	40010800 	.word	0x40010800
 8002cb4:	40011000 	.word	0x40011000
 8002cb8:	40011400 	.word	0x40011400
 8002cbc:	40011800 	.word	0x40011800
 8002cc0:	40011c00 	.word	0x40011c00
 8002cc4:	10310000 	.word	0x10310000

08002cc8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc8:	6883      	ldr	r3, [r0, #8]
 8002cca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002ccc:	bf14      	ite	ne
 8002cce:	2001      	movne	r0, #1
 8002cd0:	2000      	moveq	r0, #0
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd4:	b902      	cbnz	r2, 8002cd8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cd6:	0409      	lsls	r1, r1, #16
 8002cd8:	6101      	str	r1, [r0, #16]
  }
}
 8002cda:	4770      	bx	lr

08002cdc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	f000 81b6 	beq.w	800304e <HAL_RCC_OscConfig+0x372>
{
 8002ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	6803      	ldr	r3, [r0, #0]
 8002ce8:	4604      	mov	r4, r0
 8002cea:	07dd      	lsls	r5, r3, #31
{
 8002cec:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cee:	d535      	bpl.n	8002d5c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cf0:	499a      	ldr	r1, [pc, #616]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002cf2:	684a      	ldr	r2, [r1, #4]
 8002cf4:	f002 020c 	and.w	r2, r2, #12
 8002cf8:	2a04      	cmp	r2, #4
 8002cfa:	f000 80ef 	beq.w	8002edc <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cfe:	684a      	ldr	r2, [r1, #4]
 8002d00:	f002 020c 	and.w	r2, r2, #12
 8002d04:	2a08      	cmp	r2, #8
 8002d06:	f000 80e5 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0a:	6863      	ldr	r3, [r4, #4]
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d010      	beq.n	8002d34 <HAL_RCC_OscConfig+0x58>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 810c 	beq.w	8002f30 <HAL_RCC_OscConfig+0x254>
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	f000 8182 	beq.w	8003024 <HAL_RCC_OscConfig+0x348>
 8002d20:	4b8e      	ldr	r3, [pc, #568]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e004      	b.n	8002d3e <HAL_RCC_OscConfig+0x62>
 8002d34:	4a89      	ldr	r2, [pc, #548]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7ff facf 	bl	80022e0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4e86      	ldr	r6, [pc, #536]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8002d44:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	e005      	b.n	8002d54 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d48:	f7ff faca 	bl	80022e0 <HAL_GetTick>
 8002d4c:	1b40      	subs	r0, r0, r5
 8002d4e:	2864      	cmp	r0, #100	; 0x64
 8002d50:	f200 80ea 	bhi.w	8002f28 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d54:	6833      	ldr	r3, [r6, #0]
 8002d56:	039a      	lsls	r2, r3, #14
 8002d58:	d5f6      	bpl.n	8002d48 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	079f      	lsls	r7, r3, #30
 8002d5e:	d528      	bpl.n	8002db2 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d60:	4a7e      	ldr	r2, [pc, #504]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d62:	6851      	ldr	r1, [r2, #4]
 8002d64:	f011 0f0c 	tst.w	r1, #12
 8002d68:	f000 808d 	beq.w	8002e86 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d6c:	6851      	ldr	r1, [r2, #4]
 8002d6e:	f001 010c 	and.w	r1, r1, #12
 8002d72:	2908      	cmp	r1, #8
 8002d74:	f000 8083 	beq.w	8002e7e <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d78:	6923      	ldr	r3, [r4, #16]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8118 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d80:	2201      	movs	r2, #1
 8002d82:	4b77      	ldr	r3, [pc, #476]	; (8002f60 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	4e75      	ldr	r6, [pc, #468]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8002d86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d88:	f7ff faaa 	bl	80022e0 <HAL_GetTick>
 8002d8c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	e005      	b.n	8002d9c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7ff faa6 	bl	80022e0 <HAL_GetTick>
 8002d94:	1b40      	subs	r0, r0, r5
 8002d96:	2802      	cmp	r0, #2
 8002d98:	f200 80c6 	bhi.w	8002f28 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	6833      	ldr	r3, [r6, #0]
 8002d9e:	0798      	lsls	r0, r3, #30
 8002da0:	d5f6      	bpl.n	8002d90 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da2:	6833      	ldr	r3, [r6, #0]
 8002da4:	6962      	ldr	r2, [r4, #20]
 8002da6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002daa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002dae:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	071a      	lsls	r2, r3, #28
 8002db4:	d41f      	bmi.n	8002df6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db6:	075d      	lsls	r5, r3, #29
 8002db8:	d542      	bpl.n	8002e40 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dba:	4b68      	ldr	r3, [pc, #416]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	00d0      	lsls	r0, r2, #3
 8002dc0:	d57d      	bpl.n	8002ebe <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	4e67      	ldr	r6, [pc, #412]	; (8002f64 <HAL_RCC_OscConfig+0x288>)
 8002dc6:	6833      	ldr	r3, [r6, #0]
 8002dc8:	05d9      	lsls	r1, r3, #23
 8002dca:	f140 809d 	bpl.w	8002f08 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dce:	68e3      	ldr	r3, [r4, #12]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	f000 80fe 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x2f6>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80ca 	beq.w	8002f70 <HAL_RCC_OscConfig+0x294>
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002de0:	6a1a      	ldr	r2, [r3, #32]
 8002de2:	f000 812c 	beq.w	800303e <HAL_RCC_OscConfig+0x362>
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	621a      	str	r2, [r3, #32]
 8002dec:	6a1a      	ldr	r2, [r3, #32]
 8002dee:	f022 0204 	bic.w	r2, r2, #4
 8002df2:	621a      	str	r2, [r3, #32]
 8002df4:	e0f2      	b.n	8002fdc <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df6:	69a3      	ldr	r3, [r4, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d04f      	beq.n	8002e9c <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4b58      	ldr	r3, [pc, #352]	; (8002f60 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e00:	4e56      	ldr	r6, [pc, #344]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8002e02:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002e06:	f7ff fa6b 	bl	80022e0 <HAL_GetTick>
 8002e0a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0c:	e005      	b.n	8002e1a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7ff fa67 	bl	80022e0 <HAL_GetTick>
 8002e12:	1b40      	subs	r0, r0, r5
 8002e14:	2802      	cmp	r0, #2
 8002e16:	f200 8087 	bhi.w	8002f28 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e1c:	079b      	lsls	r3, r3, #30
 8002e1e:	d5f6      	bpl.n	8002e0e <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e20:	4b51      	ldr	r3, [pc, #324]	; (8002f68 <HAL_RCC_OscConfig+0x28c>)
 8002e22:	4a52      	ldr	r2, [pc, #328]	; (8002f6c <HAL_RCC_OscConfig+0x290>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	0a5b      	lsrs	r3, r3, #9
 8002e2c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002e2e:	bf00      	nop
  }
  while (Delay --);
 8002e30:	9b01      	ldr	r3, [sp, #4]
 8002e32:	1e5a      	subs	r2, r3, #1
 8002e34:	9201      	str	r2, [sp, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	075d      	lsls	r5, r3, #29
 8002e3e:	d4bc      	bmi.n	8002dba <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e40:	69e0      	ldr	r0, [r4, #28]
 8002e42:	b1c0      	cbz	r0, 8002e76 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e44:	4d45      	ldr	r5, [pc, #276]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e46:	686b      	ldr	r3, [r5, #4]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	f000 80d8 	beq.w	8003002 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8002e52:	2200      	movs	r2, #0
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e56:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5a:	f000 80fa 	beq.w	8003052 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8002e5e:	f7ff fa3f 	bl	80022e0 <HAL_GetTick>
 8002e62:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e64:	e004      	b.n	8002e70 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e66:	f7ff fa3b 	bl	80022e0 <HAL_GetTick>
 8002e6a:	1b00      	subs	r0, r0, r4
 8002e6c:	2802      	cmp	r0, #2
 8002e6e:	d85b      	bhi.n	8002f28 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	019b      	lsls	r3, r3, #6
 8002e74:	d4f7      	bmi.n	8002e66 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8002e76:	2000      	movs	r0, #0
}
 8002e78:	b002      	add	sp, #8
 8002e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e7e:	6852      	ldr	r2, [r2, #4]
 8002e80:	03d6      	lsls	r6, r2, #15
 8002e82:	f53f af79 	bmi.w	8002d78 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	4a35      	ldr	r2, [pc, #212]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	0795      	lsls	r5, r2, #30
 8002e8c:	d530      	bpl.n	8002ef0 <HAL_RCC_OscConfig+0x214>
 8002e8e:	6922      	ldr	r2, [r4, #16]
 8002e90:	2a01      	cmp	r2, #1
 8002e92:	d02d      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8002e94:	2001      	movs	r0, #1
}
 8002e96:	b002      	add	sp, #8
 8002e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002e9c:	4a30      	ldr	r2, [pc, #192]	; (8002f60 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9e:	4e2f      	ldr	r6, [pc, #188]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002ea4:	f7ff fa1c 	bl	80022e0 <HAL_GetTick>
 8002ea8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eaa:	e004      	b.n	8002eb6 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7ff fa18 	bl	80022e0 <HAL_GetTick>
 8002eb0:	1b40      	subs	r0, r0, r5
 8002eb2:	2802      	cmp	r0, #2
 8002eb4:	d838      	bhi.n	8002f28 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002eb8:	079f      	lsls	r7, r3, #30
 8002eba:	d4f7      	bmi.n	8002eac <HAL_RCC_OscConfig+0x1d0>
 8002ebc:	e7bd      	b.n	8002e3a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8002ec0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ec6:	61da      	str	r2, [r3, #28]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8002ed2:	e777      	b.n	8002dc4 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed4:	684a      	ldr	r2, [r1, #4]
 8002ed6:	03d0      	lsls	r0, r2, #15
 8002ed8:	f57f af17 	bpl.w	8002d0a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	0391      	lsls	r1, r2, #14
 8002ee2:	f57f af3b 	bpl.w	8002d5c <HAL_RCC_OscConfig+0x80>
 8002ee6:	6862      	ldr	r2, [r4, #4]
 8002ee8:	2a00      	cmp	r2, #0
 8002eea:	f47f af37 	bne.w	8002d5c <HAL_RCC_OscConfig+0x80>
 8002eee:	e7d1      	b.n	8002e94 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef0:	491a      	ldr	r1, [pc, #104]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002ef2:	6960      	ldr	r0, [r4, #20]
 8002ef4:	680a      	ldr	r2, [r1, #0]
 8002ef6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002efa:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002efe:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f00:	071a      	lsls	r2, r3, #28
 8002f02:	f57f af58 	bpl.w	8002db6 <HAL_RCC_OscConfig+0xda>
 8002f06:	e776      	b.n	8002df6 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f08:	6833      	ldr	r3, [r6, #0]
 8002f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002f10:	f7ff f9e6 	bl	80022e0 <HAL_GetTick>
 8002f14:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	6833      	ldr	r3, [r6, #0]
 8002f18:	05da      	lsls	r2, r3, #23
 8002f1a:	f53f af58 	bmi.w	8002dce <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1e:	f7ff f9df 	bl	80022e0 <HAL_GetTick>
 8002f22:	1bc0      	subs	r0, r0, r7
 8002f24:	2864      	cmp	r0, #100	; 0x64
 8002f26:	d9f6      	bls.n	8002f16 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8002f28:	2003      	movs	r0, #3
}
 8002f2a:	b002      	add	sp, #8
 8002f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f30:	4d0a      	ldr	r5, [pc, #40]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	602b      	str	r3, [r5, #0]
 8002f3a:	682b      	ldr	r3, [r5, #0]
 8002f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f42:	f7ff f9cd 	bl	80022e0 <HAL_GetTick>
 8002f46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f48:	e004      	b.n	8002f54 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4a:	f7ff f9c9 	bl	80022e0 <HAL_GetTick>
 8002f4e:	1b80      	subs	r0, r0, r6
 8002f50:	2864      	cmp	r0, #100	; 0x64
 8002f52:	d8e9      	bhi.n	8002f28 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	039b      	lsls	r3, r3, #14
 8002f58:	d4f7      	bmi.n	8002f4a <HAL_RCC_OscConfig+0x26e>
 8002f5a:	e6fe      	b.n	8002d5a <HAL_RCC_OscConfig+0x7e>
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	42420000 	.word	0x42420000
 8002f64:	40007000 	.word	0x40007000
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	4e50      	ldr	r6, [pc, #320]	; (80030b4 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f76:	6a33      	ldr	r3, [r6, #32]
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6233      	str	r3, [r6, #32]
 8002f7e:	6a33      	ldr	r3, [r6, #32]
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002f86:	f7ff f9ab 	bl	80022e0 <HAL_GetTick>
 8002f8a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	e004      	b.n	8002f98 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7ff f9a7 	bl	80022e0 <HAL_GetTick>
 8002f92:	1bc0      	subs	r0, r0, r7
 8002f94:	4540      	cmp	r0, r8
 8002f96:	d8c7      	bhi.n	8002f28 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f98:	6a33      	ldr	r3, [r6, #32]
 8002f9a:	0798      	lsls	r0, r3, #30
 8002f9c:	d4f7      	bmi.n	8002f8e <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	f43f af4e 	beq.w	8002e40 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa4:	4a43      	ldr	r2, [pc, #268]	; (80030b4 <HAL_RCC_OscConfig+0x3d8>)
 8002fa6:	69d3      	ldr	r3, [r2, #28]
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fac:	61d3      	str	r3, [r2, #28]
 8002fae:	e747      	b.n	8002e40 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002fb0:	4a41      	ldr	r2, [pc, #260]	; (80030b8 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	4e40      	ldr	r6, [pc, #256]	; (80030b4 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8002fb4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002fb6:	f7ff f993 	bl	80022e0 <HAL_GetTick>
 8002fba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbc:	e004      	b.n	8002fc8 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7ff f98f 	bl	80022e0 <HAL_GetTick>
 8002fc2:	1b40      	subs	r0, r0, r5
 8002fc4:	2802      	cmp	r0, #2
 8002fc6:	d8af      	bhi.n	8002f28 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc8:	6833      	ldr	r3, [r6, #0]
 8002fca:	0799      	lsls	r1, r3, #30
 8002fcc:	d4f7      	bmi.n	8002fbe <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	e6ef      	b.n	8002db2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd2:	4a38      	ldr	r2, [pc, #224]	; (80030b4 <HAL_RCC_OscConfig+0x3d8>)
 8002fd4:	6a13      	ldr	r3, [r2, #32]
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002fdc:	f7ff f980 	bl	80022e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002fe4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	4f33      	ldr	r7, [pc, #204]	; (80030b4 <HAL_RCC_OscConfig+0x3d8>)
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7ff f979 	bl	80022e0 <HAL_GetTick>
 8002fee:	1b80      	subs	r0, r0, r6
 8002ff0:	4540      	cmp	r0, r8
 8002ff2:	d899      	bhi.n	8002f28 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	079b      	lsls	r3, r3, #30
 8002ff8:	d5f7      	bpl.n	8002fea <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8002ffa:	2d00      	cmp	r5, #0
 8002ffc:	f43f af20 	beq.w	8002e40 <HAL_RCC_OscConfig+0x164>
 8003000:	e7d0      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003002:	2801      	cmp	r0, #1
 8003004:	f43f af38 	beq.w	8002e78 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8003008:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	6a22      	ldr	r2, [r4, #32]
 800300c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003010:	4291      	cmp	r1, r2
 8003012:	f47f af3f 	bne.w	8002e94 <HAL_RCC_OscConfig+0x1b8>
 8003016:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003018:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800301c:	1a18      	subs	r0, r3, r0
 800301e:	bf18      	it	ne
 8003020:	2001      	movne	r0, #1
 8003022:	e729      	b.n	8002e78 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003028:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e67f      	b.n	8002d3e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303e:	f042 0204 	orr.w	r2, r2, #4
 8003042:	621a      	str	r2, [r3, #32]
 8003044:	6a1a      	ldr	r2, [r3, #32]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	621a      	str	r2, [r3, #32]
 800304c:	e7c6      	b.n	8002fdc <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 800304e:	2001      	movs	r0, #1
}
 8003050:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8003052:	f7ff f945 	bl	80022e0 <HAL_GetTick>
 8003056:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003058:	e005      	b.n	8003066 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305a:	f7ff f941 	bl	80022e0 <HAL_GetTick>
 800305e:	1b80      	subs	r0, r0, r6
 8003060:	2802      	cmp	r0, #2
 8003062:	f63f af61 	bhi.w	8002f28 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	0199      	lsls	r1, r3, #6
 800306a:	d4f6      	bmi.n	800305a <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800306c:	6a23      	ldr	r3, [r4, #32]
 800306e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003074:	686a      	ldr	r2, [r5, #4]
 8003076:	68a1      	ldr	r1, [r4, #8]
 8003078:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800307c:	430a      	orrs	r2, r1
 800307e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003080:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003082:	4d0c      	ldr	r5, [pc, #48]	; (80030b4 <HAL_RCC_OscConfig+0x3d8>)
 8003084:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003086:	686a      	ldr	r2, [r5, #4]
 8003088:	430b      	orrs	r3, r1
 800308a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800308e:	490a      	ldr	r1, [pc, #40]	; (80030b8 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	4313      	orrs	r3, r2
 8003092:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003094:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003096:	f7ff f923 	bl	80022e0 <HAL_GetTick>
 800309a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800309c:	e005      	b.n	80030aa <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309e:	f7ff f91f 	bl	80022e0 <HAL_GetTick>
 80030a2:	1b00      	subs	r0, r0, r4
 80030a4:	2802      	cmp	r0, #2
 80030a6:	f63f af3f 	bhi.w	8002f28 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030aa:	682b      	ldr	r3, [r5, #0]
 80030ac:	019a      	lsls	r2, r3, #6
 80030ae:	d5f6      	bpl.n	800309e <HAL_RCC_OscConfig+0x3c2>
 80030b0:	e6e1      	b.n	8002e76 <HAL_RCC_OscConfig+0x19a>
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	42420000 	.word	0x42420000

080030bc <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030bc:	f240 2c01 	movw	ip, #513	; 0x201
{
 80030c0:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80030c4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030c6:	f10d 0e18 	add.w	lr, sp, #24
 80030ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030cc:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80030d0:	4a15      	ldr	r2, [pc, #84]	; (8003128 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030d2:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 80030d6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80030d8:	f003 010c 	and.w	r1, r3, #12
 80030dc:	2908      	cmp	r1, #8
 80030de:	d003      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 80030e0:	4812      	ldr	r0, [pc, #72]	; (800312c <HAL_RCC_GetSysClockFreq+0x70>)
}
 80030e2:	b007      	add	sp, #28
 80030e4:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030e8:	f3c3 4183 	ubfx	r1, r3, #18, #4
 80030ec:	3118      	adds	r1, #24
 80030ee:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030f0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030f2:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030f6:	d50e      	bpl.n	8003116 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030f8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030fa:	4a0c      	ldr	r2, [pc, #48]	; (800312c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003100:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003104:	3318      	adds	r3, #24
 8003106:	446b      	add	r3, sp
 8003108:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800310c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003110:	b007      	add	sp, #28
 8003112:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_RCC_GetSysClockFreq+0x74>)
 8003118:	fb03 f000 	mul.w	r0, r3, r0
}
 800311c:	b007      	add	sp, #28
 800311e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003122:	bf00      	nop
 8003124:	080100d8 	.word	0x080100d8
 8003128:	40021000 	.word	0x40021000
 800312c:	007a1200 	.word	0x007a1200
 8003130:	003d0900 	.word	0x003d0900

08003134 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003134:	2800      	cmp	r0, #0
 8003136:	f000 808c 	beq.w	8003252 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800313a:	4a49      	ldr	r2, [pc, #292]	; (8003260 <HAL_RCC_ClockConfig+0x12c>)
{
 800313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	6813      	ldr	r3, [r2, #0]
 8003142:	4604      	mov	r4, r0
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	428b      	cmp	r3, r1
 800314a:	460d      	mov	r5, r1
 800314c:	d20c      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	6813      	ldr	r3, [r2, #0]
 8003150:	f023 0307 	bic.w	r3, r3, #7
 8003154:	430b      	orrs	r3, r1
 8003156:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	428b      	cmp	r3, r1
 8003160:	d002      	beq.n	8003168 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003162:	2001      	movs	r0, #1
}
 8003164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	0798      	lsls	r0, r3, #30
 800316c:	d514      	bpl.n	8003198 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316e:	0759      	lsls	r1, r3, #29
 8003170:	d504      	bpl.n	800317c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003172:	493c      	ldr	r1, [pc, #240]	; (8003264 <HAL_RCC_ClockConfig+0x130>)
 8003174:	684a      	ldr	r2, [r1, #4]
 8003176:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800317a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	071a      	lsls	r2, r3, #28
 800317e:	d504      	bpl.n	800318a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003180:	4938      	ldr	r1, [pc, #224]	; (8003264 <HAL_RCC_ClockConfig+0x130>)
 8003182:	684a      	ldr	r2, [r1, #4]
 8003184:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003188:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318a:	4936      	ldr	r1, [pc, #216]	; (8003264 <HAL_RCC_ClockConfig+0x130>)
 800318c:	68a0      	ldr	r0, [r4, #8]
 800318e:	684a      	ldr	r2, [r1, #4]
 8003190:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003194:	4302      	orrs	r2, r0
 8003196:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003198:	07df      	lsls	r7, r3, #31
 800319a:	d520      	bpl.n	80031de <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a0:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a4:	d057      	beq.n	8003256 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a6:	2a02      	cmp	r2, #2
 80031a8:	d050      	beq.n	800324c <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	0799      	lsls	r1, r3, #30
 80031ac:	d5d9      	bpl.n	8003162 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4e2d      	ldr	r6, [pc, #180]	; (8003264 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b4:	6873      	ldr	r3, [r6, #4]
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	4313      	orrs	r3, r2
 80031bc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80031be:	f7ff f88f 	bl	80022e0 <HAL_GetTick>
 80031c2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c4:	e004      	b.n	80031d0 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c6:	f7ff f88b 	bl	80022e0 <HAL_GetTick>
 80031ca:	1bc0      	subs	r0, r0, r7
 80031cc:	4540      	cmp	r0, r8
 80031ce:	d845      	bhi.n	800325c <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d0:	6873      	ldr	r3, [r6, #4]
 80031d2:	6862      	ldr	r2, [r4, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80031dc:	d1f3      	bne.n	80031c6 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031de:	4a20      	ldr	r2, [pc, #128]	; (8003260 <HAL_RCC_ClockConfig+0x12c>)
 80031e0:	6813      	ldr	r3, [r2, #0]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	42ab      	cmp	r3, r5
 80031e8:	d909      	bls.n	80031fe <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	6813      	ldr	r3, [r2, #0]
 80031ec:	f023 0307 	bic.w	r3, r3, #7
 80031f0:	432b      	orrs	r3, r5
 80031f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f4:	6813      	ldr	r3, [r2, #0]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	42ab      	cmp	r3, r5
 80031fc:	d1b1      	bne.n	8003162 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	075a      	lsls	r2, r3, #29
 8003202:	d506      	bpl.n	8003212 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003204:	4917      	ldr	r1, [pc, #92]	; (8003264 <HAL_RCC_ClockConfig+0x130>)
 8003206:	68e0      	ldr	r0, [r4, #12]
 8003208:	684a      	ldr	r2, [r1, #4]
 800320a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800320e:	4302      	orrs	r2, r0
 8003210:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003212:	071b      	lsls	r3, r3, #28
 8003214:	d507      	bpl.n	8003226 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003216:	4a13      	ldr	r2, [pc, #76]	; (8003264 <HAL_RCC_ClockConfig+0x130>)
 8003218:	6921      	ldr	r1, [r4, #16]
 800321a:	6853      	ldr	r3, [r2, #4]
 800321c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003220:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003224:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003226:	f7ff ff49 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 800322a:	4603      	mov	r3, r0
 800322c:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_RCC_ClockConfig+0x130>)
 800322e:	490e      	ldr	r1, [pc, #56]	; (8003268 <HAL_RCC_ClockConfig+0x134>)
 8003230:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003232:	480e      	ldr	r0, [pc, #56]	; (800326c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003234:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003238:	5c89      	ldrb	r1, [r1, r2]
 800323a:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <HAL_RCC_ClockConfig+0x13c>)
 800323c:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 800323e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003240:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003242:	f7ff f80b 	bl	800225c <HAL_InitTick>
  return HAL_OK;
 8003246:	2000      	movs	r0, #0
}
 8003248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	0198      	lsls	r0, r3, #6
 800324e:	d4ae      	bmi.n	80031ae <HAL_RCC_ClockConfig+0x7a>
 8003250:	e787      	b.n	8003162 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003252:	2001      	movs	r0, #1
}
 8003254:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	039e      	lsls	r6, r3, #14
 8003258:	d4a9      	bmi.n	80031ae <HAL_RCC_ClockConfig+0x7a>
 800325a:	e782      	b.n	8003162 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800325c:	2003      	movs	r0, #3
 800325e:	e781      	b.n	8003164 <HAL_RCC_ClockConfig+0x30>
 8003260:	40022000 	.word	0x40022000
 8003264:	40021000 	.word	0x40021000
 8003268:	08007fe0 	.word	0x08007fe0
 800326c:	20000030 	.word	0x20000030
 8003270:	20000000 	.word	0x20000000

08003274 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003276:	4a05      	ldr	r2, [pc, #20]	; (800328c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4905      	ldr	r1, [pc, #20]	; (8003290 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800327c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	6810      	ldr	r0, [r2, #0]
}
 8003284:	40d8      	lsrs	r0, r3
 8003286:	4770      	bx	lr
 8003288:	40021000 	.word	0x40021000
 800328c:	20000000 	.word	0x20000000
 8003290:	08007ff0 	.word	0x08007ff0

08003294 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003298:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800329a:	6800      	ldr	r0, [r0, #0]
{
 800329c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800329e:	07c1      	lsls	r1, r0, #31
 80032a0:	d52c      	bpl.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	00d2      	lsls	r2, r2, #3
 80032a8:	d53f      	bpl.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	4d39      	ldr	r5, [pc, #228]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 80032ac:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	682b      	ldr	r3, [r5, #0]
 80032b0:	05df      	lsls	r7, r3, #23
 80032b2:	d548      	bpl.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032b4:	4d35      	ldr	r5, [pc, #212]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80032b6:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032b8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80032bc:	d011      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80032be:	6861      	ldr	r1, [r4, #4]
 80032c0:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d00d      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032c8:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ca:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032cc:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ce:	4a31      	ldr	r2, [pc, #196]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80032d4:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032d8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032dc:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032de:	07d9      	lsls	r1, r3, #31
 80032e0:	d444      	bmi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e2:	6861      	ldr	r1, [r4, #4]
 80032e4:	4a29      	ldr	r2, [pc, #164]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80032e6:	6a13      	ldr	r3, [r2, #32]
 80032e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032f0:	b11e      	cbz	r6, 80032fa <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f2:	69d3      	ldr	r3, [r2, #28]
 80032f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	0783      	lsls	r3, r0, #30
 80032fe:	d506      	bpl.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003300:	4922      	ldr	r1, [pc, #136]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003302:	68a3      	ldr	r3, [r4, #8]
 8003304:	684a      	ldr	r2, [r1, #4]
 8003306:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800330a:	431a      	orrs	r2, r3
 800330c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800330e:	f010 0010 	ands.w	r0, r0, #16
 8003312:	d007      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003314:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003316:	4a1d      	ldr	r2, [pc, #116]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003318:	6961      	ldr	r1, [r4, #20]
 800331a:	6853      	ldr	r3, [r2, #4]
 800331c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003320:	430b      	orrs	r3, r1
 8003322:	6053      	str	r3, [r2, #4]
}
 8003324:	b002      	add	sp, #8
 8003326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800332a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332c:	4d18      	ldr	r5, [pc, #96]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003332:	61da      	str	r2, [r3, #28]
 8003334:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8003336:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	05df      	lsls	r7, r3, #23
 8003344:	d4b6      	bmi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	682b      	ldr	r3, [r5, #0]
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800334e:	f7fe ffc7 	bl	80022e0 <HAL_GetTick>
 8003352:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	05d8      	lsls	r0, r3, #23
 8003358:	d4ac      	bmi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fe ffc1 	bl	80022e0 <HAL_GetTick>
 800335e:	1bc3      	subs	r3, r0, r7
 8003360:	2b64      	cmp	r3, #100	; 0x64
 8003362:	d9f7      	bls.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003364:	2003      	movs	r0, #3
}
 8003366:	b002      	add	sp, #8
 8003368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 800336c:	f7fe ffb8 	bl	80022e0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003370:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003374:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003376:	e004      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fe ffb2 	bl	80022e0 <HAL_GetTick>
 800337c:	1bc0      	subs	r0, r0, r7
 800337e:	4540      	cmp	r0, r8
 8003380:	d8f0      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	6a2b      	ldr	r3, [r5, #32]
 8003384:	079a      	lsls	r2, r3, #30
 8003386:	d5f7      	bpl.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003388:	e7ab      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	40007000 	.word	0x40007000
 8003394:	42420000 	.word	0x42420000

08003398 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003398:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
{
 800339c:	b087      	sub	sp, #28
 800339e:	4684      	mov	ip, r0
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033a2:	f10d 0e18 	add.w	lr, sp, #24
 80033a6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033aa:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80033ae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033b2:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 80033b6:	280f      	cmp	r0, #15
 80033b8:	d819      	bhi.n	80033ee <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 80033ba:	e8df f000 	tbb	[pc, r0]
 80033be:	2108      	.short	0x2108
 80033c0:	18181c18 	.word	0x18181c18
 80033c4:	18181c18 	.word	0x18181c18
 80033c8:	18181818 	.word	0x18181818
 80033cc:	2e18      	.short	0x2e18
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80033ce:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 80033d2:	4930      	ldr	r1, [pc, #192]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80033d4:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80033d6:	401a      	ands	r2, r3
 80033d8:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80033dc:	d055      	beq.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80033de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d048      	beq.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80033e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ec:	d03d      	beq.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  uint32_t temp_reg = 0U, frequency = 0U;
 80033ee:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 80033f0:	b007      	add	sp, #28
 80033f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80033f6:	b007      	add	sp, #28
 80033f8:	f85d eb04 	ldr.w	lr, [sp], #4
      frequency = HAL_RCC_GetSysClockFreq();
 80033fc:	f7ff be5e 	b.w	80030bc <HAL_RCC_GetSysClockFreq>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003400:	f7ff ff38 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 8003404:	4b23      	ldr	r3, [pc, #140]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800340c:	3301      	adds	r3, #1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003414:	b007      	add	sp, #28
 8003416:	f85d fb04 	ldr.w	pc, [sp], #4
      temp_reg = RCC->CFGR;
 800341a:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 800341c:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003424:	d0e4      	beq.n	80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003426:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800342a:	3118      	adds	r1, #24
 800342c:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800342e:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003430:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003434:	d40c      	bmi.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 8003438:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	025b      	lsls	r3, r3, #9
 8003442:	d4d5      	bmi.n	80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          frequency = (pllclk * 2) / 3;
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8003446:	0040      	lsls	r0, r0, #1
 8003448:	fba3 3000 	umull	r3, r0, r3, r0
 800344c:	0840      	lsrs	r0, r0, #1
 800344e:	e7cf      	b.n	80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003450:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003452:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003454:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003458:	3318      	adds	r3, #24
 800345a:	446b      	add	r3, sp
 800345c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	fb03 f000 	mul.w	r0, r3, r0
 8003468:	e7e8      	b.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        frequency = HSE_VALUE / 128U;
 800346a:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800346e:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8003470:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003474:	bf18      	it	ne
 8003476:	4618      	movne	r0, r3
 8003478:	e7ba      	b.n	80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSI_VALUE;
 800347a:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800347e:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8003480:	f010 0002 	ands.w	r0, r0, #2
 8003484:	bf18      	it	ne
 8003486:	4618      	movne	r0, r3
 8003488:	e7b2      	b.n	80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = LSE_VALUE;
 800348a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800348e:	e7af      	b.n	80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8003490:	080100d8 	.word	0x080100d8
 8003494:	40021000 	.word	0x40021000
 8003498:	003d0900 	.word	0x003d0900
 800349c:	aaaaaaab 	.word	0xaaaaaaab
 80034a0:	007a1200 	.word	0x007a1200

080034a4 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80034a4:	b368      	cbz	r0, 8003502 <HAL_SRAM_Init+0x5e>
 80034a6:	6983      	ldr	r3, [r0, #24]
{
 80034a8:	b570      	push	{r4, r5, r6, lr}
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80034aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ae:	4604      	mov	r4, r0
 80034b0:	d029      	beq.n	8003506 <HAL_SRAM_Init+0x62>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80034b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80034b6:	4615      	mov	r5, r2
 80034b8:	460e      	mov	r6, r1
 80034ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034be:	b1db      	cbz	r3, 80034f8 <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80034c0:	4621      	mov	r1, r4
 80034c2:	f851 0b08 	ldr.w	r0, [r1], #8
 80034c6:	f000 f821 	bl	800350c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80034ca:	4631      	mov	r1, r6
 80034cc:	68a2      	ldr	r2, [r4, #8]
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	f000 f852 	bl	8003578 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80034d4:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 80034d8:	4629      	mov	r1, r5

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80034da:	2501      	movs	r5, #1
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80034dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034de:	f000 f86d 	bl	80035bc <FSMC_NORSRAM_Extended_Timing_Init>
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80034e2:	6822      	ldr	r2, [r4, #0]
 80034e4:	68a1      	ldr	r1, [r4, #8]

  return HAL_OK;
 80034e6:	2000      	movs	r0, #0
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80034e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80034ec:	432b      	orrs	r3, r5
 80034ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 80034f2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80034f8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 80034fc:	f7fe f974 	bl	80017e8 <HAL_SRAM_MspInit>
 8003500:	e7de      	b.n	80034c0 <HAL_SRAM_Init+0x1c>
    return HAL_ERROR;
 8003502:	2001      	movs	r0, #1
}
 8003504:	4770      	bx	lr
    return HAL_ERROR;
 8003506:	2001      	movs	r0, #1
}
 8003508:	bd70      	pop	{r4, r5, r6, pc}
 800350a:	bf00      	nop

0800350c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800350c:	4602      	mov	r2, r0

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);


  return HAL_OK;
}
 800350e:	2000      	movs	r0, #0
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003510:	688b      	ldr	r3, [r1, #8]
{
 8003512:	b470      	push	{r4, r5, r6}
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003514:	2b08      	cmp	r3, #8
 8003516:	bf0c      	ite	eq
 8003518:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 800351c:	4684      	movne	ip, r0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800351e:	684e      	ldr	r6, [r1, #4]
 8003520:	680c      	ldr	r4, [r1, #0]
 8003522:	4333      	orrs	r3, r6
 8003524:	68ce      	ldr	r6, [r1, #12]
 8003526:	4d13      	ldr	r5, [pc, #76]	; (8003574 <FSMC_NORSRAM_Init+0x68>)
 8003528:	4333      	orrs	r3, r6
 800352a:	690e      	ldr	r6, [r1, #16]
 800352c:	4333      	orrs	r3, r6
 800352e:	694e      	ldr	r6, [r1, #20]
 8003530:	4333      	orrs	r3, r6
 8003532:	69ce      	ldr	r6, [r1, #28]
 8003534:	4333      	orrs	r3, r6
 8003536:	6a0e      	ldr	r6, [r1, #32]
 8003538:	4333      	orrs	r3, r6
 800353a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800353c:	4333      	orrs	r3, r6
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800353e:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 8003542:	f026 0601 	bic.w	r6, r6, #1
 8003546:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800354a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800354c:	4333      	orrs	r3, r6
 800354e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8003550:	4333      	orrs	r3, r6
 8003552:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8003554:	4333      	orrs	r3, r6
 8003556:	698e      	ldr	r6, [r1, #24]
 8003558:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800355a:	4333      	orrs	r3, r6
 800355c:	430b      	orrs	r3, r1
 800355e:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8003562:	400d      	ands	r5, r1
 8003564:	432b      	orrs	r3, r5
 8003566:	ea43 030c 	orr.w	r3, r3, ip
 800356a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 800356e:	bc70      	pop	{r4, r5, r6}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	fff00080 	.word	0xfff00080

08003578 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003578:	4603      	mov	r3, r0
 800357a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800357e:	6853      	ldr	r3, [r2, #4]
{
 8003580:	b510      	push	{r4, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003582:	f003 4c40 	and.w	ip, r3, #3221225472	; 0xc0000000
 8003586:	698c      	ldr	r4, [r1, #24]
 8003588:	680b      	ldr	r3, [r1, #0]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 800358a:	2000      	movs	r0, #0
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800358c:	4323      	orrs	r3, r4
 800358e:	684c      	ldr	r4, [r1, #4]
 8003590:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003594:	688c      	ldr	r4, [r1, #8]
 8003596:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800359a:	68cc      	ldr	r4, [r1, #12]
 800359c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80035a0:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 80035a4:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 80035a8:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 80035ac:	3902      	subs	r1, #2
 80035ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80035b2:	ea43 030c 	orr.w	r3, r3, ip
 80035b6:	6053      	str	r3, [r2, #4]
}
 80035b8:	bd10      	pop	{r4, pc}
 80035ba:	bf00      	nop

080035bc <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80035bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c0:	d005      	beq.n	80035ce <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80035c2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80035c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80035ca:	2000      	movs	r0, #0
 80035cc:	4770      	bx	lr
{
 80035ce:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80035d0:	680b      	ldr	r3, [r1, #0]
 80035d2:	698d      	ldr	r5, [r1, #24]
 80035d4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80035d8:	432b      	orrs	r3, r5
 80035da:	684d      	ldr	r5, [r1, #4]
 80035dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80035e0:	688d      	ldr	r5, [r1, #8]
 80035e2:	68c9      	ldr	r1, [r1, #12]
 80035e4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80035e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80035ec:	4903      	ldr	r1, [pc, #12]	; (80035fc <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 80035ee:	4021      	ands	r1, r4
 80035f0:	430b      	orrs	r3, r1
 80035f2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 80035f6:	bc30      	pop	{r4, r5}
 80035f8:	2000      	movs	r0, #0
 80035fa:	4770      	bx	lr
 80035fc:	cff00000 	.word	0xcff00000

08003600 <__errno>:
 8003600:	4b01      	ldr	r3, [pc, #4]	; (8003608 <__errno+0x8>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000034 	.word	0x20000034

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	2600      	movs	r6, #0
 8003610:	4d0c      	ldr	r5, [pc, #48]	; (8003644 <__libc_init_array+0x38>)
 8003612:	4c0d      	ldr	r4, [pc, #52]	; (8003648 <__libc_init_array+0x3c>)
 8003614:	1b64      	subs	r4, r4, r5
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	42a6      	cmp	r6, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	f004 fca6 	bl	8007f6c <_init>
 8003620:	2600      	movs	r6, #0
 8003622:	4d0a      	ldr	r5, [pc, #40]	; (800364c <__libc_init_array+0x40>)
 8003624:	4c0a      	ldr	r4, [pc, #40]	; (8003650 <__libc_init_array+0x44>)
 8003626:	1b64      	subs	r4, r4, r5
 8003628:	10a4      	asrs	r4, r4, #2
 800362a:	42a6      	cmp	r6, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	f855 3b04 	ldr.w	r3, [r5], #4
 8003634:	4798      	blx	r3
 8003636:	3601      	adds	r6, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	f855 3b04 	ldr.w	r3, [r5], #4
 800363e:	4798      	blx	r3
 8003640:	3601      	adds	r6, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	08010594 	.word	0x08010594
 8003648:	08010594 	.word	0x08010594
 800364c:	08010594 	.word	0x08010594
 8003650:	08010598 	.word	0x08010598

08003654 <memset>:
 8003654:	4603      	mov	r3, r0
 8003656:	4402      	add	r2, r0
 8003658:	4293      	cmp	r3, r2
 800365a:	d100      	bne.n	800365e <memset+0xa>
 800365c:	4770      	bx	lr
 800365e:	f803 1b01 	strb.w	r1, [r3], #1
 8003662:	e7f9      	b.n	8003658 <memset+0x4>

08003664 <__cvt>:
 8003664:	2b00      	cmp	r3, #0
 8003666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800366a:	461f      	mov	r7, r3
 800366c:	bfbb      	ittet	lt
 800366e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003672:	461f      	movlt	r7, r3
 8003674:	2300      	movge	r3, #0
 8003676:	232d      	movlt	r3, #45	; 0x2d
 8003678:	b088      	sub	sp, #32
 800367a:	4614      	mov	r4, r2
 800367c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800367e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003680:	7013      	strb	r3, [r2, #0]
 8003682:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003684:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003688:	f023 0820 	bic.w	r8, r3, #32
 800368c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003690:	d005      	beq.n	800369e <__cvt+0x3a>
 8003692:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003696:	d100      	bne.n	800369a <__cvt+0x36>
 8003698:	3501      	adds	r5, #1
 800369a:	2302      	movs	r3, #2
 800369c:	e000      	b.n	80036a0 <__cvt+0x3c>
 800369e:	2303      	movs	r3, #3
 80036a0:	aa07      	add	r2, sp, #28
 80036a2:	9204      	str	r2, [sp, #16]
 80036a4:	aa06      	add	r2, sp, #24
 80036a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80036aa:	e9cd 3500 	strd	r3, r5, [sp]
 80036ae:	4622      	mov	r2, r4
 80036b0:	463b      	mov	r3, r7
 80036b2:	f001 fdd9 	bl	8005268 <_dtoa_r>
 80036b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80036ba:	4606      	mov	r6, r0
 80036bc:	d102      	bne.n	80036c4 <__cvt+0x60>
 80036be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80036c0:	07db      	lsls	r3, r3, #31
 80036c2:	d522      	bpl.n	800370a <__cvt+0xa6>
 80036c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80036c8:	eb06 0905 	add.w	r9, r6, r5
 80036cc:	d110      	bne.n	80036f0 <__cvt+0x8c>
 80036ce:	7833      	ldrb	r3, [r6, #0]
 80036d0:	2b30      	cmp	r3, #48	; 0x30
 80036d2:	d10a      	bne.n	80036ea <__cvt+0x86>
 80036d4:	2200      	movs	r2, #0
 80036d6:	2300      	movs	r3, #0
 80036d8:	4620      	mov	r0, r4
 80036da:	4639      	mov	r1, r7
 80036dc:	f7fd f9d0 	bl	8000a80 <__aeabi_dcmpeq>
 80036e0:	b918      	cbnz	r0, 80036ea <__cvt+0x86>
 80036e2:	f1c5 0501 	rsb	r5, r5, #1
 80036e6:	f8ca 5000 	str.w	r5, [sl]
 80036ea:	f8da 3000 	ldr.w	r3, [sl]
 80036ee:	4499      	add	r9, r3
 80036f0:	2200      	movs	r2, #0
 80036f2:	2300      	movs	r3, #0
 80036f4:	4620      	mov	r0, r4
 80036f6:	4639      	mov	r1, r7
 80036f8:	f7fd f9c2 	bl	8000a80 <__aeabi_dcmpeq>
 80036fc:	b108      	cbz	r0, 8003702 <__cvt+0x9e>
 80036fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8003702:	2230      	movs	r2, #48	; 0x30
 8003704:	9b07      	ldr	r3, [sp, #28]
 8003706:	454b      	cmp	r3, r9
 8003708:	d307      	bcc.n	800371a <__cvt+0xb6>
 800370a:	4630      	mov	r0, r6
 800370c:	9b07      	ldr	r3, [sp, #28]
 800370e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003710:	1b9b      	subs	r3, r3, r6
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	b008      	add	sp, #32
 8003716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371a:	1c59      	adds	r1, r3, #1
 800371c:	9107      	str	r1, [sp, #28]
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e7f0      	b.n	8003704 <__cvt+0xa0>

08003722 <__exponent>:
 8003722:	4603      	mov	r3, r0
 8003724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003726:	2900      	cmp	r1, #0
 8003728:	f803 2b02 	strb.w	r2, [r3], #2
 800372c:	bfb6      	itet	lt
 800372e:	222d      	movlt	r2, #45	; 0x2d
 8003730:	222b      	movge	r2, #43	; 0x2b
 8003732:	4249      	neglt	r1, r1
 8003734:	2909      	cmp	r1, #9
 8003736:	7042      	strb	r2, [r0, #1]
 8003738:	dd2b      	ble.n	8003792 <__exponent+0x70>
 800373a:	f10d 0407 	add.w	r4, sp, #7
 800373e:	46a4      	mov	ip, r4
 8003740:	270a      	movs	r7, #10
 8003742:	fb91 f6f7 	sdiv	r6, r1, r7
 8003746:	460a      	mov	r2, r1
 8003748:	46a6      	mov	lr, r4
 800374a:	fb07 1516 	mls	r5, r7, r6, r1
 800374e:	2a63      	cmp	r2, #99	; 0x63
 8003750:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003754:	4631      	mov	r1, r6
 8003756:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800375a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800375e:	dcf0      	bgt.n	8003742 <__exponent+0x20>
 8003760:	3130      	adds	r1, #48	; 0x30
 8003762:	f1ae 0502 	sub.w	r5, lr, #2
 8003766:	f804 1c01 	strb.w	r1, [r4, #-1]
 800376a:	4629      	mov	r1, r5
 800376c:	1c44      	adds	r4, r0, #1
 800376e:	4561      	cmp	r1, ip
 8003770:	d30a      	bcc.n	8003788 <__exponent+0x66>
 8003772:	f10d 0209 	add.w	r2, sp, #9
 8003776:	eba2 020e 	sub.w	r2, r2, lr
 800377a:	4565      	cmp	r5, ip
 800377c:	bf88      	it	hi
 800377e:	2200      	movhi	r2, #0
 8003780:	4413      	add	r3, r2
 8003782:	1a18      	subs	r0, r3, r0
 8003784:	b003      	add	sp, #12
 8003786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003788:	f811 2b01 	ldrb.w	r2, [r1], #1
 800378c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003790:	e7ed      	b.n	800376e <__exponent+0x4c>
 8003792:	2330      	movs	r3, #48	; 0x30
 8003794:	3130      	adds	r1, #48	; 0x30
 8003796:	7083      	strb	r3, [r0, #2]
 8003798:	70c1      	strb	r1, [r0, #3]
 800379a:	1d03      	adds	r3, r0, #4
 800379c:	e7f1      	b.n	8003782 <__exponent+0x60>
	...

080037a0 <_printf_float>:
 80037a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a4:	b091      	sub	sp, #68	; 0x44
 80037a6:	460c      	mov	r4, r1
 80037a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80037ac:	4616      	mov	r6, r2
 80037ae:	461f      	mov	r7, r3
 80037b0:	4605      	mov	r5, r0
 80037b2:	f002 fead 	bl	8006510 <_localeconv_r>
 80037b6:	6803      	ldr	r3, [r0, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	9309      	str	r3, [sp, #36]	; 0x24
 80037bc:	f7fc fd34 	bl	8000228 <strlen>
 80037c0:	2300      	movs	r3, #0
 80037c2:	930e      	str	r3, [sp, #56]	; 0x38
 80037c4:	f8d8 3000 	ldr.w	r3, [r8]
 80037c8:	900a      	str	r0, [sp, #40]	; 0x28
 80037ca:	3307      	adds	r3, #7
 80037cc:	f023 0307 	bic.w	r3, r3, #7
 80037d0:	f103 0208 	add.w	r2, r3, #8
 80037d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80037d8:	f8d4 b000 	ldr.w	fp, [r4]
 80037dc:	f8c8 2000 	str.w	r2, [r8]
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80037e8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80037ec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80037f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80037f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037f6:	4640      	mov	r0, r8
 80037f8:	4b9c      	ldr	r3, [pc, #624]	; (8003a6c <_printf_float+0x2cc>)
 80037fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037fc:	f7fd f972 	bl	8000ae4 <__aeabi_dcmpun>
 8003800:	bb70      	cbnz	r0, 8003860 <_printf_float+0xc0>
 8003802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003806:	4640      	mov	r0, r8
 8003808:	4b98      	ldr	r3, [pc, #608]	; (8003a6c <_printf_float+0x2cc>)
 800380a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800380c:	f7fd f94c 	bl	8000aa8 <__aeabi_dcmple>
 8003810:	bb30      	cbnz	r0, 8003860 <_printf_float+0xc0>
 8003812:	2200      	movs	r2, #0
 8003814:	2300      	movs	r3, #0
 8003816:	4640      	mov	r0, r8
 8003818:	4651      	mov	r1, sl
 800381a:	f7fd f93b 	bl	8000a94 <__aeabi_dcmplt>
 800381e:	b110      	cbz	r0, 8003826 <_printf_float+0x86>
 8003820:	232d      	movs	r3, #45	; 0x2d
 8003822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003826:	4b92      	ldr	r3, [pc, #584]	; (8003a70 <_printf_float+0x2d0>)
 8003828:	4892      	ldr	r0, [pc, #584]	; (8003a74 <_printf_float+0x2d4>)
 800382a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800382e:	bf94      	ite	ls
 8003830:	4698      	movls	r8, r3
 8003832:	4680      	movhi	r8, r0
 8003834:	2303      	movs	r3, #3
 8003836:	f04f 0a00 	mov.w	sl, #0
 800383a:	6123      	str	r3, [r4, #16]
 800383c:	f02b 0304 	bic.w	r3, fp, #4
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	4633      	mov	r3, r6
 8003844:	4621      	mov	r1, r4
 8003846:	4628      	mov	r0, r5
 8003848:	9700      	str	r7, [sp, #0]
 800384a:	aa0f      	add	r2, sp, #60	; 0x3c
 800384c:	f000 f9d4 	bl	8003bf8 <_printf_common>
 8003850:	3001      	adds	r0, #1
 8003852:	f040 8090 	bne.w	8003976 <_printf_float+0x1d6>
 8003856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800385a:	b011      	add	sp, #68	; 0x44
 800385c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003860:	4642      	mov	r2, r8
 8003862:	4653      	mov	r3, sl
 8003864:	4640      	mov	r0, r8
 8003866:	4651      	mov	r1, sl
 8003868:	f7fd f93c 	bl	8000ae4 <__aeabi_dcmpun>
 800386c:	b148      	cbz	r0, 8003882 <_printf_float+0xe2>
 800386e:	f1ba 0f00 	cmp.w	sl, #0
 8003872:	bfb8      	it	lt
 8003874:	232d      	movlt	r3, #45	; 0x2d
 8003876:	4880      	ldr	r0, [pc, #512]	; (8003a78 <_printf_float+0x2d8>)
 8003878:	bfb8      	it	lt
 800387a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800387e:	4b7f      	ldr	r3, [pc, #508]	; (8003a7c <_printf_float+0x2dc>)
 8003880:	e7d3      	b.n	800382a <_printf_float+0x8a>
 8003882:	6863      	ldr	r3, [r4, #4]
 8003884:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	d142      	bne.n	8003912 <_printf_float+0x172>
 800388c:	2306      	movs	r3, #6
 800388e:	6063      	str	r3, [r4, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	9206      	str	r2, [sp, #24]
 8003894:	aa0e      	add	r2, sp, #56	; 0x38
 8003896:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800389a:	aa0d      	add	r2, sp, #52	; 0x34
 800389c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80038a0:	9203      	str	r2, [sp, #12]
 80038a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80038a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80038aa:	6023      	str	r3, [r4, #0]
 80038ac:	6863      	ldr	r3, [r4, #4]
 80038ae:	4642      	mov	r2, r8
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	4628      	mov	r0, r5
 80038b4:	4653      	mov	r3, sl
 80038b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80038b8:	f7ff fed4 	bl	8003664 <__cvt>
 80038bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038be:	4680      	mov	r8, r0
 80038c0:	2947      	cmp	r1, #71	; 0x47
 80038c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80038c4:	d108      	bne.n	80038d8 <_printf_float+0x138>
 80038c6:	1cc8      	adds	r0, r1, #3
 80038c8:	db02      	blt.n	80038d0 <_printf_float+0x130>
 80038ca:	6863      	ldr	r3, [r4, #4]
 80038cc:	4299      	cmp	r1, r3
 80038ce:	dd40      	ble.n	8003952 <_printf_float+0x1b2>
 80038d0:	f1a9 0902 	sub.w	r9, r9, #2
 80038d4:	fa5f f989 	uxtb.w	r9, r9
 80038d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80038dc:	d81f      	bhi.n	800391e <_printf_float+0x17e>
 80038de:	464a      	mov	r2, r9
 80038e0:	3901      	subs	r1, #1
 80038e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80038e6:	910d      	str	r1, [sp, #52]	; 0x34
 80038e8:	f7ff ff1b 	bl	8003722 <__exponent>
 80038ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038ee:	4682      	mov	sl, r0
 80038f0:	1813      	adds	r3, r2, r0
 80038f2:	2a01      	cmp	r2, #1
 80038f4:	6123      	str	r3, [r4, #16]
 80038f6:	dc02      	bgt.n	80038fe <_printf_float+0x15e>
 80038f8:	6822      	ldr	r2, [r4, #0]
 80038fa:	07d2      	lsls	r2, r2, #31
 80038fc:	d501      	bpl.n	8003902 <_printf_float+0x162>
 80038fe:	3301      	adds	r3, #1
 8003900:	6123      	str	r3, [r4, #16]
 8003902:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003906:	2b00      	cmp	r3, #0
 8003908:	d09b      	beq.n	8003842 <_printf_float+0xa2>
 800390a:	232d      	movs	r3, #45	; 0x2d
 800390c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003910:	e797      	b.n	8003842 <_printf_float+0xa2>
 8003912:	2947      	cmp	r1, #71	; 0x47
 8003914:	d1bc      	bne.n	8003890 <_printf_float+0xf0>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ba      	bne.n	8003890 <_printf_float+0xf0>
 800391a:	2301      	movs	r3, #1
 800391c:	e7b7      	b.n	800388e <_printf_float+0xee>
 800391e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003922:	d118      	bne.n	8003956 <_printf_float+0x1b6>
 8003924:	2900      	cmp	r1, #0
 8003926:	6863      	ldr	r3, [r4, #4]
 8003928:	dd0b      	ble.n	8003942 <_printf_float+0x1a2>
 800392a:	6121      	str	r1, [r4, #16]
 800392c:	b913      	cbnz	r3, 8003934 <_printf_float+0x194>
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	07d0      	lsls	r0, r2, #31
 8003932:	d502      	bpl.n	800393a <_printf_float+0x19a>
 8003934:	3301      	adds	r3, #1
 8003936:	440b      	add	r3, r1
 8003938:	6123      	str	r3, [r4, #16]
 800393a:	f04f 0a00 	mov.w	sl, #0
 800393e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003940:	e7df      	b.n	8003902 <_printf_float+0x162>
 8003942:	b913      	cbnz	r3, 800394a <_printf_float+0x1aa>
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	07d2      	lsls	r2, r2, #31
 8003948:	d501      	bpl.n	800394e <_printf_float+0x1ae>
 800394a:	3302      	adds	r3, #2
 800394c:	e7f4      	b.n	8003938 <_printf_float+0x198>
 800394e:	2301      	movs	r3, #1
 8003950:	e7f2      	b.n	8003938 <_printf_float+0x198>
 8003952:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003958:	4299      	cmp	r1, r3
 800395a:	db05      	blt.n	8003968 <_printf_float+0x1c8>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	6121      	str	r1, [r4, #16]
 8003960:	07d8      	lsls	r0, r3, #31
 8003962:	d5ea      	bpl.n	800393a <_printf_float+0x19a>
 8003964:	1c4b      	adds	r3, r1, #1
 8003966:	e7e7      	b.n	8003938 <_printf_float+0x198>
 8003968:	2900      	cmp	r1, #0
 800396a:	bfcc      	ite	gt
 800396c:	2201      	movgt	r2, #1
 800396e:	f1c1 0202 	rsble	r2, r1, #2
 8003972:	4413      	add	r3, r2
 8003974:	e7e0      	b.n	8003938 <_printf_float+0x198>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	055a      	lsls	r2, r3, #21
 800397a:	d407      	bmi.n	800398c <_printf_float+0x1ec>
 800397c:	6923      	ldr	r3, [r4, #16]
 800397e:	4642      	mov	r2, r8
 8003980:	4631      	mov	r1, r6
 8003982:	4628      	mov	r0, r5
 8003984:	47b8      	blx	r7
 8003986:	3001      	adds	r0, #1
 8003988:	d12b      	bne.n	80039e2 <_printf_float+0x242>
 800398a:	e764      	b.n	8003856 <_printf_float+0xb6>
 800398c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003990:	f240 80dd 	bls.w	8003b4e <_printf_float+0x3ae>
 8003994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003998:	2200      	movs	r2, #0
 800399a:	2300      	movs	r3, #0
 800399c:	f7fd f870 	bl	8000a80 <__aeabi_dcmpeq>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d033      	beq.n	8003a0c <_printf_float+0x26c>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4631      	mov	r1, r6
 80039a8:	4628      	mov	r0, r5
 80039aa:	4a35      	ldr	r2, [pc, #212]	; (8003a80 <_printf_float+0x2e0>)
 80039ac:	47b8      	blx	r7
 80039ae:	3001      	adds	r0, #1
 80039b0:	f43f af51 	beq.w	8003856 <_printf_float+0xb6>
 80039b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80039b8:	429a      	cmp	r2, r3
 80039ba:	db02      	blt.n	80039c2 <_printf_float+0x222>
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	07d8      	lsls	r0, r3, #31
 80039c0:	d50f      	bpl.n	80039e2 <_printf_float+0x242>
 80039c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039c6:	4631      	mov	r1, r6
 80039c8:	4628      	mov	r0, r5
 80039ca:	47b8      	blx	r7
 80039cc:	3001      	adds	r0, #1
 80039ce:	f43f af42 	beq.w	8003856 <_printf_float+0xb6>
 80039d2:	f04f 0800 	mov.w	r8, #0
 80039d6:	f104 091a 	add.w	r9, r4, #26
 80039da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039dc:	3b01      	subs	r3, #1
 80039de:	4543      	cmp	r3, r8
 80039e0:	dc09      	bgt.n	80039f6 <_printf_float+0x256>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	079b      	lsls	r3, r3, #30
 80039e6:	f100 8102 	bmi.w	8003bee <_printf_float+0x44e>
 80039ea:	68e0      	ldr	r0, [r4, #12]
 80039ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039ee:	4298      	cmp	r0, r3
 80039f0:	bfb8      	it	lt
 80039f2:	4618      	movlt	r0, r3
 80039f4:	e731      	b.n	800385a <_printf_float+0xba>
 80039f6:	2301      	movs	r3, #1
 80039f8:	464a      	mov	r2, r9
 80039fa:	4631      	mov	r1, r6
 80039fc:	4628      	mov	r0, r5
 80039fe:	47b8      	blx	r7
 8003a00:	3001      	adds	r0, #1
 8003a02:	f43f af28 	beq.w	8003856 <_printf_float+0xb6>
 8003a06:	f108 0801 	add.w	r8, r8, #1
 8003a0a:	e7e6      	b.n	80039da <_printf_float+0x23a>
 8003a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	dc38      	bgt.n	8003a84 <_printf_float+0x2e4>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4631      	mov	r1, r6
 8003a16:	4628      	mov	r0, r5
 8003a18:	4a19      	ldr	r2, [pc, #100]	; (8003a80 <_printf_float+0x2e0>)
 8003a1a:	47b8      	blx	r7
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	f43f af1a 	beq.w	8003856 <_printf_float+0xb6>
 8003a22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a26:	4313      	orrs	r3, r2
 8003a28:	d102      	bne.n	8003a30 <_printf_float+0x290>
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	07d9      	lsls	r1, r3, #31
 8003a2e:	d5d8      	bpl.n	80039e2 <_printf_float+0x242>
 8003a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a34:	4631      	mov	r1, r6
 8003a36:	4628      	mov	r0, r5
 8003a38:	47b8      	blx	r7
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	f43f af0b 	beq.w	8003856 <_printf_float+0xb6>
 8003a40:	f04f 0900 	mov.w	r9, #0
 8003a44:	f104 0a1a 	add.w	sl, r4, #26
 8003a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a4a:	425b      	negs	r3, r3
 8003a4c:	454b      	cmp	r3, r9
 8003a4e:	dc01      	bgt.n	8003a54 <_printf_float+0x2b4>
 8003a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a52:	e794      	b.n	800397e <_printf_float+0x1de>
 8003a54:	2301      	movs	r3, #1
 8003a56:	4652      	mov	r2, sl
 8003a58:	4631      	mov	r1, r6
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	47b8      	blx	r7
 8003a5e:	3001      	adds	r0, #1
 8003a60:	f43f aef9 	beq.w	8003856 <_printf_float+0xb6>
 8003a64:	f109 0901 	add.w	r9, r9, #1
 8003a68:	e7ee      	b.n	8003a48 <_printf_float+0x2a8>
 8003a6a:	bf00      	nop
 8003a6c:	7fefffff 	.word	0x7fefffff
 8003a70:	080100f0 	.word	0x080100f0
 8003a74:	080100f4 	.word	0x080100f4
 8003a78:	080100fc 	.word	0x080100fc
 8003a7c:	080100f8 	.word	0x080100f8
 8003a80:	08010100 	.word	0x08010100
 8003a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	bfa8      	it	ge
 8003a8c:	461a      	movge	r2, r3
 8003a8e:	2a00      	cmp	r2, #0
 8003a90:	4691      	mov	r9, r2
 8003a92:	dc37      	bgt.n	8003b04 <_printf_float+0x364>
 8003a94:	f04f 0b00 	mov.w	fp, #0
 8003a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a9c:	f104 021a 	add.w	r2, r4, #26
 8003aa0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003aa4:	ebaa 0309 	sub.w	r3, sl, r9
 8003aa8:	455b      	cmp	r3, fp
 8003aaa:	dc33      	bgt.n	8003b14 <_printf_float+0x374>
 8003aac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	db3b      	blt.n	8003b2c <_printf_float+0x38c>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	07da      	lsls	r2, r3, #31
 8003ab8:	d438      	bmi.n	8003b2c <_printf_float+0x38c>
 8003aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003abc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003abe:	eba3 020a 	sub.w	r2, r3, sl
 8003ac2:	eba3 0901 	sub.w	r9, r3, r1
 8003ac6:	4591      	cmp	r9, r2
 8003ac8:	bfa8      	it	ge
 8003aca:	4691      	movge	r9, r2
 8003acc:	f1b9 0f00 	cmp.w	r9, #0
 8003ad0:	dc34      	bgt.n	8003b3c <_printf_float+0x39c>
 8003ad2:	f04f 0800 	mov.w	r8, #0
 8003ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ada:	f104 0a1a 	add.w	sl, r4, #26
 8003ade:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	eba3 0309 	sub.w	r3, r3, r9
 8003ae8:	4543      	cmp	r3, r8
 8003aea:	f77f af7a 	ble.w	80039e2 <_printf_float+0x242>
 8003aee:	2301      	movs	r3, #1
 8003af0:	4652      	mov	r2, sl
 8003af2:	4631      	mov	r1, r6
 8003af4:	4628      	mov	r0, r5
 8003af6:	47b8      	blx	r7
 8003af8:	3001      	adds	r0, #1
 8003afa:	f43f aeac 	beq.w	8003856 <_printf_float+0xb6>
 8003afe:	f108 0801 	add.w	r8, r8, #1
 8003b02:	e7ec      	b.n	8003ade <_printf_float+0x33e>
 8003b04:	4613      	mov	r3, r2
 8003b06:	4631      	mov	r1, r6
 8003b08:	4642      	mov	r2, r8
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	47b8      	blx	r7
 8003b0e:	3001      	adds	r0, #1
 8003b10:	d1c0      	bne.n	8003a94 <_printf_float+0x2f4>
 8003b12:	e6a0      	b.n	8003856 <_printf_float+0xb6>
 8003b14:	2301      	movs	r3, #1
 8003b16:	4631      	mov	r1, r6
 8003b18:	4628      	mov	r0, r5
 8003b1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8003b1c:	47b8      	blx	r7
 8003b1e:	3001      	adds	r0, #1
 8003b20:	f43f ae99 	beq.w	8003856 <_printf_float+0xb6>
 8003b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b26:	f10b 0b01 	add.w	fp, fp, #1
 8003b2a:	e7b9      	b.n	8003aa0 <_printf_float+0x300>
 8003b2c:	4631      	mov	r1, r6
 8003b2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b32:	4628      	mov	r0, r5
 8003b34:	47b8      	blx	r7
 8003b36:	3001      	adds	r0, #1
 8003b38:	d1bf      	bne.n	8003aba <_printf_float+0x31a>
 8003b3a:	e68c      	b.n	8003856 <_printf_float+0xb6>
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4628      	mov	r0, r5
 8003b42:	eb08 020a 	add.w	r2, r8, sl
 8003b46:	47b8      	blx	r7
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d1c2      	bne.n	8003ad2 <_printf_float+0x332>
 8003b4c:	e683      	b.n	8003856 <_printf_float+0xb6>
 8003b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b50:	2a01      	cmp	r2, #1
 8003b52:	dc01      	bgt.n	8003b58 <_printf_float+0x3b8>
 8003b54:	07db      	lsls	r3, r3, #31
 8003b56:	d537      	bpl.n	8003bc8 <_printf_float+0x428>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4642      	mov	r2, r8
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	4628      	mov	r0, r5
 8003b60:	47b8      	blx	r7
 8003b62:	3001      	adds	r0, #1
 8003b64:	f43f ae77 	beq.w	8003856 <_printf_float+0xb6>
 8003b68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b6c:	4631      	mov	r1, r6
 8003b6e:	4628      	mov	r0, r5
 8003b70:	47b8      	blx	r7
 8003b72:	3001      	adds	r0, #1
 8003b74:	f43f ae6f 	beq.w	8003856 <_printf_float+0xb6>
 8003b78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f7fc ff7e 	bl	8000a80 <__aeabi_dcmpeq>
 8003b84:	b9d8      	cbnz	r0, 8003bbe <_printf_float+0x41e>
 8003b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b88:	f108 0201 	add.w	r2, r8, #1
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4628      	mov	r0, r5
 8003b92:	47b8      	blx	r7
 8003b94:	3001      	adds	r0, #1
 8003b96:	d10e      	bne.n	8003bb6 <_printf_float+0x416>
 8003b98:	e65d      	b.n	8003856 <_printf_float+0xb6>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	464a      	mov	r2, r9
 8003b9e:	4631      	mov	r1, r6
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	47b8      	blx	r7
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	f43f ae56 	beq.w	8003856 <_printf_float+0xb6>
 8003baa:	f108 0801 	add.w	r8, r8, #1
 8003bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	4543      	cmp	r3, r8
 8003bb4:	dcf1      	bgt.n	8003b9a <_printf_float+0x3fa>
 8003bb6:	4653      	mov	r3, sl
 8003bb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003bbc:	e6e0      	b.n	8003980 <_printf_float+0x1e0>
 8003bbe:	f04f 0800 	mov.w	r8, #0
 8003bc2:	f104 091a 	add.w	r9, r4, #26
 8003bc6:	e7f2      	b.n	8003bae <_printf_float+0x40e>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	4642      	mov	r2, r8
 8003bcc:	e7df      	b.n	8003b8e <_printf_float+0x3ee>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	464a      	mov	r2, r9
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	47b8      	blx	r7
 8003bd8:	3001      	adds	r0, #1
 8003bda:	f43f ae3c 	beq.w	8003856 <_printf_float+0xb6>
 8003bde:	f108 0801 	add.w	r8, r8, #1
 8003be2:	68e3      	ldr	r3, [r4, #12]
 8003be4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003be6:	1a5b      	subs	r3, r3, r1
 8003be8:	4543      	cmp	r3, r8
 8003bea:	dcf0      	bgt.n	8003bce <_printf_float+0x42e>
 8003bec:	e6fd      	b.n	80039ea <_printf_float+0x24a>
 8003bee:	f04f 0800 	mov.w	r8, #0
 8003bf2:	f104 0919 	add.w	r9, r4, #25
 8003bf6:	e7f4      	b.n	8003be2 <_printf_float+0x442>

08003bf8 <_printf_common>:
 8003bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bfc:	4616      	mov	r6, r2
 8003bfe:	4699      	mov	r9, r3
 8003c00:	688a      	ldr	r2, [r1, #8]
 8003c02:	690b      	ldr	r3, [r1, #16]
 8003c04:	4607      	mov	r7, r0
 8003c06:	4293      	cmp	r3, r2
 8003c08:	bfb8      	it	lt
 8003c0a:	4613      	movlt	r3, r2
 8003c0c:	6033      	str	r3, [r6, #0]
 8003c0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c12:	460c      	mov	r4, r1
 8003c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c18:	b10a      	cbz	r2, 8003c1e <_printf_common+0x26>
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	0699      	lsls	r1, r3, #26
 8003c22:	bf42      	ittt	mi
 8003c24:	6833      	ldrmi	r3, [r6, #0]
 8003c26:	3302      	addmi	r3, #2
 8003c28:	6033      	strmi	r3, [r6, #0]
 8003c2a:	6825      	ldr	r5, [r4, #0]
 8003c2c:	f015 0506 	ands.w	r5, r5, #6
 8003c30:	d106      	bne.n	8003c40 <_printf_common+0x48>
 8003c32:	f104 0a19 	add.w	sl, r4, #25
 8003c36:	68e3      	ldr	r3, [r4, #12]
 8003c38:	6832      	ldr	r2, [r6, #0]
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	42ab      	cmp	r3, r5
 8003c3e:	dc28      	bgt.n	8003c92 <_printf_common+0x9a>
 8003c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c44:	1e13      	subs	r3, r2, #0
 8003c46:	6822      	ldr	r2, [r4, #0]
 8003c48:	bf18      	it	ne
 8003c4a:	2301      	movne	r3, #1
 8003c4c:	0692      	lsls	r2, r2, #26
 8003c4e:	d42d      	bmi.n	8003cac <_printf_common+0xb4>
 8003c50:	4649      	mov	r1, r9
 8003c52:	4638      	mov	r0, r7
 8003c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c58:	47c0      	blx	r8
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d020      	beq.n	8003ca0 <_printf_common+0xa8>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	68e5      	ldr	r5, [r4, #12]
 8003c62:	f003 0306 	and.w	r3, r3, #6
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf18      	it	ne
 8003c6a:	2500      	movne	r5, #0
 8003c6c:	6832      	ldr	r2, [r6, #0]
 8003c6e:	f04f 0600 	mov.w	r6, #0
 8003c72:	68a3      	ldr	r3, [r4, #8]
 8003c74:	bf08      	it	eq
 8003c76:	1aad      	subeq	r5, r5, r2
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	bf08      	it	eq
 8003c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c80:	4293      	cmp	r3, r2
 8003c82:	bfc4      	itt	gt
 8003c84:	1a9b      	subgt	r3, r3, r2
 8003c86:	18ed      	addgt	r5, r5, r3
 8003c88:	341a      	adds	r4, #26
 8003c8a:	42b5      	cmp	r5, r6
 8003c8c:	d11a      	bne.n	8003cc4 <_printf_common+0xcc>
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e008      	b.n	8003ca4 <_printf_common+0xac>
 8003c92:	2301      	movs	r3, #1
 8003c94:	4652      	mov	r2, sl
 8003c96:	4649      	mov	r1, r9
 8003c98:	4638      	mov	r0, r7
 8003c9a:	47c0      	blx	r8
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	d103      	bne.n	8003ca8 <_printf_common+0xb0>
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca8:	3501      	adds	r5, #1
 8003caa:	e7c4      	b.n	8003c36 <_printf_common+0x3e>
 8003cac:	2030      	movs	r0, #48	; 0x30
 8003cae:	18e1      	adds	r1, r4, r3
 8003cb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cba:	4422      	add	r2, r4
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cc2:	e7c5      	b.n	8003c50 <_printf_common+0x58>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	4649      	mov	r1, r9
 8003cca:	4638      	mov	r0, r7
 8003ccc:	47c0      	blx	r8
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d0e6      	beq.n	8003ca0 <_printf_common+0xa8>
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7d9      	b.n	8003c8a <_printf_common+0x92>
	...

08003cd8 <_printf_i>:
 8003cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cdc:	7e0f      	ldrb	r7, [r1, #24]
 8003cde:	4691      	mov	r9, r2
 8003ce0:	2f78      	cmp	r7, #120	; 0x78
 8003ce2:	4680      	mov	r8, r0
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	469a      	mov	sl, r3
 8003ce8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cee:	d807      	bhi.n	8003d00 <_printf_i+0x28>
 8003cf0:	2f62      	cmp	r7, #98	; 0x62
 8003cf2:	d80a      	bhi.n	8003d0a <_printf_i+0x32>
 8003cf4:	2f00      	cmp	r7, #0
 8003cf6:	f000 80d9 	beq.w	8003eac <_printf_i+0x1d4>
 8003cfa:	2f58      	cmp	r7, #88	; 0x58
 8003cfc:	f000 80a4 	beq.w	8003e48 <_printf_i+0x170>
 8003d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d08:	e03a      	b.n	8003d80 <_printf_i+0xa8>
 8003d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d0e:	2b15      	cmp	r3, #21
 8003d10:	d8f6      	bhi.n	8003d00 <_printf_i+0x28>
 8003d12:	a101      	add	r1, pc, #4	; (adr r1, 8003d18 <_printf_i+0x40>)
 8003d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d18:	08003d71 	.word	0x08003d71
 8003d1c:	08003d85 	.word	0x08003d85
 8003d20:	08003d01 	.word	0x08003d01
 8003d24:	08003d01 	.word	0x08003d01
 8003d28:	08003d01 	.word	0x08003d01
 8003d2c:	08003d01 	.word	0x08003d01
 8003d30:	08003d85 	.word	0x08003d85
 8003d34:	08003d01 	.word	0x08003d01
 8003d38:	08003d01 	.word	0x08003d01
 8003d3c:	08003d01 	.word	0x08003d01
 8003d40:	08003d01 	.word	0x08003d01
 8003d44:	08003e93 	.word	0x08003e93
 8003d48:	08003db5 	.word	0x08003db5
 8003d4c:	08003e75 	.word	0x08003e75
 8003d50:	08003d01 	.word	0x08003d01
 8003d54:	08003d01 	.word	0x08003d01
 8003d58:	08003eb5 	.word	0x08003eb5
 8003d5c:	08003d01 	.word	0x08003d01
 8003d60:	08003db5 	.word	0x08003db5
 8003d64:	08003d01 	.word	0x08003d01
 8003d68:	08003d01 	.word	0x08003d01
 8003d6c:	08003e7d 	.word	0x08003e7d
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	1d1a      	adds	r2, r3, #4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	602a      	str	r2, [r5, #0]
 8003d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0a4      	b.n	8003ece <_printf_i+0x1f6>
 8003d84:	6820      	ldr	r0, [r4, #0]
 8003d86:	6829      	ldr	r1, [r5, #0]
 8003d88:	0606      	lsls	r6, r0, #24
 8003d8a:	f101 0304 	add.w	r3, r1, #4
 8003d8e:	d50a      	bpl.n	8003da6 <_printf_i+0xce>
 8003d90:	680e      	ldr	r6, [r1, #0]
 8003d92:	602b      	str	r3, [r5, #0]
 8003d94:	2e00      	cmp	r6, #0
 8003d96:	da03      	bge.n	8003da0 <_printf_i+0xc8>
 8003d98:	232d      	movs	r3, #45	; 0x2d
 8003d9a:	4276      	negs	r6, r6
 8003d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da0:	230a      	movs	r3, #10
 8003da2:	485e      	ldr	r0, [pc, #376]	; (8003f1c <_printf_i+0x244>)
 8003da4:	e019      	b.n	8003dda <_printf_i+0x102>
 8003da6:	680e      	ldr	r6, [r1, #0]
 8003da8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dac:	602b      	str	r3, [r5, #0]
 8003dae:	bf18      	it	ne
 8003db0:	b236      	sxthne	r6, r6
 8003db2:	e7ef      	b.n	8003d94 <_printf_i+0xbc>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	1d19      	adds	r1, r3, #4
 8003dba:	6029      	str	r1, [r5, #0]
 8003dbc:	0601      	lsls	r1, r0, #24
 8003dbe:	d501      	bpl.n	8003dc4 <_printf_i+0xec>
 8003dc0:	681e      	ldr	r6, [r3, #0]
 8003dc2:	e002      	b.n	8003dca <_printf_i+0xf2>
 8003dc4:	0646      	lsls	r6, r0, #25
 8003dc6:	d5fb      	bpl.n	8003dc0 <_printf_i+0xe8>
 8003dc8:	881e      	ldrh	r6, [r3, #0]
 8003dca:	2f6f      	cmp	r7, #111	; 0x6f
 8003dcc:	bf0c      	ite	eq
 8003dce:	2308      	moveq	r3, #8
 8003dd0:	230a      	movne	r3, #10
 8003dd2:	4852      	ldr	r0, [pc, #328]	; (8003f1c <_printf_i+0x244>)
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dda:	6865      	ldr	r5, [r4, #4]
 8003ddc:	2d00      	cmp	r5, #0
 8003dde:	bfa8      	it	ge
 8003de0:	6821      	ldrge	r1, [r4, #0]
 8003de2:	60a5      	str	r5, [r4, #8]
 8003de4:	bfa4      	itt	ge
 8003de6:	f021 0104 	bicge.w	r1, r1, #4
 8003dea:	6021      	strge	r1, [r4, #0]
 8003dec:	b90e      	cbnz	r6, 8003df2 <_printf_i+0x11a>
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	d04d      	beq.n	8003e8e <_printf_i+0x1b6>
 8003df2:	4615      	mov	r5, r2
 8003df4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003df8:	fb03 6711 	mls	r7, r3, r1, r6
 8003dfc:	5dc7      	ldrb	r7, [r0, r7]
 8003dfe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e02:	4637      	mov	r7, r6
 8003e04:	42bb      	cmp	r3, r7
 8003e06:	460e      	mov	r6, r1
 8003e08:	d9f4      	bls.n	8003df4 <_printf_i+0x11c>
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d10b      	bne.n	8003e26 <_printf_i+0x14e>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	07de      	lsls	r6, r3, #31
 8003e12:	d508      	bpl.n	8003e26 <_printf_i+0x14e>
 8003e14:	6923      	ldr	r3, [r4, #16]
 8003e16:	6861      	ldr	r1, [r4, #4]
 8003e18:	4299      	cmp	r1, r3
 8003e1a:	bfde      	ittt	le
 8003e1c:	2330      	movle	r3, #48	; 0x30
 8003e1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e22:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e26:	1b52      	subs	r2, r2, r5
 8003e28:	6122      	str	r2, [r4, #16]
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4640      	mov	r0, r8
 8003e30:	f8cd a000 	str.w	sl, [sp]
 8003e34:	aa03      	add	r2, sp, #12
 8003e36:	f7ff fedf 	bl	8003bf8 <_printf_common>
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d14c      	bne.n	8003ed8 <_printf_i+0x200>
 8003e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e42:	b004      	add	sp, #16
 8003e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e48:	4834      	ldr	r0, [pc, #208]	; (8003f1c <_printf_i+0x244>)
 8003e4a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e4e:	6829      	ldr	r1, [r5, #0]
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e56:	6029      	str	r1, [r5, #0]
 8003e58:	061d      	lsls	r5, r3, #24
 8003e5a:	d514      	bpl.n	8003e86 <_printf_i+0x1ae>
 8003e5c:	07df      	lsls	r7, r3, #31
 8003e5e:	bf44      	itt	mi
 8003e60:	f043 0320 	orrmi.w	r3, r3, #32
 8003e64:	6023      	strmi	r3, [r4, #0]
 8003e66:	b91e      	cbnz	r6, 8003e70 <_printf_i+0x198>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	f023 0320 	bic.w	r3, r3, #32
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	2310      	movs	r3, #16
 8003e72:	e7af      	b.n	8003dd4 <_printf_i+0xfc>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	f043 0320 	orr.w	r3, r3, #32
 8003e7a:	6023      	str	r3, [r4, #0]
 8003e7c:	2378      	movs	r3, #120	; 0x78
 8003e7e:	4828      	ldr	r0, [pc, #160]	; (8003f20 <_printf_i+0x248>)
 8003e80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e84:	e7e3      	b.n	8003e4e <_printf_i+0x176>
 8003e86:	0659      	lsls	r1, r3, #25
 8003e88:	bf48      	it	mi
 8003e8a:	b2b6      	uxthmi	r6, r6
 8003e8c:	e7e6      	b.n	8003e5c <_printf_i+0x184>
 8003e8e:	4615      	mov	r5, r2
 8003e90:	e7bb      	b.n	8003e0a <_printf_i+0x132>
 8003e92:	682b      	ldr	r3, [r5, #0]
 8003e94:	6826      	ldr	r6, [r4, #0]
 8003e96:	1d18      	adds	r0, r3, #4
 8003e98:	6961      	ldr	r1, [r4, #20]
 8003e9a:	6028      	str	r0, [r5, #0]
 8003e9c:	0635      	lsls	r5, r6, #24
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	d501      	bpl.n	8003ea6 <_printf_i+0x1ce>
 8003ea2:	6019      	str	r1, [r3, #0]
 8003ea4:	e002      	b.n	8003eac <_printf_i+0x1d4>
 8003ea6:	0670      	lsls	r0, r6, #25
 8003ea8:	d5fb      	bpl.n	8003ea2 <_printf_i+0x1ca>
 8003eaa:	8019      	strh	r1, [r3, #0]
 8003eac:	2300      	movs	r3, #0
 8003eae:	4615      	mov	r5, r2
 8003eb0:	6123      	str	r3, [r4, #16]
 8003eb2:	e7ba      	b.n	8003e2a <_printf_i+0x152>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	1d1a      	adds	r2, r3, #4
 8003eba:	602a      	str	r2, [r5, #0]
 8003ebc:	681d      	ldr	r5, [r3, #0]
 8003ebe:	6862      	ldr	r2, [r4, #4]
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f002 fb43 	bl	800654c <memchr>
 8003ec6:	b108      	cbz	r0, 8003ecc <_printf_i+0x1f4>
 8003ec8:	1b40      	subs	r0, r0, r5
 8003eca:	6060      	str	r0, [r4, #4]
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	6123      	str	r3, [r4, #16]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ed6:	e7a8      	b.n	8003e2a <_printf_i+0x152>
 8003ed8:	462a      	mov	r2, r5
 8003eda:	4649      	mov	r1, r9
 8003edc:	4640      	mov	r0, r8
 8003ede:	6923      	ldr	r3, [r4, #16]
 8003ee0:	47d0      	blx	sl
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d0ab      	beq.n	8003e3e <_printf_i+0x166>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	079b      	lsls	r3, r3, #30
 8003eea:	d413      	bmi.n	8003f14 <_printf_i+0x23c>
 8003eec:	68e0      	ldr	r0, [r4, #12]
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	4298      	cmp	r0, r3
 8003ef2:	bfb8      	it	lt
 8003ef4:	4618      	movlt	r0, r3
 8003ef6:	e7a4      	b.n	8003e42 <_printf_i+0x16a>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	4632      	mov	r2, r6
 8003efc:	4649      	mov	r1, r9
 8003efe:	4640      	mov	r0, r8
 8003f00:	47d0      	blx	sl
 8003f02:	3001      	adds	r0, #1
 8003f04:	d09b      	beq.n	8003e3e <_printf_i+0x166>
 8003f06:	3501      	adds	r5, #1
 8003f08:	68e3      	ldr	r3, [r4, #12]
 8003f0a:	9903      	ldr	r1, [sp, #12]
 8003f0c:	1a5b      	subs	r3, r3, r1
 8003f0e:	42ab      	cmp	r3, r5
 8003f10:	dcf2      	bgt.n	8003ef8 <_printf_i+0x220>
 8003f12:	e7eb      	b.n	8003eec <_printf_i+0x214>
 8003f14:	2500      	movs	r5, #0
 8003f16:	f104 0619 	add.w	r6, r4, #25
 8003f1a:	e7f5      	b.n	8003f08 <_printf_i+0x230>
 8003f1c:	08010102 	.word	0x08010102
 8003f20:	08010113 	.word	0x08010113

08003f24 <_scanf_float>:
 8003f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f28:	b087      	sub	sp, #28
 8003f2a:	9303      	str	r3, [sp, #12]
 8003f2c:	688b      	ldr	r3, [r1, #8]
 8003f2e:	4617      	mov	r7, r2
 8003f30:	1e5a      	subs	r2, r3, #1
 8003f32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003f36:	bf85      	ittet	hi
 8003f38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003f3c:	195b      	addhi	r3, r3, r5
 8003f3e:	2300      	movls	r3, #0
 8003f40:	9302      	strhi	r3, [sp, #8]
 8003f42:	bf88      	it	hi
 8003f44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003f48:	468b      	mov	fp, r1
 8003f4a:	f04f 0500 	mov.w	r5, #0
 8003f4e:	bf8c      	ite	hi
 8003f50:	608b      	strhi	r3, [r1, #8]
 8003f52:	9302      	strls	r3, [sp, #8]
 8003f54:	680b      	ldr	r3, [r1, #0]
 8003f56:	4680      	mov	r8, r0
 8003f58:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003f5c:	f84b 3b1c 	str.w	r3, [fp], #28
 8003f60:	460c      	mov	r4, r1
 8003f62:	465e      	mov	r6, fp
 8003f64:	46aa      	mov	sl, r5
 8003f66:	46a9      	mov	r9, r5
 8003f68:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003f6c:	9501      	str	r5, [sp, #4]
 8003f6e:	68a2      	ldr	r2, [r4, #8]
 8003f70:	b152      	cbz	r2, 8003f88 <_scanf_float+0x64>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b4e      	cmp	r3, #78	; 0x4e
 8003f78:	d864      	bhi.n	8004044 <_scanf_float+0x120>
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d83c      	bhi.n	8003ff8 <_scanf_float+0xd4>
 8003f7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003f82:	b2c8      	uxtb	r0, r1
 8003f84:	280e      	cmp	r0, #14
 8003f86:	d93a      	bls.n	8003ffe <_scanf_float+0xda>
 8003f88:	f1b9 0f00 	cmp.w	r9, #0
 8003f8c:	d003      	beq.n	8003f96 <_scanf_float+0x72>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003f9a:	f1ba 0f01 	cmp.w	sl, #1
 8003f9e:	f200 8113 	bhi.w	80041c8 <_scanf_float+0x2a4>
 8003fa2:	455e      	cmp	r6, fp
 8003fa4:	f200 8105 	bhi.w	80041b2 <_scanf_float+0x28e>
 8003fa8:	2501      	movs	r5, #1
 8003faa:	4628      	mov	r0, r5
 8003fac:	b007      	add	sp, #28
 8003fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003fb6:	2a0d      	cmp	r2, #13
 8003fb8:	d8e6      	bhi.n	8003f88 <_scanf_float+0x64>
 8003fba:	a101      	add	r1, pc, #4	; (adr r1, 8003fc0 <_scanf_float+0x9c>)
 8003fbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003fc0:	080040ff 	.word	0x080040ff
 8003fc4:	08003f89 	.word	0x08003f89
 8003fc8:	08003f89 	.word	0x08003f89
 8003fcc:	08003f89 	.word	0x08003f89
 8003fd0:	0800415f 	.word	0x0800415f
 8003fd4:	08004137 	.word	0x08004137
 8003fd8:	08003f89 	.word	0x08003f89
 8003fdc:	08003f89 	.word	0x08003f89
 8003fe0:	0800410d 	.word	0x0800410d
 8003fe4:	08003f89 	.word	0x08003f89
 8003fe8:	08003f89 	.word	0x08003f89
 8003fec:	08003f89 	.word	0x08003f89
 8003ff0:	08003f89 	.word	0x08003f89
 8003ff4:	080040c5 	.word	0x080040c5
 8003ff8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003ffc:	e7db      	b.n	8003fb6 <_scanf_float+0x92>
 8003ffe:	290e      	cmp	r1, #14
 8004000:	d8c2      	bhi.n	8003f88 <_scanf_float+0x64>
 8004002:	a001      	add	r0, pc, #4	; (adr r0, 8004008 <_scanf_float+0xe4>)
 8004004:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004008:	080040b7 	.word	0x080040b7
 800400c:	08003f89 	.word	0x08003f89
 8004010:	080040b7 	.word	0x080040b7
 8004014:	0800414b 	.word	0x0800414b
 8004018:	08003f89 	.word	0x08003f89
 800401c:	08004065 	.word	0x08004065
 8004020:	080040a1 	.word	0x080040a1
 8004024:	080040a1 	.word	0x080040a1
 8004028:	080040a1 	.word	0x080040a1
 800402c:	080040a1 	.word	0x080040a1
 8004030:	080040a1 	.word	0x080040a1
 8004034:	080040a1 	.word	0x080040a1
 8004038:	080040a1 	.word	0x080040a1
 800403c:	080040a1 	.word	0x080040a1
 8004040:	080040a1 	.word	0x080040a1
 8004044:	2b6e      	cmp	r3, #110	; 0x6e
 8004046:	d809      	bhi.n	800405c <_scanf_float+0x138>
 8004048:	2b60      	cmp	r3, #96	; 0x60
 800404a:	d8b2      	bhi.n	8003fb2 <_scanf_float+0x8e>
 800404c:	2b54      	cmp	r3, #84	; 0x54
 800404e:	d077      	beq.n	8004140 <_scanf_float+0x21c>
 8004050:	2b59      	cmp	r3, #89	; 0x59
 8004052:	d199      	bne.n	8003f88 <_scanf_float+0x64>
 8004054:	2d07      	cmp	r5, #7
 8004056:	d197      	bne.n	8003f88 <_scanf_float+0x64>
 8004058:	2508      	movs	r5, #8
 800405a:	e029      	b.n	80040b0 <_scanf_float+0x18c>
 800405c:	2b74      	cmp	r3, #116	; 0x74
 800405e:	d06f      	beq.n	8004140 <_scanf_float+0x21c>
 8004060:	2b79      	cmp	r3, #121	; 0x79
 8004062:	e7f6      	b.n	8004052 <_scanf_float+0x12e>
 8004064:	6821      	ldr	r1, [r4, #0]
 8004066:	05c8      	lsls	r0, r1, #23
 8004068:	d51a      	bpl.n	80040a0 <_scanf_float+0x17c>
 800406a:	9b02      	ldr	r3, [sp, #8]
 800406c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004070:	6021      	str	r1, [r4, #0]
 8004072:	f109 0901 	add.w	r9, r9, #1
 8004076:	b11b      	cbz	r3, 8004080 <_scanf_float+0x15c>
 8004078:	3b01      	subs	r3, #1
 800407a:	3201      	adds	r2, #1
 800407c:	9302      	str	r3, [sp, #8]
 800407e:	60a2      	str	r2, [r4, #8]
 8004080:	68a3      	ldr	r3, [r4, #8]
 8004082:	3b01      	subs	r3, #1
 8004084:	60a3      	str	r3, [r4, #8]
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	3301      	adds	r3, #1
 800408a:	6123      	str	r3, [r4, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3b01      	subs	r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	607b      	str	r3, [r7, #4]
 8004094:	f340 8084 	ble.w	80041a0 <_scanf_float+0x27c>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	3301      	adds	r3, #1
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	e766      	b.n	8003f6e <_scanf_float+0x4a>
 80040a0:	eb1a 0f05 	cmn.w	sl, r5
 80040a4:	f47f af70 	bne.w	8003f88 <_scanf_float+0x64>
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80040ae:	6022      	str	r2, [r4, #0]
 80040b0:	f806 3b01 	strb.w	r3, [r6], #1
 80040b4:	e7e4      	b.n	8004080 <_scanf_float+0x15c>
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	0610      	lsls	r0, r2, #24
 80040ba:	f57f af65 	bpl.w	8003f88 <_scanf_float+0x64>
 80040be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c2:	e7f4      	b.n	80040ae <_scanf_float+0x18a>
 80040c4:	f1ba 0f00 	cmp.w	sl, #0
 80040c8:	d10e      	bne.n	80040e8 <_scanf_float+0x1c4>
 80040ca:	f1b9 0f00 	cmp.w	r9, #0
 80040ce:	d10e      	bne.n	80040ee <_scanf_float+0x1ca>
 80040d0:	6822      	ldr	r2, [r4, #0]
 80040d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80040d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80040da:	d108      	bne.n	80040ee <_scanf_float+0x1ca>
 80040dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80040e0:	f04f 0a01 	mov.w	sl, #1
 80040e4:	6022      	str	r2, [r4, #0]
 80040e6:	e7e3      	b.n	80040b0 <_scanf_float+0x18c>
 80040e8:	f1ba 0f02 	cmp.w	sl, #2
 80040ec:	d055      	beq.n	800419a <_scanf_float+0x276>
 80040ee:	2d01      	cmp	r5, #1
 80040f0:	d002      	beq.n	80040f8 <_scanf_float+0x1d4>
 80040f2:	2d04      	cmp	r5, #4
 80040f4:	f47f af48 	bne.w	8003f88 <_scanf_float+0x64>
 80040f8:	3501      	adds	r5, #1
 80040fa:	b2ed      	uxtb	r5, r5
 80040fc:	e7d8      	b.n	80040b0 <_scanf_float+0x18c>
 80040fe:	f1ba 0f01 	cmp.w	sl, #1
 8004102:	f47f af41 	bne.w	8003f88 <_scanf_float+0x64>
 8004106:	f04f 0a02 	mov.w	sl, #2
 800410a:	e7d1      	b.n	80040b0 <_scanf_float+0x18c>
 800410c:	b97d      	cbnz	r5, 800412e <_scanf_float+0x20a>
 800410e:	f1b9 0f00 	cmp.w	r9, #0
 8004112:	f47f af3c 	bne.w	8003f8e <_scanf_float+0x6a>
 8004116:	6822      	ldr	r2, [r4, #0]
 8004118:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800411c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004120:	f47f af39 	bne.w	8003f96 <_scanf_float+0x72>
 8004124:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004128:	2501      	movs	r5, #1
 800412a:	6022      	str	r2, [r4, #0]
 800412c:	e7c0      	b.n	80040b0 <_scanf_float+0x18c>
 800412e:	2d03      	cmp	r5, #3
 8004130:	d0e2      	beq.n	80040f8 <_scanf_float+0x1d4>
 8004132:	2d05      	cmp	r5, #5
 8004134:	e7de      	b.n	80040f4 <_scanf_float+0x1d0>
 8004136:	2d02      	cmp	r5, #2
 8004138:	f47f af26 	bne.w	8003f88 <_scanf_float+0x64>
 800413c:	2503      	movs	r5, #3
 800413e:	e7b7      	b.n	80040b0 <_scanf_float+0x18c>
 8004140:	2d06      	cmp	r5, #6
 8004142:	f47f af21 	bne.w	8003f88 <_scanf_float+0x64>
 8004146:	2507      	movs	r5, #7
 8004148:	e7b2      	b.n	80040b0 <_scanf_float+0x18c>
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	0591      	lsls	r1, r2, #22
 800414e:	f57f af1b 	bpl.w	8003f88 <_scanf_float+0x64>
 8004152:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004156:	6022      	str	r2, [r4, #0]
 8004158:	f8cd 9004 	str.w	r9, [sp, #4]
 800415c:	e7a8      	b.n	80040b0 <_scanf_float+0x18c>
 800415e:	6822      	ldr	r2, [r4, #0]
 8004160:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004164:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004168:	d006      	beq.n	8004178 <_scanf_float+0x254>
 800416a:	0550      	lsls	r0, r2, #21
 800416c:	f57f af0c 	bpl.w	8003f88 <_scanf_float+0x64>
 8004170:	f1b9 0f00 	cmp.w	r9, #0
 8004174:	f43f af0f 	beq.w	8003f96 <_scanf_float+0x72>
 8004178:	0591      	lsls	r1, r2, #22
 800417a:	bf58      	it	pl
 800417c:	9901      	ldrpl	r1, [sp, #4]
 800417e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004182:	bf58      	it	pl
 8004184:	eba9 0101 	subpl.w	r1, r9, r1
 8004188:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800418c:	f04f 0900 	mov.w	r9, #0
 8004190:	bf58      	it	pl
 8004192:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004196:	6022      	str	r2, [r4, #0]
 8004198:	e78a      	b.n	80040b0 <_scanf_float+0x18c>
 800419a:	f04f 0a03 	mov.w	sl, #3
 800419e:	e787      	b.n	80040b0 <_scanf_float+0x18c>
 80041a0:	4639      	mov	r1, r7
 80041a2:	4640      	mov	r0, r8
 80041a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041a8:	4798      	blx	r3
 80041aa:	2800      	cmp	r0, #0
 80041ac:	f43f aedf 	beq.w	8003f6e <_scanf_float+0x4a>
 80041b0:	e6ea      	b.n	8003f88 <_scanf_float+0x64>
 80041b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041b6:	463a      	mov	r2, r7
 80041b8:	4640      	mov	r0, r8
 80041ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80041be:	4798      	blx	r3
 80041c0:	6923      	ldr	r3, [r4, #16]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	6123      	str	r3, [r4, #16]
 80041c6:	e6ec      	b.n	8003fa2 <_scanf_float+0x7e>
 80041c8:	1e6b      	subs	r3, r5, #1
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d825      	bhi.n	800421a <_scanf_float+0x2f6>
 80041ce:	2d02      	cmp	r5, #2
 80041d0:	d836      	bhi.n	8004240 <_scanf_float+0x31c>
 80041d2:	455e      	cmp	r6, fp
 80041d4:	f67f aee8 	bls.w	8003fa8 <_scanf_float+0x84>
 80041d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041dc:	463a      	mov	r2, r7
 80041de:	4640      	mov	r0, r8
 80041e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80041e4:	4798      	blx	r3
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	6123      	str	r3, [r4, #16]
 80041ec:	e7f1      	b.n	80041d2 <_scanf_float+0x2ae>
 80041ee:	9802      	ldr	r0, [sp, #8]
 80041f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80041f8:	463a      	mov	r2, r7
 80041fa:	9002      	str	r0, [sp, #8]
 80041fc:	4640      	mov	r0, r8
 80041fe:	4798      	blx	r3
 8004200:	6923      	ldr	r3, [r4, #16]
 8004202:	3b01      	subs	r3, #1
 8004204:	6123      	str	r3, [r4, #16]
 8004206:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800420a:	fa5f fa8a 	uxtb.w	sl, sl
 800420e:	f1ba 0f02 	cmp.w	sl, #2
 8004212:	d1ec      	bne.n	80041ee <_scanf_float+0x2ca>
 8004214:	3d03      	subs	r5, #3
 8004216:	b2ed      	uxtb	r5, r5
 8004218:	1b76      	subs	r6, r6, r5
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	05da      	lsls	r2, r3, #23
 800421e:	d52f      	bpl.n	8004280 <_scanf_float+0x35c>
 8004220:	055b      	lsls	r3, r3, #21
 8004222:	d510      	bpl.n	8004246 <_scanf_float+0x322>
 8004224:	455e      	cmp	r6, fp
 8004226:	f67f aebf 	bls.w	8003fa8 <_scanf_float+0x84>
 800422a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800422e:	463a      	mov	r2, r7
 8004230:	4640      	mov	r0, r8
 8004232:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004236:	4798      	blx	r3
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	3b01      	subs	r3, #1
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	e7f1      	b.n	8004224 <_scanf_float+0x300>
 8004240:	46aa      	mov	sl, r5
 8004242:	9602      	str	r6, [sp, #8]
 8004244:	e7df      	b.n	8004206 <_scanf_float+0x2e2>
 8004246:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800424a:	6923      	ldr	r3, [r4, #16]
 800424c:	2965      	cmp	r1, #101	; 0x65
 800424e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004252:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004256:	6123      	str	r3, [r4, #16]
 8004258:	d00c      	beq.n	8004274 <_scanf_float+0x350>
 800425a:	2945      	cmp	r1, #69	; 0x45
 800425c:	d00a      	beq.n	8004274 <_scanf_float+0x350>
 800425e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004262:	463a      	mov	r2, r7
 8004264:	4640      	mov	r0, r8
 8004266:	4798      	blx	r3
 8004268:	6923      	ldr	r3, [r4, #16]
 800426a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800426e:	3b01      	subs	r3, #1
 8004270:	1eb5      	subs	r5, r6, #2
 8004272:	6123      	str	r3, [r4, #16]
 8004274:	463a      	mov	r2, r7
 8004276:	4640      	mov	r0, r8
 8004278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800427c:	4798      	blx	r3
 800427e:	462e      	mov	r6, r5
 8004280:	6825      	ldr	r5, [r4, #0]
 8004282:	f015 0510 	ands.w	r5, r5, #16
 8004286:	d155      	bne.n	8004334 <_scanf_float+0x410>
 8004288:	7035      	strb	r5, [r6, #0]
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004294:	d11b      	bne.n	80042ce <_scanf_float+0x3aa>
 8004296:	9b01      	ldr	r3, [sp, #4]
 8004298:	454b      	cmp	r3, r9
 800429a:	eba3 0209 	sub.w	r2, r3, r9
 800429e:	d123      	bne.n	80042e8 <_scanf_float+0x3c4>
 80042a0:	2200      	movs	r2, #0
 80042a2:	4659      	mov	r1, fp
 80042a4:	4640      	mov	r0, r8
 80042a6:	f000 feaf 	bl	8005008 <_strtod_r>
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	9b03      	ldr	r3, [sp, #12]
 80042ae:	f012 0f02 	tst.w	r2, #2
 80042b2:	4606      	mov	r6, r0
 80042b4:	460f      	mov	r7, r1
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	d021      	beq.n	80042fe <_scanf_float+0x3da>
 80042ba:	1d1a      	adds	r2, r3, #4
 80042bc:	9903      	ldr	r1, [sp, #12]
 80042be:	600a      	str	r2, [r1, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	e9c3 6700 	strd	r6, r7, [r3]
 80042c6:	68e3      	ldr	r3, [r4, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60e3      	str	r3, [r4, #12]
 80042cc:	e66d      	b.n	8003faa <_scanf_float+0x86>
 80042ce:	9b04      	ldr	r3, [sp, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0e5      	beq.n	80042a0 <_scanf_float+0x37c>
 80042d4:	9905      	ldr	r1, [sp, #20]
 80042d6:	230a      	movs	r3, #10
 80042d8:	462a      	mov	r2, r5
 80042da:	4640      	mov	r0, r8
 80042dc:	3101      	adds	r1, #1
 80042de:	f000 ff15 	bl	800510c <_strtol_r>
 80042e2:	9b04      	ldr	r3, [sp, #16]
 80042e4:	9e05      	ldr	r6, [sp, #20]
 80042e6:	1ac2      	subs	r2, r0, r3
 80042e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80042ec:	429e      	cmp	r6, r3
 80042ee:	bf28      	it	cs
 80042f0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80042f4:	4630      	mov	r0, r6
 80042f6:	4910      	ldr	r1, [pc, #64]	; (8004338 <_scanf_float+0x414>)
 80042f8:	f000 f85a 	bl	80043b0 <siprintf>
 80042fc:	e7d0      	b.n	80042a0 <_scanf_float+0x37c>
 80042fe:	f012 0f04 	tst.w	r2, #4
 8004302:	f103 0204 	add.w	r2, r3, #4
 8004306:	d1d9      	bne.n	80042bc <_scanf_float+0x398>
 8004308:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800430c:	f8cc 2000 	str.w	r2, [ip]
 8004310:	f8d3 8000 	ldr.w	r8, [r3]
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	f7fc fbe4 	bl	8000ae4 <__aeabi_dcmpun>
 800431c:	b128      	cbz	r0, 800432a <_scanf_float+0x406>
 800431e:	4807      	ldr	r0, [pc, #28]	; (800433c <_scanf_float+0x418>)
 8004320:	f000 f80e 	bl	8004340 <nanf>
 8004324:	f8c8 0000 	str.w	r0, [r8]
 8004328:	e7cd      	b.n	80042c6 <_scanf_float+0x3a2>
 800432a:	4630      	mov	r0, r6
 800432c:	4639      	mov	r1, r7
 800432e:	f7fc fc37 	bl	8000ba0 <__aeabi_d2f>
 8004332:	e7f7      	b.n	8004324 <_scanf_float+0x400>
 8004334:	2500      	movs	r5, #0
 8004336:	e638      	b.n	8003faa <_scanf_float+0x86>
 8004338:	08010124 	.word	0x08010124
 800433c:	08010530 	.word	0x08010530

08004340 <nanf>:
 8004340:	4800      	ldr	r0, [pc, #0]	; (8004344 <nanf+0x4>)
 8004342:	4770      	bx	lr
 8004344:	7fc00000 	.word	0x7fc00000

08004348 <sniprintf>:
 8004348:	b40c      	push	{r2, r3}
 800434a:	b530      	push	{r4, r5, lr}
 800434c:	4b17      	ldr	r3, [pc, #92]	; (80043ac <sniprintf+0x64>)
 800434e:	1e0c      	subs	r4, r1, #0
 8004350:	681d      	ldr	r5, [r3, #0]
 8004352:	b09d      	sub	sp, #116	; 0x74
 8004354:	da08      	bge.n	8004368 <sniprintf+0x20>
 8004356:	238b      	movs	r3, #139	; 0x8b
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	b01d      	add	sp, #116	; 0x74
 8004360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004364:	b002      	add	sp, #8
 8004366:	4770      	bx	lr
 8004368:	f44f 7302 	mov.w	r3, #520	; 0x208
 800436c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004370:	bf0c      	ite	eq
 8004372:	4623      	moveq	r3, r4
 8004374:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004378:	9304      	str	r3, [sp, #16]
 800437a:	9307      	str	r3, [sp, #28]
 800437c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004380:	9002      	str	r0, [sp, #8]
 8004382:	9006      	str	r0, [sp, #24]
 8004384:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004388:	4628      	mov	r0, r5
 800438a:	ab21      	add	r3, sp, #132	; 0x84
 800438c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800438e:	a902      	add	r1, sp, #8
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	f002 fefb 	bl	800718c <_svfiprintf_r>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	bfbc      	itt	lt
 800439a:	238b      	movlt	r3, #139	; 0x8b
 800439c:	602b      	strlt	r3, [r5, #0]
 800439e:	2c00      	cmp	r4, #0
 80043a0:	d0dd      	beq.n	800435e <sniprintf+0x16>
 80043a2:	2200      	movs	r2, #0
 80043a4:	9b02      	ldr	r3, [sp, #8]
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e7d9      	b.n	800435e <sniprintf+0x16>
 80043aa:	bf00      	nop
 80043ac:	20000034 	.word	0x20000034

080043b0 <siprintf>:
 80043b0:	b40e      	push	{r1, r2, r3}
 80043b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043b6:	b500      	push	{lr}
 80043b8:	b09c      	sub	sp, #112	; 0x70
 80043ba:	ab1d      	add	r3, sp, #116	; 0x74
 80043bc:	9002      	str	r0, [sp, #8]
 80043be:	9006      	str	r0, [sp, #24]
 80043c0:	9107      	str	r1, [sp, #28]
 80043c2:	9104      	str	r1, [sp, #16]
 80043c4:	4808      	ldr	r0, [pc, #32]	; (80043e8 <siprintf+0x38>)
 80043c6:	4909      	ldr	r1, [pc, #36]	; (80043ec <siprintf+0x3c>)
 80043c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80043cc:	9105      	str	r1, [sp, #20]
 80043ce:	6800      	ldr	r0, [r0, #0]
 80043d0:	a902      	add	r1, sp, #8
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	f002 feda 	bl	800718c <_svfiprintf_r>
 80043d8:	2200      	movs	r2, #0
 80043da:	9b02      	ldr	r3, [sp, #8]
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	b01c      	add	sp, #112	; 0x70
 80043e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e4:	b003      	add	sp, #12
 80043e6:	4770      	bx	lr
 80043e8:	20000034 	.word	0x20000034
 80043ec:	ffff0208 	.word	0xffff0208

080043f0 <sulp>:
 80043f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f4:	460f      	mov	r7, r1
 80043f6:	4690      	mov	r8, r2
 80043f8:	f002 fc34 	bl	8006c64 <__ulp>
 80043fc:	4604      	mov	r4, r0
 80043fe:	460d      	mov	r5, r1
 8004400:	f1b8 0f00 	cmp.w	r8, #0
 8004404:	d011      	beq.n	800442a <sulp+0x3a>
 8004406:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800440a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800440e:	2b00      	cmp	r3, #0
 8004410:	dd0b      	ble.n	800442a <sulp+0x3a>
 8004412:	2400      	movs	r4, #0
 8004414:	051b      	lsls	r3, r3, #20
 8004416:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800441a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	f7fc f8c5 	bl	80005b0 <__aeabi_dmul>
 8004426:	4604      	mov	r4, r0
 8004428:	460d      	mov	r5, r1
 800442a:	4620      	mov	r0, r4
 800442c:	4629      	mov	r1, r5
 800442e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004432:	0000      	movs	r0, r0
 8004434:	0000      	movs	r0, r0
	...

08004438 <_strtod_l>:
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443c:	469b      	mov	fp, r3
 800443e:	2300      	movs	r3, #0
 8004440:	b09f      	sub	sp, #124	; 0x7c
 8004442:	931a      	str	r3, [sp, #104]	; 0x68
 8004444:	4b9e      	ldr	r3, [pc, #632]	; (80046c0 <_strtod_l+0x288>)
 8004446:	4682      	mov	sl, r0
 8004448:	681f      	ldr	r7, [r3, #0]
 800444a:	460e      	mov	r6, r1
 800444c:	4638      	mov	r0, r7
 800444e:	9215      	str	r2, [sp, #84]	; 0x54
 8004450:	f7fb feea 	bl	8000228 <strlen>
 8004454:	f04f 0800 	mov.w	r8, #0
 8004458:	4604      	mov	r4, r0
 800445a:	f04f 0900 	mov.w	r9, #0
 800445e:	9619      	str	r6, [sp, #100]	; 0x64
 8004460:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004462:	781a      	ldrb	r2, [r3, #0]
 8004464:	2a2b      	cmp	r2, #43	; 0x2b
 8004466:	d04c      	beq.n	8004502 <_strtod_l+0xca>
 8004468:	d83a      	bhi.n	80044e0 <_strtod_l+0xa8>
 800446a:	2a0d      	cmp	r2, #13
 800446c:	d833      	bhi.n	80044d6 <_strtod_l+0x9e>
 800446e:	2a08      	cmp	r2, #8
 8004470:	d833      	bhi.n	80044da <_strtod_l+0xa2>
 8004472:	2a00      	cmp	r2, #0
 8004474:	d03d      	beq.n	80044f2 <_strtod_l+0xba>
 8004476:	2300      	movs	r3, #0
 8004478:	930a      	str	r3, [sp, #40]	; 0x28
 800447a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800447c:	782b      	ldrb	r3, [r5, #0]
 800447e:	2b30      	cmp	r3, #48	; 0x30
 8004480:	f040 80aa 	bne.w	80045d8 <_strtod_l+0x1a0>
 8004484:	786b      	ldrb	r3, [r5, #1]
 8004486:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800448a:	2b58      	cmp	r3, #88	; 0x58
 800448c:	d166      	bne.n	800455c <_strtod_l+0x124>
 800448e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004490:	4650      	mov	r0, sl
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	ab1a      	add	r3, sp, #104	; 0x68
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	4a8a      	ldr	r2, [pc, #552]	; (80046c4 <_strtod_l+0x28c>)
 800449a:	f8cd b008 	str.w	fp, [sp, #8]
 800449e:	ab1b      	add	r3, sp, #108	; 0x6c
 80044a0:	a919      	add	r1, sp, #100	; 0x64
 80044a2:	f001 fd37 	bl	8005f14 <__gethex>
 80044a6:	f010 0607 	ands.w	r6, r0, #7
 80044aa:	4604      	mov	r4, r0
 80044ac:	d005      	beq.n	80044ba <_strtod_l+0x82>
 80044ae:	2e06      	cmp	r6, #6
 80044b0:	d129      	bne.n	8004506 <_strtod_l+0xce>
 80044b2:	2300      	movs	r3, #0
 80044b4:	3501      	adds	r5, #1
 80044b6:	9519      	str	r5, [sp, #100]	; 0x64
 80044b8:	930a      	str	r3, [sp, #40]	; 0x28
 80044ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f040 858a 	bne.w	8004fd6 <_strtod_l+0xb9e>
 80044c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c4:	b1d3      	cbz	r3, 80044fc <_strtod_l+0xc4>
 80044c6:	4642      	mov	r2, r8
 80044c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	b01f      	add	sp, #124	; 0x7c
 80044d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d6:	2a20      	cmp	r2, #32
 80044d8:	d1cd      	bne.n	8004476 <_strtod_l+0x3e>
 80044da:	3301      	adds	r3, #1
 80044dc:	9319      	str	r3, [sp, #100]	; 0x64
 80044de:	e7bf      	b.n	8004460 <_strtod_l+0x28>
 80044e0:	2a2d      	cmp	r2, #45	; 0x2d
 80044e2:	d1c8      	bne.n	8004476 <_strtod_l+0x3e>
 80044e4:	2201      	movs	r2, #1
 80044e6:	920a      	str	r2, [sp, #40]	; 0x28
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	9219      	str	r2, [sp, #100]	; 0x64
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1c3      	bne.n	800447a <_strtod_l+0x42>
 80044f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044f4:	9619      	str	r6, [sp, #100]	; 0x64
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 856b 	bne.w	8004fd2 <_strtod_l+0xb9a>
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	e7e4      	b.n	80044cc <_strtod_l+0x94>
 8004502:	2200      	movs	r2, #0
 8004504:	e7ef      	b.n	80044e6 <_strtod_l+0xae>
 8004506:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004508:	b13a      	cbz	r2, 800451a <_strtod_l+0xe2>
 800450a:	2135      	movs	r1, #53	; 0x35
 800450c:	a81c      	add	r0, sp, #112	; 0x70
 800450e:	f002 fcad 	bl	8006e6c <__copybits>
 8004512:	4650      	mov	r0, sl
 8004514:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004516:	f002 f875 	bl	8006604 <_Bfree>
 800451a:	3e01      	subs	r6, #1
 800451c:	2e04      	cmp	r6, #4
 800451e:	d806      	bhi.n	800452e <_strtod_l+0xf6>
 8004520:	e8df f006 	tbb	[pc, r6]
 8004524:	1714030a 	.word	0x1714030a
 8004528:	0a          	.byte	0x0a
 8004529:	00          	.byte	0x00
 800452a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800452e:	0721      	lsls	r1, r4, #28
 8004530:	d5c3      	bpl.n	80044ba <_strtod_l+0x82>
 8004532:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004536:	e7c0      	b.n	80044ba <_strtod_l+0x82>
 8004538:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800453a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800453e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004542:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004546:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800454a:	e7f0      	b.n	800452e <_strtod_l+0xf6>
 800454c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80046c8 <_strtod_l+0x290>
 8004550:	e7ed      	b.n	800452e <_strtod_l+0xf6>
 8004552:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004556:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800455a:	e7e8      	b.n	800452e <_strtod_l+0xf6>
 800455c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	9219      	str	r2, [sp, #100]	; 0x64
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	2b30      	cmp	r3, #48	; 0x30
 8004566:	d0f9      	beq.n	800455c <_strtod_l+0x124>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0a6      	beq.n	80044ba <_strtod_l+0x82>
 800456c:	2301      	movs	r3, #1
 800456e:	9307      	str	r3, [sp, #28]
 8004570:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004572:	220a      	movs	r2, #10
 8004574:	9308      	str	r3, [sp, #32]
 8004576:	2300      	movs	r3, #0
 8004578:	469b      	mov	fp, r3
 800457a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800457e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004580:	7805      	ldrb	r5, [r0, #0]
 8004582:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004586:	b2d9      	uxtb	r1, r3
 8004588:	2909      	cmp	r1, #9
 800458a:	d927      	bls.n	80045dc <_strtod_l+0x1a4>
 800458c:	4622      	mov	r2, r4
 800458e:	4639      	mov	r1, r7
 8004590:	f002 ff12 	bl	80073b8 <strncmp>
 8004594:	2800      	cmp	r0, #0
 8004596:	d033      	beq.n	8004600 <_strtod_l+0x1c8>
 8004598:	2000      	movs	r0, #0
 800459a:	462a      	mov	r2, r5
 800459c:	465c      	mov	r4, fp
 800459e:	4603      	mov	r3, r0
 80045a0:	9004      	str	r0, [sp, #16]
 80045a2:	2a65      	cmp	r2, #101	; 0x65
 80045a4:	d001      	beq.n	80045aa <_strtod_l+0x172>
 80045a6:	2a45      	cmp	r2, #69	; 0x45
 80045a8:	d114      	bne.n	80045d4 <_strtod_l+0x19c>
 80045aa:	b91c      	cbnz	r4, 80045b4 <_strtod_l+0x17c>
 80045ac:	9a07      	ldr	r2, [sp, #28]
 80045ae:	4302      	orrs	r2, r0
 80045b0:	d09f      	beq.n	80044f2 <_strtod_l+0xba>
 80045b2:	2400      	movs	r4, #0
 80045b4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80045b6:	1c72      	adds	r2, r6, #1
 80045b8:	9219      	str	r2, [sp, #100]	; 0x64
 80045ba:	7872      	ldrb	r2, [r6, #1]
 80045bc:	2a2b      	cmp	r2, #43	; 0x2b
 80045be:	d079      	beq.n	80046b4 <_strtod_l+0x27c>
 80045c0:	2a2d      	cmp	r2, #45	; 0x2d
 80045c2:	f000 8083 	beq.w	80046cc <_strtod_l+0x294>
 80045c6:	2700      	movs	r7, #0
 80045c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80045cc:	2909      	cmp	r1, #9
 80045ce:	f240 8083 	bls.w	80046d8 <_strtod_l+0x2a0>
 80045d2:	9619      	str	r6, [sp, #100]	; 0x64
 80045d4:	2500      	movs	r5, #0
 80045d6:	e09f      	b.n	8004718 <_strtod_l+0x2e0>
 80045d8:	2300      	movs	r3, #0
 80045da:	e7c8      	b.n	800456e <_strtod_l+0x136>
 80045dc:	f1bb 0f08 	cmp.w	fp, #8
 80045e0:	bfd5      	itete	le
 80045e2:	9906      	ldrle	r1, [sp, #24]
 80045e4:	9905      	ldrgt	r1, [sp, #20]
 80045e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80045ea:	fb02 3301 	mlagt	r3, r2, r1, r3
 80045ee:	f100 0001 	add.w	r0, r0, #1
 80045f2:	bfd4      	ite	le
 80045f4:	9306      	strle	r3, [sp, #24]
 80045f6:	9305      	strgt	r3, [sp, #20]
 80045f8:	f10b 0b01 	add.w	fp, fp, #1
 80045fc:	9019      	str	r0, [sp, #100]	; 0x64
 80045fe:	e7be      	b.n	800457e <_strtod_l+0x146>
 8004600:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004602:	191a      	adds	r2, r3, r4
 8004604:	9219      	str	r2, [sp, #100]	; 0x64
 8004606:	5d1a      	ldrb	r2, [r3, r4]
 8004608:	f1bb 0f00 	cmp.w	fp, #0
 800460c:	d036      	beq.n	800467c <_strtod_l+0x244>
 800460e:	465c      	mov	r4, fp
 8004610:	9004      	str	r0, [sp, #16]
 8004612:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004616:	2b09      	cmp	r3, #9
 8004618:	d912      	bls.n	8004640 <_strtod_l+0x208>
 800461a:	2301      	movs	r3, #1
 800461c:	e7c1      	b.n	80045a2 <_strtod_l+0x16a>
 800461e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004620:	3001      	adds	r0, #1
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	9219      	str	r2, [sp, #100]	; 0x64
 8004626:	785a      	ldrb	r2, [r3, #1]
 8004628:	2a30      	cmp	r2, #48	; 0x30
 800462a:	d0f8      	beq.n	800461e <_strtod_l+0x1e6>
 800462c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004630:	2b08      	cmp	r3, #8
 8004632:	f200 84d5 	bhi.w	8004fe0 <_strtod_l+0xba8>
 8004636:	9004      	str	r0, [sp, #16]
 8004638:	2000      	movs	r0, #0
 800463a:	4604      	mov	r4, r0
 800463c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800463e:	9308      	str	r3, [sp, #32]
 8004640:	3a30      	subs	r2, #48	; 0x30
 8004642:	f100 0301 	add.w	r3, r0, #1
 8004646:	d013      	beq.n	8004670 <_strtod_l+0x238>
 8004648:	9904      	ldr	r1, [sp, #16]
 800464a:	1905      	adds	r5, r0, r4
 800464c:	4419      	add	r1, r3
 800464e:	9104      	str	r1, [sp, #16]
 8004650:	4623      	mov	r3, r4
 8004652:	210a      	movs	r1, #10
 8004654:	42ab      	cmp	r3, r5
 8004656:	d113      	bne.n	8004680 <_strtod_l+0x248>
 8004658:	1823      	adds	r3, r4, r0
 800465a:	2b08      	cmp	r3, #8
 800465c:	f104 0401 	add.w	r4, r4, #1
 8004660:	4404      	add	r4, r0
 8004662:	dc1b      	bgt.n	800469c <_strtod_l+0x264>
 8004664:	230a      	movs	r3, #10
 8004666:	9906      	ldr	r1, [sp, #24]
 8004668:	fb03 2301 	mla	r3, r3, r1, r2
 800466c:	9306      	str	r3, [sp, #24]
 800466e:	2300      	movs	r3, #0
 8004670:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004672:	4618      	mov	r0, r3
 8004674:	1c51      	adds	r1, r2, #1
 8004676:	9119      	str	r1, [sp, #100]	; 0x64
 8004678:	7852      	ldrb	r2, [r2, #1]
 800467a:	e7ca      	b.n	8004612 <_strtod_l+0x1da>
 800467c:	4658      	mov	r0, fp
 800467e:	e7d3      	b.n	8004628 <_strtod_l+0x1f0>
 8004680:	2b08      	cmp	r3, #8
 8004682:	dc04      	bgt.n	800468e <_strtod_l+0x256>
 8004684:	9f06      	ldr	r7, [sp, #24]
 8004686:	434f      	muls	r7, r1
 8004688:	9706      	str	r7, [sp, #24]
 800468a:	3301      	adds	r3, #1
 800468c:	e7e2      	b.n	8004654 <_strtod_l+0x21c>
 800468e:	1c5f      	adds	r7, r3, #1
 8004690:	2f10      	cmp	r7, #16
 8004692:	bfde      	ittt	le
 8004694:	9f05      	ldrle	r7, [sp, #20]
 8004696:	434f      	mulle	r7, r1
 8004698:	9705      	strle	r7, [sp, #20]
 800469a:	e7f6      	b.n	800468a <_strtod_l+0x252>
 800469c:	2c10      	cmp	r4, #16
 800469e:	bfdf      	itttt	le
 80046a0:	230a      	movle	r3, #10
 80046a2:	9905      	ldrle	r1, [sp, #20]
 80046a4:	fb03 2301 	mlale	r3, r3, r1, r2
 80046a8:	9305      	strle	r3, [sp, #20]
 80046aa:	e7e0      	b.n	800466e <_strtod_l+0x236>
 80046ac:	2300      	movs	r3, #0
 80046ae:	9304      	str	r3, [sp, #16]
 80046b0:	2301      	movs	r3, #1
 80046b2:	e77b      	b.n	80045ac <_strtod_l+0x174>
 80046b4:	2700      	movs	r7, #0
 80046b6:	1cb2      	adds	r2, r6, #2
 80046b8:	9219      	str	r2, [sp, #100]	; 0x64
 80046ba:	78b2      	ldrb	r2, [r6, #2]
 80046bc:	e784      	b.n	80045c8 <_strtod_l+0x190>
 80046be:	bf00      	nop
 80046c0:	08010378 	.word	0x08010378
 80046c4:	0801012c 	.word	0x0801012c
 80046c8:	7ff00000 	.word	0x7ff00000
 80046cc:	2701      	movs	r7, #1
 80046ce:	e7f2      	b.n	80046b6 <_strtod_l+0x27e>
 80046d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80046d2:	1c51      	adds	r1, r2, #1
 80046d4:	9119      	str	r1, [sp, #100]	; 0x64
 80046d6:	7852      	ldrb	r2, [r2, #1]
 80046d8:	2a30      	cmp	r2, #48	; 0x30
 80046da:	d0f9      	beq.n	80046d0 <_strtod_l+0x298>
 80046dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80046e0:	2908      	cmp	r1, #8
 80046e2:	f63f af77 	bhi.w	80045d4 <_strtod_l+0x19c>
 80046e6:	f04f 0e0a 	mov.w	lr, #10
 80046ea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80046ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80046f0:	9209      	str	r2, [sp, #36]	; 0x24
 80046f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80046f4:	1c51      	adds	r1, r2, #1
 80046f6:	9119      	str	r1, [sp, #100]	; 0x64
 80046f8:	7852      	ldrb	r2, [r2, #1]
 80046fa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80046fe:	2d09      	cmp	r5, #9
 8004700:	d935      	bls.n	800476e <_strtod_l+0x336>
 8004702:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004704:	1b49      	subs	r1, r1, r5
 8004706:	2908      	cmp	r1, #8
 8004708:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800470c:	dc02      	bgt.n	8004714 <_strtod_l+0x2dc>
 800470e:	4565      	cmp	r5, ip
 8004710:	bfa8      	it	ge
 8004712:	4665      	movge	r5, ip
 8004714:	b107      	cbz	r7, 8004718 <_strtod_l+0x2e0>
 8004716:	426d      	negs	r5, r5
 8004718:	2c00      	cmp	r4, #0
 800471a:	d14c      	bne.n	80047b6 <_strtod_l+0x37e>
 800471c:	9907      	ldr	r1, [sp, #28]
 800471e:	4301      	orrs	r1, r0
 8004720:	f47f aecb 	bne.w	80044ba <_strtod_l+0x82>
 8004724:	2b00      	cmp	r3, #0
 8004726:	f47f aee4 	bne.w	80044f2 <_strtod_l+0xba>
 800472a:	2a69      	cmp	r2, #105	; 0x69
 800472c:	d026      	beq.n	800477c <_strtod_l+0x344>
 800472e:	dc23      	bgt.n	8004778 <_strtod_l+0x340>
 8004730:	2a49      	cmp	r2, #73	; 0x49
 8004732:	d023      	beq.n	800477c <_strtod_l+0x344>
 8004734:	2a4e      	cmp	r2, #78	; 0x4e
 8004736:	f47f aedc 	bne.w	80044f2 <_strtod_l+0xba>
 800473a:	499d      	ldr	r1, [pc, #628]	; (80049b0 <_strtod_l+0x578>)
 800473c:	a819      	add	r0, sp, #100	; 0x64
 800473e:	f001 fe37 	bl	80063b0 <__match>
 8004742:	2800      	cmp	r0, #0
 8004744:	f43f aed5 	beq.w	80044f2 <_strtod_l+0xba>
 8004748:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b28      	cmp	r3, #40	; 0x28
 800474e:	d12c      	bne.n	80047aa <_strtod_l+0x372>
 8004750:	4998      	ldr	r1, [pc, #608]	; (80049b4 <_strtod_l+0x57c>)
 8004752:	aa1c      	add	r2, sp, #112	; 0x70
 8004754:	a819      	add	r0, sp, #100	; 0x64
 8004756:	f001 fe3f 	bl	80063d8 <__hexnan>
 800475a:	2805      	cmp	r0, #5
 800475c:	d125      	bne.n	80047aa <_strtod_l+0x372>
 800475e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004760:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004764:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004768:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800476c:	e6a5      	b.n	80044ba <_strtod_l+0x82>
 800476e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004772:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004776:	e7bc      	b.n	80046f2 <_strtod_l+0x2ba>
 8004778:	2a6e      	cmp	r2, #110	; 0x6e
 800477a:	e7dc      	b.n	8004736 <_strtod_l+0x2fe>
 800477c:	498e      	ldr	r1, [pc, #568]	; (80049b8 <_strtod_l+0x580>)
 800477e:	a819      	add	r0, sp, #100	; 0x64
 8004780:	f001 fe16 	bl	80063b0 <__match>
 8004784:	2800      	cmp	r0, #0
 8004786:	f43f aeb4 	beq.w	80044f2 <_strtod_l+0xba>
 800478a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800478c:	498b      	ldr	r1, [pc, #556]	; (80049bc <_strtod_l+0x584>)
 800478e:	3b01      	subs	r3, #1
 8004790:	a819      	add	r0, sp, #100	; 0x64
 8004792:	9319      	str	r3, [sp, #100]	; 0x64
 8004794:	f001 fe0c 	bl	80063b0 <__match>
 8004798:	b910      	cbnz	r0, 80047a0 <_strtod_l+0x368>
 800479a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800479c:	3301      	adds	r3, #1
 800479e:	9319      	str	r3, [sp, #100]	; 0x64
 80047a0:	f04f 0800 	mov.w	r8, #0
 80047a4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80049c0 <_strtod_l+0x588>
 80047a8:	e687      	b.n	80044ba <_strtod_l+0x82>
 80047aa:	4886      	ldr	r0, [pc, #536]	; (80049c4 <_strtod_l+0x58c>)
 80047ac:	f002 fdee 	bl	800738c <nan>
 80047b0:	4680      	mov	r8, r0
 80047b2:	4689      	mov	r9, r1
 80047b4:	e681      	b.n	80044ba <_strtod_l+0x82>
 80047b6:	9b04      	ldr	r3, [sp, #16]
 80047b8:	f1bb 0f00 	cmp.w	fp, #0
 80047bc:	bf08      	it	eq
 80047be:	46a3      	moveq	fp, r4
 80047c0:	1aeb      	subs	r3, r5, r3
 80047c2:	2c10      	cmp	r4, #16
 80047c4:	9806      	ldr	r0, [sp, #24]
 80047c6:	4626      	mov	r6, r4
 80047c8:	9307      	str	r3, [sp, #28]
 80047ca:	bfa8      	it	ge
 80047cc:	2610      	movge	r6, #16
 80047ce:	f7fb fe75 	bl	80004bc <__aeabi_ui2d>
 80047d2:	2c09      	cmp	r4, #9
 80047d4:	4680      	mov	r8, r0
 80047d6:	4689      	mov	r9, r1
 80047d8:	dd13      	ble.n	8004802 <_strtod_l+0x3ca>
 80047da:	4b7b      	ldr	r3, [pc, #492]	; (80049c8 <_strtod_l+0x590>)
 80047dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80047e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80047e4:	f7fb fee4 	bl	80005b0 <__aeabi_dmul>
 80047e8:	4680      	mov	r8, r0
 80047ea:	9805      	ldr	r0, [sp, #20]
 80047ec:	4689      	mov	r9, r1
 80047ee:	f7fb fe65 	bl	80004bc <__aeabi_ui2d>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4640      	mov	r0, r8
 80047f8:	4649      	mov	r1, r9
 80047fa:	f7fb fd23 	bl	8000244 <__adddf3>
 80047fe:	4680      	mov	r8, r0
 8004800:	4689      	mov	r9, r1
 8004802:	2c0f      	cmp	r4, #15
 8004804:	dc36      	bgt.n	8004874 <_strtod_l+0x43c>
 8004806:	9b07      	ldr	r3, [sp, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f43f ae56 	beq.w	80044ba <_strtod_l+0x82>
 800480e:	dd22      	ble.n	8004856 <_strtod_l+0x41e>
 8004810:	2b16      	cmp	r3, #22
 8004812:	dc09      	bgt.n	8004828 <_strtod_l+0x3f0>
 8004814:	496c      	ldr	r1, [pc, #432]	; (80049c8 <_strtod_l+0x590>)
 8004816:	4642      	mov	r2, r8
 8004818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800481c:	464b      	mov	r3, r9
 800481e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004822:	f7fb fec5 	bl	80005b0 <__aeabi_dmul>
 8004826:	e7c3      	b.n	80047b0 <_strtod_l+0x378>
 8004828:	9a07      	ldr	r2, [sp, #28]
 800482a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800482e:	4293      	cmp	r3, r2
 8004830:	db20      	blt.n	8004874 <_strtod_l+0x43c>
 8004832:	4d65      	ldr	r5, [pc, #404]	; (80049c8 <_strtod_l+0x590>)
 8004834:	f1c4 040f 	rsb	r4, r4, #15
 8004838:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800483c:	4642      	mov	r2, r8
 800483e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004842:	464b      	mov	r3, r9
 8004844:	f7fb feb4 	bl	80005b0 <__aeabi_dmul>
 8004848:	9b07      	ldr	r3, [sp, #28]
 800484a:	1b1c      	subs	r4, r3, r4
 800484c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004850:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004854:	e7e5      	b.n	8004822 <_strtod_l+0x3ea>
 8004856:	9b07      	ldr	r3, [sp, #28]
 8004858:	3316      	adds	r3, #22
 800485a:	db0b      	blt.n	8004874 <_strtod_l+0x43c>
 800485c:	9b04      	ldr	r3, [sp, #16]
 800485e:	4640      	mov	r0, r8
 8004860:	1b5d      	subs	r5, r3, r5
 8004862:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <_strtod_l+0x590>)
 8004864:	4649      	mov	r1, r9
 8004866:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800486a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800486e:	f7fb ffc9 	bl	8000804 <__aeabi_ddiv>
 8004872:	e79d      	b.n	80047b0 <_strtod_l+0x378>
 8004874:	9b07      	ldr	r3, [sp, #28]
 8004876:	1ba6      	subs	r6, r4, r6
 8004878:	441e      	add	r6, r3
 800487a:	2e00      	cmp	r6, #0
 800487c:	dd74      	ble.n	8004968 <_strtod_l+0x530>
 800487e:	f016 030f 	ands.w	r3, r6, #15
 8004882:	d00a      	beq.n	800489a <_strtod_l+0x462>
 8004884:	4950      	ldr	r1, [pc, #320]	; (80049c8 <_strtod_l+0x590>)
 8004886:	4642      	mov	r2, r8
 8004888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800488c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004890:	464b      	mov	r3, r9
 8004892:	f7fb fe8d 	bl	80005b0 <__aeabi_dmul>
 8004896:	4680      	mov	r8, r0
 8004898:	4689      	mov	r9, r1
 800489a:	f036 060f 	bics.w	r6, r6, #15
 800489e:	d052      	beq.n	8004946 <_strtod_l+0x50e>
 80048a0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80048a4:	dd27      	ble.n	80048f6 <_strtod_l+0x4be>
 80048a6:	f04f 0b00 	mov.w	fp, #0
 80048aa:	f8cd b010 	str.w	fp, [sp, #16]
 80048ae:	f8cd b020 	str.w	fp, [sp, #32]
 80048b2:	f8cd b018 	str.w	fp, [sp, #24]
 80048b6:	2322      	movs	r3, #34	; 0x22
 80048b8:	f04f 0800 	mov.w	r8, #0
 80048bc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80049c0 <_strtod_l+0x588>
 80048c0:	f8ca 3000 	str.w	r3, [sl]
 80048c4:	9b08      	ldr	r3, [sp, #32]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f43f adf7 	beq.w	80044ba <_strtod_l+0x82>
 80048cc:	4650      	mov	r0, sl
 80048ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80048d0:	f001 fe98 	bl	8006604 <_Bfree>
 80048d4:	4650      	mov	r0, sl
 80048d6:	9906      	ldr	r1, [sp, #24]
 80048d8:	f001 fe94 	bl	8006604 <_Bfree>
 80048dc:	4650      	mov	r0, sl
 80048de:	9904      	ldr	r1, [sp, #16]
 80048e0:	f001 fe90 	bl	8006604 <_Bfree>
 80048e4:	4650      	mov	r0, sl
 80048e6:	9908      	ldr	r1, [sp, #32]
 80048e8:	f001 fe8c 	bl	8006604 <_Bfree>
 80048ec:	4659      	mov	r1, fp
 80048ee:	4650      	mov	r0, sl
 80048f0:	f001 fe88 	bl	8006604 <_Bfree>
 80048f4:	e5e1      	b.n	80044ba <_strtod_l+0x82>
 80048f6:	4b35      	ldr	r3, [pc, #212]	; (80049cc <_strtod_l+0x594>)
 80048f8:	4640      	mov	r0, r8
 80048fa:	9305      	str	r3, [sp, #20]
 80048fc:	2300      	movs	r3, #0
 80048fe:	4649      	mov	r1, r9
 8004900:	461f      	mov	r7, r3
 8004902:	1136      	asrs	r6, r6, #4
 8004904:	2e01      	cmp	r6, #1
 8004906:	dc21      	bgt.n	800494c <_strtod_l+0x514>
 8004908:	b10b      	cbz	r3, 800490e <_strtod_l+0x4d6>
 800490a:	4680      	mov	r8, r0
 800490c:	4689      	mov	r9, r1
 800490e:	4b2f      	ldr	r3, [pc, #188]	; (80049cc <_strtod_l+0x594>)
 8004910:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004914:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004918:	4642      	mov	r2, r8
 800491a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800491e:	464b      	mov	r3, r9
 8004920:	f7fb fe46 	bl	80005b0 <__aeabi_dmul>
 8004924:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <_strtod_l+0x588>)
 8004926:	460a      	mov	r2, r1
 8004928:	400b      	ands	r3, r1
 800492a:	4929      	ldr	r1, [pc, #164]	; (80049d0 <_strtod_l+0x598>)
 800492c:	4680      	mov	r8, r0
 800492e:	428b      	cmp	r3, r1
 8004930:	d8b9      	bhi.n	80048a6 <_strtod_l+0x46e>
 8004932:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004936:	428b      	cmp	r3, r1
 8004938:	bf86      	itte	hi
 800493a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800493e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80049d4 <_strtod_l+0x59c>
 8004942:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004946:	2300      	movs	r3, #0
 8004948:	9305      	str	r3, [sp, #20]
 800494a:	e07f      	b.n	8004a4c <_strtod_l+0x614>
 800494c:	07f2      	lsls	r2, r6, #31
 800494e:	d505      	bpl.n	800495c <_strtod_l+0x524>
 8004950:	9b05      	ldr	r3, [sp, #20]
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f7fb fe2b 	bl	80005b0 <__aeabi_dmul>
 800495a:	2301      	movs	r3, #1
 800495c:	9a05      	ldr	r2, [sp, #20]
 800495e:	3701      	adds	r7, #1
 8004960:	3208      	adds	r2, #8
 8004962:	1076      	asrs	r6, r6, #1
 8004964:	9205      	str	r2, [sp, #20]
 8004966:	e7cd      	b.n	8004904 <_strtod_l+0x4cc>
 8004968:	d0ed      	beq.n	8004946 <_strtod_l+0x50e>
 800496a:	4276      	negs	r6, r6
 800496c:	f016 020f 	ands.w	r2, r6, #15
 8004970:	d00a      	beq.n	8004988 <_strtod_l+0x550>
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <_strtod_l+0x590>)
 8004974:	4640      	mov	r0, r8
 8004976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800497a:	4649      	mov	r1, r9
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	f7fb ff40 	bl	8000804 <__aeabi_ddiv>
 8004984:	4680      	mov	r8, r0
 8004986:	4689      	mov	r9, r1
 8004988:	1136      	asrs	r6, r6, #4
 800498a:	d0dc      	beq.n	8004946 <_strtod_l+0x50e>
 800498c:	2e1f      	cmp	r6, #31
 800498e:	dd23      	ble.n	80049d8 <_strtod_l+0x5a0>
 8004990:	f04f 0b00 	mov.w	fp, #0
 8004994:	f8cd b010 	str.w	fp, [sp, #16]
 8004998:	f8cd b020 	str.w	fp, [sp, #32]
 800499c:	f8cd b018 	str.w	fp, [sp, #24]
 80049a0:	2322      	movs	r3, #34	; 0x22
 80049a2:	f04f 0800 	mov.w	r8, #0
 80049a6:	f04f 0900 	mov.w	r9, #0
 80049aa:	f8ca 3000 	str.w	r3, [sl]
 80049ae:	e789      	b.n	80048c4 <_strtod_l+0x48c>
 80049b0:	080100fd 	.word	0x080100fd
 80049b4:	08010140 	.word	0x08010140
 80049b8:	080100f5 	.word	0x080100f5
 80049bc:	08010284 	.word	0x08010284
 80049c0:	7ff00000 	.word	0x7ff00000
 80049c4:	08010530 	.word	0x08010530
 80049c8:	08010410 	.word	0x08010410
 80049cc:	080103e8 	.word	0x080103e8
 80049d0:	7ca00000 	.word	0x7ca00000
 80049d4:	7fefffff 	.word	0x7fefffff
 80049d8:	f016 0310 	ands.w	r3, r6, #16
 80049dc:	bf18      	it	ne
 80049de:	236a      	movne	r3, #106	; 0x6a
 80049e0:	4640      	mov	r0, r8
 80049e2:	9305      	str	r3, [sp, #20]
 80049e4:	4649      	mov	r1, r9
 80049e6:	2300      	movs	r3, #0
 80049e8:	4fb0      	ldr	r7, [pc, #704]	; (8004cac <_strtod_l+0x874>)
 80049ea:	07f2      	lsls	r2, r6, #31
 80049ec:	d504      	bpl.n	80049f8 <_strtod_l+0x5c0>
 80049ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f2:	f7fb fddd 	bl	80005b0 <__aeabi_dmul>
 80049f6:	2301      	movs	r3, #1
 80049f8:	1076      	asrs	r6, r6, #1
 80049fa:	f107 0708 	add.w	r7, r7, #8
 80049fe:	d1f4      	bne.n	80049ea <_strtod_l+0x5b2>
 8004a00:	b10b      	cbz	r3, 8004a06 <_strtod_l+0x5ce>
 8004a02:	4680      	mov	r8, r0
 8004a04:	4689      	mov	r9, r1
 8004a06:	9b05      	ldr	r3, [sp, #20]
 8004a08:	b1c3      	cbz	r3, 8004a3c <_strtod_l+0x604>
 8004a0a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004a0e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	4649      	mov	r1, r9
 8004a16:	dd11      	ble.n	8004a3c <_strtod_l+0x604>
 8004a18:	2b1f      	cmp	r3, #31
 8004a1a:	f340 8127 	ble.w	8004c6c <_strtod_l+0x834>
 8004a1e:	2b34      	cmp	r3, #52	; 0x34
 8004a20:	bfd8      	it	le
 8004a22:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004a26:	f04f 0800 	mov.w	r8, #0
 8004a2a:	bfcf      	iteee	gt
 8004a2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004a30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004a34:	fa03 f202 	lslle.w	r2, r3, r2
 8004a38:	ea02 0901 	andle.w	r9, r2, r1
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2300      	movs	r3, #0
 8004a40:	4640      	mov	r0, r8
 8004a42:	4649      	mov	r1, r9
 8004a44:	f7fc f81c 	bl	8000a80 <__aeabi_dcmpeq>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d1a1      	bne.n	8004990 <_strtod_l+0x558>
 8004a4c:	9b06      	ldr	r3, [sp, #24]
 8004a4e:	465a      	mov	r2, fp
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	4650      	mov	r0, sl
 8004a54:	4623      	mov	r3, r4
 8004a56:	9908      	ldr	r1, [sp, #32]
 8004a58:	f001 fe3c 	bl	80066d4 <__s2b>
 8004a5c:	9008      	str	r0, [sp, #32]
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	f43f af21 	beq.w	80048a6 <_strtod_l+0x46e>
 8004a64:	9b04      	ldr	r3, [sp, #16]
 8004a66:	f04f 0b00 	mov.w	fp, #0
 8004a6a:	1b5d      	subs	r5, r3, r5
 8004a6c:	9b07      	ldr	r3, [sp, #28]
 8004a6e:	f8cd b010 	str.w	fp, [sp, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bfb4      	ite	lt
 8004a76:	462b      	movlt	r3, r5
 8004a78:	2300      	movge	r3, #0
 8004a7a:	930e      	str	r3, [sp, #56]	; 0x38
 8004a7c:	9b07      	ldr	r3, [sp, #28]
 8004a7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004a82:	9314      	str	r3, [sp, #80]	; 0x50
 8004a84:	9b08      	ldr	r3, [sp, #32]
 8004a86:	4650      	mov	r0, sl
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	f001 fd7b 	bl	8006584 <_Balloc>
 8004a8e:	9006      	str	r0, [sp, #24]
 8004a90:	2800      	cmp	r0, #0
 8004a92:	f43f af10 	beq.w	80048b6 <_strtod_l+0x47e>
 8004a96:	9b08      	ldr	r3, [sp, #32]
 8004a98:	300c      	adds	r0, #12
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	f103 010c 	add.w	r1, r3, #12
 8004aa0:	3202      	adds	r2, #2
 8004aa2:	0092      	lsls	r2, r2, #2
 8004aa4:	f001 fd60 	bl	8006568 <memcpy>
 8004aa8:	ab1c      	add	r3, sp, #112	; 0x70
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	ab1b      	add	r3, sp, #108	; 0x6c
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	4650      	mov	r0, sl
 8004ab6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004aba:	f002 f94d 	bl	8006d58 <__d2b>
 8004abe:	901a      	str	r0, [sp, #104]	; 0x68
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	f43f aef8 	beq.w	80048b6 <_strtod_l+0x47e>
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4650      	mov	r0, sl
 8004aca:	f001 fe9b 	bl	8006804 <__i2b>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	9004      	str	r0, [sp, #16]
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	f43f aeef 	beq.w	80048b6 <_strtod_l+0x47e>
 8004ad8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004ada:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	bfab      	itete	ge
 8004ae0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004ae2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004ae4:	18ee      	addge	r6, r5, r3
 8004ae6:	1b5c      	sublt	r4, r3, r5
 8004ae8:	9b05      	ldr	r3, [sp, #20]
 8004aea:	bfa8      	it	ge
 8004aec:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004aee:	eba5 0503 	sub.w	r5, r5, r3
 8004af2:	4415      	add	r5, r2
 8004af4:	4b6e      	ldr	r3, [pc, #440]	; (8004cb0 <_strtod_l+0x878>)
 8004af6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8004afa:	bfb8      	it	lt
 8004afc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004afe:	429d      	cmp	r5, r3
 8004b00:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004b04:	f280 80c4 	bge.w	8004c90 <_strtod_l+0x858>
 8004b08:	1b5b      	subs	r3, r3, r5
 8004b0a:	2b1f      	cmp	r3, #31
 8004b0c:	f04f 0701 	mov.w	r7, #1
 8004b10:	eba2 0203 	sub.w	r2, r2, r3
 8004b14:	f300 80b1 	bgt.w	8004c7a <_strtod_l+0x842>
 8004b18:	2500      	movs	r5, #0
 8004b1a:	fa07 f303 	lsl.w	r3, r7, r3
 8004b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b20:	18b7      	adds	r7, r6, r2
 8004b22:	9b05      	ldr	r3, [sp, #20]
 8004b24:	42be      	cmp	r6, r7
 8004b26:	4414      	add	r4, r2
 8004b28:	441c      	add	r4, r3
 8004b2a:	4633      	mov	r3, r6
 8004b2c:	bfa8      	it	ge
 8004b2e:	463b      	movge	r3, r7
 8004b30:	42a3      	cmp	r3, r4
 8004b32:	bfa8      	it	ge
 8004b34:	4623      	movge	r3, r4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bfc2      	ittt	gt
 8004b3a:	1aff      	subgt	r7, r7, r3
 8004b3c:	1ae4      	subgt	r4, r4, r3
 8004b3e:	1af6      	subgt	r6, r6, r3
 8004b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	dd17      	ble.n	8004b76 <_strtod_l+0x73e>
 8004b46:	461a      	mov	r2, r3
 8004b48:	4650      	mov	r0, sl
 8004b4a:	9904      	ldr	r1, [sp, #16]
 8004b4c:	f001 ff18 	bl	8006980 <__pow5mult>
 8004b50:	9004      	str	r0, [sp, #16]
 8004b52:	2800      	cmp	r0, #0
 8004b54:	f43f aeaf 	beq.w	80048b6 <_strtod_l+0x47e>
 8004b58:	4601      	mov	r1, r0
 8004b5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004b5c:	4650      	mov	r0, sl
 8004b5e:	f001 fe67 	bl	8006830 <__multiply>
 8004b62:	9009      	str	r0, [sp, #36]	; 0x24
 8004b64:	2800      	cmp	r0, #0
 8004b66:	f43f aea6 	beq.w	80048b6 <_strtod_l+0x47e>
 8004b6a:	4650      	mov	r0, sl
 8004b6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004b6e:	f001 fd49 	bl	8006604 <_Bfree>
 8004b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b74:	931a      	str	r3, [sp, #104]	; 0x68
 8004b76:	2f00      	cmp	r7, #0
 8004b78:	f300 808e 	bgt.w	8004c98 <_strtod_l+0x860>
 8004b7c:	9b07      	ldr	r3, [sp, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	dd08      	ble.n	8004b94 <_strtod_l+0x75c>
 8004b82:	4650      	mov	r0, sl
 8004b84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b86:	9906      	ldr	r1, [sp, #24]
 8004b88:	f001 fefa 	bl	8006980 <__pow5mult>
 8004b8c:	9006      	str	r0, [sp, #24]
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	f43f ae91 	beq.w	80048b6 <_strtod_l+0x47e>
 8004b94:	2c00      	cmp	r4, #0
 8004b96:	dd08      	ble.n	8004baa <_strtod_l+0x772>
 8004b98:	4622      	mov	r2, r4
 8004b9a:	4650      	mov	r0, sl
 8004b9c:	9906      	ldr	r1, [sp, #24]
 8004b9e:	f001 ff49 	bl	8006a34 <__lshift>
 8004ba2:	9006      	str	r0, [sp, #24]
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	f43f ae86 	beq.w	80048b6 <_strtod_l+0x47e>
 8004baa:	2e00      	cmp	r6, #0
 8004bac:	dd08      	ble.n	8004bc0 <_strtod_l+0x788>
 8004bae:	4632      	mov	r2, r6
 8004bb0:	4650      	mov	r0, sl
 8004bb2:	9904      	ldr	r1, [sp, #16]
 8004bb4:	f001 ff3e 	bl	8006a34 <__lshift>
 8004bb8:	9004      	str	r0, [sp, #16]
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	f43f ae7b 	beq.w	80048b6 <_strtod_l+0x47e>
 8004bc0:	4650      	mov	r0, sl
 8004bc2:	9a06      	ldr	r2, [sp, #24]
 8004bc4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bc6:	f001 ffc1 	bl	8006b4c <__mdiff>
 8004bca:	4683      	mov	fp, r0
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	f43f ae72 	beq.w	80048b6 <_strtod_l+0x47e>
 8004bd2:	2400      	movs	r4, #0
 8004bd4:	68c3      	ldr	r3, [r0, #12]
 8004bd6:	9904      	ldr	r1, [sp, #16]
 8004bd8:	60c4      	str	r4, [r0, #12]
 8004bda:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bdc:	f001 ff9a 	bl	8006b14 <__mcmp>
 8004be0:	42a0      	cmp	r0, r4
 8004be2:	da6b      	bge.n	8004cbc <_strtod_l+0x884>
 8004be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004be6:	ea53 0308 	orrs.w	r3, r3, r8
 8004bea:	f040 8091 	bne.w	8004d10 <_strtod_l+0x8d8>
 8004bee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 808c 	bne.w	8004d10 <_strtod_l+0x8d8>
 8004bf8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bfc:	0d1b      	lsrs	r3, r3, #20
 8004bfe:	051b      	lsls	r3, r3, #20
 8004c00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004c04:	f240 8084 	bls.w	8004d10 <_strtod_l+0x8d8>
 8004c08:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004c0c:	b91b      	cbnz	r3, 8004c16 <_strtod_l+0x7de>
 8004c0e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	dd7c      	ble.n	8004d10 <_strtod_l+0x8d8>
 8004c16:	4659      	mov	r1, fp
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	f001 ff0a 	bl	8006a34 <__lshift>
 8004c20:	9904      	ldr	r1, [sp, #16]
 8004c22:	4683      	mov	fp, r0
 8004c24:	f001 ff76 	bl	8006b14 <__mcmp>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	dd71      	ble.n	8004d10 <_strtod_l+0x8d8>
 8004c2c:	9905      	ldr	r1, [sp, #20]
 8004c2e:	464b      	mov	r3, r9
 8004c30:	4a20      	ldr	r2, [pc, #128]	; (8004cb4 <_strtod_l+0x87c>)
 8004c32:	2900      	cmp	r1, #0
 8004c34:	f000 808c 	beq.w	8004d50 <_strtod_l+0x918>
 8004c38:	ea02 0109 	and.w	r1, r2, r9
 8004c3c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004c40:	f300 8086 	bgt.w	8004d50 <_strtod_l+0x918>
 8004c44:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004c48:	f77f aeaa 	ble.w	80049a0 <_strtod_l+0x568>
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	4649      	mov	r1, r9
 8004c50:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <_strtod_l+0x880>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	f7fb fcac 	bl	80005b0 <__aeabi_dmul>
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4303      	orrs	r3, r0
 8004c5c:	bf08      	it	eq
 8004c5e:	2322      	moveq	r3, #34	; 0x22
 8004c60:	4680      	mov	r8, r0
 8004c62:	4689      	mov	r9, r1
 8004c64:	bf08      	it	eq
 8004c66:	f8ca 3000 	streq.w	r3, [sl]
 8004c6a:	e62f      	b.n	80048cc <_strtod_l+0x494>
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	ea03 0808 	and.w	r8, r3, r8
 8004c78:	e6e0      	b.n	8004a3c <_strtod_l+0x604>
 8004c7a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004c7e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004c82:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004c86:	35e2      	adds	r5, #226	; 0xe2
 8004c88:	fa07 f505 	lsl.w	r5, r7, r5
 8004c8c:	970f      	str	r7, [sp, #60]	; 0x3c
 8004c8e:	e747      	b.n	8004b20 <_strtod_l+0x6e8>
 8004c90:	2301      	movs	r3, #1
 8004c92:	2500      	movs	r5, #0
 8004c94:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c96:	e743      	b.n	8004b20 <_strtod_l+0x6e8>
 8004c98:	463a      	mov	r2, r7
 8004c9a:	4650      	mov	r0, sl
 8004c9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004c9e:	f001 fec9 	bl	8006a34 <__lshift>
 8004ca2:	901a      	str	r0, [sp, #104]	; 0x68
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f47f af69 	bne.w	8004b7c <_strtod_l+0x744>
 8004caa:	e604      	b.n	80048b6 <_strtod_l+0x47e>
 8004cac:	08010158 	.word	0x08010158
 8004cb0:	fffffc02 	.word	0xfffffc02
 8004cb4:	7ff00000 	.word	0x7ff00000
 8004cb8:	39500000 	.word	0x39500000
 8004cbc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004cc0:	d165      	bne.n	8004d8e <_strtod_l+0x956>
 8004cc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cc8:	b35a      	cbz	r2, 8004d22 <_strtod_l+0x8ea>
 8004cca:	4a99      	ldr	r2, [pc, #612]	; (8004f30 <_strtod_l+0xaf8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d12b      	bne.n	8004d28 <_strtod_l+0x8f0>
 8004cd0:	9b05      	ldr	r3, [sp, #20]
 8004cd2:	4641      	mov	r1, r8
 8004cd4:	b303      	cbz	r3, 8004d18 <_strtod_l+0x8e0>
 8004cd6:	464a      	mov	r2, r9
 8004cd8:	4b96      	ldr	r3, [pc, #600]	; (8004f34 <_strtod_l+0xafc>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ce4:	d81b      	bhi.n	8004d1e <_strtod_l+0x8e6>
 8004ce6:	0d1b      	lsrs	r3, r3, #20
 8004ce8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	4299      	cmp	r1, r3
 8004cf2:	d119      	bne.n	8004d28 <_strtod_l+0x8f0>
 8004cf4:	4b90      	ldr	r3, [pc, #576]	; (8004f38 <_strtod_l+0xb00>)
 8004cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d102      	bne.n	8004d02 <_strtod_l+0x8ca>
 8004cfc:	3101      	adds	r1, #1
 8004cfe:	f43f adda 	beq.w	80048b6 <_strtod_l+0x47e>
 8004d02:	f04f 0800 	mov.w	r8, #0
 8004d06:	4b8b      	ldr	r3, [pc, #556]	; (8004f34 <_strtod_l+0xafc>)
 8004d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004d10:	9b05      	ldr	r3, [sp, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d19a      	bne.n	8004c4c <_strtod_l+0x814>
 8004d16:	e5d9      	b.n	80048cc <_strtod_l+0x494>
 8004d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d1c:	e7e8      	b.n	8004cf0 <_strtod_l+0x8b8>
 8004d1e:	4613      	mov	r3, r2
 8004d20:	e7e6      	b.n	8004cf0 <_strtod_l+0x8b8>
 8004d22:	ea53 0308 	orrs.w	r3, r3, r8
 8004d26:	d081      	beq.n	8004c2c <_strtod_l+0x7f4>
 8004d28:	b1e5      	cbz	r5, 8004d64 <_strtod_l+0x92c>
 8004d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d2c:	421d      	tst	r5, r3
 8004d2e:	d0ef      	beq.n	8004d10 <_strtod_l+0x8d8>
 8004d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d32:	4640      	mov	r0, r8
 8004d34:	4649      	mov	r1, r9
 8004d36:	9a05      	ldr	r2, [sp, #20]
 8004d38:	b1c3      	cbz	r3, 8004d6c <_strtod_l+0x934>
 8004d3a:	f7ff fb59 	bl	80043f0 <sulp>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d46:	f7fb fa7d 	bl	8000244 <__adddf3>
 8004d4a:	4680      	mov	r8, r0
 8004d4c:	4689      	mov	r9, r1
 8004d4e:	e7df      	b.n	8004d10 <_strtod_l+0x8d8>
 8004d50:	4013      	ands	r3, r2
 8004d52:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004d56:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004d5a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004d5e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004d62:	e7d5      	b.n	8004d10 <_strtod_l+0x8d8>
 8004d64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d66:	ea13 0f08 	tst.w	r3, r8
 8004d6a:	e7e0      	b.n	8004d2e <_strtod_l+0x8f6>
 8004d6c:	f7ff fb40 	bl	80043f0 <sulp>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d78:	f7fb fa62 	bl	8000240 <__aeabi_dsub>
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2300      	movs	r3, #0
 8004d80:	4680      	mov	r8, r0
 8004d82:	4689      	mov	r9, r1
 8004d84:	f7fb fe7c 	bl	8000a80 <__aeabi_dcmpeq>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d0c1      	beq.n	8004d10 <_strtod_l+0x8d8>
 8004d8c:	e608      	b.n	80049a0 <_strtod_l+0x568>
 8004d8e:	4658      	mov	r0, fp
 8004d90:	9904      	ldr	r1, [sp, #16]
 8004d92:	f002 f83d 	bl	8006e10 <__ratio>
 8004d96:	2200      	movs	r2, #0
 8004d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	460f      	mov	r7, r1
 8004da0:	f7fb fe82 	bl	8000aa8 <__aeabi_dcmple>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d070      	beq.n	8004e8a <_strtod_l+0xa52>
 8004da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d042      	beq.n	8004e34 <_strtod_l+0x9fc>
 8004dae:	2600      	movs	r6, #0
 8004db0:	4f62      	ldr	r7, [pc, #392]	; (8004f3c <_strtod_l+0xb04>)
 8004db2:	4d62      	ldr	r5, [pc, #392]	; (8004f3c <_strtod_l+0xb04>)
 8004db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dba:	0d1b      	lsrs	r3, r3, #20
 8004dbc:	051b      	lsls	r3, r3, #20
 8004dbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dc2:	4b5f      	ldr	r3, [pc, #380]	; (8004f40 <_strtod_l+0xb08>)
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	f040 80c3 	bne.w	8004f50 <_strtod_l+0xb18>
 8004dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dcc:	4640      	mov	r0, r8
 8004dce:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	f001 ff46 	bl	8006c64 <__ulp>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4630      	mov	r0, r6
 8004dde:	4639      	mov	r1, r7
 8004de0:	f7fb fbe6 	bl	80005b0 <__aeabi_dmul>
 8004de4:	4642      	mov	r2, r8
 8004de6:	464b      	mov	r3, r9
 8004de8:	f7fb fa2c 	bl	8000244 <__adddf3>
 8004dec:	460b      	mov	r3, r1
 8004dee:	4951      	ldr	r1, [pc, #324]	; (8004f34 <_strtod_l+0xafc>)
 8004df0:	4a54      	ldr	r2, [pc, #336]	; (8004f44 <_strtod_l+0xb0c>)
 8004df2:	4019      	ands	r1, r3
 8004df4:	4291      	cmp	r1, r2
 8004df6:	4680      	mov	r8, r0
 8004df8:	d95d      	bls.n	8004eb6 <_strtod_l+0xa7e>
 8004dfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004dfc:	4b4e      	ldr	r3, [pc, #312]	; (8004f38 <_strtod_l+0xb00>)
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d103      	bne.n	8004e0a <_strtod_l+0x9d2>
 8004e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e04:	3301      	adds	r3, #1
 8004e06:	f43f ad56 	beq.w	80048b6 <_strtod_l+0x47e>
 8004e0a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004e0e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004f38 <_strtod_l+0xb00>
 8004e12:	4650      	mov	r0, sl
 8004e14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e16:	f001 fbf5 	bl	8006604 <_Bfree>
 8004e1a:	4650      	mov	r0, sl
 8004e1c:	9906      	ldr	r1, [sp, #24]
 8004e1e:	f001 fbf1 	bl	8006604 <_Bfree>
 8004e22:	4650      	mov	r0, sl
 8004e24:	9904      	ldr	r1, [sp, #16]
 8004e26:	f001 fbed 	bl	8006604 <_Bfree>
 8004e2a:	4659      	mov	r1, fp
 8004e2c:	4650      	mov	r0, sl
 8004e2e:	f001 fbe9 	bl	8006604 <_Bfree>
 8004e32:	e627      	b.n	8004a84 <_strtod_l+0x64c>
 8004e34:	f1b8 0f00 	cmp.w	r8, #0
 8004e38:	d119      	bne.n	8004e6e <_strtod_l+0xa36>
 8004e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e40:	b9e3      	cbnz	r3, 8004e7c <_strtod_l+0xa44>
 8004e42:	2200      	movs	r2, #0
 8004e44:	4630      	mov	r0, r6
 8004e46:	4639      	mov	r1, r7
 8004e48:	4b3c      	ldr	r3, [pc, #240]	; (8004f3c <_strtod_l+0xb04>)
 8004e4a:	f7fb fe23 	bl	8000a94 <__aeabi_dcmplt>
 8004e4e:	b9c8      	cbnz	r0, 8004e84 <_strtod_l+0xa4c>
 8004e50:	2200      	movs	r2, #0
 8004e52:	4630      	mov	r0, r6
 8004e54:	4639      	mov	r1, r7
 8004e56:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <_strtod_l+0xb10>)
 8004e58:	f7fb fbaa 	bl	80005b0 <__aeabi_dmul>
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	460d      	mov	r5, r1
 8004e60:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004e64:	9416      	str	r4, [sp, #88]	; 0x58
 8004e66:	9317      	str	r3, [sp, #92]	; 0x5c
 8004e68:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004e6c:	e7a2      	b.n	8004db4 <_strtod_l+0x97c>
 8004e6e:	f1b8 0f01 	cmp.w	r8, #1
 8004e72:	d103      	bne.n	8004e7c <_strtod_l+0xa44>
 8004e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f43f ad92 	beq.w	80049a0 <_strtod_l+0x568>
 8004e7c:	2600      	movs	r6, #0
 8004e7e:	2400      	movs	r4, #0
 8004e80:	4f32      	ldr	r7, [pc, #200]	; (8004f4c <_strtod_l+0xb14>)
 8004e82:	e796      	b.n	8004db2 <_strtod_l+0x97a>
 8004e84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004e86:	4d30      	ldr	r5, [pc, #192]	; (8004f48 <_strtod_l+0xb10>)
 8004e88:	e7ea      	b.n	8004e60 <_strtod_l+0xa28>
 8004e8a:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <_strtod_l+0xb10>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	4630      	mov	r0, r6
 8004e90:	4639      	mov	r1, r7
 8004e92:	f7fb fb8d 	bl	80005b0 <__aeabi_dmul>
 8004e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e98:	4604      	mov	r4, r0
 8004e9a:	460d      	mov	r5, r1
 8004e9c:	b933      	cbnz	r3, 8004eac <_strtod_l+0xa74>
 8004e9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ea2:	9010      	str	r0, [sp, #64]	; 0x40
 8004ea4:	9311      	str	r3, [sp, #68]	; 0x44
 8004ea6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004eaa:	e783      	b.n	8004db4 <_strtod_l+0x97c>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004eb4:	e7f7      	b.n	8004ea6 <_strtod_l+0xa6e>
 8004eb6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004eba:	9b05      	ldr	r3, [sp, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1a8      	bne.n	8004e12 <_strtod_l+0x9da>
 8004ec0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ec6:	0d1b      	lsrs	r3, r3, #20
 8004ec8:	051b      	lsls	r3, r3, #20
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d1a1      	bne.n	8004e12 <_strtod_l+0x9da>
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	f7fb ffe9 	bl	8000ea8 <__aeabi_d2lz>
 8004ed6:	f7fb fb3d 	bl	8000554 <__aeabi_l2d>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4620      	mov	r0, r4
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	f7fb f9ad 	bl	8000240 <__aeabi_dsub>
 8004ee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004eec:	ea43 0308 	orr.w	r3, r3, r8
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	460d      	mov	r5, r1
 8004ef6:	d066      	beq.n	8004fc6 <_strtod_l+0xb8e>
 8004ef8:	a309      	add	r3, pc, #36	; (adr r3, 8004f20 <_strtod_l+0xae8>)
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f7fb fdc9 	bl	8000a94 <__aeabi_dcmplt>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	f47f ace2 	bne.w	80048cc <_strtod_l+0x494>
 8004f08:	a307      	add	r3, pc, #28	; (adr r3, 8004f28 <_strtod_l+0xaf0>)
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	4620      	mov	r0, r4
 8004f10:	4629      	mov	r1, r5
 8004f12:	f7fb fddd 	bl	8000ad0 <__aeabi_dcmpgt>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	f43f af7b 	beq.w	8004e12 <_strtod_l+0x9da>
 8004f1c:	e4d6      	b.n	80048cc <_strtod_l+0x494>
 8004f1e:	bf00      	nop
 8004f20:	94a03595 	.word	0x94a03595
 8004f24:	3fdfffff 	.word	0x3fdfffff
 8004f28:	35afe535 	.word	0x35afe535
 8004f2c:	3fe00000 	.word	0x3fe00000
 8004f30:	000fffff 	.word	0x000fffff
 8004f34:	7ff00000 	.word	0x7ff00000
 8004f38:	7fefffff 	.word	0x7fefffff
 8004f3c:	3ff00000 	.word	0x3ff00000
 8004f40:	7fe00000 	.word	0x7fe00000
 8004f44:	7c9fffff 	.word	0x7c9fffff
 8004f48:	3fe00000 	.word	0x3fe00000
 8004f4c:	bff00000 	.word	0xbff00000
 8004f50:	9b05      	ldr	r3, [sp, #20]
 8004f52:	b313      	cbz	r3, 8004f9a <_strtod_l+0xb62>
 8004f54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004f5a:	d81e      	bhi.n	8004f9a <_strtod_l+0xb62>
 8004f5c:	a326      	add	r3, pc, #152	; (adr r3, 8004ff8 <_strtod_l+0xbc0>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	4620      	mov	r0, r4
 8004f64:	4629      	mov	r1, r5
 8004f66:	f7fb fd9f 	bl	8000aa8 <__aeabi_dcmple>
 8004f6a:	b190      	cbz	r0, 8004f92 <_strtod_l+0xb5a>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f7fb fdf6 	bl	8000b60 <__aeabi_d2uiz>
 8004f74:	2801      	cmp	r0, #1
 8004f76:	bf38      	it	cc
 8004f78:	2001      	movcc	r0, #1
 8004f7a:	f7fb fa9f 	bl	80004bc <__aeabi_ui2d>
 8004f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f80:	4604      	mov	r4, r0
 8004f82:	460d      	mov	r5, r1
 8004f84:	b9d3      	cbnz	r3, 8004fbc <_strtod_l+0xb84>
 8004f86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f8a:	9012      	str	r0, [sp, #72]	; 0x48
 8004f8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f8e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004f92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f94:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004f98:	1a9f      	subs	r7, r3, r2
 8004f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f9e:	f001 fe61 	bl	8006c64 <__ulp>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	4639      	mov	r1, r7
 8004faa:	f7fb fb01 	bl	80005b0 <__aeabi_dmul>
 8004fae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004fb2:	f7fb f947 	bl	8000244 <__adddf3>
 8004fb6:	4680      	mov	r8, r0
 8004fb8:	4689      	mov	r9, r1
 8004fba:	e77e      	b.n	8004eba <_strtod_l+0xa82>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004fc4:	e7e3      	b.n	8004f8e <_strtod_l+0xb56>
 8004fc6:	a30e      	add	r3, pc, #56	; (adr r3, 8005000 <_strtod_l+0xbc8>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb fd62 	bl	8000a94 <__aeabi_dcmplt>
 8004fd0:	e7a1      	b.n	8004f16 <_strtod_l+0xade>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	930a      	str	r3, [sp, #40]	; 0x28
 8004fd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	f7ff ba71 	b.w	80044c2 <_strtod_l+0x8a>
 8004fe0:	2a65      	cmp	r2, #101	; 0x65
 8004fe2:	f43f ab63 	beq.w	80046ac <_strtod_l+0x274>
 8004fe6:	2a45      	cmp	r2, #69	; 0x45
 8004fe8:	f43f ab60 	beq.w	80046ac <_strtod_l+0x274>
 8004fec:	2301      	movs	r3, #1
 8004fee:	f7ff bb95 	b.w	800471c <_strtod_l+0x2e4>
 8004ff2:	bf00      	nop
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	ffc00000 	.word	0xffc00000
 8004ffc:	41dfffff 	.word	0x41dfffff
 8005000:	94a03595 	.word	0x94a03595
 8005004:	3fcfffff 	.word	0x3fcfffff

08005008 <_strtod_r>:
 8005008:	4b01      	ldr	r3, [pc, #4]	; (8005010 <_strtod_r+0x8>)
 800500a:	f7ff ba15 	b.w	8004438 <_strtod_l>
 800500e:	bf00      	nop
 8005010:	2000009c 	.word	0x2000009c

08005014 <_strtol_l.constprop.0>:
 8005014:	2b01      	cmp	r3, #1
 8005016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800501a:	4680      	mov	r8, r0
 800501c:	d001      	beq.n	8005022 <_strtol_l.constprop.0+0xe>
 800501e:	2b24      	cmp	r3, #36	; 0x24
 8005020:	d906      	bls.n	8005030 <_strtol_l.constprop.0+0x1c>
 8005022:	f7fe faed 	bl	8003600 <__errno>
 8005026:	2316      	movs	r3, #22
 8005028:	6003      	str	r3, [r0, #0]
 800502a:	2000      	movs	r0, #0
 800502c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005030:	460d      	mov	r5, r1
 8005032:	4f35      	ldr	r7, [pc, #212]	; (8005108 <_strtol_l.constprop.0+0xf4>)
 8005034:	4628      	mov	r0, r5
 8005036:	f815 4b01 	ldrb.w	r4, [r5], #1
 800503a:	5de6      	ldrb	r6, [r4, r7]
 800503c:	f016 0608 	ands.w	r6, r6, #8
 8005040:	d1f8      	bne.n	8005034 <_strtol_l.constprop.0+0x20>
 8005042:	2c2d      	cmp	r4, #45	; 0x2d
 8005044:	d12f      	bne.n	80050a6 <_strtol_l.constprop.0+0x92>
 8005046:	2601      	movs	r6, #1
 8005048:	782c      	ldrb	r4, [r5, #0]
 800504a:	1c85      	adds	r5, r0, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d057      	beq.n	8005100 <_strtol_l.constprop.0+0xec>
 8005050:	2b10      	cmp	r3, #16
 8005052:	d109      	bne.n	8005068 <_strtol_l.constprop.0+0x54>
 8005054:	2c30      	cmp	r4, #48	; 0x30
 8005056:	d107      	bne.n	8005068 <_strtol_l.constprop.0+0x54>
 8005058:	7828      	ldrb	r0, [r5, #0]
 800505a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800505e:	2858      	cmp	r0, #88	; 0x58
 8005060:	d149      	bne.n	80050f6 <_strtol_l.constprop.0+0xe2>
 8005062:	2310      	movs	r3, #16
 8005064:	786c      	ldrb	r4, [r5, #1]
 8005066:	3502      	adds	r5, #2
 8005068:	2700      	movs	r7, #0
 800506a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800506e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005072:	fbbe f9f3 	udiv	r9, lr, r3
 8005076:	4638      	mov	r0, r7
 8005078:	fb03 ea19 	mls	sl, r3, r9, lr
 800507c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005080:	f1bc 0f09 	cmp.w	ip, #9
 8005084:	d814      	bhi.n	80050b0 <_strtol_l.constprop.0+0x9c>
 8005086:	4664      	mov	r4, ip
 8005088:	42a3      	cmp	r3, r4
 800508a:	dd22      	ble.n	80050d2 <_strtol_l.constprop.0+0xbe>
 800508c:	2f00      	cmp	r7, #0
 800508e:	db1d      	blt.n	80050cc <_strtol_l.constprop.0+0xb8>
 8005090:	4581      	cmp	r9, r0
 8005092:	d31b      	bcc.n	80050cc <_strtol_l.constprop.0+0xb8>
 8005094:	d101      	bne.n	800509a <_strtol_l.constprop.0+0x86>
 8005096:	45a2      	cmp	sl, r4
 8005098:	db18      	blt.n	80050cc <_strtol_l.constprop.0+0xb8>
 800509a:	2701      	movs	r7, #1
 800509c:	fb00 4003 	mla	r0, r0, r3, r4
 80050a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050a4:	e7ea      	b.n	800507c <_strtol_l.constprop.0+0x68>
 80050a6:	2c2b      	cmp	r4, #43	; 0x2b
 80050a8:	bf04      	itt	eq
 80050aa:	782c      	ldrbeq	r4, [r5, #0]
 80050ac:	1c85      	addeq	r5, r0, #2
 80050ae:	e7cd      	b.n	800504c <_strtol_l.constprop.0+0x38>
 80050b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80050b4:	f1bc 0f19 	cmp.w	ip, #25
 80050b8:	d801      	bhi.n	80050be <_strtol_l.constprop.0+0xaa>
 80050ba:	3c37      	subs	r4, #55	; 0x37
 80050bc:	e7e4      	b.n	8005088 <_strtol_l.constprop.0+0x74>
 80050be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80050c2:	f1bc 0f19 	cmp.w	ip, #25
 80050c6:	d804      	bhi.n	80050d2 <_strtol_l.constprop.0+0xbe>
 80050c8:	3c57      	subs	r4, #87	; 0x57
 80050ca:	e7dd      	b.n	8005088 <_strtol_l.constprop.0+0x74>
 80050cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80050d0:	e7e6      	b.n	80050a0 <_strtol_l.constprop.0+0x8c>
 80050d2:	2f00      	cmp	r7, #0
 80050d4:	da07      	bge.n	80050e6 <_strtol_l.constprop.0+0xd2>
 80050d6:	2322      	movs	r3, #34	; 0x22
 80050d8:	4670      	mov	r0, lr
 80050da:	f8c8 3000 	str.w	r3, [r8]
 80050de:	2a00      	cmp	r2, #0
 80050e0:	d0a4      	beq.n	800502c <_strtol_l.constprop.0+0x18>
 80050e2:	1e69      	subs	r1, r5, #1
 80050e4:	e005      	b.n	80050f2 <_strtol_l.constprop.0+0xde>
 80050e6:	b106      	cbz	r6, 80050ea <_strtol_l.constprop.0+0xd6>
 80050e8:	4240      	negs	r0, r0
 80050ea:	2a00      	cmp	r2, #0
 80050ec:	d09e      	beq.n	800502c <_strtol_l.constprop.0+0x18>
 80050ee:	2f00      	cmp	r7, #0
 80050f0:	d1f7      	bne.n	80050e2 <_strtol_l.constprop.0+0xce>
 80050f2:	6011      	str	r1, [r2, #0]
 80050f4:	e79a      	b.n	800502c <_strtol_l.constprop.0+0x18>
 80050f6:	2430      	movs	r4, #48	; 0x30
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1b5      	bne.n	8005068 <_strtol_l.constprop.0+0x54>
 80050fc:	2308      	movs	r3, #8
 80050fe:	e7b3      	b.n	8005068 <_strtol_l.constprop.0+0x54>
 8005100:	2c30      	cmp	r4, #48	; 0x30
 8005102:	d0a9      	beq.n	8005058 <_strtol_l.constprop.0+0x44>
 8005104:	230a      	movs	r3, #10
 8005106:	e7af      	b.n	8005068 <_strtol_l.constprop.0+0x54>
 8005108:	08010181 	.word	0x08010181

0800510c <_strtol_r>:
 800510c:	f7ff bf82 	b.w	8005014 <_strtol_l.constprop.0>

08005110 <_vsiprintf_r>:
 8005110:	b500      	push	{lr}
 8005112:	b09b      	sub	sp, #108	; 0x6c
 8005114:	9100      	str	r1, [sp, #0]
 8005116:	9104      	str	r1, [sp, #16]
 8005118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800511c:	9105      	str	r1, [sp, #20]
 800511e:	9102      	str	r1, [sp, #8]
 8005120:	4905      	ldr	r1, [pc, #20]	; (8005138 <_vsiprintf_r+0x28>)
 8005122:	9103      	str	r1, [sp, #12]
 8005124:	4669      	mov	r1, sp
 8005126:	f002 f831 	bl	800718c <_svfiprintf_r>
 800512a:	2200      	movs	r2, #0
 800512c:	9b00      	ldr	r3, [sp, #0]
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	b01b      	add	sp, #108	; 0x6c
 8005132:	f85d fb04 	ldr.w	pc, [sp], #4
 8005136:	bf00      	nop
 8005138:	ffff0208 	.word	0xffff0208

0800513c <vsiprintf>:
 800513c:	4613      	mov	r3, r2
 800513e:	460a      	mov	r2, r1
 8005140:	4601      	mov	r1, r0
 8005142:	4802      	ldr	r0, [pc, #8]	; (800514c <vsiprintf+0x10>)
 8005144:	6800      	ldr	r0, [r0, #0]
 8005146:	f7ff bfe3 	b.w	8005110 <_vsiprintf_r>
 800514a:	bf00      	nop
 800514c:	20000034 	.word	0x20000034

08005150 <quorem>:
 8005150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005154:	6903      	ldr	r3, [r0, #16]
 8005156:	690c      	ldr	r4, [r1, #16]
 8005158:	4607      	mov	r7, r0
 800515a:	42a3      	cmp	r3, r4
 800515c:	f2c0 8082 	blt.w	8005264 <quorem+0x114>
 8005160:	3c01      	subs	r4, #1
 8005162:	f100 0514 	add.w	r5, r0, #20
 8005166:	f101 0814 	add.w	r8, r1, #20
 800516a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005174:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005178:	3301      	adds	r3, #1
 800517a:	429a      	cmp	r2, r3
 800517c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005180:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005188:	d331      	bcc.n	80051ee <quorem+0x9e>
 800518a:	f04f 0e00 	mov.w	lr, #0
 800518e:	4640      	mov	r0, r8
 8005190:	46ac      	mov	ip, r5
 8005192:	46f2      	mov	sl, lr
 8005194:	f850 2b04 	ldr.w	r2, [r0], #4
 8005198:	b293      	uxth	r3, r2
 800519a:	fb06 e303 	mla	r3, r6, r3, lr
 800519e:	0c12      	lsrs	r2, r2, #16
 80051a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	fb06 e202 	mla	r2, r6, r2, lr
 80051aa:	ebaa 0303 	sub.w	r3, sl, r3
 80051ae:	f8dc a000 	ldr.w	sl, [ip]
 80051b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051b6:	fa1f fa8a 	uxth.w	sl, sl
 80051ba:	4453      	add	r3, sl
 80051bc:	f8dc a000 	ldr.w	sl, [ip]
 80051c0:	b292      	uxth	r2, r2
 80051c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051d0:	4581      	cmp	r9, r0
 80051d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051d6:	f84c 3b04 	str.w	r3, [ip], #4
 80051da:	d2db      	bcs.n	8005194 <quorem+0x44>
 80051dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80051e0:	b92b      	cbnz	r3, 80051ee <quorem+0x9e>
 80051e2:	9b01      	ldr	r3, [sp, #4]
 80051e4:	3b04      	subs	r3, #4
 80051e6:	429d      	cmp	r5, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	d32f      	bcc.n	800524c <quorem+0xfc>
 80051ec:	613c      	str	r4, [r7, #16]
 80051ee:	4638      	mov	r0, r7
 80051f0:	f001 fc90 	bl	8006b14 <__mcmp>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	db25      	blt.n	8005244 <quorem+0xf4>
 80051f8:	4628      	mov	r0, r5
 80051fa:	f04f 0c00 	mov.w	ip, #0
 80051fe:	3601      	adds	r6, #1
 8005200:	f858 1b04 	ldr.w	r1, [r8], #4
 8005204:	f8d0 e000 	ldr.w	lr, [r0]
 8005208:	b28b      	uxth	r3, r1
 800520a:	ebac 0303 	sub.w	r3, ip, r3
 800520e:	fa1f f28e 	uxth.w	r2, lr
 8005212:	4413      	add	r3, r2
 8005214:	0c0a      	lsrs	r2, r1, #16
 8005216:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800521a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800521e:	b29b      	uxth	r3, r3
 8005220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005224:	45c1      	cmp	r9, r8
 8005226:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800522a:	f840 3b04 	str.w	r3, [r0], #4
 800522e:	d2e7      	bcs.n	8005200 <quorem+0xb0>
 8005230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005234:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005238:	b922      	cbnz	r2, 8005244 <quorem+0xf4>
 800523a:	3b04      	subs	r3, #4
 800523c:	429d      	cmp	r5, r3
 800523e:	461a      	mov	r2, r3
 8005240:	d30a      	bcc.n	8005258 <quorem+0x108>
 8005242:	613c      	str	r4, [r7, #16]
 8005244:	4630      	mov	r0, r6
 8005246:	b003      	add	sp, #12
 8005248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	3b04      	subs	r3, #4
 8005250:	2a00      	cmp	r2, #0
 8005252:	d1cb      	bne.n	80051ec <quorem+0x9c>
 8005254:	3c01      	subs	r4, #1
 8005256:	e7c6      	b.n	80051e6 <quorem+0x96>
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	3b04      	subs	r3, #4
 800525c:	2a00      	cmp	r2, #0
 800525e:	d1f0      	bne.n	8005242 <quorem+0xf2>
 8005260:	3c01      	subs	r4, #1
 8005262:	e7eb      	b.n	800523c <quorem+0xec>
 8005264:	2000      	movs	r0, #0
 8005266:	e7ee      	b.n	8005246 <quorem+0xf6>

08005268 <_dtoa_r>:
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	4616      	mov	r6, r2
 800526e:	461f      	mov	r7, r3
 8005270:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005272:	b099      	sub	sp, #100	; 0x64
 8005274:	4605      	mov	r5, r0
 8005276:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800527a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800527e:	b974      	cbnz	r4, 800529e <_dtoa_r+0x36>
 8005280:	2010      	movs	r0, #16
 8005282:	f001 f949 	bl	8006518 <malloc>
 8005286:	4602      	mov	r2, r0
 8005288:	6268      	str	r0, [r5, #36]	; 0x24
 800528a:	b920      	cbnz	r0, 8005296 <_dtoa_r+0x2e>
 800528c:	21ea      	movs	r1, #234	; 0xea
 800528e:	4ba8      	ldr	r3, [pc, #672]	; (8005530 <_dtoa_r+0x2c8>)
 8005290:	48a8      	ldr	r0, [pc, #672]	; (8005534 <_dtoa_r+0x2cc>)
 8005292:	f002 f8b3 	bl	80073fc <__assert_func>
 8005296:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800529a:	6004      	str	r4, [r0, #0]
 800529c:	60c4      	str	r4, [r0, #12]
 800529e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052a0:	6819      	ldr	r1, [r3, #0]
 80052a2:	b151      	cbz	r1, 80052ba <_dtoa_r+0x52>
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	2301      	movs	r3, #1
 80052a8:	4093      	lsls	r3, r2
 80052aa:	604a      	str	r2, [r1, #4]
 80052ac:	608b      	str	r3, [r1, #8]
 80052ae:	4628      	mov	r0, r5
 80052b0:	f001 f9a8 	bl	8006604 <_Bfree>
 80052b4:	2200      	movs	r2, #0
 80052b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	1e3b      	subs	r3, r7, #0
 80052bc:	bfaf      	iteee	ge
 80052be:	2300      	movge	r3, #0
 80052c0:	2201      	movlt	r2, #1
 80052c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80052c6:	9305      	strlt	r3, [sp, #20]
 80052c8:	bfa8      	it	ge
 80052ca:	f8c8 3000 	strge.w	r3, [r8]
 80052ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80052d2:	4b99      	ldr	r3, [pc, #612]	; (8005538 <_dtoa_r+0x2d0>)
 80052d4:	bfb8      	it	lt
 80052d6:	f8c8 2000 	strlt.w	r2, [r8]
 80052da:	ea33 0309 	bics.w	r3, r3, r9
 80052de:	d119      	bne.n	8005314 <_dtoa_r+0xac>
 80052e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80052e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052ec:	4333      	orrs	r3, r6
 80052ee:	f000 857f 	beq.w	8005df0 <_dtoa_r+0xb88>
 80052f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052f4:	b953      	cbnz	r3, 800530c <_dtoa_r+0xa4>
 80052f6:	4b91      	ldr	r3, [pc, #580]	; (800553c <_dtoa_r+0x2d4>)
 80052f8:	e022      	b.n	8005340 <_dtoa_r+0xd8>
 80052fa:	4b91      	ldr	r3, [pc, #580]	; (8005540 <_dtoa_r+0x2d8>)
 80052fc:	9303      	str	r3, [sp, #12]
 80052fe:	3308      	adds	r3, #8
 8005300:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	9803      	ldr	r0, [sp, #12]
 8005306:	b019      	add	sp, #100	; 0x64
 8005308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530c:	4b8b      	ldr	r3, [pc, #556]	; (800553c <_dtoa_r+0x2d4>)
 800530e:	9303      	str	r3, [sp, #12]
 8005310:	3303      	adds	r3, #3
 8005312:	e7f5      	b.n	8005300 <_dtoa_r+0x98>
 8005314:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005318:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800531c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005320:	2200      	movs	r2, #0
 8005322:	2300      	movs	r3, #0
 8005324:	f7fb fbac 	bl	8000a80 <__aeabi_dcmpeq>
 8005328:	4680      	mov	r8, r0
 800532a:	b158      	cbz	r0, 8005344 <_dtoa_r+0xdc>
 800532c:	2301      	movs	r3, #1
 800532e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8558 	beq.w	8005dea <_dtoa_r+0xb82>
 800533a:	4882      	ldr	r0, [pc, #520]	; (8005544 <_dtoa_r+0x2dc>)
 800533c:	6018      	str	r0, [r3, #0]
 800533e:	1e43      	subs	r3, r0, #1
 8005340:	9303      	str	r3, [sp, #12]
 8005342:	e7df      	b.n	8005304 <_dtoa_r+0x9c>
 8005344:	ab16      	add	r3, sp, #88	; 0x58
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	ab17      	add	r3, sp, #92	; 0x5c
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	4628      	mov	r0, r5
 800534e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005352:	f001 fd01 	bl	8006d58 <__d2b>
 8005356:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800535a:	4683      	mov	fp, r0
 800535c:	2c00      	cmp	r4, #0
 800535e:	d07f      	beq.n	8005460 <_dtoa_r+0x1f8>
 8005360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005366:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800536a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800536e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005372:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005376:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800537a:	2200      	movs	r2, #0
 800537c:	4b72      	ldr	r3, [pc, #456]	; (8005548 <_dtoa_r+0x2e0>)
 800537e:	f7fa ff5f 	bl	8000240 <__aeabi_dsub>
 8005382:	a365      	add	r3, pc, #404	; (adr r3, 8005518 <_dtoa_r+0x2b0>)
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f7fb f912 	bl	80005b0 <__aeabi_dmul>
 800538c:	a364      	add	r3, pc, #400	; (adr r3, 8005520 <_dtoa_r+0x2b8>)
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f7fa ff57 	bl	8000244 <__adddf3>
 8005396:	4606      	mov	r6, r0
 8005398:	4620      	mov	r0, r4
 800539a:	460f      	mov	r7, r1
 800539c:	f7fb f89e 	bl	80004dc <__aeabi_i2d>
 80053a0:	a361      	add	r3, pc, #388	; (adr r3, 8005528 <_dtoa_r+0x2c0>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fb f903 	bl	80005b0 <__aeabi_dmul>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4630      	mov	r0, r6
 80053b0:	4639      	mov	r1, r7
 80053b2:	f7fa ff47 	bl	8000244 <__adddf3>
 80053b6:	4606      	mov	r6, r0
 80053b8:	460f      	mov	r7, r1
 80053ba:	f7fb fba9 	bl	8000b10 <__aeabi_d2iz>
 80053be:	2200      	movs	r2, #0
 80053c0:	4682      	mov	sl, r0
 80053c2:	2300      	movs	r3, #0
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fb fb64 	bl	8000a94 <__aeabi_dcmplt>
 80053cc:	b148      	cbz	r0, 80053e2 <_dtoa_r+0x17a>
 80053ce:	4650      	mov	r0, sl
 80053d0:	f7fb f884 	bl	80004dc <__aeabi_i2d>
 80053d4:	4632      	mov	r2, r6
 80053d6:	463b      	mov	r3, r7
 80053d8:	f7fb fb52 	bl	8000a80 <__aeabi_dcmpeq>
 80053dc:	b908      	cbnz	r0, 80053e2 <_dtoa_r+0x17a>
 80053de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80053e2:	f1ba 0f16 	cmp.w	sl, #22
 80053e6:	d858      	bhi.n	800549a <_dtoa_r+0x232>
 80053e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053ec:	4b57      	ldr	r3, [pc, #348]	; (800554c <_dtoa_r+0x2e4>)
 80053ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fb fb4d 	bl	8000a94 <__aeabi_dcmplt>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d04f      	beq.n	800549e <_dtoa_r+0x236>
 80053fe:	2300      	movs	r3, #0
 8005400:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005404:	930f      	str	r3, [sp, #60]	; 0x3c
 8005406:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005408:	1b1c      	subs	r4, r3, r4
 800540a:	1e63      	subs	r3, r4, #1
 800540c:	9309      	str	r3, [sp, #36]	; 0x24
 800540e:	bf49      	itett	mi
 8005410:	f1c4 0301 	rsbmi	r3, r4, #1
 8005414:	2300      	movpl	r3, #0
 8005416:	9306      	strmi	r3, [sp, #24]
 8005418:	2300      	movmi	r3, #0
 800541a:	bf54      	ite	pl
 800541c:	9306      	strpl	r3, [sp, #24]
 800541e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005420:	f1ba 0f00 	cmp.w	sl, #0
 8005424:	db3d      	blt.n	80054a2 <_dtoa_r+0x23a>
 8005426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005428:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800542c:	4453      	add	r3, sl
 800542e:	9309      	str	r3, [sp, #36]	; 0x24
 8005430:	2300      	movs	r3, #0
 8005432:	930a      	str	r3, [sp, #40]	; 0x28
 8005434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005436:	2b09      	cmp	r3, #9
 8005438:	f200 808c 	bhi.w	8005554 <_dtoa_r+0x2ec>
 800543c:	2b05      	cmp	r3, #5
 800543e:	bfc4      	itt	gt
 8005440:	3b04      	subgt	r3, #4
 8005442:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005446:	bfc8      	it	gt
 8005448:	2400      	movgt	r4, #0
 800544a:	f1a3 0302 	sub.w	r3, r3, #2
 800544e:	bfd8      	it	le
 8005450:	2401      	movle	r4, #1
 8005452:	2b03      	cmp	r3, #3
 8005454:	f200 808a 	bhi.w	800556c <_dtoa_r+0x304>
 8005458:	e8df f003 	tbb	[pc, r3]
 800545c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005460:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005464:	441c      	add	r4, r3
 8005466:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800546a:	2b20      	cmp	r3, #32
 800546c:	bfc3      	ittte	gt
 800546e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005472:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005476:	fa09 f303 	lslgt.w	r3, r9, r3
 800547a:	f1c3 0320 	rsble	r3, r3, #32
 800547e:	bfc6      	itte	gt
 8005480:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005484:	4318      	orrgt	r0, r3
 8005486:	fa06 f003 	lslle.w	r0, r6, r3
 800548a:	f7fb f817 	bl	80004bc <__aeabi_ui2d>
 800548e:	2301      	movs	r3, #1
 8005490:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005494:	3c01      	subs	r4, #1
 8005496:	9313      	str	r3, [sp, #76]	; 0x4c
 8005498:	e76f      	b.n	800537a <_dtoa_r+0x112>
 800549a:	2301      	movs	r3, #1
 800549c:	e7b2      	b.n	8005404 <_dtoa_r+0x19c>
 800549e:	900f      	str	r0, [sp, #60]	; 0x3c
 80054a0:	e7b1      	b.n	8005406 <_dtoa_r+0x19e>
 80054a2:	9b06      	ldr	r3, [sp, #24]
 80054a4:	eba3 030a 	sub.w	r3, r3, sl
 80054a8:	9306      	str	r3, [sp, #24]
 80054aa:	f1ca 0300 	rsb	r3, sl, #0
 80054ae:	930a      	str	r3, [sp, #40]	; 0x28
 80054b0:	2300      	movs	r3, #0
 80054b2:	930e      	str	r3, [sp, #56]	; 0x38
 80054b4:	e7be      	b.n	8005434 <_dtoa_r+0x1cc>
 80054b6:	2300      	movs	r3, #0
 80054b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80054ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	dc58      	bgt.n	8005572 <_dtoa_r+0x30a>
 80054c0:	f04f 0901 	mov.w	r9, #1
 80054c4:	464b      	mov	r3, r9
 80054c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80054ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80054ce:	2200      	movs	r2, #0
 80054d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80054d2:	6042      	str	r2, [r0, #4]
 80054d4:	2204      	movs	r2, #4
 80054d6:	f102 0614 	add.w	r6, r2, #20
 80054da:	429e      	cmp	r6, r3
 80054dc:	6841      	ldr	r1, [r0, #4]
 80054de:	d94e      	bls.n	800557e <_dtoa_r+0x316>
 80054e0:	4628      	mov	r0, r5
 80054e2:	f001 f84f 	bl	8006584 <_Balloc>
 80054e6:	9003      	str	r0, [sp, #12]
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d14c      	bne.n	8005586 <_dtoa_r+0x31e>
 80054ec:	4602      	mov	r2, r0
 80054ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054f2:	4b17      	ldr	r3, [pc, #92]	; (8005550 <_dtoa_r+0x2e8>)
 80054f4:	e6cc      	b.n	8005290 <_dtoa_r+0x28>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e7de      	b.n	80054b8 <_dtoa_r+0x250>
 80054fa:	2300      	movs	r3, #0
 80054fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80054fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005500:	eb0a 0903 	add.w	r9, sl, r3
 8005504:	f109 0301 	add.w	r3, r9, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	9308      	str	r3, [sp, #32]
 800550c:	bfb8      	it	lt
 800550e:	2301      	movlt	r3, #1
 8005510:	e7dd      	b.n	80054ce <_dtoa_r+0x266>
 8005512:	2301      	movs	r3, #1
 8005514:	e7f2      	b.n	80054fc <_dtoa_r+0x294>
 8005516:	bf00      	nop
 8005518:	636f4361 	.word	0x636f4361
 800551c:	3fd287a7 	.word	0x3fd287a7
 8005520:	8b60c8b3 	.word	0x8b60c8b3
 8005524:	3fc68a28 	.word	0x3fc68a28
 8005528:	509f79fb 	.word	0x509f79fb
 800552c:	3fd34413 	.word	0x3fd34413
 8005530:	0801028e 	.word	0x0801028e
 8005534:	080102a5 	.word	0x080102a5
 8005538:	7ff00000 	.word	0x7ff00000
 800553c:	0801028a 	.word	0x0801028a
 8005540:	08010281 	.word	0x08010281
 8005544:	08010101 	.word	0x08010101
 8005548:	3ff80000 	.word	0x3ff80000
 800554c:	08010410 	.word	0x08010410
 8005550:	08010300 	.word	0x08010300
 8005554:	2401      	movs	r4, #1
 8005556:	2300      	movs	r3, #0
 8005558:	940b      	str	r4, [sp, #44]	; 0x2c
 800555a:	9322      	str	r3, [sp, #136]	; 0x88
 800555c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005560:	2200      	movs	r2, #0
 8005562:	2312      	movs	r3, #18
 8005564:	f8cd 9020 	str.w	r9, [sp, #32]
 8005568:	9223      	str	r2, [sp, #140]	; 0x8c
 800556a:	e7b0      	b.n	80054ce <_dtoa_r+0x266>
 800556c:	2301      	movs	r3, #1
 800556e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005570:	e7f4      	b.n	800555c <_dtoa_r+0x2f4>
 8005572:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005576:	464b      	mov	r3, r9
 8005578:	f8cd 9020 	str.w	r9, [sp, #32]
 800557c:	e7a7      	b.n	80054ce <_dtoa_r+0x266>
 800557e:	3101      	adds	r1, #1
 8005580:	6041      	str	r1, [r0, #4]
 8005582:	0052      	lsls	r2, r2, #1
 8005584:	e7a7      	b.n	80054d6 <_dtoa_r+0x26e>
 8005586:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005588:	9a03      	ldr	r2, [sp, #12]
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	9b08      	ldr	r3, [sp, #32]
 800558e:	2b0e      	cmp	r3, #14
 8005590:	f200 80a8 	bhi.w	80056e4 <_dtoa_r+0x47c>
 8005594:	2c00      	cmp	r4, #0
 8005596:	f000 80a5 	beq.w	80056e4 <_dtoa_r+0x47c>
 800559a:	f1ba 0f00 	cmp.w	sl, #0
 800559e:	dd34      	ble.n	800560a <_dtoa_r+0x3a2>
 80055a0:	4a9a      	ldr	r2, [pc, #616]	; (800580c <_dtoa_r+0x5a4>)
 80055a2:	f00a 030f 	and.w	r3, sl, #15
 80055a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055aa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80055ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80055b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80055ba:	d016      	beq.n	80055ea <_dtoa_r+0x382>
 80055bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055c0:	4b93      	ldr	r3, [pc, #588]	; (8005810 <_dtoa_r+0x5a8>)
 80055c2:	2703      	movs	r7, #3
 80055c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055c8:	f7fb f91c 	bl	8000804 <__aeabi_ddiv>
 80055cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055d0:	f004 040f 	and.w	r4, r4, #15
 80055d4:	4e8e      	ldr	r6, [pc, #568]	; (8005810 <_dtoa_r+0x5a8>)
 80055d6:	b954      	cbnz	r4, 80055ee <_dtoa_r+0x386>
 80055d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055e0:	f7fb f910 	bl	8000804 <__aeabi_ddiv>
 80055e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055e8:	e029      	b.n	800563e <_dtoa_r+0x3d6>
 80055ea:	2702      	movs	r7, #2
 80055ec:	e7f2      	b.n	80055d4 <_dtoa_r+0x36c>
 80055ee:	07e1      	lsls	r1, r4, #31
 80055f0:	d508      	bpl.n	8005604 <_dtoa_r+0x39c>
 80055f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055fa:	f7fa ffd9 	bl	80005b0 <__aeabi_dmul>
 80055fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005602:	3701      	adds	r7, #1
 8005604:	1064      	asrs	r4, r4, #1
 8005606:	3608      	adds	r6, #8
 8005608:	e7e5      	b.n	80055d6 <_dtoa_r+0x36e>
 800560a:	f000 80a5 	beq.w	8005758 <_dtoa_r+0x4f0>
 800560e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005612:	f1ca 0400 	rsb	r4, sl, #0
 8005616:	4b7d      	ldr	r3, [pc, #500]	; (800580c <_dtoa_r+0x5a4>)
 8005618:	f004 020f 	and.w	r2, r4, #15
 800561c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fa ffc4 	bl	80005b0 <__aeabi_dmul>
 8005628:	2702      	movs	r7, #2
 800562a:	2300      	movs	r3, #0
 800562c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005630:	4e77      	ldr	r6, [pc, #476]	; (8005810 <_dtoa_r+0x5a8>)
 8005632:	1124      	asrs	r4, r4, #4
 8005634:	2c00      	cmp	r4, #0
 8005636:	f040 8084 	bne.w	8005742 <_dtoa_r+0x4da>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1d2      	bne.n	80055e4 <_dtoa_r+0x37c>
 800563e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 808b 	beq.w	800575c <_dtoa_r+0x4f4>
 8005646:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800564a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800564e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005652:	2200      	movs	r2, #0
 8005654:	4b6f      	ldr	r3, [pc, #444]	; (8005814 <_dtoa_r+0x5ac>)
 8005656:	f7fb fa1d 	bl	8000a94 <__aeabi_dcmplt>
 800565a:	2800      	cmp	r0, #0
 800565c:	d07e      	beq.n	800575c <_dtoa_r+0x4f4>
 800565e:	9b08      	ldr	r3, [sp, #32]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d07b      	beq.n	800575c <_dtoa_r+0x4f4>
 8005664:	f1b9 0f00 	cmp.w	r9, #0
 8005668:	dd38      	ble.n	80056dc <_dtoa_r+0x474>
 800566a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800566e:	2200      	movs	r2, #0
 8005670:	4b69      	ldr	r3, [pc, #420]	; (8005818 <_dtoa_r+0x5b0>)
 8005672:	f7fa ff9d 	bl	80005b0 <__aeabi_dmul>
 8005676:	464c      	mov	r4, r9
 8005678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800567c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005680:	3701      	adds	r7, #1
 8005682:	4638      	mov	r0, r7
 8005684:	f7fa ff2a 	bl	80004dc <__aeabi_i2d>
 8005688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800568c:	f7fa ff90 	bl	80005b0 <__aeabi_dmul>
 8005690:	2200      	movs	r2, #0
 8005692:	4b62      	ldr	r3, [pc, #392]	; (800581c <_dtoa_r+0x5b4>)
 8005694:	f7fa fdd6 	bl	8000244 <__adddf3>
 8005698:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800569c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056a0:	9611      	str	r6, [sp, #68]	; 0x44
 80056a2:	2c00      	cmp	r4, #0
 80056a4:	d15d      	bne.n	8005762 <_dtoa_r+0x4fa>
 80056a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056aa:	2200      	movs	r2, #0
 80056ac:	4b5c      	ldr	r3, [pc, #368]	; (8005820 <_dtoa_r+0x5b8>)
 80056ae:	f7fa fdc7 	bl	8000240 <__aeabi_dsub>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056ba:	4633      	mov	r3, r6
 80056bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056be:	f7fb fa07 	bl	8000ad0 <__aeabi_dcmpgt>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	f040 829c 	bne.w	8005c00 <_dtoa_r+0x998>
 80056c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80056d2:	f7fb f9df 	bl	8000a94 <__aeabi_dcmplt>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f040 8290 	bne.w	8005bfc <_dtoa_r+0x994>
 80056dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80056e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f2c0 8152 	blt.w	8005990 <_dtoa_r+0x728>
 80056ec:	f1ba 0f0e 	cmp.w	sl, #14
 80056f0:	f300 814e 	bgt.w	8005990 <_dtoa_r+0x728>
 80056f4:	4b45      	ldr	r3, [pc, #276]	; (800580c <_dtoa_r+0x5a4>)
 80056f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80056fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005702:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005704:	2b00      	cmp	r3, #0
 8005706:	f280 80db 	bge.w	80058c0 <_dtoa_r+0x658>
 800570a:	9b08      	ldr	r3, [sp, #32]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f300 80d7 	bgt.w	80058c0 <_dtoa_r+0x658>
 8005712:	f040 8272 	bne.w	8005bfa <_dtoa_r+0x992>
 8005716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800571a:	2200      	movs	r2, #0
 800571c:	4b40      	ldr	r3, [pc, #256]	; (8005820 <_dtoa_r+0x5b8>)
 800571e:	f7fa ff47 	bl	80005b0 <__aeabi_dmul>
 8005722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005726:	f7fb f9c9 	bl	8000abc <__aeabi_dcmpge>
 800572a:	9c08      	ldr	r4, [sp, #32]
 800572c:	4626      	mov	r6, r4
 800572e:	2800      	cmp	r0, #0
 8005730:	f040 8248 	bne.w	8005bc4 <_dtoa_r+0x95c>
 8005734:	2331      	movs	r3, #49	; 0x31
 8005736:	9f03      	ldr	r7, [sp, #12]
 8005738:	f10a 0a01 	add.w	sl, sl, #1
 800573c:	f807 3b01 	strb.w	r3, [r7], #1
 8005740:	e244      	b.n	8005bcc <_dtoa_r+0x964>
 8005742:	07e2      	lsls	r2, r4, #31
 8005744:	d505      	bpl.n	8005752 <_dtoa_r+0x4ea>
 8005746:	e9d6 2300 	ldrd	r2, r3, [r6]
 800574a:	f7fa ff31 	bl	80005b0 <__aeabi_dmul>
 800574e:	2301      	movs	r3, #1
 8005750:	3701      	adds	r7, #1
 8005752:	1064      	asrs	r4, r4, #1
 8005754:	3608      	adds	r6, #8
 8005756:	e76d      	b.n	8005634 <_dtoa_r+0x3cc>
 8005758:	2702      	movs	r7, #2
 800575a:	e770      	b.n	800563e <_dtoa_r+0x3d6>
 800575c:	46d0      	mov	r8, sl
 800575e:	9c08      	ldr	r4, [sp, #32]
 8005760:	e78f      	b.n	8005682 <_dtoa_r+0x41a>
 8005762:	9903      	ldr	r1, [sp, #12]
 8005764:	4b29      	ldr	r3, [pc, #164]	; (800580c <_dtoa_r+0x5a4>)
 8005766:	4421      	add	r1, r4
 8005768:	9112      	str	r1, [sp, #72]	; 0x48
 800576a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800576c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005770:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005774:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005778:	2900      	cmp	r1, #0
 800577a:	d055      	beq.n	8005828 <_dtoa_r+0x5c0>
 800577c:	2000      	movs	r0, #0
 800577e:	4929      	ldr	r1, [pc, #164]	; (8005824 <_dtoa_r+0x5bc>)
 8005780:	f7fb f840 	bl	8000804 <__aeabi_ddiv>
 8005784:	463b      	mov	r3, r7
 8005786:	4632      	mov	r2, r6
 8005788:	f7fa fd5a 	bl	8000240 <__aeabi_dsub>
 800578c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005790:	9f03      	ldr	r7, [sp, #12]
 8005792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005796:	f7fb f9bb 	bl	8000b10 <__aeabi_d2iz>
 800579a:	4604      	mov	r4, r0
 800579c:	f7fa fe9e 	bl	80004dc <__aeabi_i2d>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057a8:	f7fa fd4a 	bl	8000240 <__aeabi_dsub>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	3430      	adds	r4, #48	; 0x30
 80057b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057ba:	f807 4b01 	strb.w	r4, [r7], #1
 80057be:	f7fb f969 	bl	8000a94 <__aeabi_dcmplt>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d174      	bne.n	80058b0 <_dtoa_r+0x648>
 80057c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ca:	2000      	movs	r0, #0
 80057cc:	4911      	ldr	r1, [pc, #68]	; (8005814 <_dtoa_r+0x5ac>)
 80057ce:	f7fa fd37 	bl	8000240 <__aeabi_dsub>
 80057d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057d6:	f7fb f95d 	bl	8000a94 <__aeabi_dcmplt>
 80057da:	2800      	cmp	r0, #0
 80057dc:	f040 80b7 	bne.w	800594e <_dtoa_r+0x6e6>
 80057e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057e2:	429f      	cmp	r7, r3
 80057e4:	f43f af7a 	beq.w	80056dc <_dtoa_r+0x474>
 80057e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057ec:	2200      	movs	r2, #0
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <_dtoa_r+0x5b0>)
 80057f0:	f7fa fede 	bl	80005b0 <__aeabi_dmul>
 80057f4:	2200      	movs	r2, #0
 80057f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <_dtoa_r+0x5b0>)
 8005800:	f7fa fed6 	bl	80005b0 <__aeabi_dmul>
 8005804:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005808:	e7c3      	b.n	8005792 <_dtoa_r+0x52a>
 800580a:	bf00      	nop
 800580c:	08010410 	.word	0x08010410
 8005810:	080103e8 	.word	0x080103e8
 8005814:	3ff00000 	.word	0x3ff00000
 8005818:	40240000 	.word	0x40240000
 800581c:	401c0000 	.word	0x401c0000
 8005820:	40140000 	.word	0x40140000
 8005824:	3fe00000 	.word	0x3fe00000
 8005828:	4630      	mov	r0, r6
 800582a:	4639      	mov	r1, r7
 800582c:	f7fa fec0 	bl	80005b0 <__aeabi_dmul>
 8005830:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005832:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005836:	9c03      	ldr	r4, [sp, #12]
 8005838:	9314      	str	r3, [sp, #80]	; 0x50
 800583a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800583e:	f7fb f967 	bl	8000b10 <__aeabi_d2iz>
 8005842:	9015      	str	r0, [sp, #84]	; 0x54
 8005844:	f7fa fe4a 	bl	80004dc <__aeabi_i2d>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005850:	f7fa fcf6 	bl	8000240 <__aeabi_dsub>
 8005854:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005856:	4606      	mov	r6, r0
 8005858:	3330      	adds	r3, #48	; 0x30
 800585a:	f804 3b01 	strb.w	r3, [r4], #1
 800585e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005860:	460f      	mov	r7, r1
 8005862:	429c      	cmp	r4, r3
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	d124      	bne.n	80058b4 <_dtoa_r+0x64c>
 800586a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800586e:	4bb0      	ldr	r3, [pc, #704]	; (8005b30 <_dtoa_r+0x8c8>)
 8005870:	f7fa fce8 	bl	8000244 <__adddf3>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4630      	mov	r0, r6
 800587a:	4639      	mov	r1, r7
 800587c:	f7fb f928 	bl	8000ad0 <__aeabi_dcmpgt>
 8005880:	2800      	cmp	r0, #0
 8005882:	d163      	bne.n	800594c <_dtoa_r+0x6e4>
 8005884:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005888:	2000      	movs	r0, #0
 800588a:	49a9      	ldr	r1, [pc, #676]	; (8005b30 <_dtoa_r+0x8c8>)
 800588c:	f7fa fcd8 	bl	8000240 <__aeabi_dsub>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4630      	mov	r0, r6
 8005896:	4639      	mov	r1, r7
 8005898:	f7fb f8fc 	bl	8000a94 <__aeabi_dcmplt>
 800589c:	2800      	cmp	r0, #0
 800589e:	f43f af1d 	beq.w	80056dc <_dtoa_r+0x474>
 80058a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80058a4:	1e7b      	subs	r3, r7, #1
 80058a6:	9314      	str	r3, [sp, #80]	; 0x50
 80058a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80058ac:	2b30      	cmp	r3, #48	; 0x30
 80058ae:	d0f8      	beq.n	80058a2 <_dtoa_r+0x63a>
 80058b0:	46c2      	mov	sl, r8
 80058b2:	e03b      	b.n	800592c <_dtoa_r+0x6c4>
 80058b4:	4b9f      	ldr	r3, [pc, #636]	; (8005b34 <_dtoa_r+0x8cc>)
 80058b6:	f7fa fe7b 	bl	80005b0 <__aeabi_dmul>
 80058ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058be:	e7bc      	b.n	800583a <_dtoa_r+0x5d2>
 80058c0:	9f03      	ldr	r7, [sp, #12]
 80058c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80058c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058ca:	4640      	mov	r0, r8
 80058cc:	4649      	mov	r1, r9
 80058ce:	f7fa ff99 	bl	8000804 <__aeabi_ddiv>
 80058d2:	f7fb f91d 	bl	8000b10 <__aeabi_d2iz>
 80058d6:	4604      	mov	r4, r0
 80058d8:	f7fa fe00 	bl	80004dc <__aeabi_i2d>
 80058dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058e0:	f7fa fe66 	bl	80005b0 <__aeabi_dmul>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4640      	mov	r0, r8
 80058ea:	4649      	mov	r1, r9
 80058ec:	f7fa fca8 	bl	8000240 <__aeabi_dsub>
 80058f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80058f4:	f807 6b01 	strb.w	r6, [r7], #1
 80058f8:	9e03      	ldr	r6, [sp, #12]
 80058fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80058fe:	1bbe      	subs	r6, r7, r6
 8005900:	45b4      	cmp	ip, r6
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	d136      	bne.n	8005976 <_dtoa_r+0x70e>
 8005908:	f7fa fc9c 	bl	8000244 <__adddf3>
 800590c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005910:	4680      	mov	r8, r0
 8005912:	4689      	mov	r9, r1
 8005914:	f7fb f8dc 	bl	8000ad0 <__aeabi_dcmpgt>
 8005918:	bb58      	cbnz	r0, 8005972 <_dtoa_r+0x70a>
 800591a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800591e:	4640      	mov	r0, r8
 8005920:	4649      	mov	r1, r9
 8005922:	f7fb f8ad 	bl	8000a80 <__aeabi_dcmpeq>
 8005926:	b108      	cbz	r0, 800592c <_dtoa_r+0x6c4>
 8005928:	07e1      	lsls	r1, r4, #31
 800592a:	d422      	bmi.n	8005972 <_dtoa_r+0x70a>
 800592c:	4628      	mov	r0, r5
 800592e:	4659      	mov	r1, fp
 8005930:	f000 fe68 	bl	8006604 <_Bfree>
 8005934:	2300      	movs	r3, #0
 8005936:	703b      	strb	r3, [r7, #0]
 8005938:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800593a:	f10a 0001 	add.w	r0, sl, #1
 800593e:	6018      	str	r0, [r3, #0]
 8005940:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005942:	2b00      	cmp	r3, #0
 8005944:	f43f acde 	beq.w	8005304 <_dtoa_r+0x9c>
 8005948:	601f      	str	r7, [r3, #0]
 800594a:	e4db      	b.n	8005304 <_dtoa_r+0x9c>
 800594c:	4627      	mov	r7, r4
 800594e:	463b      	mov	r3, r7
 8005950:	461f      	mov	r7, r3
 8005952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005956:	2a39      	cmp	r2, #57	; 0x39
 8005958:	d107      	bne.n	800596a <_dtoa_r+0x702>
 800595a:	9a03      	ldr	r2, [sp, #12]
 800595c:	429a      	cmp	r2, r3
 800595e:	d1f7      	bne.n	8005950 <_dtoa_r+0x6e8>
 8005960:	2230      	movs	r2, #48	; 0x30
 8005962:	9903      	ldr	r1, [sp, #12]
 8005964:	f108 0801 	add.w	r8, r8, #1
 8005968:	700a      	strb	r2, [r1, #0]
 800596a:	781a      	ldrb	r2, [r3, #0]
 800596c:	3201      	adds	r2, #1
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	e79e      	b.n	80058b0 <_dtoa_r+0x648>
 8005972:	46d0      	mov	r8, sl
 8005974:	e7eb      	b.n	800594e <_dtoa_r+0x6e6>
 8005976:	2200      	movs	r2, #0
 8005978:	4b6e      	ldr	r3, [pc, #440]	; (8005b34 <_dtoa_r+0x8cc>)
 800597a:	f7fa fe19 	bl	80005b0 <__aeabi_dmul>
 800597e:	2200      	movs	r2, #0
 8005980:	2300      	movs	r3, #0
 8005982:	4680      	mov	r8, r0
 8005984:	4689      	mov	r9, r1
 8005986:	f7fb f87b 	bl	8000a80 <__aeabi_dcmpeq>
 800598a:	2800      	cmp	r0, #0
 800598c:	d09b      	beq.n	80058c6 <_dtoa_r+0x65e>
 800598e:	e7cd      	b.n	800592c <_dtoa_r+0x6c4>
 8005990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005992:	2a00      	cmp	r2, #0
 8005994:	f000 80d0 	beq.w	8005b38 <_dtoa_r+0x8d0>
 8005998:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800599a:	2a01      	cmp	r2, #1
 800599c:	f300 80ae 	bgt.w	8005afc <_dtoa_r+0x894>
 80059a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	f000 80a6 	beq.w	8005af4 <_dtoa_r+0x88c>
 80059a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059ae:	9f06      	ldr	r7, [sp, #24]
 80059b0:	9a06      	ldr	r2, [sp, #24]
 80059b2:	2101      	movs	r1, #1
 80059b4:	441a      	add	r2, r3
 80059b6:	9206      	str	r2, [sp, #24]
 80059b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ba:	4628      	mov	r0, r5
 80059bc:	441a      	add	r2, r3
 80059be:	9209      	str	r2, [sp, #36]	; 0x24
 80059c0:	f000 ff20 	bl	8006804 <__i2b>
 80059c4:	4606      	mov	r6, r0
 80059c6:	2f00      	cmp	r7, #0
 80059c8:	dd0c      	ble.n	80059e4 <_dtoa_r+0x77c>
 80059ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dd09      	ble.n	80059e4 <_dtoa_r+0x77c>
 80059d0:	42bb      	cmp	r3, r7
 80059d2:	bfa8      	it	ge
 80059d4:	463b      	movge	r3, r7
 80059d6:	9a06      	ldr	r2, [sp, #24]
 80059d8:	1aff      	subs	r7, r7, r3
 80059da:	1ad2      	subs	r2, r2, r3
 80059dc:	9206      	str	r2, [sp, #24]
 80059de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	9309      	str	r3, [sp, #36]	; 0x24
 80059e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e6:	b1f3      	cbz	r3, 8005a26 <_dtoa_r+0x7be>
 80059e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80a8 	beq.w	8005b40 <_dtoa_r+0x8d8>
 80059f0:	2c00      	cmp	r4, #0
 80059f2:	dd10      	ble.n	8005a16 <_dtoa_r+0x7ae>
 80059f4:	4631      	mov	r1, r6
 80059f6:	4622      	mov	r2, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 ffc1 	bl	8006980 <__pow5mult>
 80059fe:	465a      	mov	r2, fp
 8005a00:	4601      	mov	r1, r0
 8005a02:	4606      	mov	r6, r0
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 ff13 	bl	8006830 <__multiply>
 8005a0a:	4680      	mov	r8, r0
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 fdf8 	bl	8006604 <_Bfree>
 8005a14:	46c3      	mov	fp, r8
 8005a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a18:	1b1a      	subs	r2, r3, r4
 8005a1a:	d004      	beq.n	8005a26 <_dtoa_r+0x7be>
 8005a1c:	4659      	mov	r1, fp
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 ffae 	bl	8006980 <__pow5mult>
 8005a24:	4683      	mov	fp, r0
 8005a26:	2101      	movs	r1, #1
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f000 feeb 	bl	8006804 <__i2b>
 8005a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a30:	4604      	mov	r4, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f340 8086 	ble.w	8005b44 <_dtoa_r+0x8dc>
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4601      	mov	r1, r0
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f000 ff9f 	bl	8006980 <__pow5mult>
 8005a42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a44:	4604      	mov	r4, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	dd7f      	ble.n	8005b4a <_dtoa_r+0x8e2>
 8005a4a:	f04f 0800 	mov.w	r8, #0
 8005a4e:	6923      	ldr	r3, [r4, #16]
 8005a50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a54:	6918      	ldr	r0, [r3, #16]
 8005a56:	f000 fe87 	bl	8006768 <__hi0bits>
 8005a5a:	f1c0 0020 	rsb	r0, r0, #32
 8005a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a60:	4418      	add	r0, r3
 8005a62:	f010 001f 	ands.w	r0, r0, #31
 8005a66:	f000 8092 	beq.w	8005b8e <_dtoa_r+0x926>
 8005a6a:	f1c0 0320 	rsb	r3, r0, #32
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	f340 808a 	ble.w	8005b88 <_dtoa_r+0x920>
 8005a74:	f1c0 001c 	rsb	r0, r0, #28
 8005a78:	9b06      	ldr	r3, [sp, #24]
 8005a7a:	4407      	add	r7, r0
 8005a7c:	4403      	add	r3, r0
 8005a7e:	9306      	str	r3, [sp, #24]
 8005a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a82:	4403      	add	r3, r0
 8005a84:	9309      	str	r3, [sp, #36]	; 0x24
 8005a86:	9b06      	ldr	r3, [sp, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dd05      	ble.n	8005a98 <_dtoa_r+0x830>
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	461a      	mov	r2, r3
 8005a90:	4628      	mov	r0, r5
 8005a92:	f000 ffcf 	bl	8006a34 <__lshift>
 8005a96:	4683      	mov	fp, r0
 8005a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	dd05      	ble.n	8005aaa <_dtoa_r+0x842>
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 ffc6 	bl	8006a34 <__lshift>
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d070      	beq.n	8005b92 <_dtoa_r+0x92a>
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	4658      	mov	r0, fp
 8005ab4:	f001 f82e 	bl	8006b14 <__mcmp>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	da6a      	bge.n	8005b92 <_dtoa_r+0x92a>
 8005abc:	2300      	movs	r3, #0
 8005abe:	4659      	mov	r1, fp
 8005ac0:	220a      	movs	r2, #10
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f000 fdc0 	bl	8006648 <__multadd>
 8005ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aca:	4683      	mov	fp, r0
 8005acc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 8194 	beq.w	8005dfe <_dtoa_r+0xb96>
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	2300      	movs	r3, #0
 8005ada:	220a      	movs	r2, #10
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 fdb3 	bl	8006648 <__multadd>
 8005ae2:	f1b9 0f00 	cmp.w	r9, #0
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	f300 8093 	bgt.w	8005c12 <_dtoa_r+0x9aa>
 8005aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	dc57      	bgt.n	8005ba2 <_dtoa_r+0x93a>
 8005af2:	e08e      	b.n	8005c12 <_dtoa_r+0x9aa>
 8005af4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005af6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005afa:	e757      	b.n	80059ac <_dtoa_r+0x744>
 8005afc:	9b08      	ldr	r3, [sp, #32]
 8005afe:	1e5c      	subs	r4, r3, #1
 8005b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b02:	42a3      	cmp	r3, r4
 8005b04:	bfb7      	itett	lt
 8005b06:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b08:	1b1c      	subge	r4, r3, r4
 8005b0a:	1ae2      	sublt	r2, r4, r3
 8005b0c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b0e:	bfbe      	ittt	lt
 8005b10:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b12:	189b      	addlt	r3, r3, r2
 8005b14:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b16:	9b08      	ldr	r3, [sp, #32]
 8005b18:	bfb8      	it	lt
 8005b1a:	2400      	movlt	r4, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bfbb      	ittet	lt
 8005b20:	9b06      	ldrlt	r3, [sp, #24]
 8005b22:	9a08      	ldrlt	r2, [sp, #32]
 8005b24:	9f06      	ldrge	r7, [sp, #24]
 8005b26:	1a9f      	sublt	r7, r3, r2
 8005b28:	bfac      	ite	ge
 8005b2a:	9b08      	ldrge	r3, [sp, #32]
 8005b2c:	2300      	movlt	r3, #0
 8005b2e:	e73f      	b.n	80059b0 <_dtoa_r+0x748>
 8005b30:	3fe00000 	.word	0x3fe00000
 8005b34:	40240000 	.word	0x40240000
 8005b38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b3a:	9f06      	ldr	r7, [sp, #24]
 8005b3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b3e:	e742      	b.n	80059c6 <_dtoa_r+0x75e>
 8005b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b42:	e76b      	b.n	8005a1c <_dtoa_r+0x7b4>
 8005b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	dc19      	bgt.n	8005b7e <_dtoa_r+0x916>
 8005b4a:	9b04      	ldr	r3, [sp, #16]
 8005b4c:	b9bb      	cbnz	r3, 8005b7e <_dtoa_r+0x916>
 8005b4e:	9b05      	ldr	r3, [sp, #20]
 8005b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b54:	b99b      	cbnz	r3, 8005b7e <_dtoa_r+0x916>
 8005b56:	9b05      	ldr	r3, [sp, #20]
 8005b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b5c:	0d1b      	lsrs	r3, r3, #20
 8005b5e:	051b      	lsls	r3, r3, #20
 8005b60:	b183      	cbz	r3, 8005b84 <_dtoa_r+0x91c>
 8005b62:	f04f 0801 	mov.w	r8, #1
 8005b66:	9b06      	ldr	r3, [sp, #24]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	9306      	str	r3, [sp, #24]
 8005b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6e:	3301      	adds	r3, #1
 8005b70:	9309      	str	r3, [sp, #36]	; 0x24
 8005b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f47f af6a 	bne.w	8005a4e <_dtoa_r+0x7e6>
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	e76f      	b.n	8005a5e <_dtoa_r+0x7f6>
 8005b7e:	f04f 0800 	mov.w	r8, #0
 8005b82:	e7f6      	b.n	8005b72 <_dtoa_r+0x90a>
 8005b84:	4698      	mov	r8, r3
 8005b86:	e7f4      	b.n	8005b72 <_dtoa_r+0x90a>
 8005b88:	f43f af7d 	beq.w	8005a86 <_dtoa_r+0x81e>
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	301c      	adds	r0, #28
 8005b90:	e772      	b.n	8005a78 <_dtoa_r+0x810>
 8005b92:	9b08      	ldr	r3, [sp, #32]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	dc36      	bgt.n	8005c06 <_dtoa_r+0x99e>
 8005b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	dd33      	ble.n	8005c06 <_dtoa_r+0x99e>
 8005b9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ba2:	f1b9 0f00 	cmp.w	r9, #0
 8005ba6:	d10d      	bne.n	8005bc4 <_dtoa_r+0x95c>
 8005ba8:	4621      	mov	r1, r4
 8005baa:	464b      	mov	r3, r9
 8005bac:	2205      	movs	r2, #5
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 fd4a 	bl	8006648 <__multadd>
 8005bb4:	4601      	mov	r1, r0
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4658      	mov	r0, fp
 8005bba:	f000 ffab 	bl	8006b14 <__mcmp>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	f73f adb8 	bgt.w	8005734 <_dtoa_r+0x4cc>
 8005bc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bc6:	9f03      	ldr	r7, [sp, #12]
 8005bc8:	ea6f 0a03 	mvn.w	sl, r3
 8005bcc:	f04f 0800 	mov.w	r8, #0
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 fd16 	bl	8006604 <_Bfree>
 8005bd8:	2e00      	cmp	r6, #0
 8005bda:	f43f aea7 	beq.w	800592c <_dtoa_r+0x6c4>
 8005bde:	f1b8 0f00 	cmp.w	r8, #0
 8005be2:	d005      	beq.n	8005bf0 <_dtoa_r+0x988>
 8005be4:	45b0      	cmp	r8, r6
 8005be6:	d003      	beq.n	8005bf0 <_dtoa_r+0x988>
 8005be8:	4641      	mov	r1, r8
 8005bea:	4628      	mov	r0, r5
 8005bec:	f000 fd0a 	bl	8006604 <_Bfree>
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f000 fd06 	bl	8006604 <_Bfree>
 8005bf8:	e698      	b.n	800592c <_dtoa_r+0x6c4>
 8005bfa:	2400      	movs	r4, #0
 8005bfc:	4626      	mov	r6, r4
 8005bfe:	e7e1      	b.n	8005bc4 <_dtoa_r+0x95c>
 8005c00:	46c2      	mov	sl, r8
 8005c02:	4626      	mov	r6, r4
 8005c04:	e596      	b.n	8005734 <_dtoa_r+0x4cc>
 8005c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80fd 	beq.w	8005e0c <_dtoa_r+0xba4>
 8005c12:	2f00      	cmp	r7, #0
 8005c14:	dd05      	ble.n	8005c22 <_dtoa_r+0x9ba>
 8005c16:	4631      	mov	r1, r6
 8005c18:	463a      	mov	r2, r7
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 ff0a 	bl	8006a34 <__lshift>
 8005c20:	4606      	mov	r6, r0
 8005c22:	f1b8 0f00 	cmp.w	r8, #0
 8005c26:	d05c      	beq.n	8005ce2 <_dtoa_r+0xa7a>
 8005c28:	4628      	mov	r0, r5
 8005c2a:	6871      	ldr	r1, [r6, #4]
 8005c2c:	f000 fcaa 	bl	8006584 <_Balloc>
 8005c30:	4607      	mov	r7, r0
 8005c32:	b928      	cbnz	r0, 8005c40 <_dtoa_r+0x9d8>
 8005c34:	4602      	mov	r2, r0
 8005c36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c3a:	4b7f      	ldr	r3, [pc, #508]	; (8005e38 <_dtoa_r+0xbd0>)
 8005c3c:	f7ff bb28 	b.w	8005290 <_dtoa_r+0x28>
 8005c40:	6932      	ldr	r2, [r6, #16]
 8005c42:	f106 010c 	add.w	r1, r6, #12
 8005c46:	3202      	adds	r2, #2
 8005c48:	0092      	lsls	r2, r2, #2
 8005c4a:	300c      	adds	r0, #12
 8005c4c:	f000 fc8c 	bl	8006568 <memcpy>
 8005c50:	2201      	movs	r2, #1
 8005c52:	4639      	mov	r1, r7
 8005c54:	4628      	mov	r0, r5
 8005c56:	f000 feed 	bl	8006a34 <__lshift>
 8005c5a:	46b0      	mov	r8, r6
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	9b03      	ldr	r3, [sp, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	9308      	str	r3, [sp, #32]
 8005c64:	9b03      	ldr	r3, [sp, #12]
 8005c66:	444b      	add	r3, r9
 8005c68:	930a      	str	r3, [sp, #40]	; 0x28
 8005c6a:	9b04      	ldr	r3, [sp, #16]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	9309      	str	r3, [sp, #36]	; 0x24
 8005c72:	9b08      	ldr	r3, [sp, #32]
 8005c74:	4621      	mov	r1, r4
 8005c76:	3b01      	subs	r3, #1
 8005c78:	4658      	mov	r0, fp
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	f7ff fa68 	bl	8005150 <quorem>
 8005c80:	4603      	mov	r3, r0
 8005c82:	4641      	mov	r1, r8
 8005c84:	3330      	adds	r3, #48	; 0x30
 8005c86:	9006      	str	r0, [sp, #24]
 8005c88:	4658      	mov	r0, fp
 8005c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c8c:	f000 ff42 	bl	8006b14 <__mcmp>
 8005c90:	4632      	mov	r2, r6
 8005c92:	4681      	mov	r9, r0
 8005c94:	4621      	mov	r1, r4
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 ff58 	bl	8006b4c <__mdiff>
 8005c9c:	68c2      	ldr	r2, [r0, #12]
 8005c9e:	4607      	mov	r7, r0
 8005ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca2:	bb02      	cbnz	r2, 8005ce6 <_dtoa_r+0xa7e>
 8005ca4:	4601      	mov	r1, r0
 8005ca6:	4658      	mov	r0, fp
 8005ca8:	f000 ff34 	bl	8006b14 <__mcmp>
 8005cac:	4602      	mov	r2, r0
 8005cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cb0:	4639      	mov	r1, r7
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005cb8:	f000 fca4 	bl	8006604 <_Bfree>
 8005cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cc0:	9f08      	ldr	r7, [sp, #32]
 8005cc2:	ea43 0102 	orr.w	r1, r3, r2
 8005cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ccc:	d10d      	bne.n	8005cea <_dtoa_r+0xa82>
 8005cce:	2b39      	cmp	r3, #57	; 0x39
 8005cd0:	d029      	beq.n	8005d26 <_dtoa_r+0xabe>
 8005cd2:	f1b9 0f00 	cmp.w	r9, #0
 8005cd6:	dd01      	ble.n	8005cdc <_dtoa_r+0xa74>
 8005cd8:	9b06      	ldr	r3, [sp, #24]
 8005cda:	3331      	adds	r3, #49	; 0x31
 8005cdc:	9a04      	ldr	r2, [sp, #16]
 8005cde:	7013      	strb	r3, [r2, #0]
 8005ce0:	e776      	b.n	8005bd0 <_dtoa_r+0x968>
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	e7b9      	b.n	8005c5a <_dtoa_r+0x9f2>
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	e7e2      	b.n	8005cb0 <_dtoa_r+0xa48>
 8005cea:	f1b9 0f00 	cmp.w	r9, #0
 8005cee:	db06      	blt.n	8005cfe <_dtoa_r+0xa96>
 8005cf0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005cf2:	ea41 0909 	orr.w	r9, r1, r9
 8005cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cf8:	ea59 0101 	orrs.w	r1, r9, r1
 8005cfc:	d120      	bne.n	8005d40 <_dtoa_r+0xad8>
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	ddec      	ble.n	8005cdc <_dtoa_r+0xa74>
 8005d02:	4659      	mov	r1, fp
 8005d04:	2201      	movs	r2, #1
 8005d06:	4628      	mov	r0, r5
 8005d08:	9308      	str	r3, [sp, #32]
 8005d0a:	f000 fe93 	bl	8006a34 <__lshift>
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4683      	mov	fp, r0
 8005d12:	f000 feff 	bl	8006b14 <__mcmp>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	9b08      	ldr	r3, [sp, #32]
 8005d1a:	dc02      	bgt.n	8005d22 <_dtoa_r+0xaba>
 8005d1c:	d1de      	bne.n	8005cdc <_dtoa_r+0xa74>
 8005d1e:	07da      	lsls	r2, r3, #31
 8005d20:	d5dc      	bpl.n	8005cdc <_dtoa_r+0xa74>
 8005d22:	2b39      	cmp	r3, #57	; 0x39
 8005d24:	d1d8      	bne.n	8005cd8 <_dtoa_r+0xa70>
 8005d26:	2339      	movs	r3, #57	; 0x39
 8005d28:	9a04      	ldr	r2, [sp, #16]
 8005d2a:	7013      	strb	r3, [r2, #0]
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	461f      	mov	r7, r3
 8005d30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	2a39      	cmp	r2, #57	; 0x39
 8005d38:	d050      	beq.n	8005ddc <_dtoa_r+0xb74>
 8005d3a:	3201      	adds	r2, #1
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	e747      	b.n	8005bd0 <_dtoa_r+0x968>
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	dd03      	ble.n	8005d4c <_dtoa_r+0xae4>
 8005d44:	2b39      	cmp	r3, #57	; 0x39
 8005d46:	d0ee      	beq.n	8005d26 <_dtoa_r+0xabe>
 8005d48:	3301      	adds	r3, #1
 8005d4a:	e7c7      	b.n	8005cdc <_dtoa_r+0xa74>
 8005d4c:	9a08      	ldr	r2, [sp, #32]
 8005d4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d54:	428a      	cmp	r2, r1
 8005d56:	d02a      	beq.n	8005dae <_dtoa_r+0xb46>
 8005d58:	4659      	mov	r1, fp
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	220a      	movs	r2, #10
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 fc72 	bl	8006648 <__multadd>
 8005d64:	45b0      	cmp	r8, r6
 8005d66:	4683      	mov	fp, r0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	f04f 020a 	mov.w	r2, #10
 8005d70:	4641      	mov	r1, r8
 8005d72:	4628      	mov	r0, r5
 8005d74:	d107      	bne.n	8005d86 <_dtoa_r+0xb1e>
 8005d76:	f000 fc67 	bl	8006648 <__multadd>
 8005d7a:	4680      	mov	r8, r0
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	9b08      	ldr	r3, [sp, #32]
 8005d80:	3301      	adds	r3, #1
 8005d82:	9308      	str	r3, [sp, #32]
 8005d84:	e775      	b.n	8005c72 <_dtoa_r+0xa0a>
 8005d86:	f000 fc5f 	bl	8006648 <__multadd>
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4680      	mov	r8, r0
 8005d8e:	2300      	movs	r3, #0
 8005d90:	220a      	movs	r2, #10
 8005d92:	4628      	mov	r0, r5
 8005d94:	f000 fc58 	bl	8006648 <__multadd>
 8005d98:	4606      	mov	r6, r0
 8005d9a:	e7f0      	b.n	8005d7e <_dtoa_r+0xb16>
 8005d9c:	f1b9 0f00 	cmp.w	r9, #0
 8005da0:	bfcc      	ite	gt
 8005da2:	464f      	movgt	r7, r9
 8005da4:	2701      	movle	r7, #1
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	9a03      	ldr	r2, [sp, #12]
 8005dac:	4417      	add	r7, r2
 8005dae:	4659      	mov	r1, fp
 8005db0:	2201      	movs	r2, #1
 8005db2:	4628      	mov	r0, r5
 8005db4:	9308      	str	r3, [sp, #32]
 8005db6:	f000 fe3d 	bl	8006a34 <__lshift>
 8005dba:	4621      	mov	r1, r4
 8005dbc:	4683      	mov	fp, r0
 8005dbe:	f000 fea9 	bl	8006b14 <__mcmp>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	dcb2      	bgt.n	8005d2c <_dtoa_r+0xac4>
 8005dc6:	d102      	bne.n	8005dce <_dtoa_r+0xb66>
 8005dc8:	9b08      	ldr	r3, [sp, #32]
 8005dca:	07db      	lsls	r3, r3, #31
 8005dcc:	d4ae      	bmi.n	8005d2c <_dtoa_r+0xac4>
 8005dce:	463b      	mov	r3, r7
 8005dd0:	461f      	mov	r7, r3
 8005dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dd6:	2a30      	cmp	r2, #48	; 0x30
 8005dd8:	d0fa      	beq.n	8005dd0 <_dtoa_r+0xb68>
 8005dda:	e6f9      	b.n	8005bd0 <_dtoa_r+0x968>
 8005ddc:	9a03      	ldr	r2, [sp, #12]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d1a5      	bne.n	8005d2e <_dtoa_r+0xac6>
 8005de2:	2331      	movs	r3, #49	; 0x31
 8005de4:	f10a 0a01 	add.w	sl, sl, #1
 8005de8:	e779      	b.n	8005cde <_dtoa_r+0xa76>
 8005dea:	4b14      	ldr	r3, [pc, #80]	; (8005e3c <_dtoa_r+0xbd4>)
 8005dec:	f7ff baa8 	b.w	8005340 <_dtoa_r+0xd8>
 8005df0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f47f aa81 	bne.w	80052fa <_dtoa_r+0x92>
 8005df8:	4b11      	ldr	r3, [pc, #68]	; (8005e40 <_dtoa_r+0xbd8>)
 8005dfa:	f7ff baa1 	b.w	8005340 <_dtoa_r+0xd8>
 8005dfe:	f1b9 0f00 	cmp.w	r9, #0
 8005e02:	dc03      	bgt.n	8005e0c <_dtoa_r+0xba4>
 8005e04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	f73f aecb 	bgt.w	8005ba2 <_dtoa_r+0x93a>
 8005e0c:	9f03      	ldr	r7, [sp, #12]
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4658      	mov	r0, fp
 8005e12:	f7ff f99d 	bl	8005150 <quorem>
 8005e16:	9a03      	ldr	r2, [sp, #12]
 8005e18:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e1c:	f807 3b01 	strb.w	r3, [r7], #1
 8005e20:	1aba      	subs	r2, r7, r2
 8005e22:	4591      	cmp	r9, r2
 8005e24:	ddba      	ble.n	8005d9c <_dtoa_r+0xb34>
 8005e26:	4659      	mov	r1, fp
 8005e28:	2300      	movs	r3, #0
 8005e2a:	220a      	movs	r2, #10
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f000 fc0b 	bl	8006648 <__multadd>
 8005e32:	4683      	mov	fp, r0
 8005e34:	e7eb      	b.n	8005e0e <_dtoa_r+0xba6>
 8005e36:	bf00      	nop
 8005e38:	08010300 	.word	0x08010300
 8005e3c:	08010100 	.word	0x08010100
 8005e40:	08010281 	.word	0x08010281

08005e44 <rshift>:
 8005e44:	6903      	ldr	r3, [r0, #16]
 8005e46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005e4e:	f100 0414 	add.w	r4, r0, #20
 8005e52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005e56:	dd46      	ble.n	8005ee6 <rshift+0xa2>
 8005e58:	f011 011f 	ands.w	r1, r1, #31
 8005e5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005e60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005e64:	d10c      	bne.n	8005e80 <rshift+0x3c>
 8005e66:	4629      	mov	r1, r5
 8005e68:	f100 0710 	add.w	r7, r0, #16
 8005e6c:	42b1      	cmp	r1, r6
 8005e6e:	d335      	bcc.n	8005edc <rshift+0x98>
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	1eea      	subs	r2, r5, #3
 8005e76:	4296      	cmp	r6, r2
 8005e78:	bf38      	it	cc
 8005e7a:	2300      	movcc	r3, #0
 8005e7c:	4423      	add	r3, r4
 8005e7e:	e015      	b.n	8005eac <rshift+0x68>
 8005e80:	46a1      	mov	r9, r4
 8005e82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005e86:	f1c1 0820 	rsb	r8, r1, #32
 8005e8a:	40cf      	lsrs	r7, r1
 8005e8c:	f105 0e04 	add.w	lr, r5, #4
 8005e90:	4576      	cmp	r6, lr
 8005e92:	46f4      	mov	ip, lr
 8005e94:	d816      	bhi.n	8005ec4 <rshift+0x80>
 8005e96:	1a9a      	subs	r2, r3, r2
 8005e98:	0092      	lsls	r2, r2, #2
 8005e9a:	3a04      	subs	r2, #4
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	42ae      	cmp	r6, r5
 8005ea0:	bf38      	it	cc
 8005ea2:	2200      	movcc	r2, #0
 8005ea4:	18a3      	adds	r3, r4, r2
 8005ea6:	50a7      	str	r7, [r4, r2]
 8005ea8:	b107      	cbz	r7, 8005eac <rshift+0x68>
 8005eaa:	3304      	adds	r3, #4
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	eba3 0204 	sub.w	r2, r3, r4
 8005eb2:	bf08      	it	eq
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005eba:	6102      	str	r2, [r0, #16]
 8005ebc:	bf08      	it	eq
 8005ebe:	6143      	streq	r3, [r0, #20]
 8005ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ec4:	f8dc c000 	ldr.w	ip, [ip]
 8005ec8:	fa0c fc08 	lsl.w	ip, ip, r8
 8005ecc:	ea4c 0707 	orr.w	r7, ip, r7
 8005ed0:	f849 7b04 	str.w	r7, [r9], #4
 8005ed4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ed8:	40cf      	lsrs	r7, r1
 8005eda:	e7d9      	b.n	8005e90 <rshift+0x4c>
 8005edc:	f851 cb04 	ldr.w	ip, [r1], #4
 8005ee0:	f847 cf04 	str.w	ip, [r7, #4]!
 8005ee4:	e7c2      	b.n	8005e6c <rshift+0x28>
 8005ee6:	4623      	mov	r3, r4
 8005ee8:	e7e0      	b.n	8005eac <rshift+0x68>

08005eea <__hexdig_fun>:
 8005eea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005eee:	2b09      	cmp	r3, #9
 8005ef0:	d802      	bhi.n	8005ef8 <__hexdig_fun+0xe>
 8005ef2:	3820      	subs	r0, #32
 8005ef4:	b2c0      	uxtb	r0, r0
 8005ef6:	4770      	bx	lr
 8005ef8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d801      	bhi.n	8005f04 <__hexdig_fun+0x1a>
 8005f00:	3847      	subs	r0, #71	; 0x47
 8005f02:	e7f7      	b.n	8005ef4 <__hexdig_fun+0xa>
 8005f04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005f08:	2b05      	cmp	r3, #5
 8005f0a:	d801      	bhi.n	8005f10 <__hexdig_fun+0x26>
 8005f0c:	3827      	subs	r0, #39	; 0x27
 8005f0e:	e7f1      	b.n	8005ef4 <__hexdig_fun+0xa>
 8005f10:	2000      	movs	r0, #0
 8005f12:	4770      	bx	lr

08005f14 <__gethex>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	b08b      	sub	sp, #44	; 0x2c
 8005f1a:	9305      	str	r3, [sp, #20]
 8005f1c:	4bb2      	ldr	r3, [pc, #712]	; (80061e8 <__gethex+0x2d4>)
 8005f1e:	9002      	str	r0, [sp, #8]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	468b      	mov	fp, r1
 8005f24:	4618      	mov	r0, r3
 8005f26:	4690      	mov	r8, r2
 8005f28:	9303      	str	r3, [sp, #12]
 8005f2a:	f7fa f97d 	bl	8000228 <strlen>
 8005f2e:	4682      	mov	sl, r0
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	f8db 2000 	ldr.w	r2, [fp]
 8005f36:	4403      	add	r3, r0
 8005f38:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005f3c:	9306      	str	r3, [sp, #24]
 8005f3e:	1c93      	adds	r3, r2, #2
 8005f40:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005f44:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005f48:	32fe      	adds	r2, #254	; 0xfe
 8005f4a:	18d1      	adds	r1, r2, r3
 8005f4c:	461f      	mov	r7, r3
 8005f4e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005f52:	9101      	str	r1, [sp, #4]
 8005f54:	2830      	cmp	r0, #48	; 0x30
 8005f56:	d0f8      	beq.n	8005f4a <__gethex+0x36>
 8005f58:	f7ff ffc7 	bl	8005eea <__hexdig_fun>
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d13a      	bne.n	8005fd8 <__gethex+0xc4>
 8005f62:	4652      	mov	r2, sl
 8005f64:	4638      	mov	r0, r7
 8005f66:	9903      	ldr	r1, [sp, #12]
 8005f68:	f001 fa26 	bl	80073b8 <strncmp>
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d166      	bne.n	8006040 <__gethex+0x12c>
 8005f72:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005f76:	eb07 060a 	add.w	r6, r7, sl
 8005f7a:	f7ff ffb6 	bl	8005eea <__hexdig_fun>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d060      	beq.n	8006044 <__gethex+0x130>
 8005f82:	4633      	mov	r3, r6
 8005f84:	7818      	ldrb	r0, [r3, #0]
 8005f86:	461f      	mov	r7, r3
 8005f88:	2830      	cmp	r0, #48	; 0x30
 8005f8a:	f103 0301 	add.w	r3, r3, #1
 8005f8e:	d0f9      	beq.n	8005f84 <__gethex+0x70>
 8005f90:	f7ff ffab 	bl	8005eea <__hexdig_fun>
 8005f94:	2301      	movs	r3, #1
 8005f96:	fab0 f480 	clz	r4, r0
 8005f9a:	4635      	mov	r5, r6
 8005f9c:	0964      	lsrs	r4, r4, #5
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	463a      	mov	r2, r7
 8005fa2:	4616      	mov	r6, r2
 8005fa4:	7830      	ldrb	r0, [r6, #0]
 8005fa6:	3201      	adds	r2, #1
 8005fa8:	f7ff ff9f 	bl	8005eea <__hexdig_fun>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d1f8      	bne.n	8005fa2 <__gethex+0x8e>
 8005fb0:	4652      	mov	r2, sl
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	9903      	ldr	r1, [sp, #12]
 8005fb6:	f001 f9ff 	bl	80073b8 <strncmp>
 8005fba:	b980      	cbnz	r0, 8005fde <__gethex+0xca>
 8005fbc:	b94d      	cbnz	r5, 8005fd2 <__gethex+0xbe>
 8005fbe:	eb06 050a 	add.w	r5, r6, sl
 8005fc2:	462a      	mov	r2, r5
 8005fc4:	4616      	mov	r6, r2
 8005fc6:	7830      	ldrb	r0, [r6, #0]
 8005fc8:	3201      	adds	r2, #1
 8005fca:	f7ff ff8e 	bl	8005eea <__hexdig_fun>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d1f8      	bne.n	8005fc4 <__gethex+0xb0>
 8005fd2:	1bad      	subs	r5, r5, r6
 8005fd4:	00ad      	lsls	r5, r5, #2
 8005fd6:	e004      	b.n	8005fe2 <__gethex+0xce>
 8005fd8:	2400      	movs	r4, #0
 8005fda:	4625      	mov	r5, r4
 8005fdc:	e7e0      	b.n	8005fa0 <__gethex+0x8c>
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	d1f7      	bne.n	8005fd2 <__gethex+0xbe>
 8005fe2:	7833      	ldrb	r3, [r6, #0]
 8005fe4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fe8:	2b50      	cmp	r3, #80	; 0x50
 8005fea:	d139      	bne.n	8006060 <__gethex+0x14c>
 8005fec:	7873      	ldrb	r3, [r6, #1]
 8005fee:	2b2b      	cmp	r3, #43	; 0x2b
 8005ff0:	d02a      	beq.n	8006048 <__gethex+0x134>
 8005ff2:	2b2d      	cmp	r3, #45	; 0x2d
 8005ff4:	d02c      	beq.n	8006050 <__gethex+0x13c>
 8005ff6:	f04f 0900 	mov.w	r9, #0
 8005ffa:	1c71      	adds	r1, r6, #1
 8005ffc:	7808      	ldrb	r0, [r1, #0]
 8005ffe:	f7ff ff74 	bl	8005eea <__hexdig_fun>
 8006002:	1e43      	subs	r3, r0, #1
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b18      	cmp	r3, #24
 8006008:	d82a      	bhi.n	8006060 <__gethex+0x14c>
 800600a:	f1a0 0210 	sub.w	r2, r0, #16
 800600e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006012:	f7ff ff6a 	bl	8005eea <__hexdig_fun>
 8006016:	1e43      	subs	r3, r0, #1
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b18      	cmp	r3, #24
 800601c:	d91b      	bls.n	8006056 <__gethex+0x142>
 800601e:	f1b9 0f00 	cmp.w	r9, #0
 8006022:	d000      	beq.n	8006026 <__gethex+0x112>
 8006024:	4252      	negs	r2, r2
 8006026:	4415      	add	r5, r2
 8006028:	f8cb 1000 	str.w	r1, [fp]
 800602c:	b1d4      	cbz	r4, 8006064 <__gethex+0x150>
 800602e:	9b01      	ldr	r3, [sp, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	bf14      	ite	ne
 8006034:	2700      	movne	r7, #0
 8006036:	2706      	moveq	r7, #6
 8006038:	4638      	mov	r0, r7
 800603a:	b00b      	add	sp, #44	; 0x2c
 800603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006040:	463e      	mov	r6, r7
 8006042:	4625      	mov	r5, r4
 8006044:	2401      	movs	r4, #1
 8006046:	e7cc      	b.n	8005fe2 <__gethex+0xce>
 8006048:	f04f 0900 	mov.w	r9, #0
 800604c:	1cb1      	adds	r1, r6, #2
 800604e:	e7d5      	b.n	8005ffc <__gethex+0xe8>
 8006050:	f04f 0901 	mov.w	r9, #1
 8006054:	e7fa      	b.n	800604c <__gethex+0x138>
 8006056:	230a      	movs	r3, #10
 8006058:	fb03 0202 	mla	r2, r3, r2, r0
 800605c:	3a10      	subs	r2, #16
 800605e:	e7d6      	b.n	800600e <__gethex+0xfa>
 8006060:	4631      	mov	r1, r6
 8006062:	e7e1      	b.n	8006028 <__gethex+0x114>
 8006064:	4621      	mov	r1, r4
 8006066:	1bf3      	subs	r3, r6, r7
 8006068:	3b01      	subs	r3, #1
 800606a:	2b07      	cmp	r3, #7
 800606c:	dc0a      	bgt.n	8006084 <__gethex+0x170>
 800606e:	9802      	ldr	r0, [sp, #8]
 8006070:	f000 fa88 	bl	8006584 <_Balloc>
 8006074:	4604      	mov	r4, r0
 8006076:	b940      	cbnz	r0, 800608a <__gethex+0x176>
 8006078:	4602      	mov	r2, r0
 800607a:	21de      	movs	r1, #222	; 0xde
 800607c:	4b5b      	ldr	r3, [pc, #364]	; (80061ec <__gethex+0x2d8>)
 800607e:	485c      	ldr	r0, [pc, #368]	; (80061f0 <__gethex+0x2dc>)
 8006080:	f001 f9bc 	bl	80073fc <__assert_func>
 8006084:	3101      	adds	r1, #1
 8006086:	105b      	asrs	r3, r3, #1
 8006088:	e7ef      	b.n	800606a <__gethex+0x156>
 800608a:	f04f 0b00 	mov.w	fp, #0
 800608e:	f100 0914 	add.w	r9, r0, #20
 8006092:	f1ca 0301 	rsb	r3, sl, #1
 8006096:	f8cd 9010 	str.w	r9, [sp, #16]
 800609a:	f8cd b004 	str.w	fp, [sp, #4]
 800609e:	9308      	str	r3, [sp, #32]
 80060a0:	42b7      	cmp	r7, r6
 80060a2:	d33f      	bcc.n	8006124 <__gethex+0x210>
 80060a4:	9f04      	ldr	r7, [sp, #16]
 80060a6:	9b01      	ldr	r3, [sp, #4]
 80060a8:	f847 3b04 	str.w	r3, [r7], #4
 80060ac:	eba7 0709 	sub.w	r7, r7, r9
 80060b0:	10bf      	asrs	r7, r7, #2
 80060b2:	6127      	str	r7, [r4, #16]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fb57 	bl	8006768 <__hi0bits>
 80060ba:	017f      	lsls	r7, r7, #5
 80060bc:	f8d8 6000 	ldr.w	r6, [r8]
 80060c0:	1a3f      	subs	r7, r7, r0
 80060c2:	42b7      	cmp	r7, r6
 80060c4:	dd62      	ble.n	800618c <__gethex+0x278>
 80060c6:	1bbf      	subs	r7, r7, r6
 80060c8:	4639      	mov	r1, r7
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 fef1 	bl	8006eb2 <__any_on>
 80060d0:	4682      	mov	sl, r0
 80060d2:	b1a8      	cbz	r0, 8006100 <__gethex+0x1ec>
 80060d4:	f04f 0a01 	mov.w	sl, #1
 80060d8:	1e7b      	subs	r3, r7, #1
 80060da:	1159      	asrs	r1, r3, #5
 80060dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80060e0:	f003 021f 	and.w	r2, r3, #31
 80060e4:	fa0a f202 	lsl.w	r2, sl, r2
 80060e8:	420a      	tst	r2, r1
 80060ea:	d009      	beq.n	8006100 <__gethex+0x1ec>
 80060ec:	4553      	cmp	r3, sl
 80060ee:	dd05      	ble.n	80060fc <__gethex+0x1e8>
 80060f0:	4620      	mov	r0, r4
 80060f2:	1eb9      	subs	r1, r7, #2
 80060f4:	f000 fedd 	bl	8006eb2 <__any_on>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d144      	bne.n	8006186 <__gethex+0x272>
 80060fc:	f04f 0a02 	mov.w	sl, #2
 8006100:	4639      	mov	r1, r7
 8006102:	4620      	mov	r0, r4
 8006104:	f7ff fe9e 	bl	8005e44 <rshift>
 8006108:	443d      	add	r5, r7
 800610a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800610e:	42ab      	cmp	r3, r5
 8006110:	da4a      	bge.n	80061a8 <__gethex+0x294>
 8006112:	4621      	mov	r1, r4
 8006114:	9802      	ldr	r0, [sp, #8]
 8006116:	f000 fa75 	bl	8006604 <_Bfree>
 800611a:	2300      	movs	r3, #0
 800611c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800611e:	27a3      	movs	r7, #163	; 0xa3
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e789      	b.n	8006038 <__gethex+0x124>
 8006124:	1e73      	subs	r3, r6, #1
 8006126:	9a06      	ldr	r2, [sp, #24]
 8006128:	9307      	str	r3, [sp, #28]
 800612a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800612e:	4293      	cmp	r3, r2
 8006130:	d019      	beq.n	8006166 <__gethex+0x252>
 8006132:	f1bb 0f20 	cmp.w	fp, #32
 8006136:	d107      	bne.n	8006148 <__gethex+0x234>
 8006138:	9b04      	ldr	r3, [sp, #16]
 800613a:	9a01      	ldr	r2, [sp, #4]
 800613c:	f843 2b04 	str.w	r2, [r3], #4
 8006140:	9304      	str	r3, [sp, #16]
 8006142:	2300      	movs	r3, #0
 8006144:	469b      	mov	fp, r3
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800614c:	f7ff fecd 	bl	8005eea <__hexdig_fun>
 8006150:	9b01      	ldr	r3, [sp, #4]
 8006152:	f000 000f 	and.w	r0, r0, #15
 8006156:	fa00 f00b 	lsl.w	r0, r0, fp
 800615a:	4303      	orrs	r3, r0
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	f10b 0b04 	add.w	fp, fp, #4
 8006162:	9b07      	ldr	r3, [sp, #28]
 8006164:	e00d      	b.n	8006182 <__gethex+0x26e>
 8006166:	9a08      	ldr	r2, [sp, #32]
 8006168:	1e73      	subs	r3, r6, #1
 800616a:	4413      	add	r3, r2
 800616c:	42bb      	cmp	r3, r7
 800616e:	d3e0      	bcc.n	8006132 <__gethex+0x21e>
 8006170:	4618      	mov	r0, r3
 8006172:	4652      	mov	r2, sl
 8006174:	9903      	ldr	r1, [sp, #12]
 8006176:	9309      	str	r3, [sp, #36]	; 0x24
 8006178:	f001 f91e 	bl	80073b8 <strncmp>
 800617c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617e:	2800      	cmp	r0, #0
 8006180:	d1d7      	bne.n	8006132 <__gethex+0x21e>
 8006182:	461e      	mov	r6, r3
 8006184:	e78c      	b.n	80060a0 <__gethex+0x18c>
 8006186:	f04f 0a03 	mov.w	sl, #3
 800618a:	e7b9      	b.n	8006100 <__gethex+0x1ec>
 800618c:	da09      	bge.n	80061a2 <__gethex+0x28e>
 800618e:	1bf7      	subs	r7, r6, r7
 8006190:	4621      	mov	r1, r4
 8006192:	463a      	mov	r2, r7
 8006194:	9802      	ldr	r0, [sp, #8]
 8006196:	f000 fc4d 	bl	8006a34 <__lshift>
 800619a:	4604      	mov	r4, r0
 800619c:	1bed      	subs	r5, r5, r7
 800619e:	f100 0914 	add.w	r9, r0, #20
 80061a2:	f04f 0a00 	mov.w	sl, #0
 80061a6:	e7b0      	b.n	800610a <__gethex+0x1f6>
 80061a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80061ac:	42a8      	cmp	r0, r5
 80061ae:	dd72      	ble.n	8006296 <__gethex+0x382>
 80061b0:	1b45      	subs	r5, r0, r5
 80061b2:	42ae      	cmp	r6, r5
 80061b4:	dc35      	bgt.n	8006222 <__gethex+0x30e>
 80061b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d029      	beq.n	8006212 <__gethex+0x2fe>
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d02b      	beq.n	800621a <__gethex+0x306>
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d11c      	bne.n	8006200 <__gethex+0x2ec>
 80061c6:	42ae      	cmp	r6, r5
 80061c8:	d11a      	bne.n	8006200 <__gethex+0x2ec>
 80061ca:	2e01      	cmp	r6, #1
 80061cc:	d112      	bne.n	80061f4 <__gethex+0x2e0>
 80061ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80061d2:	9a05      	ldr	r2, [sp, #20]
 80061d4:	2762      	movs	r7, #98	; 0x62
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	2301      	movs	r3, #1
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	f8c9 3000 	str.w	r3, [r9]
 80061e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061e2:	601c      	str	r4, [r3, #0]
 80061e4:	e728      	b.n	8006038 <__gethex+0x124>
 80061e6:	bf00      	nop
 80061e8:	08010378 	.word	0x08010378
 80061ec:	08010300 	.word	0x08010300
 80061f0:	08010311 	.word	0x08010311
 80061f4:	4620      	mov	r0, r4
 80061f6:	1e71      	subs	r1, r6, #1
 80061f8:	f000 fe5b 	bl	8006eb2 <__any_on>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d1e6      	bne.n	80061ce <__gethex+0x2ba>
 8006200:	4621      	mov	r1, r4
 8006202:	9802      	ldr	r0, [sp, #8]
 8006204:	f000 f9fe 	bl	8006604 <_Bfree>
 8006208:	2300      	movs	r3, #0
 800620a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800620c:	2750      	movs	r7, #80	; 0x50
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	e712      	b.n	8006038 <__gethex+0x124>
 8006212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f3      	bne.n	8006200 <__gethex+0x2ec>
 8006218:	e7d9      	b.n	80061ce <__gethex+0x2ba>
 800621a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1d6      	bne.n	80061ce <__gethex+0x2ba>
 8006220:	e7ee      	b.n	8006200 <__gethex+0x2ec>
 8006222:	1e6f      	subs	r7, r5, #1
 8006224:	f1ba 0f00 	cmp.w	sl, #0
 8006228:	d132      	bne.n	8006290 <__gethex+0x37c>
 800622a:	b127      	cbz	r7, 8006236 <__gethex+0x322>
 800622c:	4639      	mov	r1, r7
 800622e:	4620      	mov	r0, r4
 8006230:	f000 fe3f 	bl	8006eb2 <__any_on>
 8006234:	4682      	mov	sl, r0
 8006236:	2101      	movs	r1, #1
 8006238:	117b      	asrs	r3, r7, #5
 800623a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800623e:	f007 071f 	and.w	r7, r7, #31
 8006242:	fa01 f707 	lsl.w	r7, r1, r7
 8006246:	421f      	tst	r7, r3
 8006248:	f04f 0702 	mov.w	r7, #2
 800624c:	4629      	mov	r1, r5
 800624e:	4620      	mov	r0, r4
 8006250:	bf18      	it	ne
 8006252:	f04a 0a02 	orrne.w	sl, sl, #2
 8006256:	1b76      	subs	r6, r6, r5
 8006258:	f7ff fdf4 	bl	8005e44 <rshift>
 800625c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006260:	f1ba 0f00 	cmp.w	sl, #0
 8006264:	d048      	beq.n	80062f8 <__gethex+0x3e4>
 8006266:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d015      	beq.n	800629a <__gethex+0x386>
 800626e:	2b03      	cmp	r3, #3
 8006270:	d017      	beq.n	80062a2 <__gethex+0x38e>
 8006272:	2b01      	cmp	r3, #1
 8006274:	d109      	bne.n	800628a <__gethex+0x376>
 8006276:	f01a 0f02 	tst.w	sl, #2
 800627a:	d006      	beq.n	800628a <__gethex+0x376>
 800627c:	f8d9 0000 	ldr.w	r0, [r9]
 8006280:	ea4a 0a00 	orr.w	sl, sl, r0
 8006284:	f01a 0f01 	tst.w	sl, #1
 8006288:	d10e      	bne.n	80062a8 <__gethex+0x394>
 800628a:	f047 0710 	orr.w	r7, r7, #16
 800628e:	e033      	b.n	80062f8 <__gethex+0x3e4>
 8006290:	f04f 0a01 	mov.w	sl, #1
 8006294:	e7cf      	b.n	8006236 <__gethex+0x322>
 8006296:	2701      	movs	r7, #1
 8006298:	e7e2      	b.n	8006260 <__gethex+0x34c>
 800629a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800629c:	f1c3 0301 	rsb	r3, r3, #1
 80062a0:	9315      	str	r3, [sp, #84]	; 0x54
 80062a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0f0      	beq.n	800628a <__gethex+0x376>
 80062a8:	f04f 0c00 	mov.w	ip, #0
 80062ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80062b0:	f104 0314 	add.w	r3, r4, #20
 80062b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80062b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80062bc:	4618      	mov	r0, r3
 80062be:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80062c6:	d01c      	beq.n	8006302 <__gethex+0x3ee>
 80062c8:	3201      	adds	r2, #1
 80062ca:	6002      	str	r2, [r0, #0]
 80062cc:	2f02      	cmp	r7, #2
 80062ce:	f104 0314 	add.w	r3, r4, #20
 80062d2:	d13d      	bne.n	8006350 <__gethex+0x43c>
 80062d4:	f8d8 2000 	ldr.w	r2, [r8]
 80062d8:	3a01      	subs	r2, #1
 80062da:	42b2      	cmp	r2, r6
 80062dc:	d10a      	bne.n	80062f4 <__gethex+0x3e0>
 80062de:	2201      	movs	r2, #1
 80062e0:	1171      	asrs	r1, r6, #5
 80062e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80062e6:	f006 061f 	and.w	r6, r6, #31
 80062ea:	fa02 f606 	lsl.w	r6, r2, r6
 80062ee:	421e      	tst	r6, r3
 80062f0:	bf18      	it	ne
 80062f2:	4617      	movne	r7, r2
 80062f4:	f047 0720 	orr.w	r7, r7, #32
 80062f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062fa:	601c      	str	r4, [r3, #0]
 80062fc:	9b05      	ldr	r3, [sp, #20]
 80062fe:	601d      	str	r5, [r3, #0]
 8006300:	e69a      	b.n	8006038 <__gethex+0x124>
 8006302:	4299      	cmp	r1, r3
 8006304:	f843 cc04 	str.w	ip, [r3, #-4]
 8006308:	d8d8      	bhi.n	80062bc <__gethex+0x3a8>
 800630a:	68a3      	ldr	r3, [r4, #8]
 800630c:	459b      	cmp	fp, r3
 800630e:	db17      	blt.n	8006340 <__gethex+0x42c>
 8006310:	6861      	ldr	r1, [r4, #4]
 8006312:	9802      	ldr	r0, [sp, #8]
 8006314:	3101      	adds	r1, #1
 8006316:	f000 f935 	bl	8006584 <_Balloc>
 800631a:	4681      	mov	r9, r0
 800631c:	b918      	cbnz	r0, 8006326 <__gethex+0x412>
 800631e:	4602      	mov	r2, r0
 8006320:	2184      	movs	r1, #132	; 0x84
 8006322:	4b19      	ldr	r3, [pc, #100]	; (8006388 <__gethex+0x474>)
 8006324:	e6ab      	b.n	800607e <__gethex+0x16a>
 8006326:	6922      	ldr	r2, [r4, #16]
 8006328:	f104 010c 	add.w	r1, r4, #12
 800632c:	3202      	adds	r2, #2
 800632e:	0092      	lsls	r2, r2, #2
 8006330:	300c      	adds	r0, #12
 8006332:	f000 f919 	bl	8006568 <memcpy>
 8006336:	4621      	mov	r1, r4
 8006338:	9802      	ldr	r0, [sp, #8]
 800633a:	f000 f963 	bl	8006604 <_Bfree>
 800633e:	464c      	mov	r4, r9
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	6122      	str	r2, [r4, #16]
 8006346:	2201      	movs	r2, #1
 8006348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800634c:	615a      	str	r2, [r3, #20]
 800634e:	e7bd      	b.n	80062cc <__gethex+0x3b8>
 8006350:	6922      	ldr	r2, [r4, #16]
 8006352:	455a      	cmp	r2, fp
 8006354:	dd0b      	ble.n	800636e <__gethex+0x45a>
 8006356:	2101      	movs	r1, #1
 8006358:	4620      	mov	r0, r4
 800635a:	f7ff fd73 	bl	8005e44 <rshift>
 800635e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006362:	3501      	adds	r5, #1
 8006364:	42ab      	cmp	r3, r5
 8006366:	f6ff aed4 	blt.w	8006112 <__gethex+0x1fe>
 800636a:	2701      	movs	r7, #1
 800636c:	e7c2      	b.n	80062f4 <__gethex+0x3e0>
 800636e:	f016 061f 	ands.w	r6, r6, #31
 8006372:	d0fa      	beq.n	800636a <__gethex+0x456>
 8006374:	4453      	add	r3, sl
 8006376:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800637a:	f000 f9f5 	bl	8006768 <__hi0bits>
 800637e:	f1c6 0620 	rsb	r6, r6, #32
 8006382:	42b0      	cmp	r0, r6
 8006384:	dbe7      	blt.n	8006356 <__gethex+0x442>
 8006386:	e7f0      	b.n	800636a <__gethex+0x456>
 8006388:	08010300 	.word	0x08010300

0800638c <L_shift>:
 800638c:	f1c2 0208 	rsb	r2, r2, #8
 8006390:	0092      	lsls	r2, r2, #2
 8006392:	b570      	push	{r4, r5, r6, lr}
 8006394:	f1c2 0620 	rsb	r6, r2, #32
 8006398:	6843      	ldr	r3, [r0, #4]
 800639a:	6804      	ldr	r4, [r0, #0]
 800639c:	fa03 f506 	lsl.w	r5, r3, r6
 80063a0:	432c      	orrs	r4, r5
 80063a2:	40d3      	lsrs	r3, r2
 80063a4:	6004      	str	r4, [r0, #0]
 80063a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80063aa:	4288      	cmp	r0, r1
 80063ac:	d3f4      	bcc.n	8006398 <L_shift+0xc>
 80063ae:	bd70      	pop	{r4, r5, r6, pc}

080063b0 <__match>:
 80063b0:	b530      	push	{r4, r5, lr}
 80063b2:	6803      	ldr	r3, [r0, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ba:	b914      	cbnz	r4, 80063c2 <__match+0x12>
 80063bc:	6003      	str	r3, [r0, #0]
 80063be:	2001      	movs	r0, #1
 80063c0:	bd30      	pop	{r4, r5, pc}
 80063c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80063ca:	2d19      	cmp	r5, #25
 80063cc:	bf98      	it	ls
 80063ce:	3220      	addls	r2, #32
 80063d0:	42a2      	cmp	r2, r4
 80063d2:	d0f0      	beq.n	80063b6 <__match+0x6>
 80063d4:	2000      	movs	r0, #0
 80063d6:	e7f3      	b.n	80063c0 <__match+0x10>

080063d8 <__hexnan>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	2500      	movs	r5, #0
 80063de:	680b      	ldr	r3, [r1, #0]
 80063e0:	4682      	mov	sl, r0
 80063e2:	115e      	asrs	r6, r3, #5
 80063e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80063e8:	f013 031f 	ands.w	r3, r3, #31
 80063ec:	bf18      	it	ne
 80063ee:	3604      	addne	r6, #4
 80063f0:	1f37      	subs	r7, r6, #4
 80063f2:	46b9      	mov	r9, r7
 80063f4:	463c      	mov	r4, r7
 80063f6:	46ab      	mov	fp, r5
 80063f8:	b087      	sub	sp, #28
 80063fa:	4690      	mov	r8, r2
 80063fc:	6802      	ldr	r2, [r0, #0]
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	f846 5c04 	str.w	r5, [r6, #-4]
 8006404:	9502      	str	r5, [sp, #8]
 8006406:	7851      	ldrb	r1, [r2, #1]
 8006408:	1c53      	adds	r3, r2, #1
 800640a:	9303      	str	r3, [sp, #12]
 800640c:	b341      	cbz	r1, 8006460 <__hexnan+0x88>
 800640e:	4608      	mov	r0, r1
 8006410:	9205      	str	r2, [sp, #20]
 8006412:	9104      	str	r1, [sp, #16]
 8006414:	f7ff fd69 	bl	8005eea <__hexdig_fun>
 8006418:	2800      	cmp	r0, #0
 800641a:	d14f      	bne.n	80064bc <__hexnan+0xe4>
 800641c:	9904      	ldr	r1, [sp, #16]
 800641e:	9a05      	ldr	r2, [sp, #20]
 8006420:	2920      	cmp	r1, #32
 8006422:	d818      	bhi.n	8006456 <__hexnan+0x7e>
 8006424:	9b02      	ldr	r3, [sp, #8]
 8006426:	459b      	cmp	fp, r3
 8006428:	dd13      	ble.n	8006452 <__hexnan+0x7a>
 800642a:	454c      	cmp	r4, r9
 800642c:	d206      	bcs.n	800643c <__hexnan+0x64>
 800642e:	2d07      	cmp	r5, #7
 8006430:	dc04      	bgt.n	800643c <__hexnan+0x64>
 8006432:	462a      	mov	r2, r5
 8006434:	4649      	mov	r1, r9
 8006436:	4620      	mov	r0, r4
 8006438:	f7ff ffa8 	bl	800638c <L_shift>
 800643c:	4544      	cmp	r4, r8
 800643e:	d950      	bls.n	80064e2 <__hexnan+0x10a>
 8006440:	2300      	movs	r3, #0
 8006442:	f1a4 0904 	sub.w	r9, r4, #4
 8006446:	f844 3c04 	str.w	r3, [r4, #-4]
 800644a:	461d      	mov	r5, r3
 800644c:	464c      	mov	r4, r9
 800644e:	f8cd b008 	str.w	fp, [sp, #8]
 8006452:	9a03      	ldr	r2, [sp, #12]
 8006454:	e7d7      	b.n	8006406 <__hexnan+0x2e>
 8006456:	2929      	cmp	r1, #41	; 0x29
 8006458:	d156      	bne.n	8006508 <__hexnan+0x130>
 800645a:	3202      	adds	r2, #2
 800645c:	f8ca 2000 	str.w	r2, [sl]
 8006460:	f1bb 0f00 	cmp.w	fp, #0
 8006464:	d050      	beq.n	8006508 <__hexnan+0x130>
 8006466:	454c      	cmp	r4, r9
 8006468:	d206      	bcs.n	8006478 <__hexnan+0xa0>
 800646a:	2d07      	cmp	r5, #7
 800646c:	dc04      	bgt.n	8006478 <__hexnan+0xa0>
 800646e:	462a      	mov	r2, r5
 8006470:	4649      	mov	r1, r9
 8006472:	4620      	mov	r0, r4
 8006474:	f7ff ff8a 	bl	800638c <L_shift>
 8006478:	4544      	cmp	r4, r8
 800647a:	d934      	bls.n	80064e6 <__hexnan+0x10e>
 800647c:	4623      	mov	r3, r4
 800647e:	f1a8 0204 	sub.w	r2, r8, #4
 8006482:	f853 1b04 	ldr.w	r1, [r3], #4
 8006486:	429f      	cmp	r7, r3
 8006488:	f842 1f04 	str.w	r1, [r2, #4]!
 800648c:	d2f9      	bcs.n	8006482 <__hexnan+0xaa>
 800648e:	1b3b      	subs	r3, r7, r4
 8006490:	f023 0303 	bic.w	r3, r3, #3
 8006494:	3304      	adds	r3, #4
 8006496:	3401      	adds	r4, #1
 8006498:	3e03      	subs	r6, #3
 800649a:	42b4      	cmp	r4, r6
 800649c:	bf88      	it	hi
 800649e:	2304      	movhi	r3, #4
 80064a0:	2200      	movs	r2, #0
 80064a2:	4443      	add	r3, r8
 80064a4:	f843 2b04 	str.w	r2, [r3], #4
 80064a8:	429f      	cmp	r7, r3
 80064aa:	d2fb      	bcs.n	80064a4 <__hexnan+0xcc>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	b91b      	cbnz	r3, 80064b8 <__hexnan+0xe0>
 80064b0:	4547      	cmp	r7, r8
 80064b2:	d127      	bne.n	8006504 <__hexnan+0x12c>
 80064b4:	2301      	movs	r3, #1
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	2005      	movs	r0, #5
 80064ba:	e026      	b.n	800650a <__hexnan+0x132>
 80064bc:	3501      	adds	r5, #1
 80064be:	2d08      	cmp	r5, #8
 80064c0:	f10b 0b01 	add.w	fp, fp, #1
 80064c4:	dd06      	ble.n	80064d4 <__hexnan+0xfc>
 80064c6:	4544      	cmp	r4, r8
 80064c8:	d9c3      	bls.n	8006452 <__hexnan+0x7a>
 80064ca:	2300      	movs	r3, #0
 80064cc:	2501      	movs	r5, #1
 80064ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80064d2:	3c04      	subs	r4, #4
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	f000 000f 	and.w	r0, r0, #15
 80064da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80064de:	6022      	str	r2, [r4, #0]
 80064e0:	e7b7      	b.n	8006452 <__hexnan+0x7a>
 80064e2:	2508      	movs	r5, #8
 80064e4:	e7b5      	b.n	8006452 <__hexnan+0x7a>
 80064e6:	9b01      	ldr	r3, [sp, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0df      	beq.n	80064ac <__hexnan+0xd4>
 80064ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064f0:	f1c3 0320 	rsb	r3, r3, #32
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
 80064f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80064fc:	401a      	ands	r2, r3
 80064fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8006502:	e7d3      	b.n	80064ac <__hexnan+0xd4>
 8006504:	3f04      	subs	r7, #4
 8006506:	e7d1      	b.n	80064ac <__hexnan+0xd4>
 8006508:	2004      	movs	r0, #4
 800650a:	b007      	add	sp, #28
 800650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006510 <_localeconv_r>:
 8006510:	4800      	ldr	r0, [pc, #0]	; (8006514 <_localeconv_r+0x4>)
 8006512:	4770      	bx	lr
 8006514:	2000018c 	.word	0x2000018c

08006518 <malloc>:
 8006518:	4b02      	ldr	r3, [pc, #8]	; (8006524 <malloc+0xc>)
 800651a:	4601      	mov	r1, r0
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	f000 bd65 	b.w	8006fec <_malloc_r>
 8006522:	bf00      	nop
 8006524:	20000034 	.word	0x20000034

08006528 <__ascii_mbtowc>:
 8006528:	b082      	sub	sp, #8
 800652a:	b901      	cbnz	r1, 800652e <__ascii_mbtowc+0x6>
 800652c:	a901      	add	r1, sp, #4
 800652e:	b142      	cbz	r2, 8006542 <__ascii_mbtowc+0x1a>
 8006530:	b14b      	cbz	r3, 8006546 <__ascii_mbtowc+0x1e>
 8006532:	7813      	ldrb	r3, [r2, #0]
 8006534:	600b      	str	r3, [r1, #0]
 8006536:	7812      	ldrb	r2, [r2, #0]
 8006538:	1e10      	subs	r0, r2, #0
 800653a:	bf18      	it	ne
 800653c:	2001      	movne	r0, #1
 800653e:	b002      	add	sp, #8
 8006540:	4770      	bx	lr
 8006542:	4610      	mov	r0, r2
 8006544:	e7fb      	b.n	800653e <__ascii_mbtowc+0x16>
 8006546:	f06f 0001 	mvn.w	r0, #1
 800654a:	e7f8      	b.n	800653e <__ascii_mbtowc+0x16>

0800654c <memchr>:
 800654c:	4603      	mov	r3, r0
 800654e:	b510      	push	{r4, lr}
 8006550:	b2c9      	uxtb	r1, r1
 8006552:	4402      	add	r2, r0
 8006554:	4293      	cmp	r3, r2
 8006556:	4618      	mov	r0, r3
 8006558:	d101      	bne.n	800655e <memchr+0x12>
 800655a:	2000      	movs	r0, #0
 800655c:	e003      	b.n	8006566 <memchr+0x1a>
 800655e:	7804      	ldrb	r4, [r0, #0]
 8006560:	3301      	adds	r3, #1
 8006562:	428c      	cmp	r4, r1
 8006564:	d1f6      	bne.n	8006554 <memchr+0x8>
 8006566:	bd10      	pop	{r4, pc}

08006568 <memcpy>:
 8006568:	440a      	add	r2, r1
 800656a:	4291      	cmp	r1, r2
 800656c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006570:	d100      	bne.n	8006574 <memcpy+0xc>
 8006572:	4770      	bx	lr
 8006574:	b510      	push	{r4, lr}
 8006576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800657a:	4291      	cmp	r1, r2
 800657c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006580:	d1f9      	bne.n	8006576 <memcpy+0xe>
 8006582:	bd10      	pop	{r4, pc}

08006584 <_Balloc>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006588:	4604      	mov	r4, r0
 800658a:	460d      	mov	r5, r1
 800658c:	b976      	cbnz	r6, 80065ac <_Balloc+0x28>
 800658e:	2010      	movs	r0, #16
 8006590:	f7ff ffc2 	bl	8006518 <malloc>
 8006594:	4602      	mov	r2, r0
 8006596:	6260      	str	r0, [r4, #36]	; 0x24
 8006598:	b920      	cbnz	r0, 80065a4 <_Balloc+0x20>
 800659a:	2166      	movs	r1, #102	; 0x66
 800659c:	4b17      	ldr	r3, [pc, #92]	; (80065fc <_Balloc+0x78>)
 800659e:	4818      	ldr	r0, [pc, #96]	; (8006600 <_Balloc+0x7c>)
 80065a0:	f000 ff2c 	bl	80073fc <__assert_func>
 80065a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065a8:	6006      	str	r6, [r0, #0]
 80065aa:	60c6      	str	r6, [r0, #12]
 80065ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065ae:	68f3      	ldr	r3, [r6, #12]
 80065b0:	b183      	cbz	r3, 80065d4 <_Balloc+0x50>
 80065b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065ba:	b9b8      	cbnz	r0, 80065ec <_Balloc+0x68>
 80065bc:	2101      	movs	r1, #1
 80065be:	fa01 f605 	lsl.w	r6, r1, r5
 80065c2:	1d72      	adds	r2, r6, #5
 80065c4:	4620      	mov	r0, r4
 80065c6:	0092      	lsls	r2, r2, #2
 80065c8:	f000 fc94 	bl	8006ef4 <_calloc_r>
 80065cc:	b160      	cbz	r0, 80065e8 <_Balloc+0x64>
 80065ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065d2:	e00e      	b.n	80065f2 <_Balloc+0x6e>
 80065d4:	2221      	movs	r2, #33	; 0x21
 80065d6:	2104      	movs	r1, #4
 80065d8:	4620      	mov	r0, r4
 80065da:	f000 fc8b 	bl	8006ef4 <_calloc_r>
 80065de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e0:	60f0      	str	r0, [r6, #12]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e4      	bne.n	80065b2 <_Balloc+0x2e>
 80065e8:	2000      	movs	r0, #0
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	6802      	ldr	r2, [r0, #0]
 80065ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065f2:	2300      	movs	r3, #0
 80065f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065f8:	e7f7      	b.n	80065ea <_Balloc+0x66>
 80065fa:	bf00      	nop
 80065fc:	0801028e 	.word	0x0801028e
 8006600:	0801038c 	.word	0x0801038c

08006604 <_Bfree>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006608:	4605      	mov	r5, r0
 800660a:	460c      	mov	r4, r1
 800660c:	b976      	cbnz	r6, 800662c <_Bfree+0x28>
 800660e:	2010      	movs	r0, #16
 8006610:	f7ff ff82 	bl	8006518 <malloc>
 8006614:	4602      	mov	r2, r0
 8006616:	6268      	str	r0, [r5, #36]	; 0x24
 8006618:	b920      	cbnz	r0, 8006624 <_Bfree+0x20>
 800661a:	218a      	movs	r1, #138	; 0x8a
 800661c:	4b08      	ldr	r3, [pc, #32]	; (8006640 <_Bfree+0x3c>)
 800661e:	4809      	ldr	r0, [pc, #36]	; (8006644 <_Bfree+0x40>)
 8006620:	f000 feec 	bl	80073fc <__assert_func>
 8006624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006628:	6006      	str	r6, [r0, #0]
 800662a:	60c6      	str	r6, [r0, #12]
 800662c:	b13c      	cbz	r4, 800663e <_Bfree+0x3a>
 800662e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006630:	6862      	ldr	r2, [r4, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006638:	6021      	str	r1, [r4, #0]
 800663a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	0801028e 	.word	0x0801028e
 8006644:	0801038c 	.word	0x0801038c

08006648 <__multadd>:
 8006648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664c:	4607      	mov	r7, r0
 800664e:	460c      	mov	r4, r1
 8006650:	461e      	mov	r6, r3
 8006652:	2000      	movs	r0, #0
 8006654:	690d      	ldr	r5, [r1, #16]
 8006656:	f101 0c14 	add.w	ip, r1, #20
 800665a:	f8dc 3000 	ldr.w	r3, [ip]
 800665e:	3001      	adds	r0, #1
 8006660:	b299      	uxth	r1, r3
 8006662:	fb02 6101 	mla	r1, r2, r1, r6
 8006666:	0c1e      	lsrs	r6, r3, #16
 8006668:	0c0b      	lsrs	r3, r1, #16
 800666a:	fb02 3306 	mla	r3, r2, r6, r3
 800666e:	b289      	uxth	r1, r1
 8006670:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006674:	4285      	cmp	r5, r0
 8006676:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800667a:	f84c 1b04 	str.w	r1, [ip], #4
 800667e:	dcec      	bgt.n	800665a <__multadd+0x12>
 8006680:	b30e      	cbz	r6, 80066c6 <__multadd+0x7e>
 8006682:	68a3      	ldr	r3, [r4, #8]
 8006684:	42ab      	cmp	r3, r5
 8006686:	dc19      	bgt.n	80066bc <__multadd+0x74>
 8006688:	6861      	ldr	r1, [r4, #4]
 800668a:	4638      	mov	r0, r7
 800668c:	3101      	adds	r1, #1
 800668e:	f7ff ff79 	bl	8006584 <_Balloc>
 8006692:	4680      	mov	r8, r0
 8006694:	b928      	cbnz	r0, 80066a2 <__multadd+0x5a>
 8006696:	4602      	mov	r2, r0
 8006698:	21b5      	movs	r1, #181	; 0xb5
 800669a:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <__multadd+0x84>)
 800669c:	480c      	ldr	r0, [pc, #48]	; (80066d0 <__multadd+0x88>)
 800669e:	f000 fead 	bl	80073fc <__assert_func>
 80066a2:	6922      	ldr	r2, [r4, #16]
 80066a4:	f104 010c 	add.w	r1, r4, #12
 80066a8:	3202      	adds	r2, #2
 80066aa:	0092      	lsls	r2, r2, #2
 80066ac:	300c      	adds	r0, #12
 80066ae:	f7ff ff5b 	bl	8006568 <memcpy>
 80066b2:	4621      	mov	r1, r4
 80066b4:	4638      	mov	r0, r7
 80066b6:	f7ff ffa5 	bl	8006604 <_Bfree>
 80066ba:	4644      	mov	r4, r8
 80066bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066c0:	3501      	adds	r5, #1
 80066c2:	615e      	str	r6, [r3, #20]
 80066c4:	6125      	str	r5, [r4, #16]
 80066c6:	4620      	mov	r0, r4
 80066c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066cc:	08010300 	.word	0x08010300
 80066d0:	0801038c 	.word	0x0801038c

080066d4 <__s2b>:
 80066d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d8:	4615      	mov	r5, r2
 80066da:	2209      	movs	r2, #9
 80066dc:	461f      	mov	r7, r3
 80066de:	3308      	adds	r3, #8
 80066e0:	460c      	mov	r4, r1
 80066e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80066e6:	4606      	mov	r6, r0
 80066e8:	2201      	movs	r2, #1
 80066ea:	2100      	movs	r1, #0
 80066ec:	429a      	cmp	r2, r3
 80066ee:	db09      	blt.n	8006704 <__s2b+0x30>
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff ff47 	bl	8006584 <_Balloc>
 80066f6:	b940      	cbnz	r0, 800670a <__s2b+0x36>
 80066f8:	4602      	mov	r2, r0
 80066fa:	21ce      	movs	r1, #206	; 0xce
 80066fc:	4b18      	ldr	r3, [pc, #96]	; (8006760 <__s2b+0x8c>)
 80066fe:	4819      	ldr	r0, [pc, #100]	; (8006764 <__s2b+0x90>)
 8006700:	f000 fe7c 	bl	80073fc <__assert_func>
 8006704:	0052      	lsls	r2, r2, #1
 8006706:	3101      	adds	r1, #1
 8006708:	e7f0      	b.n	80066ec <__s2b+0x18>
 800670a:	9b08      	ldr	r3, [sp, #32]
 800670c:	2d09      	cmp	r5, #9
 800670e:	6143      	str	r3, [r0, #20]
 8006710:	f04f 0301 	mov.w	r3, #1
 8006714:	6103      	str	r3, [r0, #16]
 8006716:	dd16      	ble.n	8006746 <__s2b+0x72>
 8006718:	f104 0909 	add.w	r9, r4, #9
 800671c:	46c8      	mov	r8, r9
 800671e:	442c      	add	r4, r5
 8006720:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006724:	4601      	mov	r1, r0
 8006726:	220a      	movs	r2, #10
 8006728:	4630      	mov	r0, r6
 800672a:	3b30      	subs	r3, #48	; 0x30
 800672c:	f7ff ff8c 	bl	8006648 <__multadd>
 8006730:	45a0      	cmp	r8, r4
 8006732:	d1f5      	bne.n	8006720 <__s2b+0x4c>
 8006734:	f1a5 0408 	sub.w	r4, r5, #8
 8006738:	444c      	add	r4, r9
 800673a:	1b2d      	subs	r5, r5, r4
 800673c:	1963      	adds	r3, r4, r5
 800673e:	42bb      	cmp	r3, r7
 8006740:	db04      	blt.n	800674c <__s2b+0x78>
 8006742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006746:	2509      	movs	r5, #9
 8006748:	340a      	adds	r4, #10
 800674a:	e7f6      	b.n	800673a <__s2b+0x66>
 800674c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006750:	4601      	mov	r1, r0
 8006752:	220a      	movs	r2, #10
 8006754:	4630      	mov	r0, r6
 8006756:	3b30      	subs	r3, #48	; 0x30
 8006758:	f7ff ff76 	bl	8006648 <__multadd>
 800675c:	e7ee      	b.n	800673c <__s2b+0x68>
 800675e:	bf00      	nop
 8006760:	08010300 	.word	0x08010300
 8006764:	0801038c 	.word	0x0801038c

08006768 <__hi0bits>:
 8006768:	0c02      	lsrs	r2, r0, #16
 800676a:	0412      	lsls	r2, r2, #16
 800676c:	4603      	mov	r3, r0
 800676e:	b9ca      	cbnz	r2, 80067a4 <__hi0bits+0x3c>
 8006770:	0403      	lsls	r3, r0, #16
 8006772:	2010      	movs	r0, #16
 8006774:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006778:	bf04      	itt	eq
 800677a:	021b      	lsleq	r3, r3, #8
 800677c:	3008      	addeq	r0, #8
 800677e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006782:	bf04      	itt	eq
 8006784:	011b      	lsleq	r3, r3, #4
 8006786:	3004      	addeq	r0, #4
 8006788:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800678c:	bf04      	itt	eq
 800678e:	009b      	lsleq	r3, r3, #2
 8006790:	3002      	addeq	r0, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	db05      	blt.n	80067a2 <__hi0bits+0x3a>
 8006796:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800679a:	f100 0001 	add.w	r0, r0, #1
 800679e:	bf08      	it	eq
 80067a0:	2020      	moveq	r0, #32
 80067a2:	4770      	bx	lr
 80067a4:	2000      	movs	r0, #0
 80067a6:	e7e5      	b.n	8006774 <__hi0bits+0xc>

080067a8 <__lo0bits>:
 80067a8:	6803      	ldr	r3, [r0, #0]
 80067aa:	4602      	mov	r2, r0
 80067ac:	f013 0007 	ands.w	r0, r3, #7
 80067b0:	d00b      	beq.n	80067ca <__lo0bits+0x22>
 80067b2:	07d9      	lsls	r1, r3, #31
 80067b4:	d421      	bmi.n	80067fa <__lo0bits+0x52>
 80067b6:	0798      	lsls	r0, r3, #30
 80067b8:	bf49      	itett	mi
 80067ba:	085b      	lsrmi	r3, r3, #1
 80067bc:	089b      	lsrpl	r3, r3, #2
 80067be:	2001      	movmi	r0, #1
 80067c0:	6013      	strmi	r3, [r2, #0]
 80067c2:	bf5c      	itt	pl
 80067c4:	2002      	movpl	r0, #2
 80067c6:	6013      	strpl	r3, [r2, #0]
 80067c8:	4770      	bx	lr
 80067ca:	b299      	uxth	r1, r3
 80067cc:	b909      	cbnz	r1, 80067d2 <__lo0bits+0x2a>
 80067ce:	2010      	movs	r0, #16
 80067d0:	0c1b      	lsrs	r3, r3, #16
 80067d2:	b2d9      	uxtb	r1, r3
 80067d4:	b909      	cbnz	r1, 80067da <__lo0bits+0x32>
 80067d6:	3008      	adds	r0, #8
 80067d8:	0a1b      	lsrs	r3, r3, #8
 80067da:	0719      	lsls	r1, r3, #28
 80067dc:	bf04      	itt	eq
 80067de:	091b      	lsreq	r3, r3, #4
 80067e0:	3004      	addeq	r0, #4
 80067e2:	0799      	lsls	r1, r3, #30
 80067e4:	bf04      	itt	eq
 80067e6:	089b      	lsreq	r3, r3, #2
 80067e8:	3002      	addeq	r0, #2
 80067ea:	07d9      	lsls	r1, r3, #31
 80067ec:	d403      	bmi.n	80067f6 <__lo0bits+0x4e>
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	f100 0001 	add.w	r0, r0, #1
 80067f4:	d003      	beq.n	80067fe <__lo0bits+0x56>
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	4770      	bx	lr
 80067fa:	2000      	movs	r0, #0
 80067fc:	4770      	bx	lr
 80067fe:	2020      	movs	r0, #32
 8006800:	4770      	bx	lr
	...

08006804 <__i2b>:
 8006804:	b510      	push	{r4, lr}
 8006806:	460c      	mov	r4, r1
 8006808:	2101      	movs	r1, #1
 800680a:	f7ff febb 	bl	8006584 <_Balloc>
 800680e:	4602      	mov	r2, r0
 8006810:	b928      	cbnz	r0, 800681e <__i2b+0x1a>
 8006812:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006816:	4b04      	ldr	r3, [pc, #16]	; (8006828 <__i2b+0x24>)
 8006818:	4804      	ldr	r0, [pc, #16]	; (800682c <__i2b+0x28>)
 800681a:	f000 fdef 	bl	80073fc <__assert_func>
 800681e:	2301      	movs	r3, #1
 8006820:	6144      	str	r4, [r0, #20]
 8006822:	6103      	str	r3, [r0, #16]
 8006824:	bd10      	pop	{r4, pc}
 8006826:	bf00      	nop
 8006828:	08010300 	.word	0x08010300
 800682c:	0801038c 	.word	0x0801038c

08006830 <__multiply>:
 8006830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006834:	4691      	mov	r9, r2
 8006836:	690a      	ldr	r2, [r1, #16]
 8006838:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800683c:	460c      	mov	r4, r1
 800683e:	429a      	cmp	r2, r3
 8006840:	bfbe      	ittt	lt
 8006842:	460b      	movlt	r3, r1
 8006844:	464c      	movlt	r4, r9
 8006846:	4699      	movlt	r9, r3
 8006848:	6927      	ldr	r7, [r4, #16]
 800684a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800684e:	68a3      	ldr	r3, [r4, #8]
 8006850:	6861      	ldr	r1, [r4, #4]
 8006852:	eb07 060a 	add.w	r6, r7, sl
 8006856:	42b3      	cmp	r3, r6
 8006858:	b085      	sub	sp, #20
 800685a:	bfb8      	it	lt
 800685c:	3101      	addlt	r1, #1
 800685e:	f7ff fe91 	bl	8006584 <_Balloc>
 8006862:	b930      	cbnz	r0, 8006872 <__multiply+0x42>
 8006864:	4602      	mov	r2, r0
 8006866:	f240 115d 	movw	r1, #349	; 0x15d
 800686a:	4b43      	ldr	r3, [pc, #268]	; (8006978 <__multiply+0x148>)
 800686c:	4843      	ldr	r0, [pc, #268]	; (800697c <__multiply+0x14c>)
 800686e:	f000 fdc5 	bl	80073fc <__assert_func>
 8006872:	f100 0514 	add.w	r5, r0, #20
 8006876:	462b      	mov	r3, r5
 8006878:	2200      	movs	r2, #0
 800687a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800687e:	4543      	cmp	r3, r8
 8006880:	d321      	bcc.n	80068c6 <__multiply+0x96>
 8006882:	f104 0314 	add.w	r3, r4, #20
 8006886:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800688a:	f109 0314 	add.w	r3, r9, #20
 800688e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006892:	9202      	str	r2, [sp, #8]
 8006894:	1b3a      	subs	r2, r7, r4
 8006896:	3a15      	subs	r2, #21
 8006898:	f022 0203 	bic.w	r2, r2, #3
 800689c:	3204      	adds	r2, #4
 800689e:	f104 0115 	add.w	r1, r4, #21
 80068a2:	428f      	cmp	r7, r1
 80068a4:	bf38      	it	cc
 80068a6:	2204      	movcc	r2, #4
 80068a8:	9201      	str	r2, [sp, #4]
 80068aa:	9a02      	ldr	r2, [sp, #8]
 80068ac:	9303      	str	r3, [sp, #12]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d80c      	bhi.n	80068cc <__multiply+0x9c>
 80068b2:	2e00      	cmp	r6, #0
 80068b4:	dd03      	ble.n	80068be <__multiply+0x8e>
 80068b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d059      	beq.n	8006972 <__multiply+0x142>
 80068be:	6106      	str	r6, [r0, #16]
 80068c0:	b005      	add	sp, #20
 80068c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c6:	f843 2b04 	str.w	r2, [r3], #4
 80068ca:	e7d8      	b.n	800687e <__multiply+0x4e>
 80068cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80068d0:	f1ba 0f00 	cmp.w	sl, #0
 80068d4:	d023      	beq.n	800691e <__multiply+0xee>
 80068d6:	46a9      	mov	r9, r5
 80068d8:	f04f 0c00 	mov.w	ip, #0
 80068dc:	f104 0e14 	add.w	lr, r4, #20
 80068e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068e4:	f8d9 1000 	ldr.w	r1, [r9]
 80068e8:	fa1f fb82 	uxth.w	fp, r2
 80068ec:	b289      	uxth	r1, r1
 80068ee:	fb0a 110b 	mla	r1, sl, fp, r1
 80068f2:	4461      	add	r1, ip
 80068f4:	f8d9 c000 	ldr.w	ip, [r9]
 80068f8:	0c12      	lsrs	r2, r2, #16
 80068fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80068fe:	fb0a c202 	mla	r2, sl, r2, ip
 8006902:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006906:	b289      	uxth	r1, r1
 8006908:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800690c:	4577      	cmp	r7, lr
 800690e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006912:	f849 1b04 	str.w	r1, [r9], #4
 8006916:	d8e3      	bhi.n	80068e0 <__multiply+0xb0>
 8006918:	9a01      	ldr	r2, [sp, #4]
 800691a:	f845 c002 	str.w	ip, [r5, r2]
 800691e:	9a03      	ldr	r2, [sp, #12]
 8006920:	3304      	adds	r3, #4
 8006922:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006926:	f1b9 0f00 	cmp.w	r9, #0
 800692a:	d020      	beq.n	800696e <__multiply+0x13e>
 800692c:	46ae      	mov	lr, r5
 800692e:	f04f 0a00 	mov.w	sl, #0
 8006932:	6829      	ldr	r1, [r5, #0]
 8006934:	f104 0c14 	add.w	ip, r4, #20
 8006938:	f8bc b000 	ldrh.w	fp, [ip]
 800693c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006940:	b289      	uxth	r1, r1
 8006942:	fb09 220b 	mla	r2, r9, fp, r2
 8006946:	4492      	add	sl, r2
 8006948:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800694c:	f84e 1b04 	str.w	r1, [lr], #4
 8006950:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006954:	f8be 1000 	ldrh.w	r1, [lr]
 8006958:	0c12      	lsrs	r2, r2, #16
 800695a:	fb09 1102 	mla	r1, r9, r2, r1
 800695e:	4567      	cmp	r7, ip
 8006960:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006964:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006968:	d8e6      	bhi.n	8006938 <__multiply+0x108>
 800696a:	9a01      	ldr	r2, [sp, #4]
 800696c:	50a9      	str	r1, [r5, r2]
 800696e:	3504      	adds	r5, #4
 8006970:	e79b      	b.n	80068aa <__multiply+0x7a>
 8006972:	3e01      	subs	r6, #1
 8006974:	e79d      	b.n	80068b2 <__multiply+0x82>
 8006976:	bf00      	nop
 8006978:	08010300 	.word	0x08010300
 800697c:	0801038c 	.word	0x0801038c

08006980 <__pow5mult>:
 8006980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006984:	4615      	mov	r5, r2
 8006986:	f012 0203 	ands.w	r2, r2, #3
 800698a:	4606      	mov	r6, r0
 800698c:	460f      	mov	r7, r1
 800698e:	d007      	beq.n	80069a0 <__pow5mult+0x20>
 8006990:	4c25      	ldr	r4, [pc, #148]	; (8006a28 <__pow5mult+0xa8>)
 8006992:	3a01      	subs	r2, #1
 8006994:	2300      	movs	r3, #0
 8006996:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800699a:	f7ff fe55 	bl	8006648 <__multadd>
 800699e:	4607      	mov	r7, r0
 80069a0:	10ad      	asrs	r5, r5, #2
 80069a2:	d03d      	beq.n	8006a20 <__pow5mult+0xa0>
 80069a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069a6:	b97c      	cbnz	r4, 80069c8 <__pow5mult+0x48>
 80069a8:	2010      	movs	r0, #16
 80069aa:	f7ff fdb5 	bl	8006518 <malloc>
 80069ae:	4602      	mov	r2, r0
 80069b0:	6270      	str	r0, [r6, #36]	; 0x24
 80069b2:	b928      	cbnz	r0, 80069c0 <__pow5mult+0x40>
 80069b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069b8:	4b1c      	ldr	r3, [pc, #112]	; (8006a2c <__pow5mult+0xac>)
 80069ba:	481d      	ldr	r0, [pc, #116]	; (8006a30 <__pow5mult+0xb0>)
 80069bc:	f000 fd1e 	bl	80073fc <__assert_func>
 80069c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069c4:	6004      	str	r4, [r0, #0]
 80069c6:	60c4      	str	r4, [r0, #12]
 80069c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069d0:	b94c      	cbnz	r4, 80069e6 <__pow5mult+0x66>
 80069d2:	f240 2171 	movw	r1, #625	; 0x271
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7ff ff14 	bl	8006804 <__i2b>
 80069dc:	2300      	movs	r3, #0
 80069de:	4604      	mov	r4, r0
 80069e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80069e4:	6003      	str	r3, [r0, #0]
 80069e6:	f04f 0900 	mov.w	r9, #0
 80069ea:	07eb      	lsls	r3, r5, #31
 80069ec:	d50a      	bpl.n	8006a04 <__pow5mult+0x84>
 80069ee:	4639      	mov	r1, r7
 80069f0:	4622      	mov	r2, r4
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7ff ff1c 	bl	8006830 <__multiply>
 80069f8:	4680      	mov	r8, r0
 80069fa:	4639      	mov	r1, r7
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff fe01 	bl	8006604 <_Bfree>
 8006a02:	4647      	mov	r7, r8
 8006a04:	106d      	asrs	r5, r5, #1
 8006a06:	d00b      	beq.n	8006a20 <__pow5mult+0xa0>
 8006a08:	6820      	ldr	r0, [r4, #0]
 8006a0a:	b938      	cbnz	r0, 8006a1c <__pow5mult+0x9c>
 8006a0c:	4622      	mov	r2, r4
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7ff ff0d 	bl	8006830 <__multiply>
 8006a16:	6020      	str	r0, [r4, #0]
 8006a18:	f8c0 9000 	str.w	r9, [r0]
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	e7e4      	b.n	80069ea <__pow5mult+0x6a>
 8006a20:	4638      	mov	r0, r7
 8006a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a26:	bf00      	nop
 8006a28:	080104d8 	.word	0x080104d8
 8006a2c:	0801028e 	.word	0x0801028e
 8006a30:	0801038c 	.word	0x0801038c

08006a34 <__lshift>:
 8006a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	460c      	mov	r4, r1
 8006a3a:	4607      	mov	r7, r0
 8006a3c:	4691      	mov	r9, r2
 8006a3e:	6923      	ldr	r3, [r4, #16]
 8006a40:	6849      	ldr	r1, [r1, #4]
 8006a42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a46:	68a3      	ldr	r3, [r4, #8]
 8006a48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a4c:	f108 0601 	add.w	r6, r8, #1
 8006a50:	42b3      	cmp	r3, r6
 8006a52:	db0b      	blt.n	8006a6c <__lshift+0x38>
 8006a54:	4638      	mov	r0, r7
 8006a56:	f7ff fd95 	bl	8006584 <_Balloc>
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	b948      	cbnz	r0, 8006a72 <__lshift+0x3e>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a64:	4b29      	ldr	r3, [pc, #164]	; (8006b0c <__lshift+0xd8>)
 8006a66:	482a      	ldr	r0, [pc, #168]	; (8006b10 <__lshift+0xdc>)
 8006a68:	f000 fcc8 	bl	80073fc <__assert_func>
 8006a6c:	3101      	adds	r1, #1
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	e7ee      	b.n	8006a50 <__lshift+0x1c>
 8006a72:	2300      	movs	r3, #0
 8006a74:	f100 0114 	add.w	r1, r0, #20
 8006a78:	f100 0210 	add.w	r2, r0, #16
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	4553      	cmp	r3, sl
 8006a80:	db37      	blt.n	8006af2 <__lshift+0xbe>
 8006a82:	6920      	ldr	r0, [r4, #16]
 8006a84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a88:	f104 0314 	add.w	r3, r4, #20
 8006a8c:	f019 091f 	ands.w	r9, r9, #31
 8006a90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a98:	d02f      	beq.n	8006afa <__lshift+0xc6>
 8006a9a:	468a      	mov	sl, r1
 8006a9c:	f04f 0c00 	mov.w	ip, #0
 8006aa0:	f1c9 0e20 	rsb	lr, r9, #32
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	fa02 f209 	lsl.w	r2, r2, r9
 8006aaa:	ea42 020c 	orr.w	r2, r2, ip
 8006aae:	f84a 2b04 	str.w	r2, [sl], #4
 8006ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ab6:	4298      	cmp	r0, r3
 8006ab8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006abc:	d8f2      	bhi.n	8006aa4 <__lshift+0x70>
 8006abe:	1b03      	subs	r3, r0, r4
 8006ac0:	3b15      	subs	r3, #21
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	f104 0215 	add.w	r2, r4, #21
 8006acc:	4290      	cmp	r0, r2
 8006ace:	bf38      	it	cc
 8006ad0:	2304      	movcc	r3, #4
 8006ad2:	f841 c003 	str.w	ip, [r1, r3]
 8006ad6:	f1bc 0f00 	cmp.w	ip, #0
 8006ada:	d001      	beq.n	8006ae0 <__lshift+0xac>
 8006adc:	f108 0602 	add.w	r6, r8, #2
 8006ae0:	3e01      	subs	r6, #1
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	612e      	str	r6, [r5, #16]
 8006ae8:	f7ff fd8c 	bl	8006604 <_Bfree>
 8006aec:	4628      	mov	r0, r5
 8006aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006af6:	3301      	adds	r3, #1
 8006af8:	e7c1      	b.n	8006a7e <__lshift+0x4a>
 8006afa:	3904      	subs	r1, #4
 8006afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b00:	4298      	cmp	r0, r3
 8006b02:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b06:	d8f9      	bhi.n	8006afc <__lshift+0xc8>
 8006b08:	e7ea      	b.n	8006ae0 <__lshift+0xac>
 8006b0a:	bf00      	nop
 8006b0c:	08010300 	.word	0x08010300
 8006b10:	0801038c 	.word	0x0801038c

08006b14 <__mcmp>:
 8006b14:	4603      	mov	r3, r0
 8006b16:	690a      	ldr	r2, [r1, #16]
 8006b18:	6900      	ldr	r0, [r0, #16]
 8006b1a:	b530      	push	{r4, r5, lr}
 8006b1c:	1a80      	subs	r0, r0, r2
 8006b1e:	d10d      	bne.n	8006b3c <__mcmp+0x28>
 8006b20:	3314      	adds	r3, #20
 8006b22:	3114      	adds	r1, #20
 8006b24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b34:	4295      	cmp	r5, r2
 8006b36:	d002      	beq.n	8006b3e <__mcmp+0x2a>
 8006b38:	d304      	bcc.n	8006b44 <__mcmp+0x30>
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	bd30      	pop	{r4, r5, pc}
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	d3f4      	bcc.n	8006b2c <__mcmp+0x18>
 8006b42:	e7fb      	b.n	8006b3c <__mcmp+0x28>
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b48:	e7f8      	b.n	8006b3c <__mcmp+0x28>
	...

08006b4c <__mdiff>:
 8006b4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	460d      	mov	r5, r1
 8006b52:	4607      	mov	r7, r0
 8006b54:	4611      	mov	r1, r2
 8006b56:	4628      	mov	r0, r5
 8006b58:	4614      	mov	r4, r2
 8006b5a:	f7ff ffdb 	bl	8006b14 <__mcmp>
 8006b5e:	1e06      	subs	r6, r0, #0
 8006b60:	d111      	bne.n	8006b86 <__mdiff+0x3a>
 8006b62:	4631      	mov	r1, r6
 8006b64:	4638      	mov	r0, r7
 8006b66:	f7ff fd0d 	bl	8006584 <_Balloc>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	b928      	cbnz	r0, 8006b7a <__mdiff+0x2e>
 8006b6e:	f240 2132 	movw	r1, #562	; 0x232
 8006b72:	4b3a      	ldr	r3, [pc, #232]	; (8006c5c <__mdiff+0x110>)
 8006b74:	483a      	ldr	r0, [pc, #232]	; (8006c60 <__mdiff+0x114>)
 8006b76:	f000 fc41 	bl	80073fc <__assert_func>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b80:	4610      	mov	r0, r2
 8006b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b86:	bfa4      	itt	ge
 8006b88:	4623      	movge	r3, r4
 8006b8a:	462c      	movge	r4, r5
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	6861      	ldr	r1, [r4, #4]
 8006b90:	bfa6      	itte	ge
 8006b92:	461d      	movge	r5, r3
 8006b94:	2600      	movge	r6, #0
 8006b96:	2601      	movlt	r6, #1
 8006b98:	f7ff fcf4 	bl	8006584 <_Balloc>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	b918      	cbnz	r0, 8006ba8 <__mdiff+0x5c>
 8006ba0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ba4:	4b2d      	ldr	r3, [pc, #180]	; (8006c5c <__mdiff+0x110>)
 8006ba6:	e7e5      	b.n	8006b74 <__mdiff+0x28>
 8006ba8:	f102 0814 	add.w	r8, r2, #20
 8006bac:	46c2      	mov	sl, r8
 8006bae:	f04f 0c00 	mov.w	ip, #0
 8006bb2:	6927      	ldr	r7, [r4, #16]
 8006bb4:	60c6      	str	r6, [r0, #12]
 8006bb6:	692e      	ldr	r6, [r5, #16]
 8006bb8:	f104 0014 	add.w	r0, r4, #20
 8006bbc:	f105 0914 	add.w	r9, r5, #20
 8006bc0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006bc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006bc8:	3410      	adds	r4, #16
 8006bca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006bce:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bd2:	fa1f f18b 	uxth.w	r1, fp
 8006bd6:	448c      	add	ip, r1
 8006bd8:	b299      	uxth	r1, r3
 8006bda:	0c1b      	lsrs	r3, r3, #16
 8006bdc:	ebac 0101 	sub.w	r1, ip, r1
 8006be0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006be4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006be8:	b289      	uxth	r1, r1
 8006bea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006bee:	454e      	cmp	r6, r9
 8006bf0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006bf4:	f84a 3b04 	str.w	r3, [sl], #4
 8006bf8:	d8e7      	bhi.n	8006bca <__mdiff+0x7e>
 8006bfa:	1b73      	subs	r3, r6, r5
 8006bfc:	3b15      	subs	r3, #21
 8006bfe:	f023 0303 	bic.w	r3, r3, #3
 8006c02:	3515      	adds	r5, #21
 8006c04:	3304      	adds	r3, #4
 8006c06:	42ae      	cmp	r6, r5
 8006c08:	bf38      	it	cc
 8006c0a:	2304      	movcc	r3, #4
 8006c0c:	4418      	add	r0, r3
 8006c0e:	4443      	add	r3, r8
 8006c10:	461e      	mov	r6, r3
 8006c12:	4605      	mov	r5, r0
 8006c14:	4575      	cmp	r5, lr
 8006c16:	d30e      	bcc.n	8006c36 <__mdiff+0xea>
 8006c18:	f10e 0103 	add.w	r1, lr, #3
 8006c1c:	1a09      	subs	r1, r1, r0
 8006c1e:	f021 0103 	bic.w	r1, r1, #3
 8006c22:	3803      	subs	r0, #3
 8006c24:	4586      	cmp	lr, r0
 8006c26:	bf38      	it	cc
 8006c28:	2100      	movcc	r1, #0
 8006c2a:	4419      	add	r1, r3
 8006c2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006c30:	b18b      	cbz	r3, 8006c56 <__mdiff+0x10a>
 8006c32:	6117      	str	r7, [r2, #16]
 8006c34:	e7a4      	b.n	8006b80 <__mdiff+0x34>
 8006c36:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c3a:	fa1f f188 	uxth.w	r1, r8
 8006c3e:	4461      	add	r1, ip
 8006c40:	140c      	asrs	r4, r1, #16
 8006c42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c46:	b289      	uxth	r1, r1
 8006c48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c4c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c50:	f846 1b04 	str.w	r1, [r6], #4
 8006c54:	e7de      	b.n	8006c14 <__mdiff+0xc8>
 8006c56:	3f01      	subs	r7, #1
 8006c58:	e7e8      	b.n	8006c2c <__mdiff+0xe0>
 8006c5a:	bf00      	nop
 8006c5c:	08010300 	.word	0x08010300
 8006c60:	0801038c 	.word	0x0801038c

08006c64 <__ulp>:
 8006c64:	4b11      	ldr	r3, [pc, #68]	; (8006cac <__ulp+0x48>)
 8006c66:	400b      	ands	r3, r1
 8006c68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dd02      	ble.n	8006c76 <__ulp+0x12>
 8006c70:	2000      	movs	r0, #0
 8006c72:	4619      	mov	r1, r3
 8006c74:	4770      	bx	lr
 8006c76:	425b      	negs	r3, r3
 8006c78:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006c7c:	f04f 0000 	mov.w	r0, #0
 8006c80:	f04f 0100 	mov.w	r1, #0
 8006c84:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006c88:	da04      	bge.n	8006c94 <__ulp+0x30>
 8006c8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c8e:	fa43 f102 	asr.w	r1, r3, r2
 8006c92:	4770      	bx	lr
 8006c94:	f1a2 0314 	sub.w	r3, r2, #20
 8006c98:	2b1e      	cmp	r3, #30
 8006c9a:	bfd6      	itet	le
 8006c9c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006ca0:	2301      	movgt	r3, #1
 8006ca2:	fa22 f303 	lsrle.w	r3, r2, r3
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	7ff00000 	.word	0x7ff00000

08006cb0 <__b2d>:
 8006cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	6907      	ldr	r7, [r0, #16]
 8006cb6:	f100 0914 	add.w	r9, r0, #20
 8006cba:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006cbe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006cc2:	f1a7 0804 	sub.w	r8, r7, #4
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff fd4e 	bl	8006768 <__hi0bits>
 8006ccc:	f1c0 0320 	rsb	r3, r0, #32
 8006cd0:	280a      	cmp	r0, #10
 8006cd2:	600b      	str	r3, [r1, #0]
 8006cd4:	491f      	ldr	r1, [pc, #124]	; (8006d54 <__b2d+0xa4>)
 8006cd6:	dc17      	bgt.n	8006d08 <__b2d+0x58>
 8006cd8:	45c1      	cmp	r9, r8
 8006cda:	bf28      	it	cs
 8006cdc:	2200      	movcs	r2, #0
 8006cde:	f1c0 0c0b 	rsb	ip, r0, #11
 8006ce2:	fa26 f30c 	lsr.w	r3, r6, ip
 8006ce6:	bf38      	it	cc
 8006ce8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006cec:	ea43 0501 	orr.w	r5, r3, r1
 8006cf0:	f100 0315 	add.w	r3, r0, #21
 8006cf4:	fa06 f303 	lsl.w	r3, r6, r3
 8006cf8:	fa22 f20c 	lsr.w	r2, r2, ip
 8006cfc:	ea43 0402 	orr.w	r4, r3, r2
 8006d00:	4620      	mov	r0, r4
 8006d02:	4629      	mov	r1, r5
 8006d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d08:	45c1      	cmp	r9, r8
 8006d0a:	bf2e      	itee	cs
 8006d0c:	2200      	movcs	r2, #0
 8006d0e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006d12:	f1a7 0808 	subcc.w	r8, r7, #8
 8006d16:	f1b0 030b 	subs.w	r3, r0, #11
 8006d1a:	d016      	beq.n	8006d4a <__b2d+0x9a>
 8006d1c:	f1c3 0720 	rsb	r7, r3, #32
 8006d20:	fa22 f107 	lsr.w	r1, r2, r7
 8006d24:	45c8      	cmp	r8, r9
 8006d26:	fa06 f603 	lsl.w	r6, r6, r3
 8006d2a:	ea46 0601 	orr.w	r6, r6, r1
 8006d2e:	bf94      	ite	ls
 8006d30:	2100      	movls	r1, #0
 8006d32:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006d36:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006d3a:	fa02 f003 	lsl.w	r0, r2, r3
 8006d3e:	40f9      	lsrs	r1, r7
 8006d40:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d44:	ea40 0401 	orr.w	r4, r0, r1
 8006d48:	e7da      	b.n	8006d00 <__b2d+0x50>
 8006d4a:	4614      	mov	r4, r2
 8006d4c:	ea46 0501 	orr.w	r5, r6, r1
 8006d50:	e7d6      	b.n	8006d00 <__b2d+0x50>
 8006d52:	bf00      	nop
 8006d54:	3ff00000 	.word	0x3ff00000

08006d58 <__d2b>:
 8006d58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006d62:	4690      	mov	r8, r2
 8006d64:	461d      	mov	r5, r3
 8006d66:	f7ff fc0d 	bl	8006584 <_Balloc>
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	b930      	cbnz	r0, 8006d7c <__d2b+0x24>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	f240 310a 	movw	r1, #778	; 0x30a
 8006d74:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <__d2b+0xb0>)
 8006d76:	4825      	ldr	r0, [pc, #148]	; (8006e0c <__d2b+0xb4>)
 8006d78:	f000 fb40 	bl	80073fc <__assert_func>
 8006d7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006d80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006d84:	bb2d      	cbnz	r5, 8006dd2 <__d2b+0x7a>
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	f1b8 0300 	subs.w	r3, r8, #0
 8006d8c:	d026      	beq.n	8006ddc <__d2b+0x84>
 8006d8e:	4668      	mov	r0, sp
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	f7ff fd09 	bl	80067a8 <__lo0bits>
 8006d96:	9900      	ldr	r1, [sp, #0]
 8006d98:	b1f0      	cbz	r0, 8006dd8 <__d2b+0x80>
 8006d9a:	9a01      	ldr	r2, [sp, #4]
 8006d9c:	f1c0 0320 	rsb	r3, r0, #32
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	430b      	orrs	r3, r1
 8006da6:	40c2      	lsrs	r2, r0
 8006da8:	6163      	str	r3, [r4, #20]
 8006daa:	9201      	str	r2, [sp, #4]
 8006dac:	9b01      	ldr	r3, [sp, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bf14      	ite	ne
 8006db2:	2102      	movne	r1, #2
 8006db4:	2101      	moveq	r1, #1
 8006db6:	61a3      	str	r3, [r4, #24]
 8006db8:	6121      	str	r1, [r4, #16]
 8006dba:	b1c5      	cbz	r5, 8006dee <__d2b+0x96>
 8006dbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006dc0:	4405      	add	r5, r0
 8006dc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006dc6:	603d      	str	r5, [r7, #0]
 8006dc8:	6030      	str	r0, [r6, #0]
 8006dca:	4620      	mov	r0, r4
 8006dcc:	b002      	add	sp, #8
 8006dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dd6:	e7d6      	b.n	8006d86 <__d2b+0x2e>
 8006dd8:	6161      	str	r1, [r4, #20]
 8006dda:	e7e7      	b.n	8006dac <__d2b+0x54>
 8006ddc:	a801      	add	r0, sp, #4
 8006dde:	f7ff fce3 	bl	80067a8 <__lo0bits>
 8006de2:	2101      	movs	r1, #1
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	6121      	str	r1, [r4, #16]
 8006de8:	6163      	str	r3, [r4, #20]
 8006dea:	3020      	adds	r0, #32
 8006dec:	e7e5      	b.n	8006dba <__d2b+0x62>
 8006dee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006df2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006df6:	6038      	str	r0, [r7, #0]
 8006df8:	6918      	ldr	r0, [r3, #16]
 8006dfa:	f7ff fcb5 	bl	8006768 <__hi0bits>
 8006dfe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006e02:	6031      	str	r1, [r6, #0]
 8006e04:	e7e1      	b.n	8006dca <__d2b+0x72>
 8006e06:	bf00      	nop
 8006e08:	08010300 	.word	0x08010300
 8006e0c:	0801038c 	.word	0x0801038c

08006e10 <__ratio>:
 8006e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	4688      	mov	r8, r1
 8006e16:	4669      	mov	r1, sp
 8006e18:	4681      	mov	r9, r0
 8006e1a:	f7ff ff49 	bl	8006cb0 <__b2d>
 8006e1e:	460f      	mov	r7, r1
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	4640      	mov	r0, r8
 8006e26:	a901      	add	r1, sp, #4
 8006e28:	f7ff ff42 	bl	8006cb0 <__b2d>
 8006e2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006e34:	468b      	mov	fp, r1
 8006e36:	eba3 0c02 	sub.w	ip, r3, r2
 8006e3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006e3e:	1a9b      	subs	r3, r3, r2
 8006e40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bfd5      	itete	le
 8006e48:	460a      	movle	r2, r1
 8006e4a:	462a      	movgt	r2, r5
 8006e4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e50:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e54:	bfd8      	it	le
 8006e56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006e5a:	465b      	mov	r3, fp
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	4639      	mov	r1, r7
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7f9 fccf 	bl	8000804 <__aeabi_ddiv>
 8006e66:	b003      	add	sp, #12
 8006e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e6c <__copybits>:
 8006e6c:	3901      	subs	r1, #1
 8006e6e:	b570      	push	{r4, r5, r6, lr}
 8006e70:	1149      	asrs	r1, r1, #5
 8006e72:	6914      	ldr	r4, [r2, #16]
 8006e74:	3101      	adds	r1, #1
 8006e76:	f102 0314 	add.w	r3, r2, #20
 8006e7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e82:	1f05      	subs	r5, r0, #4
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	d30c      	bcc.n	8006ea2 <__copybits+0x36>
 8006e88:	1aa3      	subs	r3, r4, r2
 8006e8a:	3b11      	subs	r3, #17
 8006e8c:	f023 0303 	bic.w	r3, r3, #3
 8006e90:	3211      	adds	r2, #17
 8006e92:	42a2      	cmp	r2, r4
 8006e94:	bf88      	it	hi
 8006e96:	2300      	movhi	r3, #0
 8006e98:	4418      	add	r0, r3
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4288      	cmp	r0, r1
 8006e9e:	d305      	bcc.n	8006eac <__copybits+0x40>
 8006ea0:	bd70      	pop	{r4, r5, r6, pc}
 8006ea2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ea6:	f845 6f04 	str.w	r6, [r5, #4]!
 8006eaa:	e7eb      	b.n	8006e84 <__copybits+0x18>
 8006eac:	f840 3b04 	str.w	r3, [r0], #4
 8006eb0:	e7f4      	b.n	8006e9c <__copybits+0x30>

08006eb2 <__any_on>:
 8006eb2:	f100 0214 	add.w	r2, r0, #20
 8006eb6:	6900      	ldr	r0, [r0, #16]
 8006eb8:	114b      	asrs	r3, r1, #5
 8006eba:	4298      	cmp	r0, r3
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	db11      	blt.n	8006ee4 <__any_on+0x32>
 8006ec0:	dd0a      	ble.n	8006ed8 <__any_on+0x26>
 8006ec2:	f011 011f 	ands.w	r1, r1, #31
 8006ec6:	d007      	beq.n	8006ed8 <__any_on+0x26>
 8006ec8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006ecc:	fa24 f001 	lsr.w	r0, r4, r1
 8006ed0:	fa00 f101 	lsl.w	r1, r0, r1
 8006ed4:	428c      	cmp	r4, r1
 8006ed6:	d10b      	bne.n	8006ef0 <__any_on+0x3e>
 8006ed8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d803      	bhi.n	8006ee8 <__any_on+0x36>
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	bd10      	pop	{r4, pc}
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	e7f7      	b.n	8006ed8 <__any_on+0x26>
 8006ee8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006eec:	2900      	cmp	r1, #0
 8006eee:	d0f5      	beq.n	8006edc <__any_on+0x2a>
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	e7f6      	b.n	8006ee2 <__any_on+0x30>

08006ef4 <_calloc_r>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	fba1 5402 	umull	r5, r4, r1, r2
 8006efa:	b934      	cbnz	r4, 8006f0a <_calloc_r+0x16>
 8006efc:	4629      	mov	r1, r5
 8006efe:	f000 f875 	bl	8006fec <_malloc_r>
 8006f02:	4606      	mov	r6, r0
 8006f04:	b928      	cbnz	r0, 8006f12 <_calloc_r+0x1e>
 8006f06:	4630      	mov	r0, r6
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
 8006f0a:	220c      	movs	r2, #12
 8006f0c:	2600      	movs	r6, #0
 8006f0e:	6002      	str	r2, [r0, #0]
 8006f10:	e7f9      	b.n	8006f06 <_calloc_r+0x12>
 8006f12:	462a      	mov	r2, r5
 8006f14:	4621      	mov	r1, r4
 8006f16:	f7fc fb9d 	bl	8003654 <memset>
 8006f1a:	e7f4      	b.n	8006f06 <_calloc_r+0x12>

08006f1c <_free_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4605      	mov	r5, r0
 8006f20:	2900      	cmp	r1, #0
 8006f22:	d040      	beq.n	8006fa6 <_free_r+0x8a>
 8006f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f28:	1f0c      	subs	r4, r1, #4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfb8      	it	lt
 8006f2e:	18e4      	addlt	r4, r4, r3
 8006f30:	f000 faae 	bl	8007490 <__malloc_lock>
 8006f34:	4a1c      	ldr	r2, [pc, #112]	; (8006fa8 <_free_r+0x8c>)
 8006f36:	6813      	ldr	r3, [r2, #0]
 8006f38:	b933      	cbnz	r3, 8006f48 <_free_r+0x2c>
 8006f3a:	6063      	str	r3, [r4, #4]
 8006f3c:	6014      	str	r4, [r2, #0]
 8006f3e:	4628      	mov	r0, r5
 8006f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f44:	f000 baaa 	b.w	800749c <__malloc_unlock>
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	d908      	bls.n	8006f5e <_free_r+0x42>
 8006f4c:	6820      	ldr	r0, [r4, #0]
 8006f4e:	1821      	adds	r1, r4, r0
 8006f50:	428b      	cmp	r3, r1
 8006f52:	bf01      	itttt	eq
 8006f54:	6819      	ldreq	r1, [r3, #0]
 8006f56:	685b      	ldreq	r3, [r3, #4]
 8006f58:	1809      	addeq	r1, r1, r0
 8006f5a:	6021      	streq	r1, [r4, #0]
 8006f5c:	e7ed      	b.n	8006f3a <_free_r+0x1e>
 8006f5e:	461a      	mov	r2, r3
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	b10b      	cbz	r3, 8006f68 <_free_r+0x4c>
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d9fa      	bls.n	8006f5e <_free_r+0x42>
 8006f68:	6811      	ldr	r1, [r2, #0]
 8006f6a:	1850      	adds	r0, r2, r1
 8006f6c:	42a0      	cmp	r0, r4
 8006f6e:	d10b      	bne.n	8006f88 <_free_r+0x6c>
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	4401      	add	r1, r0
 8006f74:	1850      	adds	r0, r2, r1
 8006f76:	4283      	cmp	r3, r0
 8006f78:	6011      	str	r1, [r2, #0]
 8006f7a:	d1e0      	bne.n	8006f3e <_free_r+0x22>
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	4401      	add	r1, r0
 8006f82:	6011      	str	r1, [r2, #0]
 8006f84:	6053      	str	r3, [r2, #4]
 8006f86:	e7da      	b.n	8006f3e <_free_r+0x22>
 8006f88:	d902      	bls.n	8006f90 <_free_r+0x74>
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	e7d6      	b.n	8006f3e <_free_r+0x22>
 8006f90:	6820      	ldr	r0, [r4, #0]
 8006f92:	1821      	adds	r1, r4, r0
 8006f94:	428b      	cmp	r3, r1
 8006f96:	bf01      	itttt	eq
 8006f98:	6819      	ldreq	r1, [r3, #0]
 8006f9a:	685b      	ldreq	r3, [r3, #4]
 8006f9c:	1809      	addeq	r1, r1, r0
 8006f9e:	6021      	streq	r1, [r4, #0]
 8006fa0:	6063      	str	r3, [r4, #4]
 8006fa2:	6054      	str	r4, [r2, #4]
 8006fa4:	e7cb      	b.n	8006f3e <_free_r+0x22>
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
 8006fa8:	200003b0 	.word	0x200003b0

08006fac <sbrk_aligned>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	4e0e      	ldr	r6, [pc, #56]	; (8006fe8 <sbrk_aligned+0x3c>)
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	6831      	ldr	r1, [r6, #0]
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	b911      	cbnz	r1, 8006fbe <sbrk_aligned+0x12>
 8006fb8:	f000 f9ee 	bl	8007398 <_sbrk_r>
 8006fbc:	6030      	str	r0, [r6, #0]
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 f9e9 	bl	8007398 <_sbrk_r>
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	d00a      	beq.n	8006fe0 <sbrk_aligned+0x34>
 8006fca:	1cc4      	adds	r4, r0, #3
 8006fcc:	f024 0403 	bic.w	r4, r4, #3
 8006fd0:	42a0      	cmp	r0, r4
 8006fd2:	d007      	beq.n	8006fe4 <sbrk_aligned+0x38>
 8006fd4:	1a21      	subs	r1, r4, r0
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f000 f9de 	bl	8007398 <_sbrk_r>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d101      	bne.n	8006fe4 <sbrk_aligned+0x38>
 8006fe0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}
 8006fe8:	200003b4 	.word	0x200003b4

08006fec <_malloc_r>:
 8006fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	1ccd      	adds	r5, r1, #3
 8006ff2:	f025 0503 	bic.w	r5, r5, #3
 8006ff6:	3508      	adds	r5, #8
 8006ff8:	2d0c      	cmp	r5, #12
 8006ffa:	bf38      	it	cc
 8006ffc:	250c      	movcc	r5, #12
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	4607      	mov	r7, r0
 8007002:	db01      	blt.n	8007008 <_malloc_r+0x1c>
 8007004:	42a9      	cmp	r1, r5
 8007006:	d905      	bls.n	8007014 <_malloc_r+0x28>
 8007008:	230c      	movs	r3, #12
 800700a:	2600      	movs	r6, #0
 800700c:	603b      	str	r3, [r7, #0]
 800700e:	4630      	mov	r0, r6
 8007010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007014:	4e2e      	ldr	r6, [pc, #184]	; (80070d0 <_malloc_r+0xe4>)
 8007016:	f000 fa3b 	bl	8007490 <__malloc_lock>
 800701a:	6833      	ldr	r3, [r6, #0]
 800701c:	461c      	mov	r4, r3
 800701e:	bb34      	cbnz	r4, 800706e <_malloc_r+0x82>
 8007020:	4629      	mov	r1, r5
 8007022:	4638      	mov	r0, r7
 8007024:	f7ff ffc2 	bl	8006fac <sbrk_aligned>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	4604      	mov	r4, r0
 800702c:	d14d      	bne.n	80070ca <_malloc_r+0xde>
 800702e:	6834      	ldr	r4, [r6, #0]
 8007030:	4626      	mov	r6, r4
 8007032:	2e00      	cmp	r6, #0
 8007034:	d140      	bne.n	80070b8 <_malloc_r+0xcc>
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	4631      	mov	r1, r6
 800703a:	4638      	mov	r0, r7
 800703c:	eb04 0803 	add.w	r8, r4, r3
 8007040:	f000 f9aa 	bl	8007398 <_sbrk_r>
 8007044:	4580      	cmp	r8, r0
 8007046:	d13a      	bne.n	80070be <_malloc_r+0xd2>
 8007048:	6821      	ldr	r1, [r4, #0]
 800704a:	3503      	adds	r5, #3
 800704c:	1a6d      	subs	r5, r5, r1
 800704e:	f025 0503 	bic.w	r5, r5, #3
 8007052:	3508      	adds	r5, #8
 8007054:	2d0c      	cmp	r5, #12
 8007056:	bf38      	it	cc
 8007058:	250c      	movcc	r5, #12
 800705a:	4638      	mov	r0, r7
 800705c:	4629      	mov	r1, r5
 800705e:	f7ff ffa5 	bl	8006fac <sbrk_aligned>
 8007062:	3001      	adds	r0, #1
 8007064:	d02b      	beq.n	80070be <_malloc_r+0xd2>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	442b      	add	r3, r5
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	e00e      	b.n	800708c <_malloc_r+0xa0>
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	1b52      	subs	r2, r2, r5
 8007072:	d41e      	bmi.n	80070b2 <_malloc_r+0xc6>
 8007074:	2a0b      	cmp	r2, #11
 8007076:	d916      	bls.n	80070a6 <_malloc_r+0xba>
 8007078:	1961      	adds	r1, r4, r5
 800707a:	42a3      	cmp	r3, r4
 800707c:	6025      	str	r5, [r4, #0]
 800707e:	bf18      	it	ne
 8007080:	6059      	strne	r1, [r3, #4]
 8007082:	6863      	ldr	r3, [r4, #4]
 8007084:	bf08      	it	eq
 8007086:	6031      	streq	r1, [r6, #0]
 8007088:	5162      	str	r2, [r4, r5]
 800708a:	604b      	str	r3, [r1, #4]
 800708c:	4638      	mov	r0, r7
 800708e:	f104 060b 	add.w	r6, r4, #11
 8007092:	f000 fa03 	bl	800749c <__malloc_unlock>
 8007096:	f026 0607 	bic.w	r6, r6, #7
 800709a:	1d23      	adds	r3, r4, #4
 800709c:	1af2      	subs	r2, r6, r3
 800709e:	d0b6      	beq.n	800700e <_malloc_r+0x22>
 80070a0:	1b9b      	subs	r3, r3, r6
 80070a2:	50a3      	str	r3, [r4, r2]
 80070a4:	e7b3      	b.n	800700e <_malloc_r+0x22>
 80070a6:	6862      	ldr	r2, [r4, #4]
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	bf0c      	ite	eq
 80070ac:	6032      	streq	r2, [r6, #0]
 80070ae:	605a      	strne	r2, [r3, #4]
 80070b0:	e7ec      	b.n	800708c <_malloc_r+0xa0>
 80070b2:	4623      	mov	r3, r4
 80070b4:	6864      	ldr	r4, [r4, #4]
 80070b6:	e7b2      	b.n	800701e <_malloc_r+0x32>
 80070b8:	4634      	mov	r4, r6
 80070ba:	6876      	ldr	r6, [r6, #4]
 80070bc:	e7b9      	b.n	8007032 <_malloc_r+0x46>
 80070be:	230c      	movs	r3, #12
 80070c0:	4638      	mov	r0, r7
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	f000 f9ea 	bl	800749c <__malloc_unlock>
 80070c8:	e7a1      	b.n	800700e <_malloc_r+0x22>
 80070ca:	6025      	str	r5, [r4, #0]
 80070cc:	e7de      	b.n	800708c <_malloc_r+0xa0>
 80070ce:	bf00      	nop
 80070d0:	200003b0 	.word	0x200003b0

080070d4 <__ssputs_r>:
 80070d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d8:	688e      	ldr	r6, [r1, #8]
 80070da:	4682      	mov	sl, r0
 80070dc:	429e      	cmp	r6, r3
 80070de:	460c      	mov	r4, r1
 80070e0:	4690      	mov	r8, r2
 80070e2:	461f      	mov	r7, r3
 80070e4:	d838      	bhi.n	8007158 <__ssputs_r+0x84>
 80070e6:	898a      	ldrh	r2, [r1, #12]
 80070e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070ec:	d032      	beq.n	8007154 <__ssputs_r+0x80>
 80070ee:	6825      	ldr	r5, [r4, #0]
 80070f0:	6909      	ldr	r1, [r1, #16]
 80070f2:	3301      	adds	r3, #1
 80070f4:	eba5 0901 	sub.w	r9, r5, r1
 80070f8:	6965      	ldr	r5, [r4, #20]
 80070fa:	444b      	add	r3, r9
 80070fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007104:	106d      	asrs	r5, r5, #1
 8007106:	429d      	cmp	r5, r3
 8007108:	bf38      	it	cc
 800710a:	461d      	movcc	r5, r3
 800710c:	0553      	lsls	r3, r2, #21
 800710e:	d531      	bpl.n	8007174 <__ssputs_r+0xa0>
 8007110:	4629      	mov	r1, r5
 8007112:	f7ff ff6b 	bl	8006fec <_malloc_r>
 8007116:	4606      	mov	r6, r0
 8007118:	b950      	cbnz	r0, 8007130 <__ssputs_r+0x5c>
 800711a:	230c      	movs	r3, #12
 800711c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007120:	f8ca 3000 	str.w	r3, [sl]
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800712a:	81a3      	strh	r3, [r4, #12]
 800712c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007130:	464a      	mov	r2, r9
 8007132:	6921      	ldr	r1, [r4, #16]
 8007134:	f7ff fa18 	bl	8006568 <memcpy>
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800713e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	6126      	str	r6, [r4, #16]
 8007146:	444e      	add	r6, r9
 8007148:	6026      	str	r6, [r4, #0]
 800714a:	463e      	mov	r6, r7
 800714c:	6165      	str	r5, [r4, #20]
 800714e:	eba5 0509 	sub.w	r5, r5, r9
 8007152:	60a5      	str	r5, [r4, #8]
 8007154:	42be      	cmp	r6, r7
 8007156:	d900      	bls.n	800715a <__ssputs_r+0x86>
 8007158:	463e      	mov	r6, r7
 800715a:	4632      	mov	r2, r6
 800715c:	4641      	mov	r1, r8
 800715e:	6820      	ldr	r0, [r4, #0]
 8007160:	f000 f97c 	bl	800745c <memmove>
 8007164:	68a3      	ldr	r3, [r4, #8]
 8007166:	2000      	movs	r0, #0
 8007168:	1b9b      	subs	r3, r3, r6
 800716a:	60a3      	str	r3, [r4, #8]
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	4433      	add	r3, r6
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	e7db      	b.n	800712c <__ssputs_r+0x58>
 8007174:	462a      	mov	r2, r5
 8007176:	f000 f997 	bl	80074a8 <_realloc_r>
 800717a:	4606      	mov	r6, r0
 800717c:	2800      	cmp	r0, #0
 800717e:	d1e1      	bne.n	8007144 <__ssputs_r+0x70>
 8007180:	4650      	mov	r0, sl
 8007182:	6921      	ldr	r1, [r4, #16]
 8007184:	f7ff feca 	bl	8006f1c <_free_r>
 8007188:	e7c7      	b.n	800711a <__ssputs_r+0x46>
	...

0800718c <_svfiprintf_r>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	4698      	mov	r8, r3
 8007192:	898b      	ldrh	r3, [r1, #12]
 8007194:	4607      	mov	r7, r0
 8007196:	061b      	lsls	r3, r3, #24
 8007198:	460d      	mov	r5, r1
 800719a:	4614      	mov	r4, r2
 800719c:	b09d      	sub	sp, #116	; 0x74
 800719e:	d50e      	bpl.n	80071be <_svfiprintf_r+0x32>
 80071a0:	690b      	ldr	r3, [r1, #16]
 80071a2:	b963      	cbnz	r3, 80071be <_svfiprintf_r+0x32>
 80071a4:	2140      	movs	r1, #64	; 0x40
 80071a6:	f7ff ff21 	bl	8006fec <_malloc_r>
 80071aa:	6028      	str	r0, [r5, #0]
 80071ac:	6128      	str	r0, [r5, #16]
 80071ae:	b920      	cbnz	r0, 80071ba <_svfiprintf_r+0x2e>
 80071b0:	230c      	movs	r3, #12
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071b8:	e0d1      	b.n	800735e <_svfiprintf_r+0x1d2>
 80071ba:	2340      	movs	r3, #64	; 0x40
 80071bc:	616b      	str	r3, [r5, #20]
 80071be:	2300      	movs	r3, #0
 80071c0:	9309      	str	r3, [sp, #36]	; 0x24
 80071c2:	2320      	movs	r3, #32
 80071c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071c8:	2330      	movs	r3, #48	; 0x30
 80071ca:	f04f 0901 	mov.w	r9, #1
 80071ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007378 <_svfiprintf_r+0x1ec>
 80071d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071da:	4623      	mov	r3, r4
 80071dc:	469a      	mov	sl, r3
 80071de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e2:	b10a      	cbz	r2, 80071e8 <_svfiprintf_r+0x5c>
 80071e4:	2a25      	cmp	r2, #37	; 0x25
 80071e6:	d1f9      	bne.n	80071dc <_svfiprintf_r+0x50>
 80071e8:	ebba 0b04 	subs.w	fp, sl, r4
 80071ec:	d00b      	beq.n	8007206 <_svfiprintf_r+0x7a>
 80071ee:	465b      	mov	r3, fp
 80071f0:	4622      	mov	r2, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	4638      	mov	r0, r7
 80071f6:	f7ff ff6d 	bl	80070d4 <__ssputs_r>
 80071fa:	3001      	adds	r0, #1
 80071fc:	f000 80aa 	beq.w	8007354 <_svfiprintf_r+0x1c8>
 8007200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007202:	445a      	add	r2, fp
 8007204:	9209      	str	r2, [sp, #36]	; 0x24
 8007206:	f89a 3000 	ldrb.w	r3, [sl]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 80a2 	beq.w	8007354 <_svfiprintf_r+0x1c8>
 8007210:	2300      	movs	r3, #0
 8007212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800721a:	f10a 0a01 	add.w	sl, sl, #1
 800721e:	9304      	str	r3, [sp, #16]
 8007220:	9307      	str	r3, [sp, #28]
 8007222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007226:	931a      	str	r3, [sp, #104]	; 0x68
 8007228:	4654      	mov	r4, sl
 800722a:	2205      	movs	r2, #5
 800722c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007230:	4851      	ldr	r0, [pc, #324]	; (8007378 <_svfiprintf_r+0x1ec>)
 8007232:	f7ff f98b 	bl	800654c <memchr>
 8007236:	9a04      	ldr	r2, [sp, #16]
 8007238:	b9d8      	cbnz	r0, 8007272 <_svfiprintf_r+0xe6>
 800723a:	06d0      	lsls	r0, r2, #27
 800723c:	bf44      	itt	mi
 800723e:	2320      	movmi	r3, #32
 8007240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007244:	0711      	lsls	r1, r2, #28
 8007246:	bf44      	itt	mi
 8007248:	232b      	movmi	r3, #43	; 0x2b
 800724a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800724e:	f89a 3000 	ldrb.w	r3, [sl]
 8007252:	2b2a      	cmp	r3, #42	; 0x2a
 8007254:	d015      	beq.n	8007282 <_svfiprintf_r+0xf6>
 8007256:	4654      	mov	r4, sl
 8007258:	2000      	movs	r0, #0
 800725a:	f04f 0c0a 	mov.w	ip, #10
 800725e:	9a07      	ldr	r2, [sp, #28]
 8007260:	4621      	mov	r1, r4
 8007262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007266:	3b30      	subs	r3, #48	; 0x30
 8007268:	2b09      	cmp	r3, #9
 800726a:	d94e      	bls.n	800730a <_svfiprintf_r+0x17e>
 800726c:	b1b0      	cbz	r0, 800729c <_svfiprintf_r+0x110>
 800726e:	9207      	str	r2, [sp, #28]
 8007270:	e014      	b.n	800729c <_svfiprintf_r+0x110>
 8007272:	eba0 0308 	sub.w	r3, r0, r8
 8007276:	fa09 f303 	lsl.w	r3, r9, r3
 800727a:	4313      	orrs	r3, r2
 800727c:	46a2      	mov	sl, r4
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	e7d2      	b.n	8007228 <_svfiprintf_r+0x9c>
 8007282:	9b03      	ldr	r3, [sp, #12]
 8007284:	1d19      	adds	r1, r3, #4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	9103      	str	r1, [sp, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	bfbb      	ittet	lt
 800728e:	425b      	neglt	r3, r3
 8007290:	f042 0202 	orrlt.w	r2, r2, #2
 8007294:	9307      	strge	r3, [sp, #28]
 8007296:	9307      	strlt	r3, [sp, #28]
 8007298:	bfb8      	it	lt
 800729a:	9204      	strlt	r2, [sp, #16]
 800729c:	7823      	ldrb	r3, [r4, #0]
 800729e:	2b2e      	cmp	r3, #46	; 0x2e
 80072a0:	d10c      	bne.n	80072bc <_svfiprintf_r+0x130>
 80072a2:	7863      	ldrb	r3, [r4, #1]
 80072a4:	2b2a      	cmp	r3, #42	; 0x2a
 80072a6:	d135      	bne.n	8007314 <_svfiprintf_r+0x188>
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	3402      	adds	r4, #2
 80072ac:	1d1a      	adds	r2, r3, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	9203      	str	r2, [sp, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bfb8      	it	lt
 80072b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072ba:	9305      	str	r3, [sp, #20]
 80072bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800737c <_svfiprintf_r+0x1f0>
 80072c0:	2203      	movs	r2, #3
 80072c2:	4650      	mov	r0, sl
 80072c4:	7821      	ldrb	r1, [r4, #0]
 80072c6:	f7ff f941 	bl	800654c <memchr>
 80072ca:	b140      	cbz	r0, 80072de <_svfiprintf_r+0x152>
 80072cc:	2340      	movs	r3, #64	; 0x40
 80072ce:	eba0 000a 	sub.w	r0, r0, sl
 80072d2:	fa03 f000 	lsl.w	r0, r3, r0
 80072d6:	9b04      	ldr	r3, [sp, #16]
 80072d8:	3401      	adds	r4, #1
 80072da:	4303      	orrs	r3, r0
 80072dc:	9304      	str	r3, [sp, #16]
 80072de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e2:	2206      	movs	r2, #6
 80072e4:	4826      	ldr	r0, [pc, #152]	; (8007380 <_svfiprintf_r+0x1f4>)
 80072e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072ea:	f7ff f92f 	bl	800654c <memchr>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d038      	beq.n	8007364 <_svfiprintf_r+0x1d8>
 80072f2:	4b24      	ldr	r3, [pc, #144]	; (8007384 <_svfiprintf_r+0x1f8>)
 80072f4:	bb1b      	cbnz	r3, 800733e <_svfiprintf_r+0x1b2>
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	3307      	adds	r3, #7
 80072fa:	f023 0307 	bic.w	r3, r3, #7
 80072fe:	3308      	adds	r3, #8
 8007300:	9303      	str	r3, [sp, #12]
 8007302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007304:	4433      	add	r3, r6
 8007306:	9309      	str	r3, [sp, #36]	; 0x24
 8007308:	e767      	b.n	80071da <_svfiprintf_r+0x4e>
 800730a:	460c      	mov	r4, r1
 800730c:	2001      	movs	r0, #1
 800730e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007312:	e7a5      	b.n	8007260 <_svfiprintf_r+0xd4>
 8007314:	2300      	movs	r3, #0
 8007316:	f04f 0c0a 	mov.w	ip, #10
 800731a:	4619      	mov	r1, r3
 800731c:	3401      	adds	r4, #1
 800731e:	9305      	str	r3, [sp, #20]
 8007320:	4620      	mov	r0, r4
 8007322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007326:	3a30      	subs	r2, #48	; 0x30
 8007328:	2a09      	cmp	r2, #9
 800732a:	d903      	bls.n	8007334 <_svfiprintf_r+0x1a8>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0c5      	beq.n	80072bc <_svfiprintf_r+0x130>
 8007330:	9105      	str	r1, [sp, #20]
 8007332:	e7c3      	b.n	80072bc <_svfiprintf_r+0x130>
 8007334:	4604      	mov	r4, r0
 8007336:	2301      	movs	r3, #1
 8007338:	fb0c 2101 	mla	r1, ip, r1, r2
 800733c:	e7f0      	b.n	8007320 <_svfiprintf_r+0x194>
 800733e:	ab03      	add	r3, sp, #12
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	462a      	mov	r2, r5
 8007344:	4638      	mov	r0, r7
 8007346:	4b10      	ldr	r3, [pc, #64]	; (8007388 <_svfiprintf_r+0x1fc>)
 8007348:	a904      	add	r1, sp, #16
 800734a:	f7fc fa29 	bl	80037a0 <_printf_float>
 800734e:	1c42      	adds	r2, r0, #1
 8007350:	4606      	mov	r6, r0
 8007352:	d1d6      	bne.n	8007302 <_svfiprintf_r+0x176>
 8007354:	89ab      	ldrh	r3, [r5, #12]
 8007356:	065b      	lsls	r3, r3, #25
 8007358:	f53f af2c 	bmi.w	80071b4 <_svfiprintf_r+0x28>
 800735c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800735e:	b01d      	add	sp, #116	; 0x74
 8007360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007364:	ab03      	add	r3, sp, #12
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	462a      	mov	r2, r5
 800736a:	4638      	mov	r0, r7
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <_svfiprintf_r+0x1fc>)
 800736e:	a904      	add	r1, sp, #16
 8007370:	f7fc fcb2 	bl	8003cd8 <_printf_i>
 8007374:	e7eb      	b.n	800734e <_svfiprintf_r+0x1c2>
 8007376:	bf00      	nop
 8007378:	080104e4 	.word	0x080104e4
 800737c:	080104ea 	.word	0x080104ea
 8007380:	080104ee 	.word	0x080104ee
 8007384:	080037a1 	.word	0x080037a1
 8007388:	080070d5 	.word	0x080070d5

0800738c <nan>:
 800738c:	2000      	movs	r0, #0
 800738e:	4901      	ldr	r1, [pc, #4]	; (8007394 <nan+0x8>)
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	7ff80000 	.word	0x7ff80000

08007398 <_sbrk_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	2300      	movs	r3, #0
 800739c:	4d05      	ldr	r5, [pc, #20]	; (80073b4 <_sbrk_r+0x1c>)
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	f7fa faa0 	bl	80018e8 <_sbrk>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_sbrk_r+0x1a>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_sbrk_r+0x1a>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	200003b8 	.word	0x200003b8

080073b8 <strncmp>:
 80073b8:	4603      	mov	r3, r0
 80073ba:	b510      	push	{r4, lr}
 80073bc:	b172      	cbz	r2, 80073dc <strncmp+0x24>
 80073be:	3901      	subs	r1, #1
 80073c0:	1884      	adds	r4, r0, r2
 80073c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80073c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80073ca:	4290      	cmp	r0, r2
 80073cc:	d101      	bne.n	80073d2 <strncmp+0x1a>
 80073ce:	42a3      	cmp	r3, r4
 80073d0:	d101      	bne.n	80073d6 <strncmp+0x1e>
 80073d2:	1a80      	subs	r0, r0, r2
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d1f3      	bne.n	80073c2 <strncmp+0xa>
 80073da:	e7fa      	b.n	80073d2 <strncmp+0x1a>
 80073dc:	4610      	mov	r0, r2
 80073de:	e7f9      	b.n	80073d4 <strncmp+0x1c>

080073e0 <__ascii_wctomb>:
 80073e0:	4603      	mov	r3, r0
 80073e2:	4608      	mov	r0, r1
 80073e4:	b141      	cbz	r1, 80073f8 <__ascii_wctomb+0x18>
 80073e6:	2aff      	cmp	r2, #255	; 0xff
 80073e8:	d904      	bls.n	80073f4 <__ascii_wctomb+0x14>
 80073ea:	228a      	movs	r2, #138	; 0x8a
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	4770      	bx	lr
 80073f4:	2001      	movs	r0, #1
 80073f6:	700a      	strb	r2, [r1, #0]
 80073f8:	4770      	bx	lr
	...

080073fc <__assert_func>:
 80073fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073fe:	4614      	mov	r4, r2
 8007400:	461a      	mov	r2, r3
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <__assert_func+0x2c>)
 8007404:	4605      	mov	r5, r0
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68d8      	ldr	r0, [r3, #12]
 800740a:	b14c      	cbz	r4, 8007420 <__assert_func+0x24>
 800740c:	4b07      	ldr	r3, [pc, #28]	; (800742c <__assert_func+0x30>)
 800740e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007412:	9100      	str	r1, [sp, #0]
 8007414:	462b      	mov	r3, r5
 8007416:	4906      	ldr	r1, [pc, #24]	; (8007430 <__assert_func+0x34>)
 8007418:	f000 f80e 	bl	8007438 <fiprintf>
 800741c:	f000 fa8a 	bl	8007934 <abort>
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <__assert_func+0x38>)
 8007422:	461c      	mov	r4, r3
 8007424:	e7f3      	b.n	800740e <__assert_func+0x12>
 8007426:	bf00      	nop
 8007428:	20000034 	.word	0x20000034
 800742c:	080104f5 	.word	0x080104f5
 8007430:	08010502 	.word	0x08010502
 8007434:	08010530 	.word	0x08010530

08007438 <fiprintf>:
 8007438:	b40e      	push	{r1, r2, r3}
 800743a:	b503      	push	{r0, r1, lr}
 800743c:	4601      	mov	r1, r0
 800743e:	ab03      	add	r3, sp, #12
 8007440:	4805      	ldr	r0, [pc, #20]	; (8007458 <fiprintf+0x20>)
 8007442:	f853 2b04 	ldr.w	r2, [r3], #4
 8007446:	6800      	ldr	r0, [r0, #0]
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	f000 f883 	bl	8007554 <_vfiprintf_r>
 800744e:	b002      	add	sp, #8
 8007450:	f85d eb04 	ldr.w	lr, [sp], #4
 8007454:	b003      	add	sp, #12
 8007456:	4770      	bx	lr
 8007458:	20000034 	.word	0x20000034

0800745c <memmove>:
 800745c:	4288      	cmp	r0, r1
 800745e:	b510      	push	{r4, lr}
 8007460:	eb01 0402 	add.w	r4, r1, r2
 8007464:	d902      	bls.n	800746c <memmove+0x10>
 8007466:	4284      	cmp	r4, r0
 8007468:	4623      	mov	r3, r4
 800746a:	d807      	bhi.n	800747c <memmove+0x20>
 800746c:	1e43      	subs	r3, r0, #1
 800746e:	42a1      	cmp	r1, r4
 8007470:	d008      	beq.n	8007484 <memmove+0x28>
 8007472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800747a:	e7f8      	b.n	800746e <memmove+0x12>
 800747c:	4601      	mov	r1, r0
 800747e:	4402      	add	r2, r0
 8007480:	428a      	cmp	r2, r1
 8007482:	d100      	bne.n	8007486 <memmove+0x2a>
 8007484:	bd10      	pop	{r4, pc}
 8007486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800748a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800748e:	e7f7      	b.n	8007480 <memmove+0x24>

08007490 <__malloc_lock>:
 8007490:	4801      	ldr	r0, [pc, #4]	; (8007498 <__malloc_lock+0x8>)
 8007492:	f000 bc0b 	b.w	8007cac <__retarget_lock_acquire_recursive>
 8007496:	bf00      	nop
 8007498:	200003bc 	.word	0x200003bc

0800749c <__malloc_unlock>:
 800749c:	4801      	ldr	r0, [pc, #4]	; (80074a4 <__malloc_unlock+0x8>)
 800749e:	f000 bc06 	b.w	8007cae <__retarget_lock_release_recursive>
 80074a2:	bf00      	nop
 80074a4:	200003bc 	.word	0x200003bc

080074a8 <_realloc_r>:
 80074a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ac:	4680      	mov	r8, r0
 80074ae:	4614      	mov	r4, r2
 80074b0:	460e      	mov	r6, r1
 80074b2:	b921      	cbnz	r1, 80074be <_realloc_r+0x16>
 80074b4:	4611      	mov	r1, r2
 80074b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ba:	f7ff bd97 	b.w	8006fec <_malloc_r>
 80074be:	b92a      	cbnz	r2, 80074cc <_realloc_r+0x24>
 80074c0:	f7ff fd2c 	bl	8006f1c <_free_r>
 80074c4:	4625      	mov	r5, r4
 80074c6:	4628      	mov	r0, r5
 80074c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074cc:	f000 fc56 	bl	8007d7c <_malloc_usable_size_r>
 80074d0:	4284      	cmp	r4, r0
 80074d2:	4607      	mov	r7, r0
 80074d4:	d802      	bhi.n	80074dc <_realloc_r+0x34>
 80074d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074da:	d812      	bhi.n	8007502 <_realloc_r+0x5a>
 80074dc:	4621      	mov	r1, r4
 80074de:	4640      	mov	r0, r8
 80074e0:	f7ff fd84 	bl	8006fec <_malloc_r>
 80074e4:	4605      	mov	r5, r0
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d0ed      	beq.n	80074c6 <_realloc_r+0x1e>
 80074ea:	42bc      	cmp	r4, r7
 80074ec:	4622      	mov	r2, r4
 80074ee:	4631      	mov	r1, r6
 80074f0:	bf28      	it	cs
 80074f2:	463a      	movcs	r2, r7
 80074f4:	f7ff f838 	bl	8006568 <memcpy>
 80074f8:	4631      	mov	r1, r6
 80074fa:	4640      	mov	r0, r8
 80074fc:	f7ff fd0e 	bl	8006f1c <_free_r>
 8007500:	e7e1      	b.n	80074c6 <_realloc_r+0x1e>
 8007502:	4635      	mov	r5, r6
 8007504:	e7df      	b.n	80074c6 <_realloc_r+0x1e>

08007506 <__sfputc_r>:
 8007506:	6893      	ldr	r3, [r2, #8]
 8007508:	b410      	push	{r4}
 800750a:	3b01      	subs	r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	6093      	str	r3, [r2, #8]
 8007510:	da07      	bge.n	8007522 <__sfputc_r+0x1c>
 8007512:	6994      	ldr	r4, [r2, #24]
 8007514:	42a3      	cmp	r3, r4
 8007516:	db01      	blt.n	800751c <__sfputc_r+0x16>
 8007518:	290a      	cmp	r1, #10
 800751a:	d102      	bne.n	8007522 <__sfputc_r+0x1c>
 800751c:	bc10      	pop	{r4}
 800751e:	f000 b949 	b.w	80077b4 <__swbuf_r>
 8007522:	6813      	ldr	r3, [r2, #0]
 8007524:	1c58      	adds	r0, r3, #1
 8007526:	6010      	str	r0, [r2, #0]
 8007528:	7019      	strb	r1, [r3, #0]
 800752a:	4608      	mov	r0, r1
 800752c:	bc10      	pop	{r4}
 800752e:	4770      	bx	lr

08007530 <__sfputs_r>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	4606      	mov	r6, r0
 8007534:	460f      	mov	r7, r1
 8007536:	4614      	mov	r4, r2
 8007538:	18d5      	adds	r5, r2, r3
 800753a:	42ac      	cmp	r4, r5
 800753c:	d101      	bne.n	8007542 <__sfputs_r+0x12>
 800753e:	2000      	movs	r0, #0
 8007540:	e007      	b.n	8007552 <__sfputs_r+0x22>
 8007542:	463a      	mov	r2, r7
 8007544:	4630      	mov	r0, r6
 8007546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754a:	f7ff ffdc 	bl	8007506 <__sfputc_r>
 800754e:	1c43      	adds	r3, r0, #1
 8007550:	d1f3      	bne.n	800753a <__sfputs_r+0xa>
 8007552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007554 <_vfiprintf_r>:
 8007554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007558:	460d      	mov	r5, r1
 800755a:	4614      	mov	r4, r2
 800755c:	4698      	mov	r8, r3
 800755e:	4606      	mov	r6, r0
 8007560:	b09d      	sub	sp, #116	; 0x74
 8007562:	b118      	cbz	r0, 800756c <_vfiprintf_r+0x18>
 8007564:	6983      	ldr	r3, [r0, #24]
 8007566:	b90b      	cbnz	r3, 800756c <_vfiprintf_r+0x18>
 8007568:	f000 fb02 	bl	8007b70 <__sinit>
 800756c:	4b89      	ldr	r3, [pc, #548]	; (8007794 <_vfiprintf_r+0x240>)
 800756e:	429d      	cmp	r5, r3
 8007570:	d11b      	bne.n	80075aa <_vfiprintf_r+0x56>
 8007572:	6875      	ldr	r5, [r6, #4]
 8007574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007576:	07d9      	lsls	r1, r3, #31
 8007578:	d405      	bmi.n	8007586 <_vfiprintf_r+0x32>
 800757a:	89ab      	ldrh	r3, [r5, #12]
 800757c:	059a      	lsls	r2, r3, #22
 800757e:	d402      	bmi.n	8007586 <_vfiprintf_r+0x32>
 8007580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007582:	f000 fb93 	bl	8007cac <__retarget_lock_acquire_recursive>
 8007586:	89ab      	ldrh	r3, [r5, #12]
 8007588:	071b      	lsls	r3, r3, #28
 800758a:	d501      	bpl.n	8007590 <_vfiprintf_r+0x3c>
 800758c:	692b      	ldr	r3, [r5, #16]
 800758e:	b9eb      	cbnz	r3, 80075cc <_vfiprintf_r+0x78>
 8007590:	4629      	mov	r1, r5
 8007592:	4630      	mov	r0, r6
 8007594:	f000 f960 	bl	8007858 <__swsetup_r>
 8007598:	b1c0      	cbz	r0, 80075cc <_vfiprintf_r+0x78>
 800759a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800759c:	07dc      	lsls	r4, r3, #31
 800759e:	d50e      	bpl.n	80075be <_vfiprintf_r+0x6a>
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075a4:	b01d      	add	sp, #116	; 0x74
 80075a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075aa:	4b7b      	ldr	r3, [pc, #492]	; (8007798 <_vfiprintf_r+0x244>)
 80075ac:	429d      	cmp	r5, r3
 80075ae:	d101      	bne.n	80075b4 <_vfiprintf_r+0x60>
 80075b0:	68b5      	ldr	r5, [r6, #8]
 80075b2:	e7df      	b.n	8007574 <_vfiprintf_r+0x20>
 80075b4:	4b79      	ldr	r3, [pc, #484]	; (800779c <_vfiprintf_r+0x248>)
 80075b6:	429d      	cmp	r5, r3
 80075b8:	bf08      	it	eq
 80075ba:	68f5      	ldreq	r5, [r6, #12]
 80075bc:	e7da      	b.n	8007574 <_vfiprintf_r+0x20>
 80075be:	89ab      	ldrh	r3, [r5, #12]
 80075c0:	0598      	lsls	r0, r3, #22
 80075c2:	d4ed      	bmi.n	80075a0 <_vfiprintf_r+0x4c>
 80075c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075c6:	f000 fb72 	bl	8007cae <__retarget_lock_release_recursive>
 80075ca:	e7e9      	b.n	80075a0 <_vfiprintf_r+0x4c>
 80075cc:	2300      	movs	r3, #0
 80075ce:	9309      	str	r3, [sp, #36]	; 0x24
 80075d0:	2320      	movs	r3, #32
 80075d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075d6:	2330      	movs	r3, #48	; 0x30
 80075d8:	f04f 0901 	mov.w	r9, #1
 80075dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80075e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80077a0 <_vfiprintf_r+0x24c>
 80075e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e8:	4623      	mov	r3, r4
 80075ea:	469a      	mov	sl, r3
 80075ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f0:	b10a      	cbz	r2, 80075f6 <_vfiprintf_r+0xa2>
 80075f2:	2a25      	cmp	r2, #37	; 0x25
 80075f4:	d1f9      	bne.n	80075ea <_vfiprintf_r+0x96>
 80075f6:	ebba 0b04 	subs.w	fp, sl, r4
 80075fa:	d00b      	beq.n	8007614 <_vfiprintf_r+0xc0>
 80075fc:	465b      	mov	r3, fp
 80075fe:	4622      	mov	r2, r4
 8007600:	4629      	mov	r1, r5
 8007602:	4630      	mov	r0, r6
 8007604:	f7ff ff94 	bl	8007530 <__sfputs_r>
 8007608:	3001      	adds	r0, #1
 800760a:	f000 80aa 	beq.w	8007762 <_vfiprintf_r+0x20e>
 800760e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007610:	445a      	add	r2, fp
 8007612:	9209      	str	r2, [sp, #36]	; 0x24
 8007614:	f89a 3000 	ldrb.w	r3, [sl]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 80a2 	beq.w	8007762 <_vfiprintf_r+0x20e>
 800761e:	2300      	movs	r3, #0
 8007620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007628:	f10a 0a01 	add.w	sl, sl, #1
 800762c:	9304      	str	r3, [sp, #16]
 800762e:	9307      	str	r3, [sp, #28]
 8007630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007634:	931a      	str	r3, [sp, #104]	; 0x68
 8007636:	4654      	mov	r4, sl
 8007638:	2205      	movs	r2, #5
 800763a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763e:	4858      	ldr	r0, [pc, #352]	; (80077a0 <_vfiprintf_r+0x24c>)
 8007640:	f7fe ff84 	bl	800654c <memchr>
 8007644:	9a04      	ldr	r2, [sp, #16]
 8007646:	b9d8      	cbnz	r0, 8007680 <_vfiprintf_r+0x12c>
 8007648:	06d1      	lsls	r1, r2, #27
 800764a:	bf44      	itt	mi
 800764c:	2320      	movmi	r3, #32
 800764e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007652:	0713      	lsls	r3, r2, #28
 8007654:	bf44      	itt	mi
 8007656:	232b      	movmi	r3, #43	; 0x2b
 8007658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800765c:	f89a 3000 	ldrb.w	r3, [sl]
 8007660:	2b2a      	cmp	r3, #42	; 0x2a
 8007662:	d015      	beq.n	8007690 <_vfiprintf_r+0x13c>
 8007664:	4654      	mov	r4, sl
 8007666:	2000      	movs	r0, #0
 8007668:	f04f 0c0a 	mov.w	ip, #10
 800766c:	9a07      	ldr	r2, [sp, #28]
 800766e:	4621      	mov	r1, r4
 8007670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007674:	3b30      	subs	r3, #48	; 0x30
 8007676:	2b09      	cmp	r3, #9
 8007678:	d94e      	bls.n	8007718 <_vfiprintf_r+0x1c4>
 800767a:	b1b0      	cbz	r0, 80076aa <_vfiprintf_r+0x156>
 800767c:	9207      	str	r2, [sp, #28]
 800767e:	e014      	b.n	80076aa <_vfiprintf_r+0x156>
 8007680:	eba0 0308 	sub.w	r3, r0, r8
 8007684:	fa09 f303 	lsl.w	r3, r9, r3
 8007688:	4313      	orrs	r3, r2
 800768a:	46a2      	mov	sl, r4
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	e7d2      	b.n	8007636 <_vfiprintf_r+0xe2>
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	1d19      	adds	r1, r3, #4
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	9103      	str	r1, [sp, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bfbb      	ittet	lt
 800769c:	425b      	neglt	r3, r3
 800769e:	f042 0202 	orrlt.w	r2, r2, #2
 80076a2:	9307      	strge	r3, [sp, #28]
 80076a4:	9307      	strlt	r3, [sp, #28]
 80076a6:	bfb8      	it	lt
 80076a8:	9204      	strlt	r2, [sp, #16]
 80076aa:	7823      	ldrb	r3, [r4, #0]
 80076ac:	2b2e      	cmp	r3, #46	; 0x2e
 80076ae:	d10c      	bne.n	80076ca <_vfiprintf_r+0x176>
 80076b0:	7863      	ldrb	r3, [r4, #1]
 80076b2:	2b2a      	cmp	r3, #42	; 0x2a
 80076b4:	d135      	bne.n	8007722 <_vfiprintf_r+0x1ce>
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	3402      	adds	r4, #2
 80076ba:	1d1a      	adds	r2, r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	9203      	str	r2, [sp, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bfb8      	it	lt
 80076c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80077a4 <_vfiprintf_r+0x250>
 80076ce:	2203      	movs	r2, #3
 80076d0:	4650      	mov	r0, sl
 80076d2:	7821      	ldrb	r1, [r4, #0]
 80076d4:	f7fe ff3a 	bl	800654c <memchr>
 80076d8:	b140      	cbz	r0, 80076ec <_vfiprintf_r+0x198>
 80076da:	2340      	movs	r3, #64	; 0x40
 80076dc:	eba0 000a 	sub.w	r0, r0, sl
 80076e0:	fa03 f000 	lsl.w	r0, r3, r0
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	3401      	adds	r4, #1
 80076e8:	4303      	orrs	r3, r0
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f0:	2206      	movs	r2, #6
 80076f2:	482d      	ldr	r0, [pc, #180]	; (80077a8 <_vfiprintf_r+0x254>)
 80076f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076f8:	f7fe ff28 	bl	800654c <memchr>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d03f      	beq.n	8007780 <_vfiprintf_r+0x22c>
 8007700:	4b2a      	ldr	r3, [pc, #168]	; (80077ac <_vfiprintf_r+0x258>)
 8007702:	bb1b      	cbnz	r3, 800774c <_vfiprintf_r+0x1f8>
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	3307      	adds	r3, #7
 8007708:	f023 0307 	bic.w	r3, r3, #7
 800770c:	3308      	adds	r3, #8
 800770e:	9303      	str	r3, [sp, #12]
 8007710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007712:	443b      	add	r3, r7
 8007714:	9309      	str	r3, [sp, #36]	; 0x24
 8007716:	e767      	b.n	80075e8 <_vfiprintf_r+0x94>
 8007718:	460c      	mov	r4, r1
 800771a:	2001      	movs	r0, #1
 800771c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007720:	e7a5      	b.n	800766e <_vfiprintf_r+0x11a>
 8007722:	2300      	movs	r3, #0
 8007724:	f04f 0c0a 	mov.w	ip, #10
 8007728:	4619      	mov	r1, r3
 800772a:	3401      	adds	r4, #1
 800772c:	9305      	str	r3, [sp, #20]
 800772e:	4620      	mov	r0, r4
 8007730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007734:	3a30      	subs	r2, #48	; 0x30
 8007736:	2a09      	cmp	r2, #9
 8007738:	d903      	bls.n	8007742 <_vfiprintf_r+0x1ee>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0c5      	beq.n	80076ca <_vfiprintf_r+0x176>
 800773e:	9105      	str	r1, [sp, #20]
 8007740:	e7c3      	b.n	80076ca <_vfiprintf_r+0x176>
 8007742:	4604      	mov	r4, r0
 8007744:	2301      	movs	r3, #1
 8007746:	fb0c 2101 	mla	r1, ip, r1, r2
 800774a:	e7f0      	b.n	800772e <_vfiprintf_r+0x1da>
 800774c:	ab03      	add	r3, sp, #12
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	462a      	mov	r2, r5
 8007752:	4630      	mov	r0, r6
 8007754:	4b16      	ldr	r3, [pc, #88]	; (80077b0 <_vfiprintf_r+0x25c>)
 8007756:	a904      	add	r1, sp, #16
 8007758:	f7fc f822 	bl	80037a0 <_printf_float>
 800775c:	4607      	mov	r7, r0
 800775e:	1c78      	adds	r0, r7, #1
 8007760:	d1d6      	bne.n	8007710 <_vfiprintf_r+0x1bc>
 8007762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007764:	07d9      	lsls	r1, r3, #31
 8007766:	d405      	bmi.n	8007774 <_vfiprintf_r+0x220>
 8007768:	89ab      	ldrh	r3, [r5, #12]
 800776a:	059a      	lsls	r2, r3, #22
 800776c:	d402      	bmi.n	8007774 <_vfiprintf_r+0x220>
 800776e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007770:	f000 fa9d 	bl	8007cae <__retarget_lock_release_recursive>
 8007774:	89ab      	ldrh	r3, [r5, #12]
 8007776:	065b      	lsls	r3, r3, #25
 8007778:	f53f af12 	bmi.w	80075a0 <_vfiprintf_r+0x4c>
 800777c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800777e:	e711      	b.n	80075a4 <_vfiprintf_r+0x50>
 8007780:	ab03      	add	r3, sp, #12
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	462a      	mov	r2, r5
 8007786:	4630      	mov	r0, r6
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <_vfiprintf_r+0x25c>)
 800778a:	a904      	add	r1, sp, #16
 800778c:	f7fc faa4 	bl	8003cd8 <_printf_i>
 8007790:	e7e4      	b.n	800775c <_vfiprintf_r+0x208>
 8007792:	bf00      	nop
 8007794:	08010554 	.word	0x08010554
 8007798:	08010574 	.word	0x08010574
 800779c:	08010534 	.word	0x08010534
 80077a0:	080104e4 	.word	0x080104e4
 80077a4:	080104ea 	.word	0x080104ea
 80077a8:	080104ee 	.word	0x080104ee
 80077ac:	080037a1 	.word	0x080037a1
 80077b0:	08007531 	.word	0x08007531

080077b4 <__swbuf_r>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	460e      	mov	r6, r1
 80077b8:	4614      	mov	r4, r2
 80077ba:	4605      	mov	r5, r0
 80077bc:	b118      	cbz	r0, 80077c6 <__swbuf_r+0x12>
 80077be:	6983      	ldr	r3, [r0, #24]
 80077c0:	b90b      	cbnz	r3, 80077c6 <__swbuf_r+0x12>
 80077c2:	f000 f9d5 	bl	8007b70 <__sinit>
 80077c6:	4b21      	ldr	r3, [pc, #132]	; (800784c <__swbuf_r+0x98>)
 80077c8:	429c      	cmp	r4, r3
 80077ca:	d12b      	bne.n	8007824 <__swbuf_r+0x70>
 80077cc:	686c      	ldr	r4, [r5, #4]
 80077ce:	69a3      	ldr	r3, [r4, #24]
 80077d0:	60a3      	str	r3, [r4, #8]
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	071a      	lsls	r2, r3, #28
 80077d6:	d52f      	bpl.n	8007838 <__swbuf_r+0x84>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	b36b      	cbz	r3, 8007838 <__swbuf_r+0x84>
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	6820      	ldr	r0, [r4, #0]
 80077e0:	b2f6      	uxtb	r6, r6
 80077e2:	1ac0      	subs	r0, r0, r3
 80077e4:	6963      	ldr	r3, [r4, #20]
 80077e6:	4637      	mov	r7, r6
 80077e8:	4283      	cmp	r3, r0
 80077ea:	dc04      	bgt.n	80077f6 <__swbuf_r+0x42>
 80077ec:	4621      	mov	r1, r4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 f92a 	bl	8007a48 <_fflush_r>
 80077f4:	bb30      	cbnz	r0, 8007844 <__swbuf_r+0x90>
 80077f6:	68a3      	ldr	r3, [r4, #8]
 80077f8:	3001      	adds	r0, #1
 80077fa:	3b01      	subs	r3, #1
 80077fc:	60a3      	str	r3, [r4, #8]
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	6022      	str	r2, [r4, #0]
 8007804:	701e      	strb	r6, [r3, #0]
 8007806:	6963      	ldr	r3, [r4, #20]
 8007808:	4283      	cmp	r3, r0
 800780a:	d004      	beq.n	8007816 <__swbuf_r+0x62>
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	07db      	lsls	r3, r3, #31
 8007810:	d506      	bpl.n	8007820 <__swbuf_r+0x6c>
 8007812:	2e0a      	cmp	r6, #10
 8007814:	d104      	bne.n	8007820 <__swbuf_r+0x6c>
 8007816:	4621      	mov	r1, r4
 8007818:	4628      	mov	r0, r5
 800781a:	f000 f915 	bl	8007a48 <_fflush_r>
 800781e:	b988      	cbnz	r0, 8007844 <__swbuf_r+0x90>
 8007820:	4638      	mov	r0, r7
 8007822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <__swbuf_r+0x9c>)
 8007826:	429c      	cmp	r4, r3
 8007828:	d101      	bne.n	800782e <__swbuf_r+0x7a>
 800782a:	68ac      	ldr	r4, [r5, #8]
 800782c:	e7cf      	b.n	80077ce <__swbuf_r+0x1a>
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <__swbuf_r+0xa0>)
 8007830:	429c      	cmp	r4, r3
 8007832:	bf08      	it	eq
 8007834:	68ec      	ldreq	r4, [r5, #12]
 8007836:	e7ca      	b.n	80077ce <__swbuf_r+0x1a>
 8007838:	4621      	mov	r1, r4
 800783a:	4628      	mov	r0, r5
 800783c:	f000 f80c 	bl	8007858 <__swsetup_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	d0cb      	beq.n	80077dc <__swbuf_r+0x28>
 8007844:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007848:	e7ea      	b.n	8007820 <__swbuf_r+0x6c>
 800784a:	bf00      	nop
 800784c:	08010554 	.word	0x08010554
 8007850:	08010574 	.word	0x08010574
 8007854:	08010534 	.word	0x08010534

08007858 <__swsetup_r>:
 8007858:	4b32      	ldr	r3, [pc, #200]	; (8007924 <__swsetup_r+0xcc>)
 800785a:	b570      	push	{r4, r5, r6, lr}
 800785c:	681d      	ldr	r5, [r3, #0]
 800785e:	4606      	mov	r6, r0
 8007860:	460c      	mov	r4, r1
 8007862:	b125      	cbz	r5, 800786e <__swsetup_r+0x16>
 8007864:	69ab      	ldr	r3, [r5, #24]
 8007866:	b913      	cbnz	r3, 800786e <__swsetup_r+0x16>
 8007868:	4628      	mov	r0, r5
 800786a:	f000 f981 	bl	8007b70 <__sinit>
 800786e:	4b2e      	ldr	r3, [pc, #184]	; (8007928 <__swsetup_r+0xd0>)
 8007870:	429c      	cmp	r4, r3
 8007872:	d10f      	bne.n	8007894 <__swsetup_r+0x3c>
 8007874:	686c      	ldr	r4, [r5, #4]
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800787c:	0719      	lsls	r1, r3, #28
 800787e:	d42c      	bmi.n	80078da <__swsetup_r+0x82>
 8007880:	06dd      	lsls	r5, r3, #27
 8007882:	d411      	bmi.n	80078a8 <__swsetup_r+0x50>
 8007884:	2309      	movs	r3, #9
 8007886:	6033      	str	r3, [r6, #0]
 8007888:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800788c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	e03e      	b.n	8007912 <__swsetup_r+0xba>
 8007894:	4b25      	ldr	r3, [pc, #148]	; (800792c <__swsetup_r+0xd4>)
 8007896:	429c      	cmp	r4, r3
 8007898:	d101      	bne.n	800789e <__swsetup_r+0x46>
 800789a:	68ac      	ldr	r4, [r5, #8]
 800789c:	e7eb      	b.n	8007876 <__swsetup_r+0x1e>
 800789e:	4b24      	ldr	r3, [pc, #144]	; (8007930 <__swsetup_r+0xd8>)
 80078a0:	429c      	cmp	r4, r3
 80078a2:	bf08      	it	eq
 80078a4:	68ec      	ldreq	r4, [r5, #12]
 80078a6:	e7e6      	b.n	8007876 <__swsetup_r+0x1e>
 80078a8:	0758      	lsls	r0, r3, #29
 80078aa:	d512      	bpl.n	80078d2 <__swsetup_r+0x7a>
 80078ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078ae:	b141      	cbz	r1, 80078c2 <__swsetup_r+0x6a>
 80078b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078b4:	4299      	cmp	r1, r3
 80078b6:	d002      	beq.n	80078be <__swsetup_r+0x66>
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7ff fb2f 	bl	8006f1c <_free_r>
 80078be:	2300      	movs	r3, #0
 80078c0:	6363      	str	r3, [r4, #52]	; 0x34
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078c8:	81a3      	strh	r3, [r4, #12]
 80078ca:	2300      	movs	r3, #0
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f043 0308 	orr.w	r3, r3, #8
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	b94b      	cbnz	r3, 80078f2 <__swsetup_r+0x9a>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e8:	d003      	beq.n	80078f2 <__swsetup_r+0x9a>
 80078ea:	4621      	mov	r1, r4
 80078ec:	4630      	mov	r0, r6
 80078ee:	f000 fa05 	bl	8007cfc <__smakebuf_r>
 80078f2:	89a0      	ldrh	r0, [r4, #12]
 80078f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078f8:	f010 0301 	ands.w	r3, r0, #1
 80078fc:	d00a      	beq.n	8007914 <__swsetup_r+0xbc>
 80078fe:	2300      	movs	r3, #0
 8007900:	60a3      	str	r3, [r4, #8]
 8007902:	6963      	ldr	r3, [r4, #20]
 8007904:	425b      	negs	r3, r3
 8007906:	61a3      	str	r3, [r4, #24]
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	b943      	cbnz	r3, 800791e <__swsetup_r+0xc6>
 800790c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007910:	d1ba      	bne.n	8007888 <__swsetup_r+0x30>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	0781      	lsls	r1, r0, #30
 8007916:	bf58      	it	pl
 8007918:	6963      	ldrpl	r3, [r4, #20]
 800791a:	60a3      	str	r3, [r4, #8]
 800791c:	e7f4      	b.n	8007908 <__swsetup_r+0xb0>
 800791e:	2000      	movs	r0, #0
 8007920:	e7f7      	b.n	8007912 <__swsetup_r+0xba>
 8007922:	bf00      	nop
 8007924:	20000034 	.word	0x20000034
 8007928:	08010554 	.word	0x08010554
 800792c:	08010574 	.word	0x08010574
 8007930:	08010534 	.word	0x08010534

08007934 <abort>:
 8007934:	2006      	movs	r0, #6
 8007936:	b508      	push	{r3, lr}
 8007938:	f000 fa50 	bl	8007ddc <raise>
 800793c:	2001      	movs	r0, #1
 800793e:	f7f9 ffa3 	bl	8001888 <_exit>
	...

08007944 <__sflush_r>:
 8007944:	898a      	ldrh	r2, [r1, #12]
 8007946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007948:	4605      	mov	r5, r0
 800794a:	0710      	lsls	r0, r2, #28
 800794c:	460c      	mov	r4, r1
 800794e:	d457      	bmi.n	8007a00 <__sflush_r+0xbc>
 8007950:	684b      	ldr	r3, [r1, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	dc04      	bgt.n	8007960 <__sflush_r+0x1c>
 8007956:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc01      	bgt.n	8007960 <__sflush_r+0x1c>
 800795c:	2000      	movs	r0, #0
 800795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007962:	2e00      	cmp	r6, #0
 8007964:	d0fa      	beq.n	800795c <__sflush_r+0x18>
 8007966:	2300      	movs	r3, #0
 8007968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800796c:	682f      	ldr	r7, [r5, #0]
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	d032      	beq.n	80079d8 <__sflush_r+0x94>
 8007972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	075a      	lsls	r2, r3, #29
 8007978:	d505      	bpl.n	8007986 <__sflush_r+0x42>
 800797a:	6863      	ldr	r3, [r4, #4]
 800797c:	1ac0      	subs	r0, r0, r3
 800797e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007980:	b10b      	cbz	r3, 8007986 <__sflush_r+0x42>
 8007982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007984:	1ac0      	subs	r0, r0, r3
 8007986:	2300      	movs	r3, #0
 8007988:	4602      	mov	r2, r0
 800798a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800798c:	4628      	mov	r0, r5
 800798e:	6a21      	ldr	r1, [r4, #32]
 8007990:	47b0      	blx	r6
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	d106      	bne.n	80079a6 <__sflush_r+0x62>
 8007998:	6829      	ldr	r1, [r5, #0]
 800799a:	291d      	cmp	r1, #29
 800799c:	d82c      	bhi.n	80079f8 <__sflush_r+0xb4>
 800799e:	4a29      	ldr	r2, [pc, #164]	; (8007a44 <__sflush_r+0x100>)
 80079a0:	40ca      	lsrs	r2, r1
 80079a2:	07d6      	lsls	r6, r2, #31
 80079a4:	d528      	bpl.n	80079f8 <__sflush_r+0xb4>
 80079a6:	2200      	movs	r2, #0
 80079a8:	6062      	str	r2, [r4, #4]
 80079aa:	6922      	ldr	r2, [r4, #16]
 80079ac:	04d9      	lsls	r1, r3, #19
 80079ae:	6022      	str	r2, [r4, #0]
 80079b0:	d504      	bpl.n	80079bc <__sflush_r+0x78>
 80079b2:	1c42      	adds	r2, r0, #1
 80079b4:	d101      	bne.n	80079ba <__sflush_r+0x76>
 80079b6:	682b      	ldr	r3, [r5, #0]
 80079b8:	b903      	cbnz	r3, 80079bc <__sflush_r+0x78>
 80079ba:	6560      	str	r0, [r4, #84]	; 0x54
 80079bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079be:	602f      	str	r7, [r5, #0]
 80079c0:	2900      	cmp	r1, #0
 80079c2:	d0cb      	beq.n	800795c <__sflush_r+0x18>
 80079c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079c8:	4299      	cmp	r1, r3
 80079ca:	d002      	beq.n	80079d2 <__sflush_r+0x8e>
 80079cc:	4628      	mov	r0, r5
 80079ce:	f7ff faa5 	bl	8006f1c <_free_r>
 80079d2:	2000      	movs	r0, #0
 80079d4:	6360      	str	r0, [r4, #52]	; 0x34
 80079d6:	e7c2      	b.n	800795e <__sflush_r+0x1a>
 80079d8:	6a21      	ldr	r1, [r4, #32]
 80079da:	2301      	movs	r3, #1
 80079dc:	4628      	mov	r0, r5
 80079de:	47b0      	blx	r6
 80079e0:	1c41      	adds	r1, r0, #1
 80079e2:	d1c7      	bne.n	8007974 <__sflush_r+0x30>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0c4      	beq.n	8007974 <__sflush_r+0x30>
 80079ea:	2b1d      	cmp	r3, #29
 80079ec:	d001      	beq.n	80079f2 <__sflush_r+0xae>
 80079ee:	2b16      	cmp	r3, #22
 80079f0:	d101      	bne.n	80079f6 <__sflush_r+0xb2>
 80079f2:	602f      	str	r7, [r5, #0]
 80079f4:	e7b2      	b.n	800795c <__sflush_r+0x18>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079fc:	81a3      	strh	r3, [r4, #12]
 80079fe:	e7ae      	b.n	800795e <__sflush_r+0x1a>
 8007a00:	690f      	ldr	r7, [r1, #16]
 8007a02:	2f00      	cmp	r7, #0
 8007a04:	d0aa      	beq.n	800795c <__sflush_r+0x18>
 8007a06:	0793      	lsls	r3, r2, #30
 8007a08:	bf18      	it	ne
 8007a0a:	2300      	movne	r3, #0
 8007a0c:	680e      	ldr	r6, [r1, #0]
 8007a0e:	bf08      	it	eq
 8007a10:	694b      	ldreq	r3, [r1, #20]
 8007a12:	1bf6      	subs	r6, r6, r7
 8007a14:	600f      	str	r7, [r1, #0]
 8007a16:	608b      	str	r3, [r1, #8]
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	dd9f      	ble.n	800795c <__sflush_r+0x18>
 8007a1c:	4633      	mov	r3, r6
 8007a1e:	463a      	mov	r2, r7
 8007a20:	4628      	mov	r0, r5
 8007a22:	6a21      	ldr	r1, [r4, #32]
 8007a24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a28:	47e0      	blx	ip
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	dc06      	bgt.n	8007a3c <__sflush_r+0xf8>
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a38:	81a3      	strh	r3, [r4, #12]
 8007a3a:	e790      	b.n	800795e <__sflush_r+0x1a>
 8007a3c:	4407      	add	r7, r0
 8007a3e:	1a36      	subs	r6, r6, r0
 8007a40:	e7ea      	b.n	8007a18 <__sflush_r+0xd4>
 8007a42:	bf00      	nop
 8007a44:	20400001 	.word	0x20400001

08007a48 <_fflush_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	690b      	ldr	r3, [r1, #16]
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	b913      	cbnz	r3, 8007a58 <_fflush_r+0x10>
 8007a52:	2500      	movs	r5, #0
 8007a54:	4628      	mov	r0, r5
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	b118      	cbz	r0, 8007a62 <_fflush_r+0x1a>
 8007a5a:	6983      	ldr	r3, [r0, #24]
 8007a5c:	b90b      	cbnz	r3, 8007a62 <_fflush_r+0x1a>
 8007a5e:	f000 f887 	bl	8007b70 <__sinit>
 8007a62:	4b14      	ldr	r3, [pc, #80]	; (8007ab4 <_fflush_r+0x6c>)
 8007a64:	429c      	cmp	r4, r3
 8007a66:	d11b      	bne.n	8007aa0 <_fflush_r+0x58>
 8007a68:	686c      	ldr	r4, [r5, #4]
 8007a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0ef      	beq.n	8007a52 <_fflush_r+0xa>
 8007a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a74:	07d0      	lsls	r0, r2, #31
 8007a76:	d404      	bmi.n	8007a82 <_fflush_r+0x3a>
 8007a78:	0599      	lsls	r1, r3, #22
 8007a7a:	d402      	bmi.n	8007a82 <_fflush_r+0x3a>
 8007a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a7e:	f000 f915 	bl	8007cac <__retarget_lock_acquire_recursive>
 8007a82:	4628      	mov	r0, r5
 8007a84:	4621      	mov	r1, r4
 8007a86:	f7ff ff5d 	bl	8007944 <__sflush_r>
 8007a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	07da      	lsls	r2, r3, #31
 8007a90:	d4e0      	bmi.n	8007a54 <_fflush_r+0xc>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	059b      	lsls	r3, r3, #22
 8007a96:	d4dd      	bmi.n	8007a54 <_fflush_r+0xc>
 8007a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a9a:	f000 f908 	bl	8007cae <__retarget_lock_release_recursive>
 8007a9e:	e7d9      	b.n	8007a54 <_fflush_r+0xc>
 8007aa0:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <_fflush_r+0x70>)
 8007aa2:	429c      	cmp	r4, r3
 8007aa4:	d101      	bne.n	8007aaa <_fflush_r+0x62>
 8007aa6:	68ac      	ldr	r4, [r5, #8]
 8007aa8:	e7df      	b.n	8007a6a <_fflush_r+0x22>
 8007aaa:	4b04      	ldr	r3, [pc, #16]	; (8007abc <_fflush_r+0x74>)
 8007aac:	429c      	cmp	r4, r3
 8007aae:	bf08      	it	eq
 8007ab0:	68ec      	ldreq	r4, [r5, #12]
 8007ab2:	e7da      	b.n	8007a6a <_fflush_r+0x22>
 8007ab4:	08010554 	.word	0x08010554
 8007ab8:	08010574 	.word	0x08010574
 8007abc:	08010534 	.word	0x08010534

08007ac0 <std>:
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	b510      	push	{r4, lr}
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8007aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ace:	6083      	str	r3, [r0, #8]
 8007ad0:	8181      	strh	r1, [r0, #12]
 8007ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ad4:	81c2      	strh	r2, [r0, #14]
 8007ad6:	6183      	str	r3, [r0, #24]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	2208      	movs	r2, #8
 8007adc:	305c      	adds	r0, #92	; 0x5c
 8007ade:	f7fb fdb9 	bl	8003654 <memset>
 8007ae2:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <std+0x38>)
 8007ae4:	6224      	str	r4, [r4, #32]
 8007ae6:	6263      	str	r3, [r4, #36]	; 0x24
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <std+0x3c>)
 8007aea:	62a3      	str	r3, [r4, #40]	; 0x28
 8007aec:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <std+0x40>)
 8007aee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007af0:	4b04      	ldr	r3, [pc, #16]	; (8007b04 <std+0x44>)
 8007af2:	6323      	str	r3, [r4, #48]	; 0x30
 8007af4:	bd10      	pop	{r4, pc}
 8007af6:	bf00      	nop
 8007af8:	08007e15 	.word	0x08007e15
 8007afc:	08007e37 	.word	0x08007e37
 8007b00:	08007e6f 	.word	0x08007e6f
 8007b04:	08007e93 	.word	0x08007e93

08007b08 <_cleanup_r>:
 8007b08:	4901      	ldr	r1, [pc, #4]	; (8007b10 <_cleanup_r+0x8>)
 8007b0a:	f000 b8af 	b.w	8007c6c <_fwalk_reent>
 8007b0e:	bf00      	nop
 8007b10:	08007a49 	.word	0x08007a49

08007b14 <__sfmoreglue>:
 8007b14:	2268      	movs	r2, #104	; 0x68
 8007b16:	b570      	push	{r4, r5, r6, lr}
 8007b18:	1e4d      	subs	r5, r1, #1
 8007b1a:	4355      	muls	r5, r2
 8007b1c:	460e      	mov	r6, r1
 8007b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b22:	f7ff fa63 	bl	8006fec <_malloc_r>
 8007b26:	4604      	mov	r4, r0
 8007b28:	b140      	cbz	r0, 8007b3c <__sfmoreglue+0x28>
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b30:	300c      	adds	r0, #12
 8007b32:	60a0      	str	r0, [r4, #8]
 8007b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b38:	f7fb fd8c 	bl	8003654 <memset>
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}

08007b40 <__sfp_lock_acquire>:
 8007b40:	4801      	ldr	r0, [pc, #4]	; (8007b48 <__sfp_lock_acquire+0x8>)
 8007b42:	f000 b8b3 	b.w	8007cac <__retarget_lock_acquire_recursive>
 8007b46:	bf00      	nop
 8007b48:	200003bd 	.word	0x200003bd

08007b4c <__sfp_lock_release>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	; (8007b54 <__sfp_lock_release+0x8>)
 8007b4e:	f000 b8ae 	b.w	8007cae <__retarget_lock_release_recursive>
 8007b52:	bf00      	nop
 8007b54:	200003bd 	.word	0x200003bd

08007b58 <__sinit_lock_acquire>:
 8007b58:	4801      	ldr	r0, [pc, #4]	; (8007b60 <__sinit_lock_acquire+0x8>)
 8007b5a:	f000 b8a7 	b.w	8007cac <__retarget_lock_acquire_recursive>
 8007b5e:	bf00      	nop
 8007b60:	200003be 	.word	0x200003be

08007b64 <__sinit_lock_release>:
 8007b64:	4801      	ldr	r0, [pc, #4]	; (8007b6c <__sinit_lock_release+0x8>)
 8007b66:	f000 b8a2 	b.w	8007cae <__retarget_lock_release_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	200003be 	.word	0x200003be

08007b70 <__sinit>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	4604      	mov	r4, r0
 8007b74:	f7ff fff0 	bl	8007b58 <__sinit_lock_acquire>
 8007b78:	69a3      	ldr	r3, [r4, #24]
 8007b7a:	b11b      	cbz	r3, 8007b84 <__sinit+0x14>
 8007b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b80:	f7ff bff0 	b.w	8007b64 <__sinit_lock_release>
 8007b84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b88:	6523      	str	r3, [r4, #80]	; 0x50
 8007b8a:	4b13      	ldr	r3, [pc, #76]	; (8007bd8 <__sinit+0x68>)
 8007b8c:	4a13      	ldr	r2, [pc, #76]	; (8007bdc <__sinit+0x6c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	bf08      	it	eq
 8007b96:	2301      	moveq	r3, #1
 8007b98:	4620      	mov	r0, r4
 8007b9a:	bf08      	it	eq
 8007b9c:	61a3      	streq	r3, [r4, #24]
 8007b9e:	f000 f81f 	bl	8007be0 <__sfp>
 8007ba2:	6060      	str	r0, [r4, #4]
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f000 f81b 	bl	8007be0 <__sfp>
 8007baa:	60a0      	str	r0, [r4, #8]
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 f817 	bl	8007be0 <__sfp>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2104      	movs	r1, #4
 8007bb6:	60e0      	str	r0, [r4, #12]
 8007bb8:	6860      	ldr	r0, [r4, #4]
 8007bba:	f7ff ff81 	bl	8007ac0 <std>
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	2109      	movs	r1, #9
 8007bc2:	68a0      	ldr	r0, [r4, #8]
 8007bc4:	f7ff ff7c 	bl	8007ac0 <std>
 8007bc8:	2202      	movs	r2, #2
 8007bca:	2112      	movs	r1, #18
 8007bcc:	68e0      	ldr	r0, [r4, #12]
 8007bce:	f7ff ff77 	bl	8007ac0 <std>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	61a3      	str	r3, [r4, #24]
 8007bd6:	e7d1      	b.n	8007b7c <__sinit+0xc>
 8007bd8:	080100ec 	.word	0x080100ec
 8007bdc:	08007b09 	.word	0x08007b09

08007be0 <__sfp>:
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be2:	4607      	mov	r7, r0
 8007be4:	f7ff ffac 	bl	8007b40 <__sfp_lock_acquire>
 8007be8:	4b1e      	ldr	r3, [pc, #120]	; (8007c64 <__sfp+0x84>)
 8007bea:	681e      	ldr	r6, [r3, #0]
 8007bec:	69b3      	ldr	r3, [r6, #24]
 8007bee:	b913      	cbnz	r3, 8007bf6 <__sfp+0x16>
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7ff ffbd 	bl	8007b70 <__sinit>
 8007bf6:	3648      	adds	r6, #72	; 0x48
 8007bf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	d503      	bpl.n	8007c08 <__sfp+0x28>
 8007c00:	6833      	ldr	r3, [r6, #0]
 8007c02:	b30b      	cbz	r3, 8007c48 <__sfp+0x68>
 8007c04:	6836      	ldr	r6, [r6, #0]
 8007c06:	e7f7      	b.n	8007bf8 <__sfp+0x18>
 8007c08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c0c:	b9d5      	cbnz	r5, 8007c44 <__sfp+0x64>
 8007c0e:	4b16      	ldr	r3, [pc, #88]	; (8007c68 <__sfp+0x88>)
 8007c10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c14:	60e3      	str	r3, [r4, #12]
 8007c16:	6665      	str	r5, [r4, #100]	; 0x64
 8007c18:	f000 f847 	bl	8007caa <__retarget_lock_init_recursive>
 8007c1c:	f7ff ff96 	bl	8007b4c <__sfp_lock_release>
 8007c20:	2208      	movs	r2, #8
 8007c22:	4629      	mov	r1, r5
 8007c24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c2c:	6025      	str	r5, [r4, #0]
 8007c2e:	61a5      	str	r5, [r4, #24]
 8007c30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c34:	f7fb fd0e 	bl	8003654 <memset>
 8007c38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c40:	4620      	mov	r0, r4
 8007c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c44:	3468      	adds	r4, #104	; 0x68
 8007c46:	e7d9      	b.n	8007bfc <__sfp+0x1c>
 8007c48:	2104      	movs	r1, #4
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	f7ff ff62 	bl	8007b14 <__sfmoreglue>
 8007c50:	4604      	mov	r4, r0
 8007c52:	6030      	str	r0, [r6, #0]
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d1d5      	bne.n	8007c04 <__sfp+0x24>
 8007c58:	f7ff ff78 	bl	8007b4c <__sfp_lock_release>
 8007c5c:	230c      	movs	r3, #12
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	e7ee      	b.n	8007c40 <__sfp+0x60>
 8007c62:	bf00      	nop
 8007c64:	080100ec 	.word	0x080100ec
 8007c68:	ffff0001 	.word	0xffff0001

08007c6c <_fwalk_reent>:
 8007c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c70:	4606      	mov	r6, r0
 8007c72:	4688      	mov	r8, r1
 8007c74:	2700      	movs	r7, #0
 8007c76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c7e:	f1b9 0901 	subs.w	r9, r9, #1
 8007c82:	d505      	bpl.n	8007c90 <_fwalk_reent+0x24>
 8007c84:	6824      	ldr	r4, [r4, #0]
 8007c86:	2c00      	cmp	r4, #0
 8007c88:	d1f7      	bne.n	8007c7a <_fwalk_reent+0xe>
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c90:	89ab      	ldrh	r3, [r5, #12]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d907      	bls.n	8007ca6 <_fwalk_reent+0x3a>
 8007c96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	d003      	beq.n	8007ca6 <_fwalk_reent+0x3a>
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	47c0      	blx	r8
 8007ca4:	4307      	orrs	r7, r0
 8007ca6:	3568      	adds	r5, #104	; 0x68
 8007ca8:	e7e9      	b.n	8007c7e <_fwalk_reent+0x12>

08007caa <__retarget_lock_init_recursive>:
 8007caa:	4770      	bx	lr

08007cac <__retarget_lock_acquire_recursive>:
 8007cac:	4770      	bx	lr

08007cae <__retarget_lock_release_recursive>:
 8007cae:	4770      	bx	lr

08007cb0 <__swhatbuf_r>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	460e      	mov	r6, r1
 8007cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb8:	4614      	mov	r4, r2
 8007cba:	2900      	cmp	r1, #0
 8007cbc:	461d      	mov	r5, r3
 8007cbe:	b096      	sub	sp, #88	; 0x58
 8007cc0:	da08      	bge.n	8007cd4 <__swhatbuf_r+0x24>
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007cc8:	602a      	str	r2, [r5, #0]
 8007cca:	061a      	lsls	r2, r3, #24
 8007ccc:	d410      	bmi.n	8007cf0 <__swhatbuf_r+0x40>
 8007cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd2:	e00e      	b.n	8007cf2 <__swhatbuf_r+0x42>
 8007cd4:	466a      	mov	r2, sp
 8007cd6:	f000 f903 	bl	8007ee0 <_fstat_r>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	dbf1      	blt.n	8007cc2 <__swhatbuf_r+0x12>
 8007cde:	9a01      	ldr	r2, [sp, #4]
 8007ce0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ce4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ce8:	425a      	negs	r2, r3
 8007cea:	415a      	adcs	r2, r3
 8007cec:	602a      	str	r2, [r5, #0]
 8007cee:	e7ee      	b.n	8007cce <__swhatbuf_r+0x1e>
 8007cf0:	2340      	movs	r3, #64	; 0x40
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	b016      	add	sp, #88	; 0x58
 8007cf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007cfc <__smakebuf_r>:
 8007cfc:	898b      	ldrh	r3, [r1, #12]
 8007cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d00:	079d      	lsls	r5, r3, #30
 8007d02:	4606      	mov	r6, r0
 8007d04:	460c      	mov	r4, r1
 8007d06:	d507      	bpl.n	8007d18 <__smakebuf_r+0x1c>
 8007d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	6123      	str	r3, [r4, #16]
 8007d10:	2301      	movs	r3, #1
 8007d12:	6163      	str	r3, [r4, #20]
 8007d14:	b002      	add	sp, #8
 8007d16:	bd70      	pop	{r4, r5, r6, pc}
 8007d18:	466a      	mov	r2, sp
 8007d1a:	ab01      	add	r3, sp, #4
 8007d1c:	f7ff ffc8 	bl	8007cb0 <__swhatbuf_r>
 8007d20:	9900      	ldr	r1, [sp, #0]
 8007d22:	4605      	mov	r5, r0
 8007d24:	4630      	mov	r0, r6
 8007d26:	f7ff f961 	bl	8006fec <_malloc_r>
 8007d2a:	b948      	cbnz	r0, 8007d40 <__smakebuf_r+0x44>
 8007d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d30:	059a      	lsls	r2, r3, #22
 8007d32:	d4ef      	bmi.n	8007d14 <__smakebuf_r+0x18>
 8007d34:	f023 0303 	bic.w	r3, r3, #3
 8007d38:	f043 0302 	orr.w	r3, r3, #2
 8007d3c:	81a3      	strh	r3, [r4, #12]
 8007d3e:	e7e3      	b.n	8007d08 <__smakebuf_r+0xc>
 8007d40:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <__smakebuf_r+0x7c>)
 8007d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	6020      	str	r0, [r4, #0]
 8007d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d4c:	81a3      	strh	r3, [r4, #12]
 8007d4e:	9b00      	ldr	r3, [sp, #0]
 8007d50:	6120      	str	r0, [r4, #16]
 8007d52:	6163      	str	r3, [r4, #20]
 8007d54:	9b01      	ldr	r3, [sp, #4]
 8007d56:	b15b      	cbz	r3, 8007d70 <__smakebuf_r+0x74>
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d5e:	f000 f8d1 	bl	8007f04 <_isatty_r>
 8007d62:	b128      	cbz	r0, 8007d70 <__smakebuf_r+0x74>
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	f023 0303 	bic.w	r3, r3, #3
 8007d6a:	f043 0301 	orr.w	r3, r3, #1
 8007d6e:	81a3      	strh	r3, [r4, #12]
 8007d70:	89a0      	ldrh	r0, [r4, #12]
 8007d72:	4305      	orrs	r5, r0
 8007d74:	81a5      	strh	r5, [r4, #12]
 8007d76:	e7cd      	b.n	8007d14 <__smakebuf_r+0x18>
 8007d78:	08007b09 	.word	0x08007b09

08007d7c <_malloc_usable_size_r>:
 8007d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d80:	1f18      	subs	r0, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	bfbc      	itt	lt
 8007d86:	580b      	ldrlt	r3, [r1, r0]
 8007d88:	18c0      	addlt	r0, r0, r3
 8007d8a:	4770      	bx	lr

08007d8c <_raise_r>:
 8007d8c:	291f      	cmp	r1, #31
 8007d8e:	b538      	push	{r3, r4, r5, lr}
 8007d90:	4604      	mov	r4, r0
 8007d92:	460d      	mov	r5, r1
 8007d94:	d904      	bls.n	8007da0 <_raise_r+0x14>
 8007d96:	2316      	movs	r3, #22
 8007d98:	6003      	str	r3, [r0, #0]
 8007d9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007da2:	b112      	cbz	r2, 8007daa <_raise_r+0x1e>
 8007da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007da8:	b94b      	cbnz	r3, 8007dbe <_raise_r+0x32>
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 f830 	bl	8007e10 <_getpid_r>
 8007db0:	462a      	mov	r2, r5
 8007db2:	4601      	mov	r1, r0
 8007db4:	4620      	mov	r0, r4
 8007db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dba:	f000 b817 	b.w	8007dec <_kill_r>
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d00a      	beq.n	8007dd8 <_raise_r+0x4c>
 8007dc2:	1c59      	adds	r1, r3, #1
 8007dc4:	d103      	bne.n	8007dce <_raise_r+0x42>
 8007dc6:	2316      	movs	r3, #22
 8007dc8:	6003      	str	r3, [r0, #0]
 8007dca:	2001      	movs	r0, #1
 8007dcc:	e7e7      	b.n	8007d9e <_raise_r+0x12>
 8007dce:	2400      	movs	r4, #0
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007dd6:	4798      	blx	r3
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e7e0      	b.n	8007d9e <_raise_r+0x12>

08007ddc <raise>:
 8007ddc:	4b02      	ldr	r3, [pc, #8]	; (8007de8 <raise+0xc>)
 8007dde:	4601      	mov	r1, r0
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	f7ff bfd3 	b.w	8007d8c <_raise_r>
 8007de6:	bf00      	nop
 8007de8:	20000034 	.word	0x20000034

08007dec <_kill_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	2300      	movs	r3, #0
 8007df0:	4d06      	ldr	r5, [pc, #24]	; (8007e0c <_kill_r+0x20>)
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	602b      	str	r3, [r5, #0]
 8007dfa:	f7f9 fd3b 	bl	8001874 <_kill>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	d102      	bne.n	8007e08 <_kill_r+0x1c>
 8007e02:	682b      	ldr	r3, [r5, #0]
 8007e04:	b103      	cbz	r3, 8007e08 <_kill_r+0x1c>
 8007e06:	6023      	str	r3, [r4, #0]
 8007e08:	bd38      	pop	{r3, r4, r5, pc}
 8007e0a:	bf00      	nop
 8007e0c:	200003b8 	.word	0x200003b8

08007e10 <_getpid_r>:
 8007e10:	f7f9 bd2e 	b.w	8001870 <_getpid>

08007e14 <__sread>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	460c      	mov	r4, r1
 8007e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1c:	f000 f894 	bl	8007f48 <_read_r>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	bfab      	itete	ge
 8007e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e26:	89a3      	ldrhlt	r3, [r4, #12]
 8007e28:	181b      	addge	r3, r3, r0
 8007e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e2e:	bfac      	ite	ge
 8007e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e32:	81a3      	strhlt	r3, [r4, #12]
 8007e34:	bd10      	pop	{r4, pc}

08007e36 <__swrite>:
 8007e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3a:	461f      	mov	r7, r3
 8007e3c:	898b      	ldrh	r3, [r1, #12]
 8007e3e:	4605      	mov	r5, r0
 8007e40:	05db      	lsls	r3, r3, #23
 8007e42:	460c      	mov	r4, r1
 8007e44:	4616      	mov	r6, r2
 8007e46:	d505      	bpl.n	8007e54 <__swrite+0x1e>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e50:	f000 f868 	bl	8007f24 <_lseek_r>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	4632      	mov	r2, r6
 8007e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	4628      	mov	r0, r5
 8007e60:	463b      	mov	r3, r7
 8007e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	f000 b817 	b.w	8007e9c <_write_r>

08007e6e <__sseek>:
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	460c      	mov	r4, r1
 8007e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e76:	f000 f855 	bl	8007f24 <_lseek_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	bf15      	itete	ne
 8007e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e8a:	81a3      	strheq	r3, [r4, #12]
 8007e8c:	bf18      	it	ne
 8007e8e:	81a3      	strhne	r3, [r4, #12]
 8007e90:	bd10      	pop	{r4, pc}

08007e92 <__sclose>:
 8007e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e96:	f000 b813 	b.w	8007ec0 <_close_r>
	...

08007e9c <_write_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	4608      	mov	r0, r1
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	4d05      	ldr	r5, [pc, #20]	; (8007ebc <_write_r+0x20>)
 8007ea8:	602a      	str	r2, [r5, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f7f9 fd00 	bl	80018b0 <_write>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_write_r+0x1e>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_write_r+0x1e>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	200003b8 	.word	0x200003b8

08007ec0 <_close_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	4d05      	ldr	r5, [pc, #20]	; (8007edc <_close_r+0x1c>)
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	602b      	str	r3, [r5, #0]
 8007ecc:	f7f9 fcfe 	bl	80018cc <_close>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_close_r+0x1a>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_close_r+0x1a>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	200003b8 	.word	0x200003b8

08007ee0 <_fstat_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4d06      	ldr	r5, [pc, #24]	; (8007f00 <_fstat_r+0x20>)
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	4611      	mov	r1, r2
 8007eec:	602b      	str	r3, [r5, #0]
 8007eee:	f7f9 fcf1 	bl	80018d4 <_fstat>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	d102      	bne.n	8007efc <_fstat_r+0x1c>
 8007ef6:	682b      	ldr	r3, [r5, #0]
 8007ef8:	b103      	cbz	r3, 8007efc <_fstat_r+0x1c>
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	bf00      	nop
 8007f00:	200003b8 	.word	0x200003b8

08007f04 <_isatty_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	2300      	movs	r3, #0
 8007f08:	4d05      	ldr	r5, [pc, #20]	; (8007f20 <_isatty_r+0x1c>)
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	602b      	str	r3, [r5, #0]
 8007f10:	f7f9 fce6 	bl	80018e0 <_isatty>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_isatty_r+0x1a>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_isatty_r+0x1a>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	200003b8 	.word	0x200003b8

08007f24 <_lseek_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	4d05      	ldr	r5, [pc, #20]	; (8007f44 <_lseek_r+0x20>)
 8007f30:	602a      	str	r2, [r5, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	f7f9 fcd6 	bl	80018e4 <_lseek>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d102      	bne.n	8007f42 <_lseek_r+0x1e>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	b103      	cbz	r3, 8007f42 <_lseek_r+0x1e>
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	200003b8 	.word	0x200003b8

08007f48 <_read_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	4611      	mov	r1, r2
 8007f50:	2200      	movs	r2, #0
 8007f52:	4d05      	ldr	r5, [pc, #20]	; (8007f68 <_read_r+0x20>)
 8007f54:	602a      	str	r2, [r5, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f7f9 fc9c 	bl	8001894 <_read>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d102      	bne.n	8007f66 <_read_r+0x1e>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	b103      	cbz	r3, 8007f66 <_read_r+0x1e>
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	200003b8 	.word	0x200003b8

08007f6c <_init>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	bf00      	nop
 8007f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f72:	bc08      	pop	{r3}
 8007f74:	469e      	mov	lr, r3
 8007f76:	4770      	bx	lr

08007f78 <_fini>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	bf00      	nop
 8007f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7e:	bc08      	pop	{r3}
 8007f80:	469e      	mov	lr, r3
 8007f82:	4770      	bx	lr
